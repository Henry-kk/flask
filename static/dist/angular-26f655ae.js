/*
 AngularJS v1.2.28
 (c) 2010-2014 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(W,X,u){'use strict';function z(b){return function(){var a=arguments[0],c,a="["+(b?b+":":"")+a+"] http://errors.angularjs.org/1.2.28/"+(b?b+"/":"")+a;for(c=1;c<arguments.length;c++)a=a+(1==c?"?":"&")+"p"+(c-1)+"="+encodeURIComponent("function"==typeof arguments[c]?arguments[c].toString().replace(/ \{[\s\S]*$/,""):"undefined"==typeof arguments[c]?"undefined":"string"!=typeof arguments[c]?JSON.stringify(arguments[c]):arguments[c]);return Error(a)}}function Sa(b){if(null==b||Ja(b))return!1;
var a=b.length;return 1===b.nodeType&&a?!0:G(b)||L(b)||0===a||"number"===typeof a&&0<a&&a-1 in b}function r(b,a,c){var d;if(b)if(N(b))for(d in b)"prototype"==d||("length"==d||"name"==d||b.hasOwnProperty&&!b.hasOwnProperty(d))||a.call(c,b[d],d);else if(L(b)||Sa(b))for(d=0;d<b.length;d++)a.call(c,b[d],d);else if(b.forEach&&b.forEach!==r)b.forEach(a,c);else for(d in b)b.hasOwnProperty(d)&&a.call(c,b[d],d);return b}function Xb(b){var a=[],c;for(c in b)b.hasOwnProperty(c)&&a.push(c);return a.sort()}function Sc(b,
a,c){for(var d=Xb(b),e=0;e<d.length;e++)a.call(c,b[d[e]],d[e]);return d}function Yb(b){return function(a,c){b(c,a)}}function ib(){for(var b=na.length,a;b;){b--;a=na[b].charCodeAt(0);if(57==a)return na[b]="A",na.join("");if(90==a)na[b]="0";else return na[b]=String.fromCharCode(a+1),na.join("")}na.unshift("0");return na.join("")}function Zb(b,a){a?b.$$hashKey=a:delete b.$$hashKey}function E(b){var a=b.$$hashKey;r(arguments,function(a){a!==b&&r(a,function(a,c){b[c]=a})});Zb(b,a);return b}function U(b){return parseInt(b,
10)}function $b(b,a){return E(new (E(function(){},{prototype:b})),a)}function v(){}function ga(b){return b}function aa(b){return function(){return b}}function F(b){return"undefined"===typeof b}function D(b){return"undefined"!==typeof b}function T(b){return null!=b&&"object"===typeof b}function G(b){return"string"===typeof b}function jb(b){return"number"===typeof b}function va(b){return"[object Date]"===Ba.call(b)}function N(b){return"function"===typeof b}function kb(b){return"[object RegExp]"===Ba.call(b)}
function Ja(b){return b&&b.document&&b.location&&b.alert&&b.setInterval}function Tc(b){return!(!b||!(b.nodeName||b.prop&&b.attr&&b.find))}function Uc(b,a,c){var d=[];r(b,function(b,f,g){d.push(a.call(c,b,f,g))});return d}function Ta(b,a){if(b.indexOf)return b.indexOf(a);for(var c=0;c<b.length;c++)if(a===b[c])return c;return-1}function Ua(b,a){var c=Ta(b,a);0<=c&&b.splice(c,1);return a}function Ka(b,a,c,d){if(Ja(b)||b&&b.$evalAsync&&b.$watch)throw Va("cpws");if(a){if(b===a)throw Va("cpi");c=c||[];
d=d||[];if(T(b)){var e=Ta(c,b);if(-1!==e)return d[e];c.push(b);d.push(a)}if(L(b))for(var f=a.length=0;f<b.length;f++)e=Ka(b[f],null,c,d),T(b[f])&&(c.push(b[f]),d.push(e)),a.push(e);else{var g=a.$$hashKey;L(a)?a.length=0:r(a,function(b,c){delete a[c]});for(f in b)e=Ka(b[f],null,c,d),T(b[f])&&(c.push(b[f]),d.push(e)),a[f]=e;Zb(a,g)}}else if(a=b)L(b)?a=Ka(b,[],c,d):va(b)?a=new Date(b.getTime()):kb(b)?(a=RegExp(b.source,b.toString().match(/[^\/]*$/)[0]),a.lastIndex=b.lastIndex):T(b)&&(a=Ka(b,{},c,d));
return a}function ha(b,a){if(L(b)){a=a||[];for(var c=0;c<b.length;c++)a[c]=b[c]}else if(T(b))for(c in a=a||{},b)!lb.call(b,c)||"$"===c.charAt(0)&&"$"===c.charAt(1)||(a[c]=b[c]);return a||b}function Ca(b,a){if(b===a)return!0;if(null===b||null===a)return!1;if(b!==b&&a!==a)return!0;var c=typeof b,d;if(c==typeof a&&"object"==c)if(L(b)){if(!L(a))return!1;if((c=b.length)==a.length){for(d=0;d<c;d++)if(!Ca(b[d],a[d]))return!1;return!0}}else{if(va(b))return va(a)?isNaN(b.getTime())&&isNaN(a.getTime())||b.getTime()===
a.getTime():!1;if(kb(b)&&kb(a))return b.toString()==a.toString();if(b&&b.$evalAsync&&b.$watch||a&&a.$evalAsync&&a.$watch||Ja(b)||Ja(a)||L(a))return!1;c={};for(d in b)if("$"!==d.charAt(0)&&!N(b[d])){if(!Ca(b[d],a[d]))return!1;c[d]=!0}for(d in a)if(!c.hasOwnProperty(d)&&"$"!==d.charAt(0)&&a[d]!==u&&!N(a[d]))return!1;return!0}return!1}function Bb(b,a){var c=2<arguments.length?wa.call(arguments,2):[];return!N(a)||a instanceof RegExp?a:c.length?function(){return arguments.length?a.apply(b,c.concat(wa.call(arguments,
0))):a.apply(b,c)}:function(){return arguments.length?a.apply(b,arguments):a.call(b)}}function Vc(b,a){var c=a;"string"===typeof b&&"$"===b.charAt(0)?c=u:Ja(a)?c="$WINDOW":a&&X===a?c="$DOCUMENT":a&&(a.$evalAsync&&a.$watch)&&(c="$SCOPE");return c}function oa(b,a){return"undefined"===typeof b?u:JSON.stringify(b,Vc,a?"  ":null)}function ac(b){return G(b)?JSON.parse(b):b}function Wa(b){"function"===typeof b?b=!0:b&&0!==b.length?(b=x(""+b),b=!("f"==b||"0"==b||"false"==b||"no"==b||"n"==b||"[]"==b)):b=!1;
return b}function ia(b){b=A(b).clone();try{b.empty()}catch(a){}var c=A("<div>").append(b).html();try{return 3===b[0].nodeType?x(c):c.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/,function(a,b){return"<"+x(b)})}catch(d){return x(c)}}function bc(b){try{return decodeURIComponent(b)}catch(a){}}function cc(b){var a={},c,d;r((b||"").split("&"),function(b){b&&(c=b.replace(/\+/g,"%20").split("="),d=bc(c[0]),D(d)&&(b=D(c[1])?bc(c[1]):!0,lb.call(a,d)?L(a[d])?a[d].push(b):a[d]=[a[d],b]:a[d]=b))});return a}function Cb(b){var a=
[];r(b,function(b,d){L(b)?r(b,function(b){a.push(Da(d,!0)+(!0===b?"":"="+Da(b,!0)))}):a.push(Da(d,!0)+(!0===b?"":"="+Da(b,!0)))});return a.length?a.join("&"):""}function mb(b){return Da(b,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function Da(b,a){return encodeURIComponent(b).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,a?"%20":"+")}function Wc(b,a){function c(a){a&&d.push(a)}var d=[b],e,f,g=["ng:app","ng-app","x-ng-app",
"data-ng-app"],h=/\sng[:\-]app(:\s*([\w\d_]+);?)?\s/;r(g,function(a){g[a]=!0;c(X.getElementById(a));a=a.replace(":","\\:");b.querySelectorAll&&(r(b.querySelectorAll("."+a),c),r(b.querySelectorAll("."+a+"\\:"),c),r(b.querySelectorAll("["+a+"]"),c))});r(d,function(a){if(!e){var b=h.exec(" "+a.className+" ");b?(e=a,f=(b[2]||"").replace(/\s+/g,",")):r(a.attributes,function(b){!e&&g[b.name]&&(e=a,f=b.value)})}});e&&a(e,f?[f]:[])}function dc(b,a){var c=function(){b=A(b);if(b.injector()){var c=b[0]===X?
"document":ia(b);throw Va("btstrpd",c.replace(/</,"&lt;").replace(/>/,"&gt;"));}a=a||[];a.unshift(["$provide",function(a){a.value("$rootElement",b)}]);a.unshift("ng");c=ec(a);c.invoke(["$rootScope","$rootElement","$compile","$injector","$animate",function(a,b,c,d,e){a.$apply(function(){b.data("$injector",d);c(b)(a)})}]);return c},d=/^NG_DEFER_BOOTSTRAP!/;if(W&&!d.test(W.name))return c();W.name=W.name.replace(d,"");Xa.resumeBootstrap=function(b){r(b,function(b){a.push(b)});c()}}function nb(b,a){a=
a||"_";return b.replace(Xc,function(b,d){return(d?a:"")+b.toLowerCase()})}function Db(b,a,c){if(!b)throw Va("areq",a||"?",c||"required");return b}function Ya(b,a,c){c&&L(b)&&(b=b[b.length-1]);Db(N(b),a,"not a function, got "+(b&&"object"===typeof b?b.constructor.name||"Object":typeof b));return b}function Ea(b,a){if("hasOwnProperty"===b)throw Va("badname",a);}function fc(b,a,c){if(!a)return b;a=a.split(".");for(var d,e=b,f=a.length,g=0;g<f;g++)d=a[g],b&&(b=(e=b)[d]);return!c&&N(b)?Bb(e,b):b}function Eb(b){var a=
b[0];b=b[b.length-1];if(a===b)return A(a);var c=[a];do{a=a.nextSibling;if(!a)break;c.push(a)}while(a!==b);return A(c)}function Yc(b){var a=z("$injector"),c=z("ng");b=b.angular||(b.angular={});b.$$minErr=b.$$minErr||z;return b.module||(b.module=function(){var b={};return function(e,f,g){if("hasOwnProperty"===e)throw c("badname","module");f&&b.hasOwnProperty(e)&&(b[e]=null);return b[e]||(b[e]=function(){function b(a,d,e){return function(){c[e||"push"]([a,d,arguments]);return n}}if(!f)throw a("nomod",
e);var c=[],d=[],l=b("$injector","invoke"),n={_invokeQueue:c,_runBlocks:d,requires:f,name:e,provider:b("$provide","provider"),factory:b("$provide","factory"),service:b("$provide","service"),value:b("$provide","value"),constant:b("$provide","constant","unshift"),animation:b("$animateProvider","register"),filter:b("$filterProvider","register"),controller:b("$controllerProvider","register"),directive:b("$compileProvider","directive"),config:l,run:function(a){d.push(a);return this}};g&&l(g);return n}())}}())}
function Zc(b){E(b,{bootstrap:dc,copy:Ka,extend:E,equals:Ca,element:A,forEach:r,injector:ec,noop:v,bind:Bb,toJson:oa,fromJson:ac,identity:ga,isUndefined:F,isDefined:D,isString:G,isFunction:N,isObject:T,isNumber:jb,isElement:Tc,isArray:L,version:$c,isDate:va,lowercase:x,uppercase:La,callbacks:{counter:0},$$minErr:z,$$csp:Za});$a=Yc(W);try{$a("ngLocale")}catch(a){$a("ngLocale",[]).provider("$locale",ad)}$a("ng",["ngLocale"],["$provide",function(a){a.provider({$$sanitizeUri:bd});a.provider("$compile",
gc).directive({a:cd,input:hc,textarea:hc,form:dd,script:ed,select:fd,style:gd,option:hd,ngBind:id,ngBindHtml:jd,ngBindTemplate:kd,ngClass:ld,ngClassEven:md,ngClassOdd:nd,ngCloak:od,ngController:pd,ngForm:qd,ngHide:rd,ngIf:sd,ngInclude:td,ngInit:ud,ngNonBindable:vd,ngPluralize:wd,ngRepeat:xd,ngShow:yd,ngStyle:zd,ngSwitch:Ad,ngSwitchWhen:Bd,ngSwitchDefault:Cd,ngOptions:Dd,ngTransclude:Ed,ngModel:Fd,ngList:Gd,ngChange:Hd,required:ic,ngRequired:ic,ngValue:Id}).directive({ngInclude:Jd}).directive(Fb).directive(jc);
a.provider({$anchorScroll:Kd,$animate:Ld,$browser:Md,$cacheFactory:Nd,$controller:Od,$document:Pd,$exceptionHandler:Qd,$filter:kc,$interpolate:Rd,$interval:Sd,$http:Td,$httpBackend:Ud,$location:Vd,$log:Wd,$parse:Xd,$rootScope:Yd,$q:Zd,$sce:$d,$sceDelegate:ae,$sniffer:be,$templateCache:ce,$timeout:de,$window:ee,$$rAF:fe,$$asyncCallback:ge})}])}function ab(b){return b.replace(he,function(a,b,d,e){return e?d.toUpperCase():d}).replace(ie,"Moz$1")}function Gb(b,a,c,d){function e(b){var e=c&&b?[this.filter(b)]:
[this],k=a,m,l,n,q,p,s;if(!d||null!=b)for(;e.length;)for(m=e.shift(),l=0,n=m.length;l<n;l++)for(q=A(m[l]),k?q.triggerHandler("$destroy"):k=!k,p=0,q=(s=q.children()).length;p<q;p++)e.push(Fa(s[p]));return f.apply(this,arguments)}var f=Fa.fn[b],f=f.$original||f;e.$original=f;Fa.fn[b]=e}function S(b){if(b instanceof S)return b;G(b)&&(b=$(b));if(!(this instanceof S)){if(G(b)&&"<"!=b.charAt(0))throw Hb("nosel");return new S(b)}if(G(b)){var a=b;b=X;var c;if(c=je.exec(a))b=[b.createElement(c[1])];else{var d=
b,e;b=d.createDocumentFragment();c=[];if(Ib.test(a)){d=b.appendChild(d.createElement("div"));e=(ke.exec(a)||["",""])[1].toLowerCase();e=da[e]||da._default;d.innerHTML="<div>&#160;</div>"+e[1]+a.replace(le,"<$1></$2>")+e[2];d.removeChild(d.firstChild);for(a=e[0];a--;)d=d.lastChild;a=0;for(e=d.childNodes.length;a<e;++a)c.push(d.childNodes[a]);d=b.firstChild;d.textContent=""}else c.push(d.createTextNode(a));b.textContent="";b.innerHTML="";b=c}Jb(this,b);A(X.createDocumentFragment()).append(this)}else Jb(this,
b)}function Kb(b){return b.cloneNode(!0)}function Ma(b){Lb(b);var a=0;for(b=b.childNodes||[];a<b.length;a++)Ma(b[a])}function lc(b,a,c,d){if(D(d))throw Hb("offargs");var e=pa(b,"events");pa(b,"handle")&&(F(a)?r(e,function(a,c){bb(b,c,a);delete e[c]}):r(a.split(" "),function(a){F(c)?(bb(b,a,e[a]),delete e[a]):Ua(e[a]||[],c)}))}function Lb(b,a){var c=b.ng339,d=cb[c];d&&(a?delete cb[c].data[a]:(d.handle&&(d.events.$destroy&&d.handle({},"$destroy"),lc(b)),delete cb[c],b.ng339=u))}function pa(b,a,c){var d=
b.ng339,d=cb[d||-1];if(D(c))d||(b.ng339=d=++me,d=cb[d]={}),d[a]=c;else return d&&d[a]}function Mb(b,a,c){var d=pa(b,"data"),e=D(c),f=!e&&D(a),g=f&&!T(a);d||g||pa(b,"data",d={});if(e)d[a]=c;else if(f){if(g)return d&&d[a];E(d,a)}else return d}function Nb(b,a){return b.getAttribute?-1<(" "+(b.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+a+" "):!1}function ob(b,a){a&&b.setAttribute&&r(a.split(" "),function(a){b.setAttribute("class",$((" "+(b.getAttribute("class")||"")+" ").replace(/[\n\t]/g,
" ").replace(" "+$(a)+" "," ")))})}function pb(b,a){if(a&&b.setAttribute){var c=(" "+(b.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");r(a.split(" "),function(a){a=$(a);-1===c.indexOf(" "+a+" ")&&(c+=a+" ")});b.setAttribute("class",$(c))}}function Jb(b,a){if(a){a=a.nodeName||!D(a.length)||Ja(a)?[a]:a;for(var c=0;c<a.length;c++)b.push(a[c])}}function mc(b,a){return qb(b,"$"+(a||"ngController")+"Controller")}function qb(b,a,c){9==b.nodeType&&(b=b.documentElement);for(a=L(a)?a:[a];b;){for(var d=
0,e=a.length;d<e;d++)if((c=A.data(b,a[d]))!==u)return c;b=b.parentNode||11===b.nodeType&&b.host}}function nc(b){for(var a=0,c=b.childNodes;a<c.length;a++)Ma(c[a]);for(;b.firstChild;)b.removeChild(b.firstChild)}function oc(b,a){var c=rb[a.toLowerCase()];return c&&pc[b.nodeName]&&c}function ne(b,a){var c=function(c,e){c.preventDefault||(c.preventDefault=function(){c.returnValue=!1});c.stopPropagation||(c.stopPropagation=function(){c.cancelBubble=!0});c.target||(c.target=c.srcElement||X);if(F(c.defaultPrevented)){var f=
c.preventDefault;c.preventDefault=function(){c.defaultPrevented=!0;f.call(c)};c.defaultPrevented=!1}c.isDefaultPrevented=function(){return c.defaultPrevented||!1===c.returnValue};var g=ha(a[e||c.type]||[]);r(g,function(a){a.call(b,c)});8>=R?(c.preventDefault=null,c.stopPropagation=null,c.isDefaultPrevented=null):(delete c.preventDefault,delete c.stopPropagation,delete c.isDefaultPrevented)};c.elem=b;return c}function Na(b,a){var c=typeof b,d;"function"==c||"object"==c&&null!==b?"function"==typeof(d=
b.$$hashKey)?d=b.$$hashKey():d===u&&(d=b.$$hashKey=(a||ib)()):d=b;return c+":"+d}function db(b,a){if(a){var c=0;this.nextUid=function(){return++c}}r(b,this.put,this)}function qc(b){var a,c;"function"===typeof b?(a=b.$inject)||(a=[],b.length&&(c=b.toString().replace(oe,""),c=c.match(pe),r(c[1].split(qe),function(b){b.replace(re,function(b,c,d){a.push(d)})})),b.$inject=a):L(b)?(c=b.length-1,Ya(b[c],"fn"),a=b.slice(0,c)):Ya(b,"fn",!0);return a}function ec(b){function a(a){return function(b,c){if(T(b))r(b,
Yb(a));else return a(b,c)}}function c(a,b){Ea(a,"service");if(N(b)||L(b))b=n.instantiate(b);if(!b.$get)throw eb("pget",a);return l[a+h]=b}function d(a,b){return c(a,{$get:b})}function e(a){var b=[],c,d,f,h;r(a,function(a){if(!m.get(a)){m.put(a,!0);try{if(G(a))for(c=$a(a),b=b.concat(e(c.requires)).concat(c._runBlocks),d=c._invokeQueue,f=0,h=d.length;f<h;f++){var g=d[f],k=n.get(g[0]);k[g[1]].apply(k,g[2])}else N(a)?b.push(n.invoke(a)):L(a)?b.push(n.invoke(a)):Ya(a,"module")}catch(p){throw L(a)&&(a=
a[a.length-1]),p.message&&(p.stack&&-1==p.stack.indexOf(p.message))&&(p=p.message+"\n"+p.stack),eb("modulerr",a,p.stack||p.message||p);}}});return b}function f(a,b){function c(d){if(a.hasOwnProperty(d)){if(a[d]===g)throw eb("cdep",d+" <- "+k.join(" <- "));return a[d]}try{return k.unshift(d),a[d]=g,a[d]=b(d)}catch(e){throw a[d]===g&&delete a[d],e;}finally{k.shift()}}function d(a,b,e){var f=[],h=qc(a),g,k,p;k=0;for(g=h.length;k<g;k++){p=h[k];if("string"!==typeof p)throw eb("itkn",p);f.push(e&&e.hasOwnProperty(p)?
e[p]:c(p))}L(a)&&(a=a[g]);return a.apply(b,f)}return{invoke:d,instantiate:function(a,b){var c=function(){},e;c.prototype=(L(a)?a[a.length-1]:a).prototype;c=new c;e=d(a,c,b);return T(e)||N(e)?e:c},get:c,annotate:qc,has:function(b){return l.hasOwnProperty(b+h)||a.hasOwnProperty(b)}}}var g={},h="Provider",k=[],m=new db([],!0),l={$provide:{provider:a(c),factory:a(d),service:a(function(a,b){return d(a,["$injector",function(a){return a.instantiate(b)}])}),value:a(function(a,b){return d(a,aa(b))}),constant:a(function(a,
b){Ea(a,"constant");l[a]=b;q[a]=b}),decorator:function(a,b){var c=n.get(a+h),d=c.$get;c.$get=function(){var a=p.invoke(d,c);return p.invoke(b,null,{$delegate:a})}}}},n=l.$injector=f(l,function(){throw eb("unpr",k.join(" <- "));}),q={},p=q.$injector=f(q,function(a){a=n.get(a+h);return p.invoke(a.$get,a)});r(e(b),function(a){p.invoke(a||v)});return p}function Kd(){var b=!0;this.disableAutoScrolling=function(){b=!1};this.$get=["$window","$location","$rootScope",function(a,c,d){function e(a){var b=null;
r(a,function(a){b||"a"!==x(a.nodeName)||(b=a)});return b}function f(){var b=c.hash(),d;b?(d=g.getElementById(b))?d.scrollIntoView():(d=e(g.getElementsByName(b)))?d.scrollIntoView():"top"===b&&a.scrollTo(0,0):a.scrollTo(0,0)}var g=a.document;b&&d.$watch(function(){return c.hash()},function(){d.$evalAsync(f)});return f}]}function ge(){this.$get=["$$rAF","$timeout",function(b,a){return b.supported?function(a){return b(a)}:function(b){return a(b,0,!1)}}]}function se(b,a,c,d){function e(a){try{a.apply(null,
wa.call(arguments,1))}finally{if(s--,0===s)for(;J.length;)try{J.pop()()}catch(b){c.error(b)}}}function f(a,b){(function ea(){r(w,function(a){a()});t=b(ea,a)})()}function g(){y!=h.url()&&(y=h.url(),r(ba,function(a){a(h.url())}))}var h=this,k=a[0],m=b.location,l=b.history,n=b.setTimeout,q=b.clearTimeout,p={};h.isMock=!1;var s=0,J=[];h.$$completeOutstandingRequest=e;h.$$incOutstandingRequestCount=function(){s++};h.notifyWhenNoOutstandingRequests=function(a){r(w,function(a){a()});0===s?a():J.push(a)};
var w=[],t;h.addPollFn=function(a){F(t)&&f(100,n);w.push(a);return a};var y=m.href,K=a.find("base"),B=null;h.url=function(a,c){m!==b.location&&(m=b.location);l!==b.history&&(l=b.history);if(a){if(y!=a){var e=y&&Ga(y)===Ga(a);y=a;!e&&d.history?c?l.replaceState(null,"",a):(l.pushState(null,"",a),K.attr("href",K.attr("href"))):(e||(B=a),c?m.replace(a):m.href=a);return h}}else return B||m.href.replace(/%27/g,"'")};var ba=[],O=!1;h.onUrlChange=function(a){if(!O){if(d.history)A(b).on("popstate",g);if(d.hashchange)A(b).on("hashchange",
g);else h.addPollFn(g);O=!0}ba.push(a);return a};h.$$checkUrlChange=g;h.baseHref=function(){var a=K.attr("href");return a?a.replace(/^(https?\:)?\/\/[^\/]*/,""):""};var M={},ca="",P=h.baseHref();h.cookies=function(a,b){var d,e,f,h;if(a)b===u?k.cookie=escape(a)+"=;path="+P+";expires=Thu, 01 Jan 1970 00:00:00 GMT":G(b)&&(d=(k.cookie=escape(a)+"="+escape(b)+";path="+P).length+1,4096<d&&c.warn("Cookie '"+a+"' possibly not set or overflowed because it was too large ("+d+" > 4096 bytes)!"));else{if(k.cookie!==
ca)for(ca=k.cookie,d=ca.split("; "),M={},f=0;f<d.length;f++)e=d[f],h=e.indexOf("="),0<h&&(a=unescape(e.substring(0,h)),M[a]===u&&(M[a]=unescape(e.substring(h+1))));return M}};h.defer=function(a,b){var c;s++;c=n(function(){delete p[c];e(a)},b||0);p[c]=!0;return c};h.defer.cancel=function(a){return p[a]?(delete p[a],q(a),e(v),!0):!1}}function Md(){this.$get=["$window","$log","$sniffer","$document",function(b,a,c,d){return new se(b,d,a,c)}]}function Nd(){this.$get=function(){function b(b,d){function e(a){a!=
n&&(q?q==a&&(q=a.n):q=a,f(a.n,a.p),f(a,n),n=a,n.n=null)}function f(a,b){a!=b&&(a&&(a.p=b),b&&(b.n=a))}if(b in a)throw z("$cacheFactory")("iid",b);var g=0,h=E({},d,{id:b}),k={},m=d&&d.capacity||Number.MAX_VALUE,l={},n=null,q=null;return a[b]={put:function(a,b){if(m<Number.MAX_VALUE){var c=l[a]||(l[a]={key:a});e(c)}if(!F(b))return a in k||g++,k[a]=b,g>m&&this.remove(q.key),b},get:function(a){if(m<Number.MAX_VALUE){var b=l[a];if(!b)return;e(b)}return k[a]},remove:function(a){if(m<Number.MAX_VALUE){var b=
l[a];if(!b)return;b==n&&(n=b.p);b==q&&(q=b.n);f(b.n,b.p);delete l[a]}delete k[a];g--},removeAll:function(){k={};g=0;l={};n=q=null},destroy:function(){l=h=k=null;delete a[b]},info:function(){return E({},h,{size:g})}}}var a={};b.info=function(){var b={};r(a,function(a,e){b[e]=a.info()});return b};b.get=function(b){return a[b]};return b}}function ce(){this.$get=["$cacheFactory",function(b){return b("templates")}]}function gc(b,a){var c={},d="Directive",e=/^\s*directive\:\s*([\d\w_\-]+)\s+(.*)$/,f=/(([\d\w_\-]+)(?:\:([^;]+))?;?)/,
g=/^(on[a-z]+|formaction)$/;this.directive=function k(a,e){Ea(a,"directive");G(a)?(Db(e,"directiveFactory"),c.hasOwnProperty(a)||(c[a]=[],b.factory(a+d,["$injector","$exceptionHandler",function(b,d){var e=[];r(c[a],function(c,f){try{var g=b.invoke(c);N(g)?g={compile:aa(g)}:!g.compile&&g.link&&(g.compile=aa(g.link));g.priority=g.priority||0;g.index=f;g.name=g.name||a;g.require=g.require||g.controller&&g.name;g.restrict=g.restrict||"A";e.push(g)}catch(k){d(k)}});return e}])),c[a].push(e)):r(a,Yb(k));
return this};this.aHrefSanitizationWhitelist=function(b){return D(b)?(a.aHrefSanitizationWhitelist(b),this):a.aHrefSanitizationWhitelist()};this.imgSrcSanitizationWhitelist=function(b){return D(b)?(a.imgSrcSanitizationWhitelist(b),this):a.imgSrcSanitizationWhitelist()};this.$get=["$injector","$interpolate","$exceptionHandler","$http","$templateCache","$parse","$controller","$rootScope","$document","$sce","$animate","$$sanitizeUri",function(a,b,l,n,q,p,s,J,w,t,y,K){function B(a,b,c,d,e){a instanceof
A||(a=A(a));r(a,function(b,c){3==b.nodeType&&b.nodeValue.match(/\S+/)&&(a[c]=A(b).wrap("<span></span>").parent()[0])});var f=O(a,b,a,c,d,e);ba(a,"ng-scope");return function(b,c,d,e){Db(b,"scope");var g=c?Oa.clone.call(a):a;r(d,function(a,b){g.data("$"+b+"Controller",a)});d=0;for(var k=g.length;d<k;d++){var p=g[d].nodeType;1!==p&&9!==p||g.eq(d).data("$scope",b)}c&&c(g,b);f&&f(b,g,g,e);return g}}function ba(a,b){try{a.addClass(b)}catch(c){}}function O(a,b,c,d,e,f){function g(a,c,d,e){var f,p,l,m,q,
n,w;f=c.length;var s=Array(f);for(m=0;m<f;m++)s[m]=c[m];n=m=0;for(q=k.length;m<q;n++)p=s[n],c=k[m++],f=k[m++],c?(c.scope?(l=a.$new(),A.data(p,"$scope",l)):l=a,w=c.transcludeOnThisElement?M(a,c.transclude,e):!c.templateOnThisElement&&e?e:!e&&b?M(a,b):null,c(f,l,p,d,w)):f&&f(a,p.childNodes,u,e)}for(var k=[],p,l,m,q,n=0;n<a.length;n++)p=new Ob,l=ca(a[n],[],p,0===n?d:u,e),(f=l.length?I(l,a[n],p,b,c,null,[],[],f):null)&&f.scope&&ba(p.$$element,"ng-scope"),p=f&&f.terminal||!(m=a[n].childNodes)||!m.length?
null:O(m,f?(f.transcludeOnThisElement||!f.templateOnThisElement)&&f.transclude:b),k.push(f,p),q=q||f||p,f=null;return q?g:null}function M(a,b,c){return function(d,e,f){var g=!1;d||(d=a.$new(),g=d.$$transcluded=!0);e=b(d,e,f,c);if(g)e.on("$destroy",function(){d.$destroy()});return e}}function ca(a,b,c,d,g){var k=c.$attr,p;switch(a.nodeType){case 1:ea(b,qa(Pa(a).toLowerCase()),"E",d,g);for(var l,m,q,n=a.attributes,w=0,s=n&&n.length;w<s;w++){var t=!1,J=!1;l=n[w];if(!R||8<=R||l.specified){p=l.name;m=
$(l.value);l=qa(p);if(q=U.test(l))p=nb(l.substr(6),"-");var y=l.replace(/(Start|End)$/,"");l===y+"Start"&&(t=p,J=p.substr(0,p.length-5)+"end",p=p.substr(0,p.length-6));l=qa(p.toLowerCase());k[l]=p;if(q||!c.hasOwnProperty(l))c[l]=m,oc(a,l)&&(c[l]=!0);S(a,b,m,l);ea(b,l,"A",d,g,t,J)}}a=a.className;if(G(a)&&""!==a)for(;p=f.exec(a);)l=qa(p[2]),ea(b,l,"C",d,g)&&(c[l]=$(p[3])),a=a.substr(p.index+p[0].length);break;case 3:x(b,a.nodeValue);break;case 8:try{if(p=e.exec(a.nodeValue))l=qa(p[1]),ea(b,l,"M",d,
g)&&(c[l]=$(p[2]))}catch(B){}}b.sort(F);return b}function P(a,b,c){var d=[],e=0;if(b&&a.hasAttribute&&a.hasAttribute(b)){do{if(!a)throw ja("uterdir",b,c);1==a.nodeType&&(a.hasAttribute(b)&&e++,a.hasAttribute(c)&&e--);d.push(a);a=a.nextSibling}while(0<e)}else d.push(a);return A(d)}function C(a,b,c){return function(d,e,f,g,k){e=P(e[0],b,c);return a(d,e,f,g,k)}}function I(a,c,d,e,f,g,k,q,n){function w(a,b,c,d){if(a){c&&(a=C(a,c,d));a.require=H.require;a.directiveName=z;if(K===H||H.$$isolateScope)a=rc(a,
{isolateScope:!0});k.push(a)}if(b){c&&(b=C(b,c,d));b.require=H.require;b.directiveName=z;if(K===H||H.$$isolateScope)b=rc(b,{isolateScope:!0});q.push(b)}}function t(a,b,c,d){var e,f="data",g=!1;if(G(b)){for(;"^"==(e=b.charAt(0))||"?"==e;)b=b.substr(1),"^"==e&&(f="inheritedData"),g=g||"?"==e;e=null;d&&"data"===f&&(e=d[b]);e=e||c[f]("$"+b+"Controller");if(!e&&!g)throw ja("ctreq",b,a);}else L(b)&&(e=[],r(b,function(b){e.push(t(a,b,c,d))}));return e}function J(a,e,f,g,n){function w(a,b){var c;2>arguments.length&&
(b=a,a=u);Ia&&(c=ca);return n(a,b,c)}var y,Q,B,M,C,P,ca={},ra;y=c===f?d:ha(d,new Ob(A(f),d.$attr));Q=y.$$element;if(K){var ue=/^\s*([@=&])(\??)\s*(\w*)\s*$/;P=e.$new(!0);!I||I!==K&&I!==K.$$originalDirective?Q.data("$isolateScopeNoTemplate",P):Q.data("$isolateScope",P);ba(Q,"ng-isolate-scope");r(K.scope,function(a,c){var d=a.match(ue)||[],f=d[3]||c,g="?"==d[2],d=d[1],k,l,n,q;P.$$isolateBindings[c]=d+f;switch(d){case "@":y.$observe(f,function(a){P[c]=a});y.$$observers[f].$$scope=e;y[f]&&(P[c]=b(y[f])(e));
break;case "=":if(g&&!y[f])break;l=p(y[f]);q=l.literal?Ca:function(a,b){return a===b||a!==a&&b!==b};n=l.assign||function(){k=P[c]=l(e);throw ja("nonassign",y[f],K.name);};k=P[c]=l(e);P.$watch(function(){var a=l(e);q(a,P[c])||(q(a,k)?n(e,a=P[c]):P[c]=a);return k=a},null,l.literal);break;case "&":l=p(y[f]);P[c]=function(a){return l(e,a)};break;default:throw ja("iscp",K.name,c,a);}})}ra=n&&w;O&&r(O,function(a){var b={$scope:a===K||a.$$isolateScope?P:e,$element:Q,$attrs:y,$transclude:ra},c;C=a.controller;
"@"==C&&(C=y[a.name]);c=s(C,b);ca[a.name]=c;Ia||Q.data("$"+a.name+"Controller",c);a.controllerAs&&(b.$scope[a.controllerAs]=c)});g=0;for(B=k.length;g<B;g++)try{M=k[g],M(M.isolateScope?P:e,Q,y,M.require&&t(M.directiveName,M.require,Q,ca),ra)}catch(H){l(H,ia(Q))}g=e;K&&(K.template||null===K.templateUrl)&&(g=P);a&&a(g,f.childNodes,u,n);for(g=q.length-1;0<=g;g--)try{M=q[g],M(M.isolateScope?P:e,Q,y,M.require&&t(M.directiveName,M.require,Q,ca),ra)}catch(D){l(D,ia(Q))}}n=n||{};for(var y=-Number.MAX_VALUE,
M,O=n.controllerDirectives,K=n.newIsolateScopeDirective,I=n.templateDirective,ea=n.nonTlbTranscludeDirective,F=!1,E=!1,Ia=n.hasElementTranscludeDirective,x=d.$$element=A(c),H,z,V,S=e,R,Ha=0,sa=a.length;Ha<sa;Ha++){H=a[Ha];var U=H.$$start,Y=H.$$end;U&&(x=P(c,U,Y));V=u;if(y>H.priority)break;if(V=H.scope)M=M||H,H.templateUrl||(fb("new/isolated scope",K,H,x),T(V)&&(K=H));z=H.name;!H.templateUrl&&H.controller&&(V=H.controller,O=O||{},fb("'"+z+"' controller",O[z],H,x),O[z]=H);if(V=H.transclude)F=!0,H.$$tlb||
(fb("transclusion",ea,H,x),ea=H),"element"==V?(Ia=!0,y=H.priority,V=x,x=d.$$element=A(X.createComment(" "+z+": "+d[z]+" ")),c=x[0],ra(f,wa.call(V,0),c),S=B(V,e,y,g&&g.name,{nonTlbTranscludeDirective:ea})):(V=A(Kb(c)).contents(),x.empty(),S=B(V,e));if(H.template)if(E=!0,fb("template",I,H,x),I=H,V=N(H.template)?H.template(x,d):H.template,V=W(V),H.replace){g=H;V=Ib.test(V)?A($(V)):[];c=V[0];if(1!=V.length||1!==c.nodeType)throw ja("tplrt",z,"");ra(f,x,c);sa={$attr:{}};V=ca(c,[],sa);var Z=a.splice(Ha+
1,a.length-(Ha+1));K&&D(V);a=a.concat(V).concat(Z);v(d,sa);sa=a.length}else x.html(V);if(H.templateUrl)E=!0,fb("template",I,H,x),I=H,H.replace&&(g=H),J=te(a.splice(Ha,a.length-Ha),x,d,f,F&&S,k,q,{controllerDirectives:O,newIsolateScopeDirective:K,templateDirective:I,nonTlbTranscludeDirective:ea}),sa=a.length;else if(H.compile)try{R=H.compile(x,d,S),N(R)?w(null,R,U,Y):R&&w(R.pre,R.post,U,Y)}catch(ve){l(ve,ia(x))}H.terminal&&(J.terminal=!0,y=Math.max(y,H.priority))}J.scope=M&&!0===M.scope;J.transcludeOnThisElement=
F;J.templateOnThisElement=E;J.transclude=S;n.hasElementTranscludeDirective=Ia;return J}function D(a){for(var b=0,c=a.length;b<c;b++)a[b]=$b(a[b],{$$isolateScope:!0})}function ea(b,e,f,g,p,m,n){if(e===p)return null;p=null;if(c.hasOwnProperty(e)){var q;e=a.get(e+d);for(var w=0,s=e.length;w<s;w++)try{q=e[w],(g===u||g>q.priority)&&-1!=q.restrict.indexOf(f)&&(m&&(q=$b(q,{$$start:m,$$end:n})),b.push(q),p=q)}catch(y){l(y)}}return p}function v(a,b){var c=b.$attr,d=a.$attr,e=a.$$element;r(a,function(d,e){"$"!=
e.charAt(0)&&(b[e]&&b[e]!==d&&(d+=("style"===e?";":" ")+b[e]),a.$set(e,d,!0,c[e]))});r(b,function(b,f){"class"==f?(ba(e,b),a["class"]=(a["class"]?a["class"]+" ":"")+b):"style"==f?(e.attr("style",e.attr("style")+";"+b),a.style=(a.style?a.style+";":"")+b):"$"==f.charAt(0)||a.hasOwnProperty(f)||(a[f]=b,d[f]=c[f])})}function te(a,b,c,d,e,f,g,k){var p=[],l,m,w=b[0],s=a.shift(),y=E({},s,{templateUrl:null,transclude:null,replace:null,$$originalDirective:s}),J=N(s.templateUrl)?s.templateUrl(b,c):s.templateUrl;
b.empty();n.get(t.getTrustedResourceUrl(J),{cache:q}).success(function(q){var n,t;q=W(q);if(s.replace){q=Ib.test(q)?A($(q)):[];n=q[0];if(1!=q.length||1!==n.nodeType)throw ja("tplrt",s.name,J);q={$attr:{}};ra(d,b,n);var B=ca(n,[],q);T(s.scope)&&D(B);a=B.concat(a);v(c,q)}else n=w,b.html(q);a.unshift(y);l=I(a,n,c,e,b,s,f,g,k);r(d,function(a,c){a==n&&(d[c]=b[0])});for(m=O(b[0].childNodes,e);p.length;){q=p.shift();t=p.shift();var K=p.shift(),C=p.shift(),B=b[0];if(t!==w){var P=t.className;k.hasElementTranscludeDirective&&
s.replace||(B=Kb(n));ra(K,A(t),B);ba(A(B),P)}t=l.transcludeOnThisElement?M(q,l.transclude,C):C;l(m,q,B,d,t)}p=null}).error(function(a,b,c,d){throw ja("tpload",d.url);});return function(a,b,c,d,e){a=e;p?(p.push(b),p.push(c),p.push(d),p.push(a)):(l.transcludeOnThisElement&&(a=M(b,l.transclude,e)),l(m,b,c,d,a))}}function F(a,b){var c=b.priority-a.priority;return 0!==c?c:a.name!==b.name?a.name<b.name?-1:1:a.index-b.index}function fb(a,b,c,d){if(b)throw ja("multidir",b.name,c.name,a,ia(d));}function x(a,
c){var d=b(c,!0);d&&a.push({priority:0,compile:function(a){var b=a.parent().length;b&&ba(a.parent(),"ng-binding");return function(a,c){var e=c.parent(),f=e.data("$binding")||[];f.push(d);e.data("$binding",f);b||ba(e,"ng-binding");a.$watch(d,function(a){c[0].nodeValue=a})}}})}function z(a,b){if("srcdoc"==b)return t.HTML;var c=Pa(a);if("xlinkHref"==b||"FORM"==c&&"action"==b||"IMG"!=c&&("src"==b||"ngSrc"==b))return t.RESOURCE_URL}function S(a,c,d,e){var f=b(d,!0);if(f){if("multiple"===e&&"SELECT"===
Pa(a))throw ja("selmulti",ia(a));c.push({priority:100,compile:function(){return{pre:function(c,d,k){d=k.$$observers||(k.$$observers={});if(g.test(e))throw ja("nodomevents");if(f=b(k[e],!0,z(a,e)))k[e]=f(c),(d[e]||(d[e]=[])).$$inter=!0,(k.$$observers&&k.$$observers[e].$$scope||c).$watch(f,function(a,b){"class"===e&&a!=b?k.$updateClass(a,b):k.$set(e,a)})}}}})}}function ra(a,b,c){var d=b[0],e=b.length,f=d.parentNode,g,k;if(a)for(g=0,k=a.length;g<k;g++)if(a[g]==d){a[g++]=c;k=g+e-1;for(var p=a.length;g<
p;g++,k++)k<p?a[g]=a[k]:delete a[g];a.length-=e-1;break}f&&f.replaceChild(c,d);a=X.createDocumentFragment();a.appendChild(d);c[A.expando]=d[A.expando];d=1;for(e=b.length;d<e;d++)f=b[d],A(f).remove(),a.appendChild(f),delete b[d];b[0]=c;b.length=1}function rc(a,b){return E(function(){return a.apply(null,arguments)},a,b)}var Ob=function(a,b){this.$$element=a;this.$attr=b||{}};Ob.prototype={$normalize:qa,$addClass:function(a){a&&0<a.length&&y.addClass(this.$$element,a)},$removeClass:function(a){a&&0<
a.length&&y.removeClass(this.$$element,a)},$updateClass:function(a,b){var c=sc(a,b),d=sc(b,a);0===c.length?y.removeClass(this.$$element,d):0===d.length?y.addClass(this.$$element,c):y.setClass(this.$$element,c,d)},$set:function(a,b,c,d){var e=oc(this.$$element[0],a);e&&(this.$$element.prop(a,b),d=e);this[a]=b;d?this.$attr[a]=d:(d=this.$attr[a])||(this.$attr[a]=d=nb(a,"-"));e=Pa(this.$$element);if("A"===e&&"href"===a||"IMG"===e&&"src"===a)this[a]=b=K(b,"src"===a);!1!==c&&(null===b||b===u?this.$$element.removeAttr(d):
this.$$element.attr(d,b));(c=this.$$observers)&&r(c[a],function(a){try{a(b)}catch(c){l(c)}})},$observe:function(a,b){var c=this,d=c.$$observers||(c.$$observers={}),e=d[a]||(d[a]=[]);e.push(b);J.$evalAsync(function(){e.$$inter||b(c[a])});return b}};var sa=b.startSymbol(),Ia=b.endSymbol(),W="{{"==sa||"}}"==Ia?ga:function(a){return a.replace(/\{\{/g,sa).replace(/}}/g,Ia)},U=/^ngAttr[A-Z]/;return B}]}function qa(b){return ab(b.replace(we,""))}function sc(b,a){var c="",d=b.split(/\s+/),e=a.split(/\s+/),
f=0;a:for(;f<d.length;f++){for(var g=d[f],h=0;h<e.length;h++)if(g==e[h])continue a;c+=(0<c.length?" ":"")+g}return c}function Od(){var b={},a=/^(\S+)(\s+as\s+(\w+))?$/;this.register=function(a,d){Ea(a,"controller");T(a)?E(b,a):b[a]=d};this.$get=["$injector","$window",function(c,d){return function(e,f){var g,h,k;G(e)&&(g=e.match(a),h=g[1],k=g[3],e=b.hasOwnProperty(h)?b[h]:fc(f.$scope,h,!0)||fc(d,h,!0),Ya(e,h,!0));g=c.instantiate(e,f);if(k){if(!f||"object"!==typeof f.$scope)throw z("$controller")("noscp",
h||e.name,k);f.$scope[k]=g}return g}}]}function Pd(){this.$get=["$window",function(b){return A(b.document)}]}function Qd(){this.$get=["$log",function(b){return function(a,c){b.error.apply(b,arguments)}}]}function tc(b){var a={},c,d,e;if(!b)return a;r(b.split("\n"),function(b){e=b.indexOf(":");c=x($(b.substr(0,e)));d=$(b.substr(e+1));c&&(a[c]=a[c]?a[c]+", "+d:d)});return a}function uc(b){var a=T(b)?b:u;return function(c){a||(a=tc(b));return c?a[x(c)]||null:a}}function vc(b,a,c){if(N(c))return c(b,
a);r(c,function(c){b=c(b,a)});return b}function Td(){var b=/^\s*(\[|\{[^\{])/,a=/[\}\]]\s*$/,c=/^\)\]\}',?\n/,d={"Content-Type":"application/json;charset=utf-8"},e=this.defaults={transformResponse:[function(d){G(d)&&(d=d.replace(c,""),b.test(d)&&a.test(d)&&(d=ac(d)));return d}],transformRequest:[function(a){return T(a)&&"[object File]"!==Ba.call(a)&&"[object Blob]"!==Ba.call(a)?oa(a):a}],headers:{common:{Accept:"application/json, text/plain, */*"},post:ha(d),put:ha(d),patch:ha(d)},xsrfCookieName:"XSRF-TOKEN",
xsrfHeaderName:"X-XSRF-TOKEN"},f=this.interceptors=[],g=this.responseInterceptors=[];this.$get=["$httpBackend","$browser","$cacheFactory","$rootScope","$q","$injector",function(a,b,c,d,n,q){function p(a){function b(a){var d=E({},a,{data:vc(a.data,a.headers,c.transformResponse)});return 200<=a.status&&300>a.status?d:n.reject(d)}var c={method:"get",transformRequest:e.transformRequest,transformResponse:e.transformResponse},d=function(a){var b=e.headers,c=E({},a.headers),d,f,b=E({},b.common,b[x(a.method)]);
a:for(d in b){a=x(d);for(f in c)if(x(f)===a)continue a;c[d]=b[d]}(function(a){var b;r(a,function(c,d){N(c)&&(b=c(),null!=b?a[d]=b:delete a[d])})})(c);return c}(a);E(c,a);c.headers=d;c.method=La(c.method);var f=[function(a){d=a.headers;var c=vc(a.data,uc(d),a.transformRequest);F(c)&&r(d,function(a,b){"content-type"===x(b)&&delete d[b]});F(a.withCredentials)&&!F(e.withCredentials)&&(a.withCredentials=e.withCredentials);return s(a,c,d).then(b,b)},u],g=n.when(c);for(r(t,function(a){(a.request||a.requestError)&&
f.unshift(a.request,a.requestError);(a.response||a.responseError)&&f.push(a.response,a.responseError)});f.length;){a=f.shift();var h=f.shift(),g=g.then(a,h)}g.success=function(a){g.then(function(b){a(b.data,b.status,b.headers,c)});return g};g.error=function(a){g.then(null,function(b){a(b.data,b.status,b.headers,c)});return g};return g}function s(c,f,g){function m(a,b,c,e){C&&(200<=a&&300>a?C.put(A,[a,b,tc(c),e]):C.remove(A));q(b,a,c,e);d.$$phase||d.$apply()}function q(a,b,d,e){b=Math.max(b,0);(200<=
b&&300>b?t.resolve:t.reject)({data:a,status:b,headers:uc(d),config:c,statusText:e})}function s(){var a=Ta(p.pendingRequests,c);-1!==a&&p.pendingRequests.splice(a,1)}var t=n.defer(),r=t.promise,C,I,A=J(c.url,c.params);p.pendingRequests.push(c);r.then(s,s);!c.cache&&!e.cache||(!1===c.cache||"GET"!==c.method&&"JSONP"!==c.method)||(C=T(c.cache)?c.cache:T(e.cache)?e.cache:w);if(C)if(I=C.get(A),D(I)){if(I&&N(I.then))return I.then(s,s),I;L(I)?q(I[1],I[0],ha(I[2]),I[3]):q(I,200,{},"OK")}else C.put(A,r);F(I)&&
((I=Pb(c.url)?b.cookies()[c.xsrfCookieName||e.xsrfCookieName]:u)&&(g[c.xsrfHeaderName||e.xsrfHeaderName]=I),a(c.method,A,f,m,g,c.timeout,c.withCredentials,c.responseType));return r}function J(a,b){if(!b)return a;var c=[];Sc(b,function(a,b){null===a||F(a)||(L(a)||(a=[a]),r(a,function(a){T(a)&&(a=va(a)?a.toISOString():oa(a));c.push(Da(b)+"="+Da(a))}))});0<c.length&&(a+=(-1==a.indexOf("?")?"?":"&")+c.join("&"));return a}var w=c("$http"),t=[];r(f,function(a){t.unshift(G(a)?q.get(a):q.invoke(a))});r(g,
function(a,b){var c=G(a)?q.get(a):q.invoke(a);t.splice(b,0,{response:function(a){return c(n.when(a))},responseError:function(a){return c(n.reject(a))}})});p.pendingRequests=[];(function(a){r(arguments,function(a){p[a]=function(b,c){return p(E(c||{},{method:a,url:b}))}})})("get","delete","head","jsonp");(function(a){r(arguments,function(a){p[a]=function(b,c,d){return p(E(d||{},{method:a,url:b,data:c}))}})})("post","put","patch");p.defaults=e;return p}]}function xe(b){if(8>=R&&(!b.match(/^(get|post|head|put|delete|options)$/i)||
!W.XMLHttpRequest))return new W.ActiveXObject("Microsoft.XMLHTTP");if(W.XMLHttpRequest)return new W.XMLHttpRequest;throw z("$httpBackend")("noxhr");}function Ud(){this.$get=["$browser","$window","$document",function(b,a,c){return ye(b,xe,b.defer,a.angular.callbacks,c[0])}]}function ye(b,a,c,d,e){function f(a,b,c){var f=e.createElement("script"),g=null;f.type="text/javascript";f.src=a;f.async=!0;g=function(a){bb(f,"load",g);bb(f,"error",g);e.body.removeChild(f);f=null;var h=-1,s="unknown";a&&("load"!==
a.type||d[b].called||(a={type:"error"}),s=a.type,h="error"===a.type?404:200);c&&c(h,s)};sb(f,"load",g);sb(f,"error",g);8>=R&&(f.onreadystatechange=function(){G(f.readyState)&&/loaded|complete/.test(f.readyState)&&(f.onreadystatechange=null,g({type:"load"}))});e.body.appendChild(f);return g}var g=-1;return function(e,k,m,l,n,q,p,s){function J(){t=g;K&&K();B&&B.abort()}function w(a,d,e,f,g){O&&c.cancel(O);K=B=null;0===d&&(d=e?200:"file"==xa(k).protocol?404:0);a(1223===d?204:d,e,f,g||"");b.$$completeOutstandingRequest(v)}
var t;b.$$incOutstandingRequestCount();k=k||b.url();if("jsonp"==x(e)){var y="_"+(d.counter++).toString(36);d[y]=function(a){d[y].data=a;d[y].called=!0};var K=f(k.replace("JSON_CALLBACK","angular.callbacks."+y),y,function(a,b){w(l,a,d[y].data,"",b);d[y]=v})}else{var B=a(e);B.open(e,k,!0);r(n,function(a,b){D(a)&&B.setRequestHeader(b,a)});B.onreadystatechange=function(){if(B&&4==B.readyState){var a=null,b=null,c="";t!==g&&(a=B.getAllResponseHeaders(),b="response"in B?B.response:B.responseText);t===g&&
10>R||(c=B.statusText);w(l,t||B.status,b,a,c)}};p&&(B.withCredentials=!0);if(s)try{B.responseType=s}catch(ba){if("json"!==s)throw ba;}B.send(m||null)}if(0<q)var O=c(J,q);else q&&N(q.then)&&q.then(J)}}function Rd(){var b="{{",a="}}";this.startSymbol=function(a){return a?(b=a,this):b};this.endSymbol=function(b){return b?(a=b,this):a};this.$get=["$parse","$exceptionHandler","$sce",function(c,d,e){function f(f,m,l){for(var n,q,p=0,s=[],J=f.length,w=!1,t=[];p<J;)-1!=(n=f.indexOf(b,p))&&-1!=(q=f.indexOf(a,
n+g))?(p!=n&&s.push(f.substring(p,n)),s.push(p=c(w=f.substring(n+g,q))),p.exp=w,p=q+h,w=!0):(p!=J&&s.push(f.substring(p)),p=J);(J=s.length)||(s.push(""),J=1);if(l&&1<s.length)throw wc("noconcat",f);if(!m||w)return t.length=J,p=function(a){try{for(var b=0,c=J,g;b<c;b++){if("function"==typeof(g=s[b]))if(g=g(a),g=l?e.getTrusted(l,g):e.valueOf(g),null==g)g="";else switch(typeof g){case "string":break;case "number":g=""+g;break;default:g=oa(g)}t[b]=g}return t.join("")}catch(h){a=wc("interr",f,h.toString()),
d(a)}},p.exp=f,p.parts=s,p}var g=b.length,h=a.length;f.startSymbol=function(){return b};f.endSymbol=function(){return a};return f}]}function Sd(){this.$get=["$rootScope","$window","$q",function(b,a,c){function d(d,g,h,k){var m=a.setInterval,l=a.clearInterval,n=c.defer(),q=n.promise,p=0,s=D(k)&&!k;h=D(h)?h:0;q.then(null,null,d);q.$$intervalId=m(function(){n.notify(p++);0<h&&p>=h&&(n.resolve(p),l(q.$$intervalId),delete e[q.$$intervalId]);s||b.$apply()},g);e[q.$$intervalId]=n;return q}var e={};d.cancel=
function(b){return b&&b.$$intervalId in e?(e[b.$$intervalId].reject("canceled"),a.clearInterval(b.$$intervalId),delete e[b.$$intervalId],!0):!1};return d}]}function ad(){this.$get=function(){return{id:"en-us",NUMBER_FORMATS:{DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{minInt:1,minFrac:0,maxFrac:3,posPre:"",posSuf:"",negPre:"-",negSuf:"",gSize:3,lgSize:3},{minInt:1,minFrac:2,maxFrac:2,posPre:"\u00a4",posSuf:"",negPre:"(\u00a4",negSuf:")",gSize:3,lgSize:3}],CURRENCY_SYM:"$"},DATETIME_FORMATS:{MONTH:"January February March April May June July August September October November December".split(" "),
SHORTMONTH:"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),DAY:"Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),SHORTDAY:"Sun Mon Tue Wed Thu Fri Sat".split(" "),AMPMS:["AM","PM"],medium:"MMM d, y h:mm:ss a","short":"M/d/yy h:mm a",fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",mediumDate:"MMM d, y",shortDate:"M/d/yy",mediumTime:"h:mm:ss a",shortTime:"h:mm a"},pluralCat:function(b){return 1===b?"one":"other"}}}}function Qb(b){b=b.split("/");for(var a=b.length;a--;)b[a]=
mb(b[a]);return b.join("/")}function xc(b,a,c){b=xa(b,c);a.$$protocol=b.protocol;a.$$host=b.hostname;a.$$port=U(b.port)||ze[b.protocol]||null}function yc(b,a,c){var d="/"!==b.charAt(0);d&&(b="/"+b);b=xa(b,c);a.$$path=decodeURIComponent(d&&"/"===b.pathname.charAt(0)?b.pathname.substring(1):b.pathname);a.$$search=cc(b.search);a.$$hash=decodeURIComponent(b.hash);a.$$path&&"/"!=a.$$path.charAt(0)&&(a.$$path="/"+a.$$path)}function ta(b,a){if(0===a.indexOf(b))return a.substr(b.length)}function Ga(b){var a=
b.indexOf("#");return-1==a?b:b.substr(0,a)}function Rb(b){return b.substr(0,Ga(b).lastIndexOf("/")+1)}function zc(b,a){this.$$html5=!0;a=a||"";var c=Rb(b);xc(b,this,b);this.$$parse=function(a){var e=ta(c,a);if(!G(e))throw Sb("ipthprfx",a,c);yc(e,this,b);this.$$path||(this.$$path="/");this.$$compose()};this.$$compose=function(){var a=Cb(this.$$search),b=this.$$hash?"#"+mb(this.$$hash):"";this.$$url=Qb(this.$$path)+(a?"?"+a:"")+b;this.$$absUrl=c+this.$$url.substr(1)};this.$$parseLinkUrl=function(d,
e){var f,g;(f=ta(b,d))!==u?(g=f,g=(f=ta(a,f))!==u?c+(ta("/",f)||f):b+g):(f=ta(c,d))!==u?g=c+f:c==d+"/"&&(g=c);g&&this.$$parse(g);return!!g}}function Tb(b,a){var c=Rb(b);xc(b,this,b);this.$$parse=function(d){var e=ta(b,d)||ta(c,d),e="#"==e.charAt(0)?ta(a,e):this.$$html5?e:"";if(!G(e))throw Sb("ihshprfx",d,a);yc(e,this,b);d=this.$$path;var f=/^\/[A-Z]:(\/.*)/;0===e.indexOf(b)&&(e=e.replace(b,""));f.exec(e)||(d=(e=f.exec(d))?e[1]:d);this.$$path=d;this.$$compose()};this.$$compose=function(){var c=Cb(this.$$search),
e=this.$$hash?"#"+mb(this.$$hash):"";this.$$url=Qb(this.$$path)+(c?"?"+c:"")+e;this.$$absUrl=b+(this.$$url?a+this.$$url:"")};this.$$parseLinkUrl=function(a,c){return Ga(b)==Ga(a)?(this.$$parse(a),!0):!1}}function Ac(b,a){this.$$html5=!0;Tb.apply(this,arguments);var c=Rb(b);this.$$parseLinkUrl=function(d,e){var f,g;b==Ga(d)?f=d:(g=ta(c,d))?f=b+a+g:c===d+"/"&&(f=c);f&&this.$$parse(f);return!!f};this.$$compose=function(){var c=Cb(this.$$search),e=this.$$hash?"#"+mb(this.$$hash):"";this.$$url=Qb(this.$$path)+
(c?"?"+c:"")+e;this.$$absUrl=b+a+this.$$url}}function tb(b){return function(){return this[b]}}function Bc(b,a){return function(c){if(F(c))return this[b];this[b]=a(c);this.$$compose();return this}}function Vd(){var b="",a=!1;this.hashPrefix=function(a){return D(a)?(b=a,this):b};this.html5Mode=function(b){return D(b)?(a=b,this):a};this.$get=["$rootScope","$browser","$sniffer","$rootElement",function(c,d,e,f){function g(a){c.$broadcast("$locationChangeSuccess",h.absUrl(),a)}var h,k=d.baseHref(),m=d.url();
a?(k=m.substring(0,m.indexOf("/",m.indexOf("//")+2))+(k||"/"),e=e.history?zc:Ac):(k=Ga(m),e=Tb);h=new e(k,"#"+b);h.$$parseLinkUrl(m,m);var l=/^\s*(javascript|mailto):/i;f.on("click",function(a){if(!a.ctrlKey&&!a.metaKey&&2!=a.which){for(var b=A(a.target);"a"!==x(b[0].nodeName);)if(b[0]===f[0]||!(b=b.parent())[0])return;var e=b.prop("href"),g=b.attr("href")||b.attr("xlink:href");T(e)&&"[object SVGAnimatedString]"===e.toString()&&(e=xa(e.animVal).href);l.test(e)||(!e||(b.attr("target")||a.isDefaultPrevented())||
!h.$$parseLinkUrl(e,g))||(a.preventDefault(),h.absUrl()!=d.url()&&(c.$apply(),W.angular["ff-684208-preventDefault"]=!0))}});h.absUrl()!=m&&d.url(h.absUrl(),!0);d.onUrlChange(function(a){h.absUrl()!=a&&(c.$evalAsync(function(){var b=h.absUrl();h.$$parse(a);c.$broadcast("$locationChangeStart",a,b).defaultPrevented?(h.$$parse(b),d.url(b)):g(b)}),c.$$phase||c.$digest())});var n=0;c.$watch(function(){var a=d.url(),b=h.$$replace;n&&a==h.absUrl()||(n++,c.$evalAsync(function(){c.$broadcast("$locationChangeStart",
h.absUrl(),a).defaultPrevented?h.$$parse(a):(d.url(h.absUrl(),b),g(a))}));h.$$replace=!1;return n});return h}]}function Wd(){var b=!0,a=this;this.debugEnabled=function(a){return D(a)?(b=a,this):b};this.$get=["$window",function(c){function d(a){a instanceof Error&&(a.stack?a=a.message&&-1===a.stack.indexOf(a.message)?"Error: "+a.message+"\n"+a.stack:a.stack:a.sourceURL&&(a=a.message+"\n"+a.sourceURL+":"+a.line));return a}function e(a){var b=c.console||{},e=b[a]||b.log||v;a=!1;try{a=!!e.apply}catch(k){}return a?
function(){var a=[];r(arguments,function(b){a.push(d(b))});return e.apply(b,a)}:function(a,b){e(a,null==b?"":b)}}return{log:e("log"),info:e("info"),warn:e("warn"),error:e("error"),debug:function(){var c=e("debug");return function(){b&&c.apply(a,arguments)}}()}}]}function ka(b,a){if("__defineGetter__"===b||"__defineSetter__"===b||"__lookupGetter__"===b||"__lookupSetter__"===b||"__proto__"===b)throw la("isecfld",a);return b}function ma(b,a){if(b){if(b.constructor===b)throw la("isecfn",a);if(b.document&&
b.location&&b.alert&&b.setInterval)throw la("isecwindow",a);if(b.children&&(b.nodeName||b.prop&&b.attr&&b.find))throw la("isecdom",a);if(b===Object)throw la("isecobj",a);}return b}function ub(b,a,c,d,e){ma(b,d);e=e||{};a=a.split(".");for(var f,g=0;1<a.length;g++){f=ka(a.shift(),d);var h=ma(b[f],d);h||(h={},b[f]=h);b=h;b.then&&e.unwrapPromises&&(ya(d),"$$v"in b||function(a){a.then(function(b){a.$$v=b})}(b),b.$$v===u&&(b.$$v={}),b=b.$$v)}f=ka(a.shift(),d);ma(b[f],d);return b[f]=c}function Qa(b){return"constructor"==
b}function Cc(b,a,c,d,e,f,g){ka(b,f);ka(a,f);ka(c,f);ka(d,f);ka(e,f);var h=function(a){return ma(a,f)},k=g.expensiveChecks,m=k||Qa(b)?h:ga,l=k||Qa(a)?h:ga,n=k||Qa(c)?h:ga,q=k||Qa(d)?h:ga,p=k||Qa(e)?h:ga;return g.unwrapPromises?function(g,h){var k=h&&h.hasOwnProperty(b)?h:g,t;if(null==k)return k;(k=m(k[b]))&&k.then&&(ya(f),"$$v"in k||(t=k,t.$$v=u,t.then(function(a){t.$$v=m(a)})),k=m(k.$$v));if(!a)return k;if(null==k)return u;(k=l(k[a]))&&k.then&&(ya(f),"$$v"in k||(t=k,t.$$v=u,t.then(function(a){t.$$v=
l(a)})),k=l(k.$$v));if(!c)return k;if(null==k)return u;(k=n(k[c]))&&k.then&&(ya(f),"$$v"in k||(t=k,t.$$v=u,t.then(function(a){t.$$v=n(a)})),k=n(k.$$v));if(!d)return k;if(null==k)return u;(k=q(k[d]))&&k.then&&(ya(f),"$$v"in k||(t=k,t.$$v=u,t.then(function(a){t.$$v=q(a)})),k=q(k.$$v));if(!e)return k;if(null==k)return u;(k=p(k[e]))&&k.then&&(ya(f),"$$v"in k||(t=k,t.$$v=u,t.then(function(a){t.$$v=p(a)})),k=p(k.$$v));return k}:function(f,g){var h=g&&g.hasOwnProperty(b)?g:f;if(null==h)return h;h=m(h[b]);
if(!a)return h;if(null==h)return u;h=l(h[a]);if(!c)return h;if(null==h)return u;h=n(h[c]);if(!d)return h;if(null==h)return u;h=q(h[d]);return e?null==h?u:h=p(h[e]):h}}function Ae(b,a){return function(c,d){return b(c,d,ya,ma,a)}}function Dc(b,a,c){var d=a.expensiveChecks,e=d?Be:Ce;if(e.hasOwnProperty(b))return e[b];var f=b.split("."),g=f.length,h;if(a.csp)h=6>g?Cc(f[0],f[1],f[2],f[3],f[4],c,a):function(b,d){var e=0,h;do h=Cc(f[e++],f[e++],f[e++],f[e++],f[e++],c,a)(b,d),d=u,b=h;while(e<g);return h};
else{var k="var p;\n";d&&(k+="s = eso(s, fe);\nl = eso(l, fe);\n");var m=d;r(f,function(b,e){ka(b,c);var f=(e?"s":'((l&&l.hasOwnProperty("'+b+'"))?l:s)')+'["'+b+'"]',g=d||Qa(b);g&&(f="eso("+f+", fe)",m=!0);k+="if(s == null) return undefined;\ns="+f+";\n";a.unwrapPromises&&(k+='if (s && s.then) {\n pw("'+c.replace(/(["\r\n])/g,"\\$1")+'");\n if (!("$$v" in s)) {\n p=s;\n p.$$v = undefined;\n p.then(function(v) {p.$$v='+(g?"eso(v)":"v")+";});\n}\n s="+(g?"eso(s.$$v)":"s.$$v")+"\n}\n")});k+="return s;";
h=new Function("s","l","pw","eso","fe",k);h.toString=aa(k);if(m||a.unwrapPromises)h=Ae(h,c)}"hasOwnProperty"!==b&&(e[b]=h);return h}function Xd(){var b={},a={},c={csp:!1,unwrapPromises:!1,logPromiseWarnings:!0,expensiveChecks:!1};this.unwrapPromises=function(a){return D(a)?(c.unwrapPromises=!!a,this):c.unwrapPromises};this.logPromiseWarnings=function(a){return D(a)?(c.logPromiseWarnings=a,this):c.logPromiseWarnings};this.$get=["$filter","$sniffer","$log",function(d,e,f){c.csp=e.csp;var g={csp:c.csp,
unwrapPromises:c.unwrapPromises,logPromiseWarnings:c.logPromiseWarnings,expensiveChecks:!0};ya=function(a){c.logPromiseWarnings&&!Ec.hasOwnProperty(a)&&(Ec[a]=!0,f.warn("[$parse] Promise found in the expression `"+a+"`. Automatic unwrapping of promises in Angular expressions is deprecated."))};return function(e,f){var m;switch(typeof e){case "string":var l=f?a:b;if(l.hasOwnProperty(e))return l[e];m=f?g:c;var n=new Ub(m);m=(new gb(n,d,m)).parse(e);"hasOwnProperty"!==e&&(l[e]=m);return m;case "function":return e;
default:return v}}}]}function Zd(){this.$get=["$rootScope","$exceptionHandler",function(b,a){return De(function(a){b.$evalAsync(a)},a)}]}function De(b,a){function c(a){return a}function d(a){return g(a)}var e=function(){var g=[],m,l;return l={resolve:function(a){if(g){var c=g;g=u;m=f(a);c.length&&b(function(){for(var a,b=0,d=c.length;b<d;b++)a=c[b],m.then(a[0],a[1],a[2])})}},reject:function(a){l.resolve(h(a))},notify:function(a){if(g){var c=g;g.length&&b(function(){for(var b,d=0,e=c.length;d<e;d++)b=
c[d],b[2](a)})}},promise:{then:function(b,f,h){var l=e(),J=function(d){try{l.resolve((N(b)?b:c)(d))}catch(e){l.reject(e),a(e)}},w=function(b){try{l.resolve((N(f)?f:d)(b))}catch(c){l.reject(c),a(c)}},t=function(b){try{l.notify((N(h)?h:c)(b))}catch(d){a(d)}};g?g.push([J,w,t]):m.then(J,w,t);return l.promise},"catch":function(a){return this.then(null,a)},"finally":function(a){function b(a,c){var d=e();c?d.resolve(a):d.reject(a);return d.promise}function d(e,f){var g=null;try{g=(a||c)()}catch(h){return b(h,
!1)}return g&&N(g.then)?g.then(function(){return b(e,f)},function(a){return b(a,!1)}):b(e,f)}return this.then(function(a){return d(a,!0)},function(a){return d(a,!1)})}}}},f=function(a){return a&&N(a.then)?a:{then:function(c){var d=e();b(function(){d.resolve(c(a))});return d.promise}}},g=function(a){var b=e();b.reject(a);return b.promise},h=function(c){return{then:function(f,g){var h=e();b(function(){try{h.resolve((N(g)?g:d)(c))}catch(b){h.reject(b),a(b)}});return h.promise}}};return{defer:e,reject:g,
when:function(h,m,l,n){var q=e(),p,s=function(b){try{return(N(m)?m:c)(b)}catch(d){return a(d),g(d)}},J=function(b){try{return(N(l)?l:d)(b)}catch(c){return a(c),g(c)}},w=function(b){try{return(N(n)?n:c)(b)}catch(d){a(d)}};b(function(){f(h).then(function(a){p||(p=!0,q.resolve(f(a).then(s,J,w)))},function(a){p||(p=!0,q.resolve(J(a)))},function(a){p||q.notify(w(a))})});return q.promise},all:function(a){var b=e(),c=0,d=L(a)?[]:{};r(a,function(a,e){c++;f(a).then(function(a){d.hasOwnProperty(e)||(d[e]=a,
--c||b.resolve(d))},function(a){d.hasOwnProperty(e)||b.reject(a)})});0===c&&b.resolve(d);return b.promise}}}function fe(){this.$get=["$window","$timeout",function(b,a){var c=b.requestAnimationFrame||b.webkitRequestAnimationFrame||b.mozRequestAnimationFrame,d=b.cancelAnimationFrame||b.webkitCancelAnimationFrame||b.mozCancelAnimationFrame||b.webkitCancelRequestAnimationFrame,e=!!c,f=e?function(a){var b=c(a);return function(){d(b)}}:function(b){var c=a(b,16.66,!1);return function(){a.cancel(c)}};f.supported=
e;return f}]}function Yd(){var b=10,a=z("$rootScope"),c=null;this.digestTtl=function(a){arguments.length&&(b=a);return b};this.$get=["$injector","$exceptionHandler","$parse","$browser",function(d,e,f,g){function h(){this.$id=ib();this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null;this["this"]=this.$root=this;this.$$destroyed=!1;this.$$asyncQueue=[];this.$$postDigestQueue=[];this.$$listeners={};this.$$listenerCount={};this.$$isolateBindings=
{}}function k(b){if(q.$$phase)throw a("inprog",q.$$phase);q.$$phase=b}function m(a,b){var c=f(a);Ya(c,b);return c}function l(a,b,c){do a.$$listenerCount[c]-=b,0===a.$$listenerCount[c]&&delete a.$$listenerCount[c];while(a=a.$parent)}function n(){}h.prototype={constructor:h,$new:function(a){a?(a=new h,a.$root=this.$root,a.$$asyncQueue=this.$$asyncQueue,a.$$postDigestQueue=this.$$postDigestQueue):(this.$$childScopeClass||(this.$$childScopeClass=function(){this.$$watchers=this.$$nextSibling=this.$$childHead=
this.$$childTail=null;this.$$listeners={};this.$$listenerCount={};this.$id=ib();this.$$childScopeClass=null},this.$$childScopeClass.prototype=this),a=new this.$$childScopeClass);a["this"]=a;a.$parent=this;a.$$prevSibling=this.$$childTail;this.$$childHead?this.$$childTail=this.$$childTail.$$nextSibling=a:this.$$childHead=this.$$childTail=a;return a},$watch:function(a,b,d){var e=m(a,"watch"),f=this.$$watchers,g={fn:b,last:n,get:e,exp:a,eq:!!d};c=null;if(!N(b)){var h=m(b||v,"listener");g.fn=function(a,
b,c){h(c)}}if("string"==typeof a&&e.constant){var k=g.fn;g.fn=function(a,b,c){k.call(this,a,b,c);Ua(f,g)}}f||(f=this.$$watchers=[]);f.unshift(g);return function(){Ua(f,g);c=null}},$watchCollection:function(a,b){var c=this,d,e,g,h=1<b.length,k=0,l=f(a),m=[],n={},q=!0,r=0;return this.$watch(function(){d=l(c);var a,b,f;if(T(d))if(Sa(d))for(e!==m&&(e=m,r=e.length=0,k++),a=d.length,r!==a&&(k++,e.length=r=a),b=0;b<a;b++)f=e[b]!==e[b]&&d[b]!==d[b],f||e[b]===d[b]||(k++,e[b]=d[b]);else{e!==n&&(e=n={},r=0,
k++);a=0;for(b in d)d.hasOwnProperty(b)&&(a++,e.hasOwnProperty(b)?(f=e[b]!==e[b]&&d[b]!==d[b],f||e[b]===d[b]||(k++,e[b]=d[b])):(r++,e[b]=d[b],k++));if(r>a)for(b in k++,e)e.hasOwnProperty(b)&&!d.hasOwnProperty(b)&&(r--,delete e[b])}else e!==d&&(e=d,k++);return k},function(){q?(q=!1,b(d,d,c)):b(d,g,c);if(h)if(T(d))if(Sa(d)){g=Array(d.length);for(var a=0;a<d.length;a++)g[a]=d[a]}else for(a in g={},d)lb.call(d,a)&&(g[a]=d[a]);else g=d})},$digest:function(){var d,f,h,l,m=this.$$asyncQueue,r=this.$$postDigestQueue,
K,B,u=b,O,M=[],A,P,C;k("$digest");g.$$checkUrlChange();c=null;do{B=!1;for(O=this;m.length;){try{C=m.shift(),C.scope.$eval(C.expression)}catch(I){q.$$phase=null,e(I)}c=null}a:do{if(l=O.$$watchers)for(K=l.length;K--;)try{if(d=l[K])if((f=d.get(O))!==(h=d.last)&&!(d.eq?Ca(f,h):"number"===typeof f&&"number"===typeof h&&isNaN(f)&&isNaN(h)))B=!0,c=d,d.last=d.eq?Ka(f,null):f,d.fn(f,h===n?f:h,O),5>u&&(A=4-u,M[A]||(M[A]=[]),P=N(d.exp)?"fn: "+(d.exp.name||d.exp.toString()):d.exp,P+="; newVal: "+oa(f)+"; oldVal: "+
oa(h),M[A].push(P));else if(d===c){B=!1;break a}}catch(D){q.$$phase=null,e(D)}if(!(l=O.$$childHead||O!==this&&O.$$nextSibling))for(;O!==this&&!(l=O.$$nextSibling);)O=O.$parent}while(O=l);if((B||m.length)&&!u--)throw q.$$phase=null,a("infdig",b,oa(M));}while(B||m.length);for(q.$$phase=null;r.length;)try{r.shift()()}catch(x){e(x)}},$destroy:function(){if(!this.$$destroyed){var a=this.$parent;this.$broadcast("$destroy");this.$$destroyed=!0;this!==q&&(r(this.$$listenerCount,Bb(null,l,this)),a.$$childHead==
this&&(a.$$childHead=this.$$nextSibling),a.$$childTail==this&&(a.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$parent=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=this.$root=null,this.$$listeners={},this.$$watchers=this.$$asyncQueue=this.$$postDigestQueue=[],this.$destroy=this.$digest=this.$apply=v,this.$on=this.$watch=function(){return v})}},
$eval:function(a,b){return f(a)(this,b)},$evalAsync:function(a){q.$$phase||q.$$asyncQueue.length||g.defer(function(){q.$$asyncQueue.length&&q.$digest()});this.$$asyncQueue.push({scope:this,expression:a})},$$postDigest:function(a){this.$$postDigestQueue.push(a)},$apply:function(a){try{return k("$apply"),this.$eval(a)}catch(b){e(b)}finally{q.$$phase=null;try{q.$digest()}catch(c){throw e(c),c;}}},$on:function(a,b){var c=this.$$listeners[a];c||(this.$$listeners[a]=c=[]);c.push(b);var d=this;do d.$$listenerCount[a]||
(d.$$listenerCount[a]=0),d.$$listenerCount[a]++;while(d=d.$parent);var e=this;return function(){var d=Ta(c,b);-1!==d&&(c[d]=null,l(e,1,a))}},$emit:function(a,b){var c=[],d,f=this,g=!1,h={name:a,targetScope:f,stopPropagation:function(){g=!0},preventDefault:function(){h.defaultPrevented=!0},defaultPrevented:!1},k=[h].concat(wa.call(arguments,1)),l,m;do{d=f.$$listeners[a]||c;h.currentScope=f;l=0;for(m=d.length;l<m;l++)if(d[l])try{d[l].apply(null,k)}catch(n){e(n)}else d.splice(l,1),l--,m--;if(g)break;
f=f.$parent}while(f);return h},$broadcast:function(a,b){for(var c=this,d=this,f={name:a,targetScope:this,preventDefault:function(){f.defaultPrevented=!0},defaultPrevented:!1},g=[f].concat(wa.call(arguments,1)),h,k;c=d;){f.currentScope=c;d=c.$$listeners[a]||[];h=0;for(k=d.length;h<k;h++)if(d[h])try{d[h].apply(null,g)}catch(l){e(l)}else d.splice(h,1),h--,k--;if(!(d=c.$$listenerCount[a]&&c.$$childHead||c!==this&&c.$$nextSibling))for(;c!==this&&!(d=c.$$nextSibling);)c=c.$parent}return f}};var q=new h;
return q}]}function bd(){var b=/^\s*(https?|ftp|mailto|tel|file):/,a=/^\s*((https?|ftp|file):|data:image\/)/;this.aHrefSanitizationWhitelist=function(a){return D(a)?(b=a,this):b};this.imgSrcSanitizationWhitelist=function(b){return D(b)?(a=b,this):a};this.$get=function(){return function(c,d){var e=d?a:b,f;if(!R||8<=R)if(f=xa(c).href,""!==f&&!f.match(e))return"unsafe:"+f;return c}}}function Ee(b){if("self"===b)return b;if(G(b)){if(-1<b.indexOf("***"))throw za("iwcard",b);b=b.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,
"\\$1").replace(/\x08/g,"\\x08").replace("\\*\\*",".*").replace("\\*","[^:/.?&;]*");return RegExp("^"+b+"$")}if(kb(b))return RegExp("^"+b.source+"$");throw za("imatcher");}function Fc(b){var a=[];D(b)&&r(b,function(b){a.push(Ee(b))});return a}function ae(){this.SCE_CONTEXTS=fa;var b=["self"],a=[];this.resourceUrlWhitelist=function(a){arguments.length&&(b=Fc(a));return b};this.resourceUrlBlacklist=function(b){arguments.length&&(a=Fc(b));return a};this.$get=["$injector",function(c){function d(a){var b=
function(a){this.$$unwrapTrustedValue=function(){return a}};a&&(b.prototype=new a);b.prototype.valueOf=function(){return this.$$unwrapTrustedValue()};b.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()};return b}var e=function(a){throw za("unsafe");};c.has("$sanitize")&&(e=c.get("$sanitize"));var f=d(),g={};g[fa.HTML]=d(f);g[fa.CSS]=d(f);g[fa.URL]=d(f);g[fa.JS]=d(f);g[fa.RESOURCE_URL]=d(g[fa.URL]);return{trustAs:function(a,b){var c=g.hasOwnProperty(a)?g[a]:null;if(!c)throw za("icontext",
a,b);if(null===b||b===u||""===b)return b;if("string"!==typeof b)throw za("itype",a);return new c(b)},getTrusted:function(c,d){if(null===d||d===u||""===d)return d;var f=g.hasOwnProperty(c)?g[c]:null;if(f&&d instanceof f)return d.$$unwrapTrustedValue();if(c===fa.RESOURCE_URL){var f=xa(d.toString()),l,n,q=!1;l=0;for(n=b.length;l<n;l++)if("self"===b[l]?Pb(f):b[l].exec(f.href)){q=!0;break}if(q)for(l=0,n=a.length;l<n;l++)if("self"===a[l]?Pb(f):a[l].exec(f.href)){q=!1;break}if(q)return d;throw za("insecurl",
d.toString());}if(c===fa.HTML)return e(d);throw za("unsafe");},valueOf:function(a){return a instanceof f?a.$$unwrapTrustedValue():a}}}]}function $d(){var b=!0;this.enabled=function(a){arguments.length&&(b=!!a);return b};this.$get=["$parse","$sniffer","$sceDelegate",function(a,c,d){if(b&&c.msie&&8>c.msieDocumentMode)throw za("iequirks");var e=ha(fa);e.isEnabled=function(){return b};e.trustAs=d.trustAs;e.getTrusted=d.getTrusted;e.valueOf=d.valueOf;b||(e.trustAs=e.getTrusted=function(a,b){return b},
e.valueOf=ga);e.parseAs=function(b,c){var d=a(c);return d.literal&&d.constant?d:function(a,c){return e.getTrusted(b,d(a,c))}};var f=e.parseAs,g=e.getTrusted,h=e.trustAs;r(fa,function(a,b){var c=x(b);e[ab("parse_as_"+c)]=function(b){return f(a,b)};e[ab("get_trusted_"+c)]=function(b){return g(a,b)};e[ab("trust_as_"+c)]=function(b){return h(a,b)}});return e}]}function be(){this.$get=["$window","$document",function(b,a){var c={},d=U((/android (\d+)/.exec(x((b.navigator||{}).userAgent))||[])[1]),e=/Boxee/i.test((b.navigator||
{}).userAgent),f=a[0]||{},g=f.documentMode,h,k=/^(Moz|webkit|O|ms)(?=[A-Z])/,m=f.body&&f.body.style,l=!1,n=!1;if(m){for(var q in m)if(l=k.exec(q)){h=l[0];h=h.substr(0,1).toUpperCase()+h.substr(1);break}h||(h="WebkitOpacity"in m&&"webkit");l=!!("transition"in m||h+"Transition"in m);n=!!("animation"in m||h+"Animation"in m);!d||l&&n||(l=G(f.body.style.webkitTransition),n=G(f.body.style.webkitAnimation))}return{history:!(!b.history||!b.history.pushState||4>d||e),hashchange:"onhashchange"in b&&(!g||7<
g),hasEvent:function(a){if("input"==a&&9==R)return!1;if(F(c[a])){var b=f.createElement("div");c[a]="on"+a in b}return c[a]},csp:Za(),vendorPrefix:h,transitions:l,animations:n,android:d,msie:R,msieDocumentMode:g}}]}function de(){this.$get=["$rootScope","$browser","$q","$exceptionHandler",function(b,a,c,d){function e(e,h,k){var m=c.defer(),l=m.promise,n=D(k)&&!k;h=a.defer(function(){try{m.resolve(e())}catch(a){m.reject(a),d(a)}finally{delete f[l.$$timeoutId]}n||b.$apply()},h);l.$$timeoutId=h;f[h]=m;
return l}var f={};e.cancel=function(b){return b&&b.$$timeoutId in f?(f[b.$$timeoutId].reject("canceled"),delete f[b.$$timeoutId],a.defer.cancel(b.$$timeoutId)):!1};return e}]}function xa(b,a){var c=b;R&&(Y.setAttribute("href",c),c=Y.href);Y.setAttribute("href",c);return{href:Y.href,protocol:Y.protocol?Y.protocol.replace(/:$/,""):"",host:Y.host,search:Y.search?Y.search.replace(/^\?/,""):"",hash:Y.hash?Y.hash.replace(/^#/,""):"",hostname:Y.hostname,port:Y.port,pathname:"/"===Y.pathname.charAt(0)?Y.pathname:
"/"+Y.pathname}}function Pb(b){b=G(b)?xa(b):b;return b.protocol===Gc.protocol&&b.host===Gc.host}function ee(){this.$get=aa(W)}function kc(b){function a(d,e){if(T(d)){var f={};r(d,function(b,c){f[c]=a(c,b)});return f}return b.factory(d+c,e)}var c="Filter";this.register=a;this.$get=["$injector",function(a){return function(b){return a.get(b+c)}}];a("currency",Hc);a("date",Ic);a("filter",Fe);a("json",Ge);a("limitTo",He);a("lowercase",Ie);a("number",Jc);a("orderBy",Kc);a("uppercase",Je)}function Fe(){return function(b,
a,c){if(!L(b))return b;var d=typeof c,e=[];e.check=function(a){for(var b=0;b<e.length;b++)if(!e[b](a))return!1;return!0};"function"!==d&&(c="boolean"===d&&c?function(a,b){return Xa.equals(a,b)}:function(a,b){if(a&&b&&"object"===typeof a&&"object"===typeof b){for(var d in a)if("$"!==d.charAt(0)&&lb.call(a,d)&&c(a[d],b[d]))return!0;return!1}b=(""+b).toLowerCase();return-1<(""+a).toLowerCase().indexOf(b)});var f=function(a,b){if("string"===typeof b&&"!"===b.charAt(0))return!f(a,b.substr(1));switch(typeof a){case "boolean":case "number":case "string":return c(a,
b);case "object":switch(typeof b){case "object":return c(a,b);default:for(var d in a)if("$"!==d.charAt(0)&&f(a[d],b))return!0}return!1;case "array":for(d=0;d<a.length;d++)if(f(a[d],b))return!0;return!1;default:return!1}};switch(typeof a){case "boolean":case "number":case "string":a={$:a};case "object":for(var g in a)(function(b){"undefined"!==typeof a[b]&&e.push(function(c){return f("$"==b?c:c&&c[b],a[b])})})(g);break;case "function":e.push(a);break;default:return b}d=[];for(g=0;g<b.length;g++){var h=
b[g];e.check(h)&&d.push(h)}return d}}function Hc(b){var a=b.NUMBER_FORMATS;return function(b,d){F(d)&&(d=a.CURRENCY_SYM);return Lc(b,a.PATTERNS[1],a.GROUP_SEP,a.DECIMAL_SEP,2).replace(/\u00A4/g,d)}}function Jc(b){var a=b.NUMBER_FORMATS;return function(b,d){return Lc(b,a.PATTERNS[0],a.GROUP_SEP,a.DECIMAL_SEP,d)}}function Lc(b,a,c,d,e){if(null==b||!isFinite(b)||T(b))return"";var f=0>b;b=Math.abs(b);var g=b+"",h="",k=[],m=!1;if(-1!==g.indexOf("e")){var l=g.match(/([\d\.]+)e(-?)(\d+)/);l&&"-"==l[2]&&
l[3]>e+1?(g="0",b=0):(h=g,m=!0)}if(m)0<e&&(-1<b&&1>b)&&(h=b.toFixed(e));else{g=(g.split(Mc)[1]||"").length;F(e)&&(e=Math.min(Math.max(a.minFrac,g),a.maxFrac));b=+(Math.round(+(b.toString()+"e"+e)).toString()+"e"+-e);0===b&&(f=!1);b=(""+b).split(Mc);g=b[0];b=b[1]||"";var l=0,n=a.lgSize,q=a.gSize;if(g.length>=n+q)for(l=g.length-n,m=0;m<l;m++)0===(l-m)%q&&0!==m&&(h+=c),h+=g.charAt(m);for(m=l;m<g.length;m++)0===(g.length-m)%n&&0!==m&&(h+=c),h+=g.charAt(m);for(;b.length<e;)b+="0";e&&"0"!==e&&(h+=d+b.substr(0,
e))}k.push(f?a.negPre:a.posPre);k.push(h);k.push(f?a.negSuf:a.posSuf);return k.join("")}function Vb(b,a,c){var d="";0>b&&(d="-",b=-b);for(b=""+b;b.length<a;)b="0"+b;c&&(b=b.substr(b.length-a));return d+b}function Z(b,a,c,d){c=c||0;return function(e){e=e["get"+b]();if(0<c||e>-c)e+=c;0===e&&-12==c&&(e=12);return Vb(e,a,d)}}function vb(b,a){return function(c,d){var e=c["get"+b](),f=La(a?"SHORT"+b:b);return d[f][e]}}function Ic(b){function a(a){var b;if(b=a.match(c)){a=new Date(0);var f=0,g=0,h=b[8]?
a.setUTCFullYear:a.setFullYear,k=b[8]?a.setUTCHours:a.setHours;b[9]&&(f=U(b[9]+b[10]),g=U(b[9]+b[11]));h.call(a,U(b[1]),U(b[2])-1,U(b[3]));f=U(b[4]||0)-f;g=U(b[5]||0)-g;h=U(b[6]||0);b=Math.round(1E3*parseFloat("0."+(b[7]||0)));k.call(a,f,g,h,b)}return a}var c=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(c,e){var f="",g=[],h,k;e=e||"mediumDate";e=b.DATETIME_FORMATS[e]||e;G(c)&&(c=Ke.test(c)?U(c):a(c));jb(c)&&(c=new Date(c));
if(!va(c))return c;for(;e;)(k=Le.exec(e))?(g=g.concat(wa.call(k,1)),e=g.pop()):(g.push(e),e=null);r(g,function(a){h=Me[a];f+=h?h(c,b.DATETIME_FORMATS):a.replace(/(^'|'$)/g,"").replace(/''/g,"'")});return f}}function Ge(){return function(b){return oa(b,!0)}}function He(){return function(b,a){if(!L(b)&&!G(b))return b;a=Infinity===Math.abs(Number(a))?Number(a):U(a);if(G(b))return a?0<=a?b.slice(0,a):b.slice(a,b.length):"";var c=[],d,e;a>b.length?a=b.length:a<-b.length&&(a=-b.length);0<a?(d=0,e=a):(d=
b.length+a,e=b.length);for(;d<e;d++)c.push(b[d]);return c}}function Kc(b){return function(a,c,d){function e(a,b){return Wa(b)?function(b,c){return a(c,b)}:a}function f(a,b){var c=typeof a,d=typeof b;return c==d?(va(a)&&va(b)&&(a=a.valueOf(),b=b.valueOf()),"string"==c&&(a=a.toLowerCase(),b=b.toLowerCase()),a===b?0:a<b?-1:1):c<d?-1:1}if(!Sa(a))return a;c=L(c)?c:[c];0===c.length&&(c=["+"]);c=Uc(c,function(a){var c=!1,d=a||ga;if(G(a)){if("+"==a.charAt(0)||"-"==a.charAt(0))c="-"==a.charAt(0),a=a.substring(1);
if(""===a)return e(function(a,b){return f(a,b)},c);d=b(a);if(d.constant){var m=d();return e(function(a,b){return f(a[m],b[m])},c)}}return e(function(a,b){return f(d(a),d(b))},c)});return wa.call(a).sort(e(function(a,b){for(var d=0;d<c.length;d++){var e=c[d](a,b);if(0!==e)return e}return 0},d))}}function Aa(b){N(b)&&(b={link:b});b.restrict=b.restrict||"AC";return aa(b)}function Nc(b,a,c,d){function e(a,c){c=c?"-"+nb(c,"-"):"";d.setClass(b,(a?wb:xb)+c,(a?xb:wb)+c)}var f=this,g=b.parent().controller("form")||
yb,h=0,k=f.$error={},m=[];f.$name=a.name||a.ngForm;f.$dirty=!1;f.$pristine=!0;f.$valid=!0;f.$invalid=!1;g.$addControl(f);b.addClass(Ra);e(!0);f.$addControl=function(a){Ea(a.$name,"input");m.push(a);a.$name&&(f[a.$name]=a)};f.$removeControl=function(a){a.$name&&f[a.$name]===a&&delete f[a.$name];r(k,function(b,c){f.$setValidity(c,!0,a)});Ua(m,a)};f.$setValidity=function(a,b,c){var d=k[a];if(b)d&&(Ua(d,c),d.length||(h--,h||(e(b),f.$valid=!0,f.$invalid=!1),k[a]=!1,e(!0,a),g.$setValidity(a,!0,f)));else{h||
e(b);if(d){if(-1!=Ta(d,c))return}else k[a]=d=[],h++,e(!1,a),g.$setValidity(a,!1,f);d.push(c);f.$valid=!1;f.$invalid=!0}};f.$setDirty=function(){d.removeClass(b,Ra);d.addClass(b,zb);f.$dirty=!0;f.$pristine=!1;g.$setDirty()};f.$setPristine=function(){d.removeClass(b,zb);d.addClass(b,Ra);f.$dirty=!1;f.$pristine=!0;r(m,function(a){a.$setPristine()})}}function ua(b,a,c,d){b.$setValidity(a,c);return c?d:u}function Oc(b,a){var c,d;if(a)for(c=0;c<a.length;++c)if(d=a[c],b[d])return!0;return!1}function Ne(b,
a,c,d,e){T(e)&&(b.$$hasNativeValidators=!0,b.$parsers.push(function(f){if(b.$error[a]||Oc(e,d)||!Oc(e,c))return f;b.$setValidity(a,!1)}))}function Ab(b,a,c,d,e,f){var g=a.prop(Oe),h=a[0].placeholder,k={},m=x(a[0].type);d.$$validityState=g;if(!e.android){var l=!1;a.on("compositionstart",function(a){l=!0});a.on("compositionend",function(){l=!1;n()})}var n=function(e){if(!l){var f=a.val();if(R&&"input"===(e||k).type&&a[0].placeholder!==h)h=a[0].placeholder;else if("password"!==m&&Wa(c.ngTrim||"T")&&
(f=$(f)),e=g&&d.$$hasNativeValidators,d.$viewValue!==f||""===f&&e)b.$root.$$phase?d.$setViewValue(f):b.$apply(function(){d.$setViewValue(f)})}};if(e.hasEvent("input"))a.on("input",n);else{var q,p=function(){q||(q=f.defer(function(){n();q=null}))};a.on("keydown",function(a){a=a.keyCode;91===a||(15<a&&19>a||37<=a&&40>=a)||p()});if(e.hasEvent("paste"))a.on("paste cut",p)}a.on("change",n);d.$render=function(){a.val(d.$isEmpty(d.$viewValue)?"":d.$viewValue)};var s=c.ngPattern;s&&((e=s.match(/^\/(.*)\/([gim]*)$/))?
(s=RegExp(e[1],e[2]),e=function(a){return ua(d,"pattern",d.$isEmpty(a)||s.test(a),a)}):e=function(c){var e=b.$eval(s);if(!e||!e.test)throw z("ngPattern")("noregexp",s,e,ia(a));return ua(d,"pattern",d.$isEmpty(c)||e.test(c),c)},d.$formatters.push(e),d.$parsers.push(e));if(c.ngMinlength){var r=U(c.ngMinlength);e=function(a){return ua(d,"minlength",d.$isEmpty(a)||a.length>=r,a)};d.$parsers.push(e);d.$formatters.push(e)}if(c.ngMaxlength){var w=U(c.ngMaxlength);e=function(a){return ua(d,"maxlength",d.$isEmpty(a)||
a.length<=w,a)};d.$parsers.push(e);d.$formatters.push(e)}}function Wb(b,a){b="ngClass"+b;return["$animate",function(c){function d(a,b){var c=[],d=0;a:for(;d<a.length;d++){for(var e=a[d],l=0;l<b.length;l++)if(e==b[l])continue a;c.push(e)}return c}function e(a){if(!L(a)){if(G(a))return a.split(" ");if(T(a)){var b=[];r(a,function(a,c){a&&(b=b.concat(c.split(" ")))});return b}}return a}return{restrict:"AC",link:function(f,g,h){function k(a,b){var c=g.data("$classCounts")||{},d=[];r(a,function(a){if(0<
b||c[a])c[a]=(c[a]||0)+b,c[a]===+(0<b)&&d.push(a)});g.data("$classCounts",c);return d.join(" ")}function m(b){if(!0===a||f.$index%2===a){var m=e(b||[]);if(!l){var p=k(m,1);h.$addClass(p)}else if(!Ca(b,l)){var s=e(l),p=d(m,s),m=d(s,m),m=k(m,-1),p=k(p,1);0===p.length?c.removeClass(g,m):0===m.length?c.addClass(g,p):c.setClass(g,p,m)}}l=ha(b)}var l;f.$watch(h[b],m,!0);h.$observe("class",function(a){m(f.$eval(h[b]))});"ngClass"!==b&&f.$watch("$index",function(c,d){var g=c&1;if(g!==(d&1)){var l=e(f.$eval(h[b]));
g===a?(g=k(l,1),h.$addClass(g)):(g=k(l,-1),h.$removeClass(g))}})}}}]}var Oe="validity",x=function(b){return G(b)?b.toLowerCase():b},lb=Object.prototype.hasOwnProperty,La=function(b){return G(b)?b.toUpperCase():b},R,A,Fa,wa=[].slice,Pe=[].push,Ba=Object.prototype.toString,Va=z("ng"),Xa=W.angular||(W.angular={}),$a,Pa,na=["0","0","0"];R=U((/msie (\d+)/.exec(x(navigator.userAgent))||[])[1]);isNaN(R)&&(R=U((/trident\/.*; rv:(\d+)/.exec(x(navigator.userAgent))||[])[1]));v.$inject=[];ga.$inject=[];var L=
function(){return N(Array.isArray)?Array.isArray:function(b){return"[object Array]"===Ba.call(b)}}(),$=function(){return String.prototype.trim?function(b){return G(b)?b.trim():b}:function(b){return G(b)?b.replace(/^\s\s*/,"").replace(/\s\s*$/,""):b}}();Pa=9>R?function(b){b=b.nodeName?b:b[0];return b.scopeName&&"HTML"!=b.scopeName?La(b.scopeName+":"+b.nodeName):b.nodeName}:function(b){return b.nodeName?b.nodeName:b[0].nodeName};var Za=function(){if(D(Za.isActive_))return Za.isActive_;var b=!(!X.querySelector("[ng-csp]")&&
!X.querySelector("[data-ng-csp]"));if(!b)try{new Function("")}catch(a){b=!0}return Za.isActive_=b},Xc=/[A-Z]/g,$c={full:"1.2.28",major:1,minor:2,dot:28,codeName:"finnish-disembarkation"};S.expando="ng339";var cb=S.cache={},me=1,sb=W.document.addEventListener?function(b,a,c){b.addEventListener(a,c,!1)}:function(b,a,c){b.attachEvent("on"+a,c)},bb=W.document.removeEventListener?function(b,a,c){b.removeEventListener(a,c,!1)}:function(b,a,c){b.detachEvent("on"+a,c)};S._data=function(b){return this.cache[b[this.expando]]||
{}};var he=/([\:\-\_]+(.))/g,ie=/^moz([A-Z])/,Hb=z("jqLite"),je=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,Ib=/<|&#?\w+;/,ke=/<([\w:]+)/,le=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,da={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};da.optgroup=da.option;da.tbody=da.tfoot=da.colgroup=
da.caption=da.thead;da.th=da.td;var Oa=S.prototype={ready:function(b){function a(){c||(c=!0,b())}var c=!1;"complete"===X.readyState?setTimeout(a):(this.on("DOMContentLoaded",a),S(W).on("load",a))},toString:function(){var b=[];r(this,function(a){b.push(""+a)});return"["+b.join(", ")+"]"},eq:function(b){return 0<=b?A(this[b]):A(this[this.length+b])},length:0,push:Pe,sort:[].sort,splice:[].splice},rb={};r("multiple selected checked disabled readOnly required open".split(" "),function(b){rb[x(b)]=b});
var pc={};r("input select option textarea button form details".split(" "),function(b){pc[La(b)]=!0});r({data:Mb,removeData:Lb},function(b,a){S[a]=b});r({data:Mb,inheritedData:qb,scope:function(b){return A.data(b,"$scope")||qb(b.parentNode||b,["$isolateScope","$scope"])},isolateScope:function(b){return A.data(b,"$isolateScope")||A.data(b,"$isolateScopeNoTemplate")},controller:mc,injector:function(b){return qb(b,"$injector")},removeAttr:function(b,a){b.removeAttribute(a)},hasClass:Nb,css:function(b,
a,c){a=ab(a);if(D(c))b.style[a]=c;else{var d;8>=R&&(d=b.currentStyle&&b.currentStyle[a],""===d&&(d="auto"));d=d||b.style[a];8>=R&&(d=""===d?u:d);return d}},attr:function(b,a,c){var d=x(a);if(rb[d])if(D(c))c?(b[a]=!0,b.setAttribute(a,d)):(b[a]=!1,b.removeAttribute(d));else return b[a]||(b.attributes.getNamedItem(a)||v).specified?d:u;else if(D(c))b.setAttribute(a,c);else if(b.getAttribute)return b=b.getAttribute(a,2),null===b?u:b},prop:function(b,a,c){if(D(c))b[a]=c;else return b[a]},text:function(){function b(b,
d){var e=a[b.nodeType];if(F(d))return e?b[e]:"";b[e]=d}var a=[];9>R?(a[1]="innerText",a[3]="nodeValue"):a[1]=a[3]="textContent";b.$dv="";return b}(),val:function(b,a){if(F(a)){if("SELECT"===Pa(b)&&b.multiple){var c=[];r(b.options,function(a){a.selected&&c.push(a.value||a.text)});return 0===c.length?null:c}return b.value}b.value=a},html:function(b,a){if(F(a))return b.innerHTML;for(var c=0,d=b.childNodes;c<d.length;c++)Ma(d[c]);b.innerHTML=a},empty:nc},function(b,a){S.prototype[a]=function(a,d){var e,
f,g=this.length;if(b!==nc&&(2==b.length&&b!==Nb&&b!==mc?a:d)===u){if(T(a)){for(e=0;e<g;e++)if(b===Mb)b(this[e],a);else for(f in a)b(this[e],f,a[f]);return this}e=b.$dv;g=e===u?Math.min(g,1):g;for(f=0;f<g;f++){var h=b(this[f],a,d);e=e?e+h:h}return e}for(e=0;e<g;e++)b(this[e],a,d);return this}});r({removeData:Lb,dealoc:Ma,on:function a(c,d,e,f){if(D(f))throw Hb("onargs");var g=pa(c,"events"),h=pa(c,"handle");g||pa(c,"events",g={});h||pa(c,"handle",h=ne(c,g));r(d.split(" "),function(d){var f=g[d];if(!f){if("mouseenter"==
d||"mouseleave"==d){var l=X.body.contains||X.body.compareDocumentPosition?function(a,c){var d=9===a.nodeType?a.documentElement:a,e=c&&c.parentNode;return a===e||!!(e&&1===e.nodeType&&(d.contains?d.contains(e):a.compareDocumentPosition&&a.compareDocumentPosition(e)&16))}:function(a,c){if(c)for(;c=c.parentNode;)if(c===a)return!0;return!1};g[d]=[];a(c,{mouseleave:"mouseout",mouseenter:"mouseover"}[d],function(a){var c=a.relatedTarget;c&&(c===this||l(this,c))||h(a,d)})}else sb(c,d,h),g[d]=[];f=g[d]}f.push(e)})},
off:lc,one:function(a,c,d){a=A(a);a.on(c,function f(){a.off(c,d);a.off(c,f)});a.on(c,d)},replaceWith:function(a,c){var d,e=a.parentNode;Ma(a);r(new S(c),function(c){d?e.insertBefore(c,d.nextSibling):e.replaceChild(c,a);d=c})},children:function(a){var c=[];r(a.childNodes,function(a){1===a.nodeType&&c.push(a)});return c},contents:function(a){return a.contentDocument||a.childNodes||[]},append:function(a,c){r(new S(c),function(c){1!==a.nodeType&&11!==a.nodeType||a.appendChild(c)})},prepend:function(a,
c){if(1===a.nodeType){var d=a.firstChild;r(new S(c),function(c){a.insertBefore(c,d)})}},wrap:function(a,c){c=A(c)[0];var d=a.parentNode;d&&d.replaceChild(c,a);c.appendChild(a)},remove:function(a){Ma(a);var c=a.parentNode;c&&c.removeChild(a)},after:function(a,c){var d=a,e=a.parentNode;r(new S(c),function(a){e.insertBefore(a,d.nextSibling);d=a})},addClass:pb,removeClass:ob,toggleClass:function(a,c,d){c&&r(c.split(" "),function(c){var f=d;F(f)&&(f=!Nb(a,c));(f?pb:ob)(a,c)})},parent:function(a){return(a=
a.parentNode)&&11!==a.nodeType?a:null},next:function(a){if(a.nextElementSibling)return a.nextElementSibling;for(a=a.nextSibling;null!=a&&1!==a.nodeType;)a=a.nextSibling;return a},find:function(a,c){return a.getElementsByTagName?a.getElementsByTagName(c):[]},clone:Kb,triggerHandler:function(a,c,d){var e,f;e=c.type||c;var g=(pa(a,"events")||{})[e];g&&(e={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return!0===this.defaultPrevented},stopPropagation:v,type:e,target:a},
c.type&&(e=E(e,c)),c=ha(g),f=d?[e].concat(d):[e],r(c,function(c){c.apply(a,f)}))}},function(a,c){S.prototype[c]=function(c,e,f){for(var g,h=0;h<this.length;h++)F(g)?(g=a(this[h],c,e,f),D(g)&&(g=A(g))):Jb(g,a(this[h],c,e,f));return D(g)?g:this};S.prototype.bind=S.prototype.on;S.prototype.unbind=S.prototype.off});db.prototype={put:function(a,c){this[Na(a,this.nextUid)]=c},get:function(a){return this[Na(a,this.nextUid)]},remove:function(a){var c=this[a=Na(a,this.nextUid)];delete this[a];return c}};var pe=
/^function\s*[^\(]*\(\s*([^\)]*)\)/m,qe=/,/,re=/^\s*(_?)(\S+?)\1\s*$/,oe=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg,eb=z("$injector"),Qe=z("$animate"),Ld=["$provide",function(a){this.$$selectors={};this.register=function(c,d){var e=c+"-animation";if(c&&"."!=c.charAt(0))throw Qe("notcsel",c);this.$$selectors[c.substr(1)]=e;a.factory(e,d)};this.classNameFilter=function(a){1===arguments.length&&(this.$$classNameFilter=a instanceof RegExp?a:null);return this.$$classNameFilter};this.$get=["$timeout","$$asyncCallback",
function(a,d){return{enter:function(a,c,g,h){g?g.after(a):(c&&c[0]||(c=g.parent()),c.append(a));h&&d(h)},leave:function(a,c){a.remove();c&&d(c)},move:function(a,c,d,h){this.enter(a,c,d,h)},addClass:function(a,c,g){c=G(c)?c:L(c)?c.join(" "):"";r(a,function(a){pb(a,c)});g&&d(g)},removeClass:function(a,c,g){c=G(c)?c:L(c)?c.join(" "):"";r(a,function(a){ob(a,c)});g&&d(g)},setClass:function(a,c,g,h){r(a,function(a){pb(a,c);ob(a,g)});h&&d(h)},enabled:v}}]}],ja=z("$compile");gc.$inject=["$provide","$$sanitizeUriProvider"];
var we=/^(x[\:\-_]|data[\:\-_])/i,wc=z("$interpolate"),Re=/^([^\?#]*)(\?([^#]*))?(#(.*))?$/,ze={http:80,https:443,ftp:21},Sb=z("$location");Ac.prototype=Tb.prototype=zc.prototype={$$html5:!1,$$replace:!1,absUrl:tb("$$absUrl"),url:function(a){if(F(a))return this.$$url;a=Re.exec(a);a[1]&&this.path(decodeURIComponent(a[1]));(a[2]||a[1])&&this.search(a[3]||"");this.hash(a[5]||"");return this},protocol:tb("$$protocol"),host:tb("$$host"),port:tb("$$port"),path:Bc("$$path",function(a){a=null!==a?a.toString():
"";return"/"==a.charAt(0)?a:"/"+a}),search:function(a,c){switch(arguments.length){case 0:return this.$$search;case 1:if(G(a)||jb(a))a=a.toString(),this.$$search=cc(a);else if(T(a))r(a,function(c,e){null==c&&delete a[e]}),this.$$search=a;else throw Sb("isrcharg");break;default:F(c)||null===c?delete this.$$search[a]:this.$$search[a]=c}this.$$compose();return this},hash:Bc("$$hash",function(a){return null!==a?a.toString():""}),replace:function(){this.$$replace=!0;return this}};var la=z("$parse"),Ec=
{},ya,Se=Function.prototype.call,Te=Function.prototype.apply,Pc=Function.prototype.bind,hb={"null":function(){return null},"true":function(){return!0},"false":function(){return!1},undefined:v,"+":function(a,c,d,e){d=d(a,c);e=e(a,c);return D(d)?D(e)?d+e:d:D(e)?e:u},"-":function(a,c,d,e){d=d(a,c);e=e(a,c);return(D(d)?d:0)-(D(e)?e:0)},"*":function(a,c,d,e){return d(a,c)*e(a,c)},"/":function(a,c,d,e){return d(a,c)/e(a,c)},"%":function(a,c,d,e){return d(a,c)%e(a,c)},"^":function(a,c,d,e){return d(a,c)^
e(a,c)},"=":v,"===":function(a,c,d,e){return d(a,c)===e(a,c)},"!==":function(a,c,d,e){return d(a,c)!==e(a,c)},"==":function(a,c,d,e){return d(a,c)==e(a,c)},"!=":function(a,c,d,e){return d(a,c)!=e(a,c)},"<":function(a,c,d,e){return d(a,c)<e(a,c)},">":function(a,c,d,e){return d(a,c)>e(a,c)},"<=":function(a,c,d,e){return d(a,c)<=e(a,c)},">=":function(a,c,d,e){return d(a,c)>=e(a,c)},"&&":function(a,c,d,e){return d(a,c)&&e(a,c)},"||":function(a,c,d,e){return d(a,c)||e(a,c)},"&":function(a,c,d,e){return d(a,
c)&e(a,c)},"|":function(a,c,d,e){return e(a,c)(a,c,d(a,c))},"!":function(a,c,d){return!d(a,c)}},Ue={n:"\n",f:"\f",r:"\r",t:"\t",v:"\v","'":"'",'"':'"'},Ub=function(a){this.options=a};Ub.prototype={constructor:Ub,lex:function(a){this.text=a;this.index=0;this.ch=u;this.lastCh=":";for(this.tokens=[];this.index<this.text.length;){this.ch=this.text.charAt(this.index);if(this.is("\"'"))this.readString(this.ch);else if(this.isNumber(this.ch)||this.is(".")&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdent(this.ch))this.readIdent();
else if(this.is("(){}[].,;:?"))this.tokens.push({index:this.index,text:this.ch}),this.index++;else if(this.isWhitespace(this.ch)){this.index++;continue}else{a=this.ch+this.peek();var c=a+this.peek(2),d=hb[this.ch],e=hb[a],f=hb[c];f?(this.tokens.push({index:this.index,text:c,fn:f}),this.index+=3):e?(this.tokens.push({index:this.index,text:a,fn:e}),this.index+=2):d?(this.tokens.push({index:this.index,text:this.ch,fn:d}),this.index+=1):this.throwError("Unexpected next character ",this.index,this.index+
1)}this.lastCh=this.ch}return this.tokens},is:function(a){return-1!==a.indexOf(this.ch)},was:function(a){return-1!==a.indexOf(this.lastCh)},peek:function(a){a=a||1;return this.index+a<this.text.length?this.text.charAt(this.index+a):!1},isNumber:function(a){return"0"<=a&&"9">=a},isWhitespace:function(a){return" "===a||"\r"===a||"\t"===a||"\n"===a||"\v"===a||"\u00a0"===a},isIdent:function(a){return"a"<=a&&"z">=a||"A"<=a&&"Z">=a||"_"===a||"$"===a},isExpOperator:function(a){return"-"===a||"+"===a||this.isNumber(a)},
throwError:function(a,c,d){d=d||this.index;c=D(c)?"s "+c+"-"+this.index+" ["+this.text.substring(c,d)+"]":" "+d;throw la("lexerr",a,c,this.text);},readNumber:function(){for(var a="",c=this.index;this.index<this.text.length;){var d=x(this.text.charAt(this.index));if("."==d||this.isNumber(d))a+=d;else{var e=this.peek();if("e"==d&&this.isExpOperator(e))a+=d;else if(this.isExpOperator(d)&&e&&this.isNumber(e)&&"e"==a.charAt(a.length-1))a+=d;else if(!this.isExpOperator(d)||e&&this.isNumber(e)||"e"!=a.charAt(a.length-
1))break;else this.throwError("Invalid exponent")}this.index++}a*=1;this.tokens.push({index:c,text:a,literal:!0,constant:!0,fn:function(){return a}})},readIdent:function(){for(var a=this,c="",d=this.index,e,f,g,h;this.index<this.text.length;){h=this.text.charAt(this.index);if("."===h||this.isIdent(h)||this.isNumber(h))"."===h&&(e=this.index),c+=h;else break;this.index++}if(e)for(f=this.index;f<this.text.length;){h=this.text.charAt(f);if("("===h){g=c.substr(e-d+1);c=c.substr(0,e-d);this.index=f;break}if(this.isWhitespace(h))f++;
else break}d={index:d,text:c};if(hb.hasOwnProperty(c))d.fn=hb[c],d.literal=!0,d.constant=!0;else{var k=Dc(c,this.options,this.text);d.fn=E(function(a,c){return k(a,c)},{assign:function(d,e){return ub(d,c,e,a.text,a.options)}})}this.tokens.push(d);g&&(this.tokens.push({index:e,text:"."}),this.tokens.push({index:e+1,text:g}))},readString:function(a){var c=this.index;this.index++;for(var d="",e=a,f=!1;this.index<this.text.length;){var g=this.text.charAt(this.index),e=e+g;if(f)"u"===g?(f=this.text.substring(this.index+
1,this.index+5),f.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+f+"]"),this.index+=4,d+=String.fromCharCode(parseInt(f,16))):d+=Ue[g]||g,f=!1;else if("\\"===g)f=!0;else{if(g===a){this.index++;this.tokens.push({index:c,text:e,string:d,literal:!0,constant:!0,fn:function(){return d}});return}d+=g}this.index++}this.throwError("Unterminated quote",c)}};var gb=function(a,c,d){this.lexer=a;this.$filter=c;this.options=d};gb.ZERO=E(function(){return 0},{constant:!0});gb.prototype={constructor:gb,
parse:function(a){this.text=a;this.tokens=this.lexer.lex(a);a=this.statements();0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]);a.literal=!!a.literal;a.constant=!!a.constant;return a},primary:function(){var a;if(this.expect("("))a=this.filterChain(),this.consume(")");else if(this.expect("["))a=this.arrayDeclaration();else if(this.expect("{"))a=this.object();else{var c=this.expect();(a=c.fn)||this.throwError("not a primary expression",c);a.literal=!!c.literal;a.constant=
!!c.constant}for(var d;c=this.expect("(","[",".");)"("===c.text?(a=this.functionCall(a,d),d=null):"["===c.text?(d=a,a=this.objectIndex(a)):"."===c.text?(d=a,a=this.fieldAccess(a)):this.throwError("IMPOSSIBLE");return a},throwError:function(a,c){throw la("syntax",c.text,a,c.index+1,this.text,this.text.substring(c.index));},peekToken:function(){if(0===this.tokens.length)throw la("ueoe",this.text);return this.tokens[0]},peek:function(a,c,d,e){if(0<this.tokens.length){var f=this.tokens[0],g=f.text;if(g===
a||g===c||g===d||g===e||!(a||c||d||e))return f}return!1},expect:function(a,c,d,e){return(a=this.peek(a,c,d,e))?(this.tokens.shift(),a):!1},consume:function(a){this.expect(a)||this.throwError("is unexpected, expecting ["+a+"]",this.peek())},unaryFn:function(a,c){return E(function(d,e){return a(d,e,c)},{constant:c.constant})},ternaryFn:function(a,c,d){return E(function(e,f){return a(e,f)?c(e,f):d(e,f)},{constant:a.constant&&c.constant&&d.constant})},binaryFn:function(a,c,d){return E(function(e,f){return c(e,
f,a,d)},{constant:a.constant&&d.constant})},statements:function(){for(var a=[];;)if(0<this.tokens.length&&!this.peek("}",")",";","]")&&a.push(this.filterChain()),!this.expect(";"))return 1===a.length?a[0]:function(c,d){for(var e,f=0;f<a.length;f++){var g=a[f];g&&(e=g(c,d))}return e}},filterChain:function(){for(var a=this.expression(),c;;)if(c=this.expect("|"))a=this.binaryFn(a,c.fn,this.filter());else return a},filter:function(){for(var a=this.expect(),c=this.$filter(a.text),d=[];;)if(a=this.expect(":"))d.push(this.expression());
else{var e=function(a,e,h){h=[h];for(var k=0;k<d.length;k++)h.push(d[k](a,e));return c.apply(a,h)};return function(){return e}}},expression:function(){return this.assignment()},assignment:function(){var a=this.ternary(),c,d;return(d=this.expect("="))?(a.assign||this.throwError("implies assignment but ["+this.text.substring(0,d.index)+"] can not be assigned to",d),c=this.ternary(),function(d,f){return a.assign(d,c(d,f),f)}):a},ternary:function(){var a=this.logicalOR(),c,d;if(this.expect("?")){c=this.assignment();
if(d=this.expect(":"))return this.ternaryFn(a,c,this.assignment());this.throwError("expected :",d)}else return a},logicalOR:function(){for(var a=this.logicalAND(),c;;)if(c=this.expect("||"))a=this.binaryFn(a,c.fn,this.logicalAND());else return a},logicalAND:function(){var a=this.equality(),c;if(c=this.expect("&&"))a=this.binaryFn(a,c.fn,this.logicalAND());return a},equality:function(){var a=this.relational(),c;if(c=this.expect("==","!=","===","!=="))a=this.binaryFn(a,c.fn,this.equality());return a},
relational:function(){var a=this.additive(),c;if(c=this.expect("<",">","<=",">="))a=this.binaryFn(a,c.fn,this.relational());return a},additive:function(){for(var a=this.multiplicative(),c;c=this.expect("+","-");)a=this.binaryFn(a,c.fn,this.multiplicative());return a},multiplicative:function(){for(var a=this.unary(),c;c=this.expect("*","/","%");)a=this.binaryFn(a,c.fn,this.unary());return a},unary:function(){var a;return this.expect("+")?this.primary():(a=this.expect("-"))?this.binaryFn(gb.ZERO,a.fn,
this.unary()):(a=this.expect("!"))?this.unaryFn(a.fn,this.unary()):this.primary()},fieldAccess:function(a){var c=this,d=this.expect().text,e=Dc(d,this.options,this.text);return E(function(c,d,h){return e(h||a(c,d))},{assign:function(e,g,h){(h=a(e,h))||a.assign(e,h={});return ub(h,d,g,c.text,c.options)}})},objectIndex:function(a){var c=this,d=this.expression();this.consume("]");return E(function(e,f){var g=a(e,f),h=d(e,f),k;ka(h,c.text);if(!g)return u;(g=ma(g[h],c.text))&&(g.then&&c.options.unwrapPromises)&&
(k=g,"$$v"in g||(k.$$v=u,k.then(function(a){k.$$v=a})),g=g.$$v);return g},{assign:function(e,f,g){var h=ka(d(e,g),c.text);(g=ma(a(e,g),c.text))||a.assign(e,g={});return g[h]=f}})},functionCall:function(a,c){var d=[];if(")"!==this.peekToken().text){do d.push(this.expression());while(this.expect(","))}this.consume(")");var e=this;return function(f,g){for(var h=[],k=c?c(f,g):f,m=0;m<d.length;m++)h.push(ma(d[m](f,g),e.text));m=a(f,g,k)||v;ma(k,e.text);var l=e.text;if(m){if(m.constructor===m)throw la("isecfn",
l);if(m===Se||m===Te||Pc&&m===Pc)throw la("isecff",l);}h=m.apply?m.apply(k,h):m(h[0],h[1],h[2],h[3],h[4]);return ma(h,e.text)}},arrayDeclaration:function(){var a=[],c=!0;if("]"!==this.peekToken().text){do{if(this.peek("]"))break;var d=this.expression();a.push(d);d.constant||(c=!1)}while(this.expect(","))}this.consume("]");return E(function(c,d){for(var g=[],h=0;h<a.length;h++)g.push(a[h](c,d));return g},{literal:!0,constant:c})},object:function(){var a=[],c=!0;if("}"!==this.peekToken().text){do{if(this.peek("}"))break;
var d=this.expect(),d=d.string||d.text;this.consume(":");var e=this.expression();a.push({key:d,value:e});e.constant||(c=!1)}while(this.expect(","))}this.consume("}");return E(function(c,d){for(var e={},k=0;k<a.length;k++){var m=a[k];e[m.key]=m.value(c,d)}return e},{literal:!0,constant:c})}};var Ce={},Be={},za=z("$sce"),fa={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},Y=X.createElement("a"),Gc=xa(W.location.href,!0);kc.$inject=["$provide"];Hc.$inject=["$locale"];Jc.$inject=["$locale"];
var Mc=".",Me={yyyy:Z("FullYear",4),yy:Z("FullYear",2,0,!0),y:Z("FullYear",1),MMMM:vb("Month"),MMM:vb("Month",!0),MM:Z("Month",2,1),M:Z("Month",1,1),dd:Z("Date",2),d:Z("Date",1),HH:Z("Hours",2),H:Z("Hours",1),hh:Z("Hours",2,-12),h:Z("Hours",1,-12),mm:Z("Minutes",2),m:Z("Minutes",1),ss:Z("Seconds",2),s:Z("Seconds",1),sss:Z("Milliseconds",3),EEEE:vb("Day"),EEE:vb("Day",!0),a:function(a,c){return 12>a.getHours()?c.AMPMS[0]:c.AMPMS[1]},Z:function(a){a=-1*a.getTimezoneOffset();return a=(0<=a?"+":"")+(Vb(Math[0<
a?"floor":"ceil"](a/60),2)+Vb(Math.abs(a%60),2))}},Le=/((?:[^yMdHhmsaZE']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z))(.*)/,Ke=/^\-?\d+$/;Ic.$inject=["$locale"];var Ie=aa(x),Je=aa(La);Kc.$inject=["$parse"];var cd=aa({restrict:"E",compile:function(a,c){8>=R&&(c.href||c.name||c.$set("href",""),a.append(X.createComment("IE fix")));if(!c.href&&!c.xlinkHref&&!c.name)return function(a,c){var f="[object SVGAnimatedString]"===Ba.call(c.prop("href"))?"xlink:href":"href";c.on("click",function(a){c.attr(f)||
a.preventDefault()})}}}),Fb={};r(rb,function(a,c){if("multiple"!=a){var d=qa("ng-"+c);Fb[d]=function(){return{priority:100,link:function(a,f,g){a.$watch(g[d],function(a){g.$set(c,!!a)})}}}}});r(["src","srcset","href"],function(a){var c=qa("ng-"+a);Fb[c]=function(){return{priority:99,link:function(d,e,f){var g=a,h=a;"href"===a&&"[object SVGAnimatedString]"===Ba.call(e.prop("href"))&&(h="xlinkHref",f.$attr[h]="xlink:href",g=null);f.$observe(c,function(c){c?(f.$set(h,c),R&&g&&e.prop(g,f[h])):"href"===
a&&f.$set(h,null)})}}}});var yb={$addControl:v,$removeControl:v,$setValidity:v,$setDirty:v,$setPristine:v};Nc.$inject=["$element","$attrs","$scope","$animate"];var Qc=function(a){return["$timeout",function(c){return{name:"form",restrict:a?"EAC":"E",controller:Nc,compile:function(){return{pre:function(a,e,f,g){if(!f.action){var h=function(a){a.preventDefault?a.preventDefault():a.returnValue=!1};sb(e[0],"submit",h);e.on("$destroy",function(){c(function(){bb(e[0],"submit",h)},0,!1)})}var k=e.parent().controller("form"),
m=f.name||f.ngForm;m&&ub(a,m,g,m);if(k)e.on("$destroy",function(){k.$removeControl(g);m&&ub(a,m,u,m);E(g,yb)})}}}}}]},dd=Qc(),qd=Qc(!0),Ve=/^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/,We=/^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i,Xe=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/,Rc={text:Ab,number:function(a,c,d,e,f,g){Ab(a,c,d,e,f,g);e.$parsers.push(function(a){var c=e.$isEmpty(a);if(c||Xe.test(a))return e.$setValidity("number",
!0),""===a?null:c?a:parseFloat(a);e.$setValidity("number",!1);return u});Ne(e,"number",Ye,null,e.$$validityState);e.$formatters.push(function(a){return e.$isEmpty(a)?"":""+a});d.min&&(a=function(a){var c=parseFloat(d.min);return ua(e,"min",e.$isEmpty(a)||a>=c,a)},e.$parsers.push(a),e.$formatters.push(a));d.max&&(a=function(a){var c=parseFloat(d.max);return ua(e,"max",e.$isEmpty(a)||a<=c,a)},e.$parsers.push(a),e.$formatters.push(a));e.$formatters.push(function(a){return ua(e,"number",e.$isEmpty(a)||
jb(a),a)})},url:function(a,c,d,e,f,g){Ab(a,c,d,e,f,g);a=function(a){return ua(e,"url",e.$isEmpty(a)||Ve.test(a),a)};e.$formatters.push(a);e.$parsers.push(a)},email:function(a,c,d,e,f,g){Ab(a,c,d,e,f,g);a=function(a){return ua(e,"email",e.$isEmpty(a)||We.test(a),a)};e.$formatters.push(a);e.$parsers.push(a)},radio:function(a,c,d,e){F(d.name)&&c.attr("name",ib());c.on("click",function(){c[0].checked&&a.$apply(function(){e.$setViewValue(d.value)})});e.$render=function(){c[0].checked=d.value==e.$viewValue};
d.$observe("value",e.$render)},checkbox:function(a,c,d,e){var f=d.ngTrueValue,g=d.ngFalseValue;G(f)||(f=!0);G(g)||(g=!1);c.on("click",function(){a.$apply(function(){e.$setViewValue(c[0].checked)})});e.$render=function(){c[0].checked=e.$viewValue};e.$isEmpty=function(a){return a!==f};e.$formatters.push(function(a){return a===f});e.$parsers.push(function(a){return a?f:g})},hidden:v,button:v,submit:v,reset:v,file:v},Ye=["badInput"],hc=["$browser","$sniffer",function(a,c){return{restrict:"E",require:"?ngModel",
link:function(d,e,f,g){g&&(Rc[x(f.type)]||Rc.text)(d,e,f,g,c,a)}}}],wb="ng-valid",xb="ng-invalid",Ra="ng-pristine",zb="ng-dirty",Ze=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate",function(a,c,d,e,f,g){function h(a,c){c=c?"-"+nb(c,"-"):"";g.removeClass(e,(a?xb:wb)+c);g.addClass(e,(a?wb:xb)+c)}this.$modelValue=this.$viewValue=Number.NaN;this.$parsers=[];this.$formatters=[];this.$viewChangeListeners=[];this.$pristine=!0;this.$dirty=!1;this.$valid=!0;this.$invalid=!1;this.$name=
d.name;var k=f(d.ngModel),m=k.assign;if(!m)throw z("ngModel")("nonassign",d.ngModel,ia(e));this.$render=v;this.$isEmpty=function(a){return F(a)||""===a||null===a||a!==a};var l=e.inheritedData("$formController")||yb,n=0,q=this.$error={};e.addClass(Ra);h(!0);this.$setValidity=function(a,c){q[a]!==!c&&(c?(q[a]&&n--,n||(h(!0),this.$valid=!0,this.$invalid=!1)):(h(!1),this.$invalid=!0,this.$valid=!1,n++),q[a]=!c,h(c,a),l.$setValidity(a,c,this))};this.$setPristine=function(){this.$dirty=!1;this.$pristine=
!0;g.removeClass(e,zb);g.addClass(e,Ra)};this.$setViewValue=function(d){this.$viewValue=d;this.$pristine&&(this.$dirty=!0,this.$pristine=!1,g.removeClass(e,Ra),g.addClass(e,zb),l.$setDirty());r(this.$parsers,function(a){d=a(d)});this.$modelValue!==d&&(this.$modelValue=d,m(a,d),r(this.$viewChangeListeners,function(a){try{a()}catch(d){c(d)}}))};var p=this;a.$watch(function(){var c=k(a);if(p.$modelValue!==c){var d=p.$formatters,e=d.length;for(p.$modelValue=c;e--;)c=d[e](c);p.$viewValue!==c&&(p.$viewValue=
c,p.$render())}return c})}],Fd=function(){return{require:["ngModel","^?form"],controller:Ze,link:function(a,c,d,e){var f=e[0],g=e[1]||yb;g.$addControl(f);a.$on("$destroy",function(){g.$removeControl(f)})}}},Hd=aa({require:"ngModel",link:function(a,c,d,e){e.$viewChangeListeners.push(function(){a.$eval(d.ngChange)})}}),ic=function(){return{require:"?ngModel",link:function(a,c,d,e){if(e){d.required=!0;var f=function(a){if(d.required&&e.$isEmpty(a))e.$setValidity("required",!1);else return e.$setValidity("required",
!0),a};e.$formatters.push(f);e.$parsers.unshift(f);d.$observe("required",function(){f(e.$viewValue)})}}}},Gd=function(){return{require:"ngModel",link:function(a,c,d,e){var f=(a=/\/(.*)\//.exec(d.ngList))&&RegExp(a[1])||d.ngList||",";e.$parsers.push(function(a){if(!F(a)){var c=[];a&&r(a.split(f),function(a){a&&c.push($(a))});return c}});e.$formatters.push(function(a){return L(a)?a.join(", "):u});e.$isEmpty=function(a){return!a||!a.length}}}},$e=/^(true|false|\d+)$/,Id=function(){return{priority:100,
compile:function(a,c){return $e.test(c.ngValue)?function(a,c,f){f.$set("value",a.$eval(f.ngValue))}:function(a,c,f){a.$watch(f.ngValue,function(a){f.$set("value",a)})}}}},id=Aa({compile:function(a){a.addClass("ng-binding");return function(a,d,e){d.data("$binding",e.ngBind);a.$watch(e.ngBind,function(a){d.text(a==u?"":a)})}}}),kd=["$interpolate",function(a){return function(c,d,e){c=a(d.attr(e.$attr.ngBindTemplate));d.addClass("ng-binding").data("$binding",c);e.$observe("ngBindTemplate",function(a){d.text(a)})}}],
jd=["$sce","$parse",function(a,c){return{compile:function(d){d.addClass("ng-binding");return function(d,f,g){f.data("$binding",g.ngBindHtml);var h=c(g.ngBindHtml);d.$watch(function(){return(h(d)||"").toString()},function(c){f.html(a.getTrustedHtml(h(d))||"")})}}}}],ld=Wb("",!0),nd=Wb("Odd",0),md=Wb("Even",1),od=Aa({compile:function(a,c){c.$set("ngCloak",u);a.removeClass("ng-cloak")}}),pd=[function(){return{scope:!0,controller:"@",priority:500}}],jc={},af={blur:!0,focus:!0};r("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),
function(a){var c=qa("ng-"+a);jc[c]=["$parse","$rootScope",function(d,e){return{compile:function(f,g){var h=d(g[c],!0);return function(c,d){d.on(a,function(d){var f=function(){h(c,{$event:d})};af[a]&&e.$$phase?c.$evalAsync(f):c.$apply(f)})}}}}]});var sd=["$animate",function(a){return{transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(c,d,e,f,g){var h,k,m;c.$watch(e.ngIf,function(f){Wa(f)?k||(k=c.$new(),g(k,function(c){c[c.length++]=X.createComment(" end ngIf: "+e.ngIf+
" ");h={clone:c};a.enter(c,d.parent(),d)})):(m&&(m.remove(),m=null),k&&(k.$destroy(),k=null),h&&(m=Eb(h.clone),a.leave(m,function(){m=null}),h=null))})}}}],td=["$http","$templateCache","$anchorScroll","$animate","$sce",function(a,c,d,e,f){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:Xa.noop,compile:function(g,h){var k=h.ngInclude||h.src,m=h.onload||"",l=h.autoscroll;return function(g,h,p,r,J){var w=0,t,y,u,B=function(){y&&(y.remove(),y=null);t&&(t.$destroy(),t=null);
u&&(e.leave(u,function(){y=null}),y=u,u=null)};g.$watch(f.parseAsResourceUrl(k),function(f){var k=function(){!D(l)||l&&!g.$eval(l)||d()},p=++w;f?(a.get(f,{cache:c}).success(function(a){if(p===w){var c=g.$new();r.template=a;a=J(c,function(a){B();e.enter(a,null,h,k)});t=c;u=a;t.$emit("$includeContentLoaded");g.$eval(m)}}).error(function(){p===w&&B()}),g.$emit("$includeContentRequested")):(B(),r.template=null)})}}}}],Jd=["$compile",function(a){return{restrict:"ECA",priority:-400,require:"ngInclude",
link:function(c,d,e,f){d.html(f.template);a(d.contents())(c)}}}],ud=Aa({priority:450,compile:function(){return{pre:function(a,c,d){a.$eval(d.ngInit)}}}}),vd=Aa({terminal:!0,priority:1E3}),wd=["$locale","$interpolate",function(a,c){var d=/{}/g;return{restrict:"EA",link:function(e,f,g){var h=g.count,k=g.$attr.when&&f.attr(g.$attr.when),m=g.offset||0,l=e.$eval(k)||{},n={},q=c.startSymbol(),p=c.endSymbol(),s=/^when(Minus)?(.+)$/;r(g,function(a,c){s.test(c)&&(l[x(c.replace("when","").replace("Minus","-"))]=
f.attr(g.$attr[c]))});r(l,function(a,e){n[e]=c(a.replace(d,q+h+"-"+m+p))});e.$watch(function(){var c=parseFloat(e.$eval(h));if(isNaN(c))return"";c in l||(c=a.pluralCat(c-m));return n[c](e,f,!0)},function(a){f.text(a)})}}}],xd=["$parse","$animate",function(a,c){var d=z("ngRepeat");return{transclude:"element",priority:1E3,terminal:!0,$$tlb:!0,link:function(e,f,g,h,k){var m=g.ngRepeat,l=m.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?\s*$/),n,q,p,s,u,w,t={$id:Na};if(!l)throw d("iexp",
m);g=l[1];h=l[2];(l=l[3])?(n=a(l),q=function(a,c,d){w&&(t[w]=a);t[u]=c;t.$index=d;return n(e,t)}):(p=function(a,c){return Na(c)},s=function(a){return a});l=g.match(/^(?:([\$\w]+)|\(([\$\w]+)\s*,\s*([\$\w]+)\))$/);if(!l)throw d("iidexp",g);u=l[3]||l[1];w=l[2];var y={};e.$watchCollection(h,function(a){var g,h,l=f[0],n,t={},D,C,I,x,G,v,z,F=[];if(Sa(a))v=a,G=q||p;else{G=q||s;v=[];for(I in a)a.hasOwnProperty(I)&&"$"!=I.charAt(0)&&v.push(I);v.sort()}D=v.length;h=F.length=v.length;for(g=0;g<h;g++)if(I=a===
v?g:v[g],x=a[I],n=G(I,x,g),Ea(n,"`track by` id"),y.hasOwnProperty(n))z=y[n],delete y[n],t[n]=z,F[g]=z;else{if(t.hasOwnProperty(n))throw r(F,function(a){a&&a.scope&&(y[a.id]=a)}),d("dupes",m,n,oa(x));F[g]={id:n};t[n]=!1}for(I in y)y.hasOwnProperty(I)&&(z=y[I],g=Eb(z.clone),c.leave(g),r(g,function(a){a.$$NG_REMOVED=!0}),z.scope.$destroy());g=0;for(h=v.length;g<h;g++){I=a===v?g:v[g];x=a[I];z=F[g];F[g-1]&&(l=F[g-1].clone[F[g-1].clone.length-1]);if(z.scope){C=z.scope;n=l;do n=n.nextSibling;while(n&&n.$$NG_REMOVED);
z.clone[0]!=n&&c.move(Eb(z.clone),null,A(l));l=z.clone[z.clone.length-1]}else C=e.$new();C[u]=x;w&&(C[w]=I);C.$index=g;C.$first=0===g;C.$last=g===D-1;C.$middle=!(C.$first||C.$last);C.$odd=!(C.$even=0===(g&1));z.scope||k(C,function(a){a[a.length++]=X.createComment(" end ngRepeat: "+m+" ");c.enter(a,null,A(l));l=a;z.scope=C;z.clone=a;t[z.id]=z})}y=t})}}}],yd=["$animate",function(a){return function(c,d,e){c.$watch(e.ngShow,function(c){a[Wa(c)?"removeClass":"addClass"](d,"ng-hide")})}}],rd=["$animate",
function(a){return function(c,d,e){c.$watch(e.ngHide,function(c){a[Wa(c)?"addClass":"removeClass"](d,"ng-hide")})}}],zd=Aa(function(a,c,d){a.$watch(d.ngStyle,function(a,d){d&&a!==d&&r(d,function(a,d){c.css(d,"")});a&&c.css(a)},!0)}),Ad=["$animate",function(a){return{restrict:"EA",require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(c,d,e,f){var g=[],h=[],k=[],m=[];c.$watch(e.ngSwitch||e.on,function(d){var n,q;n=0;for(q=k.length;n<q;++n)k[n].remove();n=k.length=0;for(q=
m.length;n<q;++n){var p=h[n];m[n].$destroy();k[n]=p;a.leave(p,function(){k.splice(n,1)})}h.length=0;m.length=0;if(g=f.cases["!"+d]||f.cases["?"])c.$eval(e.change),r(g,function(d){var e=c.$new();m.push(e);d.transclude(e,function(c){var e=d.element;h.push(c);a.enter(c,e.parent(),e)})})})}}}],Bd=Aa({transclude:"element",priority:800,require:"^ngSwitch",link:function(a,c,d,e,f){e.cases["!"+d.ngSwitchWhen]=e.cases["!"+d.ngSwitchWhen]||[];e.cases["!"+d.ngSwitchWhen].push({transclude:f,element:c})}}),Cd=
Aa({transclude:"element",priority:800,require:"^ngSwitch",link:function(a,c,d,e,f){e.cases["?"]=e.cases["?"]||[];e.cases["?"].push({transclude:f,element:c})}}),Ed=Aa({link:function(a,c,d,e,f){if(!f)throw z("ngTransclude")("orphan",ia(c));f(function(a){c.empty();c.append(a)})}}),ed=["$templateCache",function(a){return{restrict:"E",terminal:!0,compile:function(c,d){"text/ng-template"==d.type&&a.put(d.id,c[0].text)}}}],bf=z("ngOptions"),Dd=aa({terminal:!0}),fd=["$compile","$parse",function(a,c){var d=
/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,e={$setViewValue:v};return{restrict:"E",require:["select","?ngModel"],controller:["$element","$scope","$attrs",function(a,c,d){var k=this,m={},l=e,n;k.databound=d.ngModel;k.init=function(a,c,d){l=a;n=d};k.addOption=function(c){Ea(c,'"option value"');m[c]=!0;l.$viewValue==c&&(a.val(c),n.parent()&&n.remove())};
k.removeOption=function(a){this.hasOption(a)&&(delete m[a],l.$viewValue==a&&this.renderUnknownOption(a))};k.renderUnknownOption=function(c){c="? "+Na(c)+" ?";n.val(c);a.prepend(n);a.val(c);n.prop("selected",!0)};k.hasOption=function(a){return m.hasOwnProperty(a)};c.$on("$destroy",function(){k.renderUnknownOption=v})}],link:function(e,g,h,k){function m(a,c,d,e){d.$render=function(){var a=d.$viewValue;e.hasOption(a)?(x.parent()&&x.remove(),c.val(a),""===a&&w.prop("selected",!0)):F(a)&&w?c.val(""):e.renderUnknownOption(a)};
c.on("change",function(){a.$apply(function(){x.parent()&&x.remove();d.$setViewValue(c.val())})})}function l(a,c,d){var e;d.$render=function(){var a=new db(d.$viewValue);r(c.find("option"),function(c){c.selected=D(a.get(c.value))})};a.$watch(function(){Ca(e,d.$viewValue)||(e=ha(d.$viewValue),d.$render())});c.on("change",function(){a.$apply(function(){var a=[];r(c.find("option"),function(c){c.selected&&a.push(c.value)});d.$setViewValue(a)})})}function n(e,f,g){function h(){var a={"":[]},c=[""],d,k,
s,u,v;s=g.$modelValue;u=A(e)||[];var F=n?Xb(u):u,G,Q,C;Q={};C=!1;if(p)if(k=g.$modelValue,w&&L(k))for(C=new db([]),d={},v=0;v<k.length;v++)d[m]=k[v],C.put(w(e,d),k[v]);else C=new db(k);v=C;var E,K;for(C=0;G=F.length,C<G;C++){k=C;if(n){k=F[C];if("$"===k.charAt(0))continue;Q[n]=k}Q[m]=u[k];d=r(e,Q)||"";(k=a[d])||(k=a[d]=[],c.push(d));p?d=D(v.remove(w?w(e,Q):x(e,Q))):(w?(d={},d[m]=s,d=w(e,d)===w(e,Q)):d=s===x(e,Q),v=v||d);E=l(e,Q);E=D(E)?E:"";k.push({id:w?w(e,Q):n?F[C]:C,label:E,selected:d})}p||(z||null===
s?a[""].unshift({id:"",label:"",selected:!v}):v||a[""].unshift({id:"?",label:"",selected:!0}));Q=0;for(F=c.length;Q<F;Q++){d=c[Q];k=a[d];B.length<=Q?(s={element:y.clone().attr("label",d),label:k.label},u=[s],B.push(u),f.append(s.element)):(u=B[Q],s=u[0],s.label!=d&&s.element.attr("label",s.label=d));E=null;C=0;for(G=k.length;C<G;C++)d=k[C],(v=u[C+1])?(E=v.element,v.label!==d.label&&(E.text(v.label=d.label),E.prop("label",v.label)),v.id!==d.id&&E.val(v.id=d.id),E[0].selected!==d.selected&&(E.prop("selected",
v.selected=d.selected),R&&E.prop("selected",v.selected))):(""===d.id&&z?K=z:(K=t.clone()).val(d.id).prop("selected",d.selected).attr("selected",d.selected).prop("label",d.label).text(d.label),u.push({element:K,label:d.label,id:d.id,selected:d.selected}),q.addOption(d.label,K),E?E.after(K):s.element.append(K),E=K);for(C++;u.length>C;)d=u.pop(),q.removeOption(d.label),d.element.remove()}for(;B.length>Q;)B.pop()[0].element.remove()}var k;if(!(k=s.match(d)))throw bf("iexp",s,ia(f));var l=c(k[2]||k[1]),
m=k[4]||k[6],n=k[5],r=c(k[3]||""),x=c(k[2]?k[1]:m),A=c(k[7]),w=k[8]?c(k[8]):null,B=[[{element:f,label:""}]];z&&(a(z)(e),z.removeClass("ng-scope"),z.remove());f.empty();f.on("change",function(){e.$apply(function(){var a,c=A(e)||[],d={},k,l,q,r,s,t,v;if(p)for(l=[],r=0,t=B.length;r<t;r++)for(a=B[r],q=1,s=a.length;q<s;q++){if((k=a[q].element)[0].selected){k=k.val();n&&(d[n]=k);if(w)for(v=0;v<c.length&&(d[m]=c[v],w(e,d)!=k);v++);else d[m]=c[k];l.push(x(e,d))}}else if(k=f.val(),"?"==k)l=u;else if(""===
k)l=null;else if(w)for(v=0;v<c.length;v++){if(d[m]=c[v],w(e,d)==k){l=x(e,d);break}}else d[m]=c[k],n&&(d[n]=k),l=x(e,d);g.$setViewValue(l);h()})});g.$render=h;e.$watchCollection(A,h);e.$watchCollection(function(){var a={},c=A(e);if(c){for(var d=Array(c.length),f=0,g=c.length;f<g;f++)a[m]=c[f],d[f]=l(e,a);return d}},h);p&&e.$watchCollection(function(){return g.$modelValue},h)}if(k[1]){var q=k[0];k=k[1];var p=h.multiple,s=h.ngOptions,z=!1,w,t=A(X.createElement("option")),y=A(X.createElement("optgroup")),
x=t.clone();h=0;for(var B=g.children(),v=B.length;h<v;h++)if(""===B[h].value){w=z=B.eq(h);break}q.init(k,z,x);p&&(k.$isEmpty=function(a){return!a||0===a.length});s?n(e,g,k):p?l(e,g,k):m(e,g,k,q)}}}}],hd=["$interpolate",function(a){var c={addOption:v,removeOption:v};return{restrict:"E",priority:100,compile:function(d,e){if(F(e.value)){var f=a(d.text(),!0);f||e.$set("value",d.text())}return function(a,d,e){var m=d.parent(),l=m.data("$selectController")||m.parent().data("$selectController");l&&l.databound?
d.prop("selected",!1):l=c;f?a.$watch(f,function(a,c){e.$set("value",a);a!==c&&l.removeOption(c);l.addOption(a)}):l.addOption(e.value);d.on("$destroy",function(){l.removeOption(e.value)})}}}}],gd=aa({restrict:"E",terminal:!0});W.angular.bootstrap?console.log("WARNING: Tried to load angular more than once."):((Fa=W.jQuery)&&Fa.fn.on?(A=Fa,E(Fa.fn,{scope:Oa.scope,isolateScope:Oa.isolateScope,controller:Oa.controller,injector:Oa.injector,inheritedData:Oa.inheritedData}),Gb("remove",!0,!0,!1),Gb("empty",
!1,!1,!1),Gb("html",!1,!1,!0)):A=S,Xa.element=A,Zc(Xa),A(X).ready(function(){Wc(X,dc)}))})(window,document);!window.angular.$$csp()&&window.angular.element(document).find("head").prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide{display:none !important;}ng\\:form{display:block;}.ng-animate-block-transitions{transition:0s all!important;-webkit-transition:0s all!important;}.ng-hide-add-active,.ng-hide-remove{display:block!important;}</style>');
//# sourceMappingURL=angular.min.js.map

angular.module('ui.bootstrap-slider', [])
    .directive('slider', ['$parse', '$timeout', '$rootScope', function ($parse, $timeout, $rootScope) {
        return {
            restrict: 'AE',
            replace: true,
            template: '<div><input class="slider-input" type="text" style="width:100%" /></div>',
            require: 'ngModel',
            scope: {
                max: "=",
                min: "=",
                step: "=",
                value: "=",
                ngModel: '=',
                ngDisabled: '=',
                range: '=',
                sliderid: '=',
                ticks: '=',
                ticksLabels: '=',
                scale: '=',
                formatter: '&',
                onStartSlide: '&',
                onStopSlide: '&',
                onSlide: '&'
            },
            link: function ($scope, element, attrs, ngModelCtrl, $compile) {
                var ngModelDeregisterFn, ngDisabledDeregisterFn;

                initSlider();

                function initSlider() {
                    var options = {};

                    function setOption(key, value, defaultValue) {
                        options[key] = value || defaultValue;
                    }

                    function setFloatOption(key, value, defaultValue) {
                        options[key] = value ? parseFloat(value) : defaultValue;
                    }

                    function setBooleanOption(key, value, defaultValue) {
                        options[key] = value ? value + '' === 'true' : defaultValue;
                    }

                    function getArrayOrValue(value) {
                        return (angular.isString(value) && value.indexOf("[") === 0) ? angular.fromJson(value) : value;
                    }

                    setOption('id', $scope.sliderid);
                    setOption('orientation', attrs.orientation, 'horizontal');
                    setOption('selection', attrs.selection, 'before');
                    setOption('handle', attrs.handle, 'round');
                    setOption('tooltip', attrs.sliderTooltip || attrs.tooltip, 'show');
                    setOption('tooltip_position', attrs.sliderTooltipPosition, 'top');
                    setOption('tooltipseparator', '-');
                    setOption('ticks', $scope.ticks);
                    setOption('ticks_labels', $scope.ticksLabels);
                    setOption('scale', $scope.scale, 'linear');

                    setFloatOption('min', $scope.min, 0);
                    setFloatOption('max', $scope.max, 10);
                    setFloatOption('step', $scope.step, 1);
                    var strNbr = options.step + '';
                    var decimals = strNbr.substring(strNbr.lastIndexOf('.') + 1);
                    setFloatOption('precision', attrs.precision, decimals);

                    setBooleanOption('tooltip_split', attrs.tooltipsplit, false);
                    setBooleanOption('enabled', attrs.enabled, true);
                    setBooleanOption('naturalarrowkeys', attrs.naturalarrowkeys, false);
                    setBooleanOption('reversed', attrs.reversed, false);

                    setBooleanOption('range', $scope.range, false);
                    if (options.range) {
                        if (angular.isArray($scope.value)) {
                            options.value = $scope.value;
                        }
                        else if (angular.isString($scope.value)) {
                            options.value = getArrayOrValue($scope.value);
                            if (!angular.isArray(options.value)) {
                                var value = parseFloat($scope.value);
                                if (isNaN(value)) value = 5;

                                if (value < $scope.min) {
                                    value = $scope.min;
                                    options.value = [value, options.max];
                                }
                                else if (value > $scope.max) {
                                    value = $scope.max;
                                    options.value = [options.min, value];
                                }
                                else {
                                    options.value = [options.min, options.max];
                                }
                            }
                        }
                        else {
                            options.value = [options.min, options.max]; // This is needed, because of value defined at $.fn.slider.defaults - default value 5 prevents creating range slider
                        }
                        $scope.ngModel = options.value; // needed, otherwise turns value into [null, ##]
                    }
                    else {
                        setFloatOption('value', $scope.value, 5);
                    }

                    if ($scope.formatter) options.formatter = $scope.$eval($scope.formatter);


                    // check if slider jQuery plugin exists
                    if ('$' in window && $.fn.slider) {
                        // adding methods to jQuery slider plugin prototype
                        $.fn.slider.constructor.prototype.disable = function () {
                            this.picker.off();
                        };
                        $.fn.slider.constructor.prototype.enable = function () {
                            this.picker.on();
                        };
                    }

                    // destroy previous slider to reset all options
                    if (element[0].__slider)
                        element[0].__slider.destroy();

                    var slider = new Slider(element[0].getElementsByClassName('slider-input')[0], options);
                    element[0].__slider = slider;

                    // everything that needs slider element
                    var updateEvent = getArrayOrValue(attrs.updateevent);
                    if (angular.isString(updateEvent)) {
                        // if only single event name in string
                        updateEvent = [updateEvent];
                    }
                    else {
                        // default to slide event
                        updateEvent = ['slide'];
                    }
                    angular.forEach(updateEvent, function (sliderEvent) {
                        slider.on(sliderEvent, function (ev) {
                            ngModelCtrl.$setViewValue(ev);
                            $timeout(function () {
                                $scope.$apply();
                            });
                        });
                    });
                    slider.on('change', function (ev) {
                        ngModelCtrl.$setViewValue(ev.newValue);
                        $timeout(function () {
                            $scope.$apply();
                        });
                    });

                    // Event listeners
                    var sliderEvents = {
                        slideStart: 'onStartSlide',
                        slide: 'onSlide',
                        slideStop: 'onStopSlide'
                    };
                    angular.forEach(sliderEvents, function (sliderEventAttr, sliderEvent) {
                        var fn = $parse(attrs[sliderEventAttr]);
                        slider.on(sliderEvent, function (ev) {
                            if ($scope[sliderEventAttr]) {
                                
                                var callback = function () {
                                    fn($scope.$parent, { $event: ev, value: ev });
                                }

                                if ($rootScope.$$phase) {
                                    $scope.$evalAsync(callback);
                                } else {
                                    $scope.$apply(callback);
                                }
                            }
                        });
                    });

                    // deregister ngDisabled watcher to prevent memory leaks
                    if (angular.isFunction(ngDisabledDeregisterFn)) {
                        ngDisabledDeregisterFn();
                        ngDisabledDeregisterFn = null;
                    }

                    ngDisabledDeregisterFn = $scope.$watch('ngDisabled', function (value) {
                        if (value) {
                            slider.disable();
                        }
                        else {
                            slider.enable();
                        }
                    });

                    // deregister ngModel watcher to prevent memory leaks
                    if (angular.isFunction(ngModelDeregisterFn)) ngModelDeregisterFn();
                    ngModelDeregisterFn = $scope.$watch('ngModel', function (value) {
                        if($scope.range){
                            slider.setValue(value);
                        }else{
                            slider.setValue(parseFloat(value));
                        }
                    }, true);
                }


                var watchers = ['min', 'max', 'step', 'range', 'scale'];
                angular.forEach(watchers, function (prop) {
                    $scope.$watch(prop, function () {
                        initSlider();
                    });
                });
            }
        };
    }])
;

'use strict';

/**
 * Binds a ACE Editor widget
 */
angular.module('ui.ace', [])
  .constant('uiAceConfig', {})
  .directive('uiAce', ['uiAceConfig', function (uiAceConfig) {

    if (angular.isUndefined(window.ace)) {
      throw new Error('ui-ace need ace to work... (o rly?)');
    }

    /**
     * Sets editor options such as the wrapping mode or the syntax checker.
     *
     * The supported options are:
     *
     *   <ul>
     *     <li>showGutter</li>
     *     <li>useWrapMode</li>
     *     <li>onLoad</li>
     *     <li>theme</li>
     *     <li>mode</li>
     *   </ul>
     *
     * @param acee
     * @param session ACE editor session
     * @param {object} opts Options to be set
     */
    var setOptions = function(acee, session, opts) {

      // sets the ace worker path, if running from concatenated
      // or minified source
      if (angular.isDefined(opts.workerPath)) {
        var config = window.ace.require('ace/config');
        config.set('workerPath', opts.workerPath);
      }
      // ace requires loading
      if (angular.isDefined(opts.require)) {
        opts.require.forEach(function (n) {
            window.ace.require(n);
        });
      }
      // Boolean options
      if (angular.isDefined(opts.showGutter)) {
        acee.renderer.setShowGutter(opts.showGutter);
      }
      if (angular.isDefined(opts.useWrapMode)) {
        session.setUseWrapMode(opts.useWrapMode);
      }
      if (angular.isDefined(opts.showInvisibles)) {
        acee.renderer.setShowInvisibles(opts.showInvisibles);
      }
      if (angular.isDefined(opts.showIndentGuides)) {
        acee.renderer.setDisplayIndentGuides(opts.showIndentGuides);
      }
      if (angular.isDefined(opts.useSoftTabs)) {
        session.setUseSoftTabs(opts.useSoftTabs);
      }
      if (angular.isDefined(opts.showPrintMargin)) {
        acee.setShowPrintMargin(opts.showPrintMargin);
      }

      // commands
      if (angular.isDefined(opts.disableSearch) && opts.disableSearch) {
        acee.commands.addCommands([
          {
            name: 'unfind',
            bindKey: {
              win: 'Ctrl-F',
              mac: 'Command-F'
            },
            exec: function () {
              return false;
            },
            readOnly: true
          }
        ]);
      }

      // Basic options
      if (angular.isString(opts.theme)) {
        acee.setTheme('ace/theme/' + opts.theme);
      }
      if (angular.isString(opts.mode)) {
        session.setMode('ace/mode/' + opts.mode);
      }
      // Advanced options
      if (angular.isDefined(opts.firstLineNumber)) {
        if (angular.isNumber(opts.firstLineNumber)) {
          session.setOption('firstLineNumber', opts.firstLineNumber);
        } else if (angular.isFunction(opts.firstLineNumber)) {
          session.setOption('firstLineNumber', opts.firstLineNumber());
        }
      }

      // advanced options
      var key, obj;
      if (angular.isDefined(opts.advanced)) {
          for (key in opts.advanced) {
              // create a javascript object with the key and value
              obj = { name: key, value: opts.advanced[key] };
              // try to assign the option to the ace editor
              acee.setOption(obj.name, obj.value);
          }
      }

      // advanced options for the renderer
      if (angular.isDefined(opts.rendererOptions)) {
          for (key in opts.rendererOptions) {
              // create a javascript object with the key and value
              obj = { name: key, value: opts.rendererOptions[key] };
              // try to assign the option to the ace editor
              acee.renderer.setOption(obj.name, obj.value);
          }
      }

      // onLoad callbacks
      angular.forEach(opts.callbacks, function (cb) {
        if (angular.isFunction(cb)) {
          cb(acee);
        }
      });
    };

    return {
      restrict: 'EA',
      require: '?ngModel',
      link: function (scope, elm, attrs, ngModel) {

        /**
         * Corresponds the uiAceConfig ACE configuration.
         * @type object
         */
        var options = uiAceConfig.ace || {};

        /**
         * uiAceConfig merged with user options via json in attribute or data binding
         * @type object
         */
        var opts = angular.extend({}, options, scope.$eval(attrs.uiAce));

        /**
         * ACE editor
         * @type object
         */
        var acee = window.ace.edit(elm[0]);

        /**
         * ACE editor session.
         * @type object
         * @see [EditSession]{@link http://ace.c9.io/#nav=api&api=edit_session}
         */
        var session = acee.getSession();

        /**
         * Reference to a change listener created by the listener factory.
         * @function
         * @see listenerFactory.onChange
         */
        var onChangeListener;

        /**
         * Reference to a blur listener created by the listener factory.
         * @function
         * @see listenerFactory.onBlur
         */
        var onBlurListener;

        /**
         * Calls a callback by checking its existing. The argument list
         * is variable and thus this function is relying on the arguments
         * object.
         * @throws {Error} If the callback isn't a function
         */
        var executeUserCallback = function () {

          /**
           * The callback function grabbed from the array-like arguments
           * object. The first argument should always be the callback.
           *
           * @see [arguments]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments}
           * @type {*}
           */
          var callback = arguments[0];

          /**
           * Arguments to be passed to the callback. These are taken
           * from the array-like arguments object. The first argument
           * is stripped because that should be the callback function.
           *
           * @see [arguments]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments}
           * @type {Array}
           */
          var args = Array.prototype.slice.call(arguments, 1);

          if (angular.isDefined(callback)) {
            scope.$evalAsync(function () {
              if (angular.isFunction(callback)) {
                callback(args);
              } else {
                throw new Error('ui-ace use a function as callback.');
              }
            });
          }
        };

        /**
         * Listener factory. Until now only change listeners can be created.
         * @type object
         */
        var listenerFactory = {
          /**
           * Creates a change listener which propagates the change event
           * and the editor session to the callback from the user option
           * onChange. It might be exchanged during runtime, if this
           * happens the old listener will be unbound.
           *
           * @param callback callback function defined in the user options
           * @see onChangeListener
           */
          onChange: function (callback) {
            return function (e) {
              var newValue = session.getValue();

              if (ngModel && newValue !== ngModel.$viewValue &&
                  // HACK make sure to only trigger the apply outside of the
                  // digest loop 'cause ACE is actually using this callback
                  // for any text transformation !
                  !scope.$$phase && !scope.$root.$$phase) {
                scope.$evalAsync(function () {
                  ngModel.$setViewValue(newValue);
                });
              }

              executeUserCallback(callback, e, acee);
            };
          },
          /**
           * Creates a blur listener which propagates the editor session
           * to the callback from the user option onBlur. It might be
           * exchanged during runtime, if this happens the old listener
           * will be unbound.
           *
           * @param callback callback function defined in the user options
           * @see onBlurListener
           */
          onBlur: function (callback) {
            return function () {
              executeUserCallback(callback, acee);
            };
          }
        };

        attrs.$observe('readonly', function (value) {
          acee.setReadOnly(!!value || value === '');
        });

        // Value Blind
        if (ngModel) {
          ngModel.$formatters.push(function (value) {
            if (angular.isUndefined(value) || value === null) {
              return '';
            }
            else if (angular.isObject(value) || angular.isArray(value)) {
              throw new Error('ui-ace cannot use an object or an array as a model');
            }
            return value;
          });

          ngModel.$render = function () {
            session.setValue(ngModel.$viewValue);
          };
        }

        // Listen for option updates
        var updateOptions = function (current, previous) {
          if (current === previous) return;
          opts = angular.extend({}, options, scope.$eval(attrs.uiAce));

          opts.callbacks = [ opts.onLoad ];
          if (opts.onLoad !== options.onLoad) {
            // also call the global onLoad handler
            opts.callbacks.unshift(options.onLoad);
          }

          // EVENTS

          // unbind old change listener
          session.removeListener('change', onChangeListener);

          // bind new change listener
          onChangeListener = listenerFactory.onChange(opts.onChange);
          session.on('change', onChangeListener);

          // unbind old blur listener
          //session.removeListener('blur', onBlurListener);
          acee.removeListener('blur', onBlurListener);

          // bind new blur listener
          onBlurListener = listenerFactory.onBlur(opts.onBlur);
          acee.on('blur', onBlurListener);

          setOptions(acee, session, opts);
        };

        scope.$watch(attrs.uiAce, updateOptions, /* deep watch */ true);

        // set the options here, even if we try to watch later, if this
        // line is missing things go wrong (and the tests will also fail)
        updateOptions(options);

        elm.on('$destroy', function () {
          acee.session.$stopWorker();
          acee.destroy();
        });

        scope.$watch(function() {
          return [elm[0].offsetWidth, elm[0].offsetHeight];
        }, function() {
          acee.resize();
          acee.renderer.updateFull();
        }, true);

      }
    };
  }]);

'use strict';
angular.module('angular-timeline', []);// Source: src/timeline-badge-directive.js
angular.module('angular-timeline').directive('timelineBadge', function() {
  return {
    require: '^timelineNode',
    restrict: 'AE',
    replace: true,
    transclude: true,
    template: '<div ng-transclude class="timeline-badge"></div>'
  };
});

// Source: src/timeline-content-directive.js
angular.module('angular-timeline').directive('timelineContent', function() {
  return {
    require: '^timelinePanel',
    restrict: 'AE',
    replace: true,
    transclude: true,
    template: '<div class="timeline-body" ng-transclude></div>'
  };
});

// Source: src/timeline-directive.js
angular.module('angular-timeline').directive('timeline', function() {
  return {
    restrict: 'AE',
    replace: true,
    transclude: true,
    template: '<ul class="timeline" ng-transclude></ul>'
  };
});

// Source: src/timeline-footer-directive.js
angular.module('angular-timeline').directive('timelineFooter', function() {
  return {
    require: '^timelineContent',
    restrict: 'AE',
    replace: true,
    transclude: true,
    template: '<div class="timeline-footer" ng-transclude></div>'
  };
});

// Source: src/timeline-heading-directive.js
angular.module('angular-timeline').directive('timelineHeading', function() {
  return {
    require: '^timelinePanel',
    restrict: 'AE',
    replace: true,
    transclude: true,
    template: '<div class="timeline-heading" ng-transclude></div>'
  };
});

// Source: src/timeline-node-directive.js
angular.module('angular-timeline').directive('timelineNode', function() {
  return {
    require: '^timeline',
    scope: {
      side: '@'
    },
    restrict: 'AE',
    replace: true,
    transclude: true,
    template: '<li ng-class="{\'timeline-inverted\': side == \'right\'}" ng-transclude></li>'
  };
});

// Source: src/timeline-panel-directive.js
angular.module('angular-timeline').directive('timelinePanel', function() {
  return {
    require: '^timeline',
    restrict: 'AE',
    replace: true,
    transclude: true,
    template: '<div class="timeline-panel" ng-transclude></div>'
  };
});

// Source: src/timeline-title-directive.js
angular.module('angular-timeline').directive('timelineTitle', function() {
  return {
    require: '^timelineHeading',
    restrict: 'AE',
    replace: true,
    transclude: true,
    template: '<h4 class="timeline-title" ng-transclude></h4>'
  };
});

/*
 AngularJS v1.2.28
 (c) 2010-2014 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(n,e,A){'use strict';function x(s,g,h){return{restrict:"ECA",terminal:!0,priority:400,transclude:"element",link:function(a,c,b,f,w){function y(){p&&(p.remove(),p=null);k&&(k.$destroy(),k=null);l&&(h.leave(l,function(){p=null}),p=l,l=null)}function v(){var b=s.current&&s.current.locals;if(e.isDefined(b&&b.$template)){var b=a.$new(),d=s.current;l=w(b,function(d){h.enter(d,null,l||c,function(){!e.isDefined(t)||t&&!a.$eval(t)||g()});y()});k=d.scope=b;k.$emit("$viewContentLoaded");k.$eval(u)}else y()}
var k,l,p,t=b.autoscroll,u=b.onload||"";a.$on("$routeChangeSuccess",v);v()}}}function z(e,g,h){return{restrict:"ECA",priority:-400,link:function(a,c){var b=h.current,f=b.locals;c.html(f.$template);var w=e(c.contents());b.controller&&(f.$scope=a,f=g(b.controller,f),b.controllerAs&&(a[b.controllerAs]=f),c.data("$ngControllerController",f),c.children().data("$ngControllerController",f));w(a)}}}n=e.module("ngRoute",["ng"]).provider("$route",function(){function s(a,c){return e.extend(new (e.extend(function(){},
{prototype:a})),c)}function g(a,e){var b=e.caseInsensitiveMatch,f={originalPath:a,regexp:a},h=f.keys=[];a=a.replace(/([().])/g,"\\$1").replace(/(\/)?:(\w+)([\?\*])?/g,function(a,e,b,c){a="?"===c?c:null;c="*"===c?c:null;h.push({name:b,optional:!!a});e=e||"";return""+(a?"":e)+"(?:"+(a?e:"")+(c&&"(.+?)"||"([^/]+)")+(a||"")+")"+(a||"")}).replace(/([\/$\*])/g,"\\$1");f.regexp=RegExp("^"+a+"$",b?"i":"");return f}var h={};this.when=function(a,c){h[a]=e.extend({reloadOnSearch:!0},c,a&&g(a,c));if(a){var b=
"/"==a[a.length-1]?a.substr(0,a.length-1):a+"/";h[b]=e.extend({redirectTo:a},g(b,c))}return this};this.otherwise=function(a){this.when(null,a);return this};this.$get=["$rootScope","$location","$routeParams","$q","$injector","$http","$templateCache","$sce",function(a,c,b,f,g,n,v,k){function l(){var d=p(),m=r.current;if(d&&m&&d.$$route===m.$$route&&e.equals(d.pathParams,m.pathParams)&&!d.reloadOnSearch&&!u)m.params=d.params,e.copy(m.params,b),a.$broadcast("$routeUpdate",m);else if(d||m)u=!1,a.$broadcast("$routeChangeStart",
d,m),(r.current=d)&&d.redirectTo&&(e.isString(d.redirectTo)?c.path(t(d.redirectTo,d.params)).search(d.params).replace():c.url(d.redirectTo(d.pathParams,c.path(),c.search())).replace()),f.when(d).then(function(){if(d){var a=e.extend({},d.resolve),c,b;e.forEach(a,function(d,c){a[c]=e.isString(d)?g.get(d):g.invoke(d)});e.isDefined(c=d.template)?e.isFunction(c)&&(c=c(d.params)):e.isDefined(b=d.templateUrl)&&(e.isFunction(b)&&(b=b(d.params)),b=k.getTrustedResourceUrl(b),e.isDefined(b)&&(d.loadedTemplateUrl=
b,c=n.get(b,{cache:v}).then(function(a){return a.data})));e.isDefined(c)&&(a.$template=c);return f.all(a)}}).then(function(c){d==r.current&&(d&&(d.locals=c,e.copy(d.params,b)),a.$broadcast("$routeChangeSuccess",d,m))},function(c){d==r.current&&a.$broadcast("$routeChangeError",d,m,c)})}function p(){var a,b;e.forEach(h,function(f,h){var q;if(q=!b){var g=c.path();q=f.keys;var l={};if(f.regexp)if(g=f.regexp.exec(g)){for(var k=1,p=g.length;k<p;++k){var n=q[k-1],r=g[k];n&&r&&(l[n.name]=r)}q=l}else q=null;
else q=null;q=a=q}q&&(b=s(f,{params:e.extend({},c.search(),a),pathParams:a}),b.$$route=f)});return b||h[null]&&s(h[null],{params:{},pathParams:{}})}function t(a,c){var b=[];e.forEach((a||"").split(":"),function(a,d){if(0===d)b.push(a);else{var e=a.match(/(\w+)(?:[?*])?(.*)/),f=e[1];b.push(c[f]);b.push(e[2]||"");delete c[f]}});return b.join("")}var u=!1,r={routes:h,reload:function(){u=!0;a.$evalAsync(l)}};a.$on("$locationChangeSuccess",l);return r}]});n.provider("$routeParams",function(){this.$get=
function(){return{}}});n.directive("ngView",x);n.directive("ngView",z);x.$inject=["$route","$anchorScroll","$animate"];z.$inject=["$compile","$controller","$route"]})(window,window.angular);
//# sourceMappingURL=angular-route.min.js.map

/**
 * State-based routing for AngularJS
 * @version v0.2.13
 * @link http://angular-ui.github.com/
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
"undefined"!=typeof module&&"undefined"!=typeof exports&&module.exports===exports&&(module.exports="ui.router"),function(a,b,c){"use strict";function d(a,b){return M(new(M(function(){},{prototype:a})),b)}function e(a){return L(arguments,function(b){b!==a&&L(b,function(b,c){a.hasOwnProperty(c)||(a[c]=b)})}),a}function f(a,b){var c=[];for(var d in a.path){if(a.path[d]!==b.path[d])break;c.push(a.path[d])}return c}function g(a){if(Object.keys)return Object.keys(a);var c=[];return b.forEach(a,function(a,b){c.push(b)}),c}function h(a,b){if(Array.prototype.indexOf)return a.indexOf(b,Number(arguments[2])||0);var c=a.length>>>0,d=Number(arguments[2])||0;for(d=0>d?Math.ceil(d):Math.floor(d),0>d&&(d+=c);c>d;d++)if(d in a&&a[d]===b)return d;return-1}function i(a,b,c,d){var e,i=f(c,d),j={},k=[];for(var l in i)if(i[l].params&&(e=g(i[l].params),e.length))for(var m in e)h(k,e[m])>=0||(k.push(e[m]),j[e[m]]=a[e[m]]);return M({},j,b)}function j(a,b,c){if(!c){c=[];for(var d in a)c.push(d)}for(var e=0;e<c.length;e++){var f=c[e];if(a[f]!=b[f])return!1}return!0}function k(a,b){var c={};return L(a,function(a){c[a]=b[a]}),c}function l(a){var b={},c=Array.prototype.concat.apply(Array.prototype,Array.prototype.slice.call(arguments,1));for(var d in a)-1==h(c,d)&&(b[d]=a[d]);return b}function m(a,b){var c=K(a),d=c?[]:{};return L(a,function(a,e){b(a,e)&&(d[c?d.length:e]=a)}),d}function n(a,b){var c=K(a)?[]:{};return L(a,function(a,d){c[d]=b(a,d)}),c}function o(a,b){var d=1,f=2,i={},j=[],k=i,m=M(a.when(i),{$$promises:i,$$values:i});this.study=function(i){function n(a,c){if(s[c]!==f){if(r.push(c),s[c]===d)throw r.splice(0,h(r,c)),new Error("Cyclic dependency: "+r.join(" -> "));if(s[c]=d,I(a))q.push(c,[function(){return b.get(a)}],j);else{var e=b.annotate(a);L(e,function(a){a!==c&&i.hasOwnProperty(a)&&n(i[a],a)}),q.push(c,a,e)}r.pop(),s[c]=f}}function o(a){return J(a)&&a.then&&a.$$promises}if(!J(i))throw new Error("'invocables' must be an object");var p=g(i||{}),q=[],r=[],s={};return L(i,n),i=r=s=null,function(d,f,g){function h(){--u||(v||e(t,f.$$values),r.$$values=t,r.$$promises=r.$$promises||!0,delete r.$$inheritedValues,n.resolve(t))}function i(a){r.$$failure=a,n.reject(a)}function j(c,e,f){function j(a){l.reject(a),i(a)}function k(){if(!G(r.$$failure))try{l.resolve(b.invoke(e,g,t)),l.promise.then(function(a){t[c]=a,h()},j)}catch(a){j(a)}}var l=a.defer(),m=0;L(f,function(a){s.hasOwnProperty(a)&&!d.hasOwnProperty(a)&&(m++,s[a].then(function(b){t[a]=b,--m||k()},j))}),m||k(),s[c]=l.promise}if(o(d)&&g===c&&(g=f,f=d,d=null),d){if(!J(d))throw new Error("'locals' must be an object")}else d=k;if(f){if(!o(f))throw new Error("'parent' must be a promise returned by $resolve.resolve()")}else f=m;var n=a.defer(),r=n.promise,s=r.$$promises={},t=M({},d),u=1+q.length/3,v=!1;if(G(f.$$failure))return i(f.$$failure),r;f.$$inheritedValues&&e(t,l(f.$$inheritedValues,p)),M(s,f.$$promises),f.$$values?(v=e(t,l(f.$$values,p)),r.$$inheritedValues=l(f.$$values,p),h()):(f.$$inheritedValues&&(r.$$inheritedValues=l(f.$$inheritedValues,p)),f.then(h,i));for(var w=0,x=q.length;x>w;w+=3)d.hasOwnProperty(q[w])?h():j(q[w],q[w+1],q[w+2]);return r}},this.resolve=function(a,b,c,d){return this.study(a)(b,c,d)}}function p(a,b,c){this.fromConfig=function(a,b,c){return G(a.template)?this.fromString(a.template,b):G(a.templateUrl)?this.fromUrl(a.templateUrl,b):G(a.templateProvider)?this.fromProvider(a.templateProvider,b,c):null},this.fromString=function(a,b){return H(a)?a(b):a},this.fromUrl=function(c,d){return H(c)&&(c=c(d)),null==c?null:a.get(c,{cache:b,headers:{Accept:"text/html"}}).then(function(a){return a.data})},this.fromProvider=function(a,b,d){return c.invoke(a,null,d||{params:b})}}function q(a,b,e){function f(b,c,d,e){if(q.push(b),o[b])return o[b];if(!/^\w+(-+\w+)*(?:\[\])?$/.test(b))throw new Error("Invalid parameter name '"+b+"' in pattern '"+a+"'");if(p[b])throw new Error("Duplicate parameter name '"+b+"' in pattern '"+a+"'");return p[b]=new O.Param(b,c,d,e),p[b]}function g(a,b,c){var d=["",""],e=a.replace(/[\\\[\]\^$*+?.()|{}]/g,"\\$&");if(!b)return e;switch(c){case!1:d=["(",")"];break;case!0:d=["?(",")?"];break;default:d=["("+c+"|",")?"]}return e+d[0]+b+d[1]}function h(c,e){var f,g,h,i,j;return f=c[2]||c[3],j=b.params[f],h=a.substring(m,c.index),g=e?c[4]:c[4]||("*"==c[1]?".*":null),i=O.type(g||"string")||d(O.type("string"),{pattern:new RegExp(g)}),{id:f,regexp:g,segment:h,type:i,cfg:j}}b=M({params:{}},J(b)?b:{});var i,j=/([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,k=/([:]?)([\w\[\]-]+)|\{([\w\[\]-]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,l="^",m=0,n=this.segments=[],o=e?e.params:{},p=this.params=e?e.params.$$new():new O.ParamSet,q=[];this.source=a;for(var r,s,t;(i=j.exec(a))&&(r=h(i,!1),!(r.segment.indexOf("?")>=0));)s=f(r.id,r.type,r.cfg,"path"),l+=g(r.segment,s.type.pattern.source,s.squash),n.push(r.segment),m=j.lastIndex;t=a.substring(m);var u=t.indexOf("?");if(u>=0){var v=this.sourceSearch=t.substring(u);if(t=t.substring(0,u),this.sourcePath=a.substring(0,m+u),v.length>0)for(m=0;i=k.exec(v);)r=h(i,!0),s=f(r.id,r.type,r.cfg,"search"),m=j.lastIndex}else this.sourcePath=a,this.sourceSearch="";l+=g(t)+(b.strict===!1?"/?":"")+"$",n.push(t),this.regexp=new RegExp(l,b.caseInsensitive?"i":c),this.prefix=n[0],this.$$paramNames=q}function r(a){M(this,a)}function s(){function a(a){return null!=a?a.toString().replace(/\//g,"%2F"):a}function e(a){return null!=a?a.toString().replace(/%2F/g,"/"):a}function f(a){return this.pattern.test(a)}function i(){return{strict:t,caseInsensitive:p}}function j(a){return H(a)||K(a)&&H(a[a.length-1])}function k(){for(;x.length;){var a=x.shift();if(a.pattern)throw new Error("You cannot override a type's .pattern at runtime.");b.extend(v[a.name],o.invoke(a.def))}}function l(a){M(this,a||{})}O=this;var o,p=!1,t=!0,u=!1,v={},w=!0,x=[],y={string:{encode:a,decode:e,is:f,pattern:/[^/]*/},"int":{encode:a,decode:function(a){return parseInt(a,10)},is:function(a){return G(a)&&this.decode(a.toString())===a},pattern:/\d+/},bool:{encode:function(a){return a?1:0},decode:function(a){return 0!==parseInt(a,10)},is:function(a){return a===!0||a===!1},pattern:/0|1/},date:{encode:function(a){return this.is(a)?[a.getFullYear(),("0"+(a.getMonth()+1)).slice(-2),("0"+a.getDate()).slice(-2)].join("-"):c},decode:function(a){if(this.is(a))return a;var b=this.capture.exec(a);return b?new Date(b[1],b[2]-1,b[3]):c},is:function(a){return a instanceof Date&&!isNaN(a.valueOf())},equals:function(a,b){return this.is(a)&&this.is(b)&&a.toISOString()===b.toISOString()},pattern:/[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,capture:/([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/},json:{encode:b.toJson,decode:b.fromJson,is:b.isObject,equals:b.equals,pattern:/[^/]*/},any:{encode:b.identity,decode:b.identity,is:b.identity,equals:b.equals,pattern:/.*/}};s.$$getDefaultValue=function(a){if(!j(a.value))return a.value;if(!o)throw new Error("Injectable functions cannot be called at configuration time");return o.invoke(a.value)},this.caseInsensitive=function(a){return G(a)&&(p=a),p},this.strictMode=function(a){return G(a)&&(t=a),t},this.defaultSquashPolicy=function(a){if(!G(a))return u;if(a!==!0&&a!==!1&&!I(a))throw new Error("Invalid squash policy: "+a+". Valid policies: false, true, arbitrary-string");return u=a,a},this.compile=function(a,b){return new q(a,M(i(),b))},this.isMatcher=function(a){if(!J(a))return!1;var b=!0;return L(q.prototype,function(c,d){H(c)&&(b=b&&G(a[d])&&H(a[d]))}),b},this.type=function(a,b,c){if(!G(b))return v[a];if(v.hasOwnProperty(a))throw new Error("A type named '"+a+"' has already been defined.");return v[a]=new r(M({name:a},b)),c&&(x.push({name:a,def:c}),w||k()),this},L(y,function(a,b){v[b]=new r(M({name:b},a))}),v=d(v,{}),this.$get=["$injector",function(a){return o=a,w=!1,k(),L(y,function(a,b){v[b]||(v[b]=new r(a))}),this}],this.Param=function(a,b,d,e){function f(a){var b=J(a)?g(a):[],c=-1===h(b,"value")&&-1===h(b,"type")&&-1===h(b,"squash")&&-1===h(b,"array");return c&&(a={value:a}),a.$$fn=j(a.value)?a.value:function(){return a.value},a}function i(b,c,d){if(b.type&&c)throw new Error("Param '"+a+"' has two type configurations.");return c?c:b.type?b.type instanceof r?b.type:new r(b.type):"config"===d?v.any:v.string}function k(){var b={array:"search"===e?"auto":!1},c=a.match(/\[\]$/)?{array:!0}:{};return M(b,c,d).array}function l(a,b){var c=a.squash;if(!b||c===!1)return!1;if(!G(c)||null==c)return u;if(c===!0||I(c))return c;throw new Error("Invalid squash policy: '"+c+"'. Valid policies: false, true, or arbitrary string")}function p(a,b,d,e){var f,g,i=[{from:"",to:d||b?c:""},{from:null,to:d||b?c:""}];return f=K(a.replace)?a.replace:[],I(e)&&f.push({from:e,to:c}),g=n(f,function(a){return a.from}),m(i,function(a){return-1===h(g,a.from)}).concat(f)}function q(){if(!o)throw new Error("Injectable functions cannot be called at configuration time");return o.invoke(d.$$fn)}function s(a){function b(a){return function(b){return b.from===a}}function c(a){var c=n(m(w.replace,b(a)),function(a){return a.to});return c.length?c[0]:a}return a=c(a),G(a)?w.type.decode(a):q()}function t(){return"{Param:"+a+" "+b+" squash: '"+z+"' optional: "+y+"}"}var w=this;d=f(d),b=i(d,b,e);var x=k();b=x?b.$asArray(x,"search"===e):b,"string"!==b.name||x||"path"!==e||d.value!==c||(d.value="");var y=d.value!==c,z=l(d,y),A=p(d,x,y,z);M(this,{id:a,type:b,location:e,array:x,squash:z,replace:A,isOptional:y,value:s,dynamic:c,config:d,toString:t})},l.prototype={$$new:function(){return d(this,M(new l,{$$parent:this}))},$$keys:function(){for(var a=[],b=[],c=this,d=g(l.prototype);c;)b.push(c),c=c.$$parent;return b.reverse(),L(b,function(b){L(g(b),function(b){-1===h(a,b)&&-1===h(d,b)&&a.push(b)})}),a},$$values:function(a){var b={},c=this;return L(c.$$keys(),function(d){b[d]=c[d].value(a&&a[d])}),b},$$equals:function(a,b){var c=!0,d=this;return L(d.$$keys(),function(e){var f=a&&a[e],g=b&&b[e];d[e].type.equals(f,g)||(c=!1)}),c},$$validates:function(a){var b,c,d,e=!0,f=this;return L(this.$$keys(),function(g){d=f[g],c=a[g],b=!c&&d.isOptional,e=e&&(b||!!d.type.is(c))}),e},$$parent:c},this.ParamSet=l}function t(a,d){function e(a){var b=/^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(a.source);return null!=b?b[1].replace(/\\(.)/g,"$1"):""}function f(a,b){return a.replace(/\$(\$|\d{1,2})/,function(a,c){return b["$"===c?0:Number(c)]})}function g(a,b,c){if(!c)return!1;var d=a.invoke(b,b,{$match:c});return G(d)?d:!0}function h(d,e,f,g){function h(a,b,c){return"/"===p?a:b?p.slice(0,-1)+a:c?p.slice(1)+a:a}function m(a){function b(a){var b=a(f,d);return b?(I(b)&&d.replace().url(b),!0):!1}if(!a||!a.defaultPrevented){var e=o&&d.url()===o;if(o=c,e)return!0;var g,h=j.length;for(g=0;h>g;g++)if(b(j[g]))return;k&&b(k)}}function n(){return i=i||e.$on("$locationChangeSuccess",m)}var o,p=g.baseHref(),q=d.url();return l||n(),{sync:function(){m()},listen:function(){return n()},update:function(a){return a?void(q=d.url()):void(d.url()!==q&&(d.url(q),d.replace()))},push:function(a,b,e){d.url(a.format(b||{})),o=e&&e.$$avoidResync?d.url():c,e&&e.replace&&d.replace()},href:function(c,e,f){if(!c.validates(e))return null;var g=a.html5Mode();b.isObject(g)&&(g=g.enabled);var i=c.format(e);if(f=f||{},g||null===i||(i="#"+a.hashPrefix()+i),i=h(i,g,f.absolute),!f.absolute||!i)return i;var j=!g&&i?"/":"",k=d.port();return k=80===k||443===k?"":":"+k,[d.protocol(),"://",d.host(),k,j,i].join("")}}}var i,j=[],k=null,l=!1;this.rule=function(a){if(!H(a))throw new Error("'rule' must be a function");return j.push(a),this},this.otherwise=function(a){if(I(a)){var b=a;a=function(){return b}}else if(!H(a))throw new Error("'rule' must be a function");return k=a,this},this.when=function(a,b){var c,h=I(b);if(I(a)&&(a=d.compile(a)),!h&&!H(b)&&!K(b))throw new Error("invalid 'handler' in when()");var i={matcher:function(a,b){return h&&(c=d.compile(b),b=["$match",function(a){return c.format(a)}]),M(function(c,d){return g(c,b,a.exec(d.path(),d.search()))},{prefix:I(a.prefix)?a.prefix:""})},regex:function(a,b){if(a.global||a.sticky)throw new Error("when() RegExp must not be global or sticky");return h&&(c=b,b=["$match",function(a){return f(c,a)}]),M(function(c,d){return g(c,b,a.exec(d.path()))},{prefix:e(a)})}},j={matcher:d.isMatcher(a),regex:a instanceof RegExp};for(var k in j)if(j[k])return this.rule(i[k](a,b));throw new Error("invalid 'what' in when()")},this.deferIntercept=function(a){a===c&&(a=!0),l=a},this.$get=h,h.$inject=["$location","$rootScope","$injector","$browser"]}function u(a,e){function f(a){return 0===a.indexOf(".")||0===a.indexOf("^")}function l(a,b){if(!a)return c;var d=I(a),e=d?a:a.name,g=f(e);if(g){if(!b)throw new Error("No reference point given for path '"+e+"'");b=l(b);for(var h=e.split("."),i=0,j=h.length,k=b;j>i;i++)if(""!==h[i]||0!==i){if("^"!==h[i])break;if(!k.parent)throw new Error("Path '"+e+"' not valid for state '"+b.name+"'");k=k.parent}else k=b;h=h.slice(i).join("."),e=k.name+(k.name&&h?".":"")+h}var m=y[e];return!m||!d&&(d||m!==a&&m.self!==a)?c:m}function m(a,b){z[a]||(z[a]=[]),z[a].push(b)}function o(a){for(var b=z[a]||[];b.length;)p(b.shift())}function p(b){b=d(b,{self:b,resolve:b.resolve||{},toString:function(){return this.name}});var c=b.name;if(!I(c)||c.indexOf("@")>=0)throw new Error("State must have a valid name");if(y.hasOwnProperty(c))throw new Error("State '"+c+"'' is already defined");var e=-1!==c.indexOf(".")?c.substring(0,c.lastIndexOf(".")):I(b.parent)?b.parent:J(b.parent)&&I(b.parent.name)?b.parent.name:"";if(e&&!y[e])return m(e,b.self);for(var f in B)H(B[f])&&(b[f]=B[f](b,B.$delegates[f]));return y[c]=b,!b[A]&&b.url&&a.when(b.url,["$match","$stateParams",function(a,c){x.$current.navigable==b&&j(a,c)||x.transitionTo(b,a,{inherit:!0,location:!1})}]),o(c),b}function q(a){return a.indexOf("*")>-1}function r(a){var b=a.split("."),c=x.$current.name.split(".");if("**"===b[0]&&(c=c.slice(h(c,b[1])),c.unshift("**")),"**"===b[b.length-1]&&(c.splice(h(c,b[b.length-2])+1,Number.MAX_VALUE),c.push("**")),b.length!=c.length)return!1;for(var d=0,e=b.length;e>d;d++)"*"===b[d]&&(c[d]="*");return c.join("")===b.join("")}function s(a,b){return I(a)&&!G(b)?B[a]:H(b)&&I(a)?(B[a]&&!B.$delegates[a]&&(B.$delegates[a]=B[a]),B[a]=b,this):this}function t(a,b){return J(a)?b=a:b.name=a,p(b),this}function u(a,e,f,h,m,o,p){function s(b,c,d,f){var g=a.$broadcast("$stateNotFound",b,c,d);if(g.defaultPrevented)return p.update(),B;if(!g.retry)return null;if(f.$retry)return p.update(),C;var h=x.transition=e.when(g.retry);return h.then(function(){return h!==x.transition?u:(b.options.$retry=!0,x.transitionTo(b.to,b.toParams,b.options))},function(){return B}),p.update(),h}function t(a,c,d,g,i,j){var l=d?c:k(a.params.$$keys(),c),n={$stateParams:l};i.resolve=m.resolve(a.resolve,n,i.resolve,a);var o=[i.resolve.then(function(a){i.globals=a})];return g&&o.push(g),L(a.views,function(c,d){var e=c.resolve&&c.resolve!==a.resolve?c.resolve:{};e.$template=[function(){return f.load(d,{view:c,locals:n,params:l,notify:j.notify})||""}],o.push(m.resolve(e,n,i.resolve,a).then(function(f){if(H(c.controllerProvider)||K(c.controllerProvider)){var g=b.extend({},e,n);f.$$controller=h.invoke(c.controllerProvider,null,g)}else f.$$controller=c.controller;f.$$state=a,f.$$controllerAs=c.controllerAs,i[d]=f}))}),e.all(o).then(function(){return i})}var u=e.reject(new Error("transition superseded")),z=e.reject(new Error("transition prevented")),B=e.reject(new Error("transition aborted")),C=e.reject(new Error("transition failed"));return w.locals={resolve:null,globals:{$stateParams:{}}},x={params:{},current:w.self,$current:w,transition:null},x.reload=function(){return x.transitionTo(x.current,o,{reload:!0,inherit:!1,notify:!0})},x.go=function(a,b,c){return x.transitionTo(a,b,M({inherit:!0,relative:x.$current},c))},x.transitionTo=function(b,c,f){c=c||{},f=M({location:!0,inherit:!1,relative:null,notify:!0,reload:!1,$retry:!1},f||{});var g,j=x.$current,m=x.params,n=j.path,q=l(b,f.relative);if(!G(q)){var r={to:b,toParams:c,options:f},y=s(r,j.self,m,f);if(y)return y;if(b=r.to,c=r.toParams,f=r.options,q=l(b,f.relative),!G(q)){if(!f.relative)throw new Error("No such state '"+b+"'");throw new Error("Could not resolve '"+b+"' from state '"+f.relative+"'")}}if(q[A])throw new Error("Cannot transition to abstract state '"+b+"'");if(f.inherit&&(c=i(o,c||{},x.$current,q)),!q.params.$$validates(c))return C;c=q.params.$$values(c),b=q;var B=b.path,D=0,E=B[D],F=w.locals,H=[];if(!f.reload)for(;E&&E===n[D]&&E.ownParams.$$equals(c,m);)F=H[D]=E.locals,D++,E=B[D];if(v(b,j,F,f))return b.self.reloadOnSearch!==!1&&p.update(),x.transition=null,e.when(x.current);if(c=k(b.params.$$keys(),c||{}),f.notify&&a.$broadcast("$stateChangeStart",b.self,c,j.self,m).defaultPrevented)return p.update(),z;for(var I=e.when(F),J=D;J<B.length;J++,E=B[J])F=H[J]=d(F),I=t(E,c,E===b,I,F,f);var K=x.transition=I.then(function(){var d,e,g;if(x.transition!==K)return u;for(d=n.length-1;d>=D;d--)g=n[d],g.self.onExit&&h.invoke(g.self.onExit,g.self,g.locals.globals),g.locals=null;for(d=D;d<B.length;d++)e=B[d],e.locals=H[d],e.self.onEnter&&h.invoke(e.self.onEnter,e.self,e.locals.globals);return x.transition!==K?u:(x.$current=b,x.current=b.self,x.params=c,N(x.params,o),x.transition=null,f.location&&b.navigable&&p.push(b.navigable.url,b.navigable.locals.globals.$stateParams,{$$avoidResync:!0,replace:"replace"===f.location}),f.notify&&a.$broadcast("$stateChangeSuccess",b.self,c,j.self,m),p.update(!0),x.current)},function(d){return x.transition!==K?u:(x.transition=null,g=a.$broadcast("$stateChangeError",b.self,c,j.self,m,d),g.defaultPrevented||p.update(),e.reject(d))});return K},x.is=function(a,b,d){d=M({relative:x.$current},d||{});var e=l(a,d.relative);return G(e)?x.$current!==e?!1:b?j(e.params.$$values(b),o):!0:c},x.includes=function(a,b,d){if(d=M({relative:x.$current},d||{}),I(a)&&q(a)){if(!r(a))return!1;a=x.$current.name}var e=l(a,d.relative);return G(e)?G(x.$current.includes[e.name])?b?j(e.params.$$values(b),o,g(b)):!0:!1:c},x.href=function(a,b,d){d=M({lossy:!0,inherit:!0,absolute:!1,relative:x.$current},d||{});var e=l(a,d.relative);if(!G(e))return null;d.inherit&&(b=i(o,b||{},x.$current,e));var f=e&&d.lossy?e.navigable:e;return f&&f.url!==c&&null!==f.url?p.href(f.url,k(e.params.$$keys(),b||{}),{absolute:d.absolute}):null},x.get=function(a,b){if(0===arguments.length)return n(g(y),function(a){return y[a].self});var c=l(a,b||x.$current);return c&&c.self?c.self:null},x}function v(a,b,c,d){return a!==b||(c!==b.locals||d.reload)&&a.self.reloadOnSearch!==!1?void 0:!0}var w,x,y={},z={},A="abstract",B={parent:function(a){if(G(a.parent)&&a.parent)return l(a.parent);var b=/^(.+)\.[^.]+$/.exec(a.name);return b?l(b[1]):w},data:function(a){return a.parent&&a.parent.data&&(a.data=a.self.data=M({},a.parent.data,a.data)),a.data},url:function(a){var b=a.url,c={params:a.params||{}};if(I(b))return"^"==b.charAt(0)?e.compile(b.substring(1),c):(a.parent.navigable||w).url.concat(b,c);if(!b||e.isMatcher(b))return b;throw new Error("Invalid url '"+b+"' in state '"+a+"'")},navigable:function(a){return a.url?a:a.parent?a.parent.navigable:null},ownParams:function(a){var b=a.url&&a.url.params||new O.ParamSet;return L(a.params||{},function(a,c){b[c]||(b[c]=new O.Param(c,null,a,"config"))}),b},params:function(a){return a.parent&&a.parent.params?M(a.parent.params.$$new(),a.ownParams):new O.ParamSet},views:function(a){var b={};return L(G(a.views)?a.views:{"":a},function(c,d){d.indexOf("@")<0&&(d+="@"+a.parent.name),b[d]=c}),b},path:function(a){return a.parent?a.parent.path.concat(a):[]},includes:function(a){var b=a.parent?M({},a.parent.includes):{};return b[a.name]=!0,b},$delegates:{}};w=p({name:"",url:"^",views:null,"abstract":!0}),w.navigable=null,this.decorator=s,this.state=t,this.$get=u,u.$inject=["$rootScope","$q","$view","$injector","$resolve","$stateParams","$urlRouter","$location","$urlMatcherFactory"]}function v(){function a(a,b){return{load:function(c,d){var e,f={template:null,controller:null,view:null,locals:null,notify:!0,async:!0,params:{}};return d=M(f,d),d.view&&(e=b.fromConfig(d.view,d.params,d.locals)),e&&d.notify&&a.$broadcast("$viewContentLoading",d),e}}}this.$get=a,a.$inject=["$rootScope","$templateFactory"]}function w(){var a=!1;this.useAnchorScroll=function(){a=!0},this.$get=["$anchorScroll","$timeout",function(b,c){return a?b:function(a){c(function(){a[0].scrollIntoView()},0,!1)}}]}function x(a,c,d,e){function f(){return c.has?function(a){return c.has(a)?c.get(a):null}:function(a){try{return c.get(a)}catch(b){return null}}}function g(a,b){var c=function(){return{enter:function(a,b,c){b.after(a),c()},leave:function(a,b){a.remove(),b()}}};if(j)return{enter:function(a,b,c){var d=j.enter(a,null,b,c);d&&d.then&&d.then(c)},leave:function(a,b){var c=j.leave(a,b);c&&c.then&&c.then(b)}};if(i){var d=i&&i(b,a);return{enter:function(a,b,c){d.enter(a,null,b),c()},leave:function(a,b){d.leave(a),b()}}}return c()}var h=f(),i=h("$animator"),j=h("$animate"),k={restrict:"ECA",terminal:!0,priority:400,transclude:"element",compile:function(c,f,h){return function(c,f,i){function j(){l&&(l.remove(),l=null),n&&(n.$destroy(),n=null),m&&(r.leave(m,function(){l=null}),l=m,m=null)}function k(g){var k,l=z(c,i,f,e),s=l&&a.$current&&a.$current.locals[l];if(g||s!==o){k=c.$new(),o=a.$current.locals[l];var t=h(k,function(a){r.enter(a,f,function(){n&&n.$emit("$viewContentAnimationEnded"),(b.isDefined(q)&&!q||c.$eval(q))&&d(a)}),j()});m=t,n=k,n.$emit("$viewContentLoaded"),n.$eval(p)}}var l,m,n,o,p=i.onload||"",q=i.autoscroll,r=g(i,c);c.$on("$stateChangeSuccess",function(){k(!1)}),c.$on("$viewContentLoading",function(){k(!1)}),k(!0)}}};return k}function y(a,b,c,d){return{restrict:"ECA",priority:-400,compile:function(e){var f=e.html();return function(e,g,h){var i=c.$current,j=z(e,h,g,d),k=i&&i.locals[j];if(k){g.data("$uiView",{name:j,state:k.$$state}),g.html(k.$template?k.$template:f);var l=a(g.contents());if(k.$$controller){k.$scope=e;var m=b(k.$$controller,k);k.$$controllerAs&&(e[k.$$controllerAs]=m),g.data("$ngControllerController",m),g.children().data("$ngControllerController",m)}l(e)}}}}}function z(a,b,c,d){var e=d(b.uiView||b.name||"")(a),f=c.inheritedData("$uiView");return e.indexOf("@")>=0?e:e+"@"+(f?f.state.name:"")}function A(a,b){var c,d=a.match(/^\s*({[^}]*})\s*$/);if(d&&(a=b+"("+d[1]+")"),c=a.replace(/\n/g," ").match(/^([^(]+?)\s*(\((.*)\))?$/),!c||4!==c.length)throw new Error("Invalid state ref '"+a+"'");return{state:c[1],paramExpr:c[3]||null}}function B(a){var b=a.parent().inheritedData("$uiView");return b&&b.state&&b.state.name?b.state:void 0}function C(a,c){var d=["location","inherit","reload"];return{restrict:"A",require:["?^uiSrefActive","?^uiSrefActiveEq"],link:function(e,f,g,h){var i=A(g.uiSref,a.current.name),j=null,k=B(f)||a.$current,l=null,m="A"===f.prop("tagName"),n="FORM"===f[0].nodeName,o=n?"action":"href",p=!0,q={relative:k,inherit:!0},r=e.$eval(g.uiSrefOpts)||{};b.forEach(d,function(a){a in r&&(q[a]=r[a])});var s=function(c){if(c&&(j=b.copy(c)),p){l=a.href(i.state,j,q);var d=h[1]||h[0];return d&&d.$$setStateInfo(i.state,j),null===l?(p=!1,!1):void g.$set(o,l)}};i.paramExpr&&(e.$watch(i.paramExpr,function(a){a!==j&&s(a)},!0),j=b.copy(e.$eval(i.paramExpr))),s(),n||f.bind("click",function(b){var d=b.which||b.button;if(!(d>1||b.ctrlKey||b.metaKey||b.shiftKey||f.attr("target"))){var e=c(function(){a.go(i.state,j,q)});b.preventDefault();var g=m&&!l?1:0;b.preventDefault=function(){g--<=0&&c.cancel(e)}}})}}}function D(a,b,c){return{restrict:"A",controller:["$scope","$element","$attrs",function(b,d,e){function f(){g()?d.addClass(j):d.removeClass(j)}function g(){return"undefined"!=typeof e.uiSrefActiveEq?h&&a.is(h.name,i):h&&a.includes(h.name,i)}var h,i,j;j=c(e.uiSrefActiveEq||e.uiSrefActive||"",!1)(b),this.$$setStateInfo=function(b,c){h=a.get(b,B(d)),i=c,f()},b.$on("$stateChangeSuccess",f)}]}}function E(a){var b=function(b){return a.is(b)};return b.$stateful=!0,b}function F(a){var b=function(b){return a.includes(b)};return b.$stateful=!0,b}var G=b.isDefined,H=b.isFunction,I=b.isString,J=b.isObject,K=b.isArray,L=b.forEach,M=b.extend,N=b.copy;b.module("ui.router.util",["ng"]),b.module("ui.router.router",["ui.router.util"]),b.module("ui.router.state",["ui.router.router","ui.router.util"]),b.module("ui.router",["ui.router.state"]),b.module("ui.router.compat",["ui.router"]),o.$inject=["$q","$injector"],b.module("ui.router.util").service("$resolve",o),p.$inject=["$http","$templateCache","$injector"],b.module("ui.router.util").service("$templateFactory",p);var O;q.prototype.concat=function(a,b){var c={caseInsensitive:O.caseInsensitive(),strict:O.strictMode(),squash:O.defaultSquashPolicy()};return new q(this.sourcePath+a+this.sourceSearch,M(c,b),this)},q.prototype.toString=function(){return this.source},q.prototype.exec=function(a,b){function c(a){function b(a){return a.split("").reverse().join("")}function c(a){return a.replace(/\\-/,"-")}var d=b(a).split(/-(?!\\)/),e=n(d,b);return n(e,c).reverse()}var d=this.regexp.exec(a);if(!d)return null;b=b||{};var e,f,g,h=this.parameters(),i=h.length,j=this.segments.length-1,k={};if(j!==d.length-1)throw new Error("Unbalanced capture group in route '"+this.source+"'");for(e=0;j>e;e++){g=h[e];var l=this.params[g],m=d[e+1];for(f=0;f<l.replace;f++)l.replace[f].from===m&&(m=l.replace[f].to);m&&l.array===!0&&(m=c(m)),k[g]=l.value(m)}for(;i>e;e++)g=h[e],k[g]=this.params[g].value(b[g]);return k},q.prototype.parameters=function(a){return G(a)?this.params[a]||null:this.$$paramNames},q.prototype.validates=function(a){return this.params.$$validates(a)},q.prototype.format=function(a){function b(a){return encodeURIComponent(a).replace(/-/g,function(a){return"%5C%"+a.charCodeAt(0).toString(16).toUpperCase()})}a=a||{};var c=this.segments,d=this.parameters(),e=this.params;if(!this.validates(a))return null;var f,g=!1,h=c.length-1,i=d.length,j=c[0];for(f=0;i>f;f++){var k=h>f,l=d[f],m=e[l],o=m.value(a[l]),p=m.isOptional&&m.type.equals(m.value(),o),q=p?m.squash:!1,r=m.type.encode(o);if(k){var s=c[f+1];if(q===!1)null!=r&&(j+=K(r)?n(r,b).join("-"):encodeURIComponent(r)),j+=s;else if(q===!0){var t=j.match(/\/$/)?/\/?(.*)/:/(.*)/;j+=s.match(t)[1]}else I(q)&&(j+=q+s)}else{if(null==r||p&&q!==!1)continue;K(r)||(r=[r]),r=n(r,encodeURIComponent).join("&"+l+"="),j+=(g?"&":"?")+(l+"="+r),g=!0}}return j},r.prototype.is=function(){return!0},r.prototype.encode=function(a){return a},r.prototype.decode=function(a){return a},r.prototype.equals=function(a,b){return a==b},r.prototype.$subPattern=function(){var a=this.pattern.toString();return a.substr(1,a.length-2)},r.prototype.pattern=/.*/,r.prototype.toString=function(){return"{Type:"+this.name+"}"},r.prototype.$asArray=function(a,b){function d(a,b){function d(a,b){return function(){return a[b].apply(a,arguments)}}function e(a){return K(a)?a:G(a)?[a]:[]}function f(a){switch(a.length){case 0:return c;case 1:return"auto"===b?a[0]:a;default:return a}}function g(a){return!a}function h(a,b){return function(c){c=e(c);var d=n(c,a);return b===!0?0===m(d,g).length:f(d)}}function i(a){return function(b,c){var d=e(b),f=e(c);if(d.length!==f.length)return!1;for(var g=0;g<d.length;g++)if(!a(d[g],f[g]))return!1;return!0}}this.encode=h(d(a,"encode")),this.decode=h(d(a,"decode")),this.is=h(d(a,"is"),!0),this.equals=i(d(a,"equals")),this.pattern=a.pattern,this.$arrayMode=b}if(!a)return this;if("auto"===a&&!b)throw new Error("'auto' array mode is for query parameters only");return new d(this,a)},b.module("ui.router.util").provider("$urlMatcherFactory",s),b.module("ui.router.util").run(["$urlMatcherFactory",function(){}]),t.$inject=["$locationProvider","$urlMatcherFactoryProvider"],b.module("ui.router.router").provider("$urlRouter",t),u.$inject=["$urlRouterProvider","$urlMatcherFactoryProvider"],b.module("ui.router.state").value("$stateParams",{}).provider("$state",u),v.$inject=[],b.module("ui.router.state").provider("$view",v),b.module("ui.router.state").provider("$uiViewScroll",w),x.$inject=["$state","$injector","$uiViewScroll","$interpolate"],y.$inject=["$compile","$controller","$state","$interpolate"],b.module("ui.router.state").directive("uiView",x),b.module("ui.router.state").directive("uiView",y),C.$inject=["$state","$timeout"],D.$inject=["$state","$stateParams","$interpolate"],b.module("ui.router.state").directive("uiSref",C).directive("uiSrefActive",D).directive("uiSrefActiveEq",D),E.$inject=["$state"],F.$inject=["$state"],b.module("ui.router.state").filter("isState",E).filter("includedByState",F)}(window,window.angular);
/*
 AngularJS v1.2.28
 (c) 2010-2014 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(H,a,A){'use strict';function D(p,g){g=g||{};a.forEach(g,function(a,c){delete g[c]});for(var c in p)!p.hasOwnProperty(c)||"$"===c.charAt(0)&&"$"===c.charAt(1)||(g[c]=p[c]);return g}var v=a.$$minErr("$resource"),C=/^(\.[a-zA-Z_$][0-9a-zA-Z_$]*)+$/;a.module("ngResource",["ng"]).factory("$resource",["$http","$q",function(p,g){function c(a,c){this.template=a;this.defaults=c||{};this.urlParams={}}function t(n,w,l){function r(h,d){var e={};d=x({},w,d);s(d,function(b,d){u(b)&&(b=b());var k;if(b&&
b.charAt&&"@"==b.charAt(0)){k=h;var a=b.substr(1);if(null==a||""===a||"hasOwnProperty"===a||!C.test("."+a))throw v("badmember",a);for(var a=a.split("."),f=0,c=a.length;f<c&&k!==A;f++){var g=a[f];k=null!==k?k[g]:A}}else k=b;e[d]=k});return e}function e(a){return a.resource}function f(a){D(a||{},this)}var F=new c(n);l=x({},B,l);s(l,function(h,d){var c=/^(POST|PUT|PATCH)$/i.test(h.method);f[d]=function(b,d,k,w){var q={},n,l,y;switch(arguments.length){case 4:y=w,l=k;case 3:case 2:if(u(d)){if(u(b)){l=
b;y=d;break}l=d;y=k}else{q=b;n=d;l=k;break}case 1:u(b)?l=b:c?n=b:q=b;break;case 0:break;default:throw v("badargs",arguments.length);}var t=this instanceof f,m=t?n:h.isArray?[]:new f(n),z={},B=h.interceptor&&h.interceptor.response||e,C=h.interceptor&&h.interceptor.responseError||A;s(h,function(a,b){"params"!=b&&("isArray"!=b&&"interceptor"!=b)&&(z[b]=G(a))});c&&(z.data=n);F.setUrlParams(z,x({},r(n,h.params||{}),q),h.url);q=p(z).then(function(b){var d=b.data,k=m.$promise;if(d){if(a.isArray(d)!==!!h.isArray)throw v("badcfg",
h.isArray?"array":"object",a.isArray(d)?"array":"object");h.isArray?(m.length=0,s(d,function(b){"object"===typeof b?m.push(new f(b)):m.push(b)})):(D(d,m),m.$promise=k)}m.$resolved=!0;b.resource=m;return b},function(b){m.$resolved=!0;(y||E)(b);return g.reject(b)});q=q.then(function(b){var a=B(b);(l||E)(a,b.headers);return a},C);return t?q:(m.$promise=q,m.$resolved=!1,m)};f.prototype["$"+d]=function(b,a,k){u(b)&&(k=a,a=b,b={});b=f[d].call(this,b,this,a,k);return b.$promise||b}});f.bind=function(a){return t(n,
x({},w,a),l)};return f}var B={get:{method:"GET"},save:{method:"POST"},query:{method:"GET",isArray:!0},remove:{method:"DELETE"},"delete":{method:"DELETE"}},E=a.noop,s=a.forEach,x=a.extend,G=a.copy,u=a.isFunction;c.prototype={setUrlParams:function(c,g,l){var r=this,e=l||r.template,f,p,h=r.urlParams={};s(e.split(/\W/),function(a){if("hasOwnProperty"===a)throw v("badname");!/^\d+$/.test(a)&&(a&&RegExp("(^|[^\\\\]):"+a+"(\\W|$)").test(e))&&(h[a]=!0)});e=e.replace(/\\:/g,":");g=g||{};s(r.urlParams,function(d,
c){f=g.hasOwnProperty(c)?g[c]:r.defaults[c];a.isDefined(f)&&null!==f?(p=encodeURIComponent(f).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"%20").replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+"),e=e.replace(RegExp(":"+c+"(\\W|$)","g"),function(a,c){return p+c})):e=e.replace(RegExp("(/?):"+c+"(\\W|$)","g"),function(a,c,d){return"/"==d.charAt(0)?d:c+d})});e=e.replace(/\/+$/,"")||"/";e=e.replace(/\/\.(?=\w+($|\?))/,".");c.url=e.replace(/\/\\\./,
"/.");s(g,function(a,e){r.urlParams[e]||(c.params=c.params||{},c.params[e]=a)})}};return t}])})(window,window.angular);
//# sourceMappingURL=angular-resource.min.js.map

/*
 AngularJS v1.2.28
 (c) 2010-2014 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(q,g,r){'use strict';function F(a){var d=[];t(d,g.noop).chars(a);return d.join("")}function l(a){var d={};a=a.split(",");var c;for(c=0;c<a.length;c++)d[a[c]]=!0;return d}function G(a,d){function c(a,b,c,h){b=g.lowercase(b);if(u[b])for(;f.last()&&v[f.last()];)e("",f.last());w[b]&&f.last()==b&&e("",b);(h=x[b]||!!h)||f.push(b);var n={};c.replace(H,function(a,b,d,c,e){n[b]=s(d||c||e||"")});d.start&&d.start(b,n,h)}function e(a,b){var c=0,e;if(b=g.lowercase(b))for(c=f.length-1;0<=c&&f[c]!=b;c--);
if(0<=c){for(e=f.length-1;e>=c;e--)d.end&&d.end(f[e]);f.length=c}}"string"!==typeof a&&(a=null===a||"undefined"===typeof a?"":""+a);var b,k,f=[],n=a,h;for(f.last=function(){return f[f.length-1]};a;){h="";k=!0;if(f.last()&&y[f.last()])a=a.replace(RegExp("(.*)<\\s*\\/\\s*"+f.last()+"[^>]*>","i"),function(a,b){b=b.replace(I,"$1").replace(J,"$1");d.chars&&d.chars(s(b));return""}),e("",f.last());else{if(0===a.indexOf("\x3c!--"))b=a.indexOf("--",4),0<=b&&a.lastIndexOf("--\x3e",b)===b&&(d.comment&&d.comment(a.substring(4,
b)),a=a.substring(b+3),k=!1);else if(z.test(a)){if(b=a.match(z))a=a.replace(b[0],""),k=!1}else if(K.test(a)){if(b=a.match(A))a=a.substring(b[0].length),b[0].replace(A,e),k=!1}else L.test(a)&&((b=a.match(B))?(b[4]&&(a=a.substring(b[0].length),b[0].replace(B,c)),k=!1):(h+="<",a=a.substring(1)));k&&(b=a.indexOf("<"),h+=0>b?a:a.substring(0,b),a=0>b?"":a.substring(b),d.chars&&d.chars(s(h)))}if(a==n)throw M("badparse",a);n=a}e()}function s(a){if(!a)return"";var d=N.exec(a);a=d[1];var c=d[3];if(d=d[2])p.innerHTML=
d.replace(/</g,"&lt;"),d="textContent"in p?p.textContent:p.innerText;return a+d+c}function C(a){return a.replace(/&/g,"&amp;").replace(O,function(a){var c=a.charCodeAt(0);a=a.charCodeAt(1);return"&#"+(1024*(c-55296)+(a-56320)+65536)+";"}).replace(P,function(a){return"&#"+a.charCodeAt(0)+";"}).replace(/</g,"&lt;").replace(/>/g,"&gt;")}function t(a,d){var c=!1,e=g.bind(a,a.push);return{start:function(a,k,f){a=g.lowercase(a);!c&&y[a]&&(c=a);c||!0!==D[a]||(e("<"),e(a),g.forEach(k,function(c,f){var m=
g.lowercase(f),k="img"===a&&"src"===m||"background"===m;!0!==Q[m]||!0===E[m]&&!d(c,k)||(e(" "),e(f),e('="'),e(C(c)),e('"'))}),e(f?"/>":">"))},end:function(a){a=g.lowercase(a);c||!0!==D[a]||(e("</"),e(a),e(">"));a==c&&(c=!1)},chars:function(a){c||e(C(a))}}}var M=g.$$minErr("$sanitize"),B=/^<((?:[a-zA-Z])[\w:-]*)((?:\s+[\w:-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)\s*(>?)/,A=/^<\/\s*([\w:-]+)[^>]*>/,H=/([\w:-]+)(?:\s*=\s*(?:(?:"((?:[^"])*)")|(?:'((?:[^'])*)')|([^>\s]+)))?/g,L=/^</,
K=/^<\//,I=/\x3c!--(.*?)--\x3e/g,z=/<!DOCTYPE([^>]*?)>/i,J=/<!\[CDATA\[(.*?)]]\x3e/g,O=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,P=/([^\#-~| |!])/g,x=l("area,br,col,hr,img,wbr");q=l("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr");r=l("rp,rt");var w=g.extend({},r,q),u=g.extend({},q,l("address,article,aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,script,section,table,ul")),v=g.extend({},r,l("a,abbr,acronym,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var")),
y=l("script,style"),D=g.extend({},x,u,v,w),E=l("background,cite,href,longdesc,src,usemap"),Q=g.extend({},E,l("abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,scope,scrolling,shape,size,span,start,summary,target,title,type,valign,value,vspace,width")),p=document.createElement("pre"),N=/^(\s*)([\s\S]*?)(\s*)$/;g.module("ngSanitize",[]).provider("$sanitize",
function(){this.$get=["$$sanitizeUri",function(a){return function(d){var c=[];G(d,t(c,function(c,b){return!/^unsafe/.test(a(c,b))}));return c.join("")}}]});g.module("ngSanitize").filter("linky",["$sanitize",function(a){var d=/((ftp|https?):\/\/|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"]/,c=/^mailto:/;return function(e,b){function k(a){a&&m.push(F(a))}function f(a,c){m.push("<a ");g.isDefined(b)&&(m.push('target="'),m.push(b),m.push('" '));m.push('href="',a.replace('"',"&quot;"),'">');k(c);m.push("</a>")}
if(!e)return e;for(var n,h=e,m=[],l,p;n=h.match(d);)l=n[0],n[2]==n[3]&&(l="mailto:"+l),p=n.index,k(h.substr(0,p)),f(l,n[0].replace(c,"")),h=h.substring(p+n[0].length);k(h);return a(m.join(""))}}])})(window,window.angular);
//# sourceMappingURL=angular-sanitize.min.js.map

/*
 AngularJS v1.2.28
 (c) 2010-2014 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(G,d,P){'use strict';d.module("ngAnimate",["ng"]).directive("ngAnimateChildren",function(){return function(H,z,e){e=e.ngAnimateChildren;d.isString(e)&&0===e.length?z.data("$$ngAnimateChildren",!0):H.$watch(e,function(d){z.data("$$ngAnimateChildren",!!d)})}}).factory("$$animateReflow",["$$rAF","$document",function(d,z){return function(e){return d(function(){e()})}}]).config(["$provide","$animateProvider",function(H,z){function e(d){for(var e=0;e<d.length;e++){var g=d[e];if(g.nodeType==ba)return g}}
function E(g){return d.element(e(g))}var q=d.noop,w=d.forEach,Q=z.$$selectors,ba=1,g="$$ngAnimateState",ga="$$ngAnimateChildren",I="ng-animate",h={running:!0};H.decorator("$animate",["$delegate","$injector","$sniffer","$rootElement","$$asyncCallback","$rootScope","$document",function(y,G,aa,J,K,k,P){function R(a){var b=a.data(g)||{};b.running=!0;a.data(g,b)}function ha(a){if(a){var b=[],c={};a=a.substr(1).split(".");(aa.transitions||aa.animations)&&b.push(G.get(Q[""]));for(var f=0;f<a.length;f++){var d=
a[f],e=Q[d];e&&!c[d]&&(b.push(G.get(e)),c[d]=!0)}return b}}function M(a,b,c){function f(a,b){var c=a[b],d=a["before"+b.charAt(0).toUpperCase()+b.substr(1)];if(c||d)return"leave"==b&&(d=c,c=null),S.push({event:b,fn:c}),n.push({event:b,fn:d}),!0}function e(b,d,f){var g=[];w(b,function(a){a.fn&&g.push(a)});var r=0;w(g,function(b,e){var C=function(){a:{if(d){(d[e]||q)();if(++r<g.length)break a;d=null}f()}};switch(b.event){case "setClass":d.push(b.fn(a,l,A,C));break;case "addClass":d.push(b.fn(a,l||c,
C));break;case "removeClass":d.push(b.fn(a,A||c,C));break;default:d.push(b.fn(a,C))}});d&&0===d.length&&f()}var g=a[0];if(g){var p="setClass"==b,h=p||"addClass"==b||"removeClass"==b,l,A;d.isArray(c)&&(l=c[0],A=c[1],c=l+" "+A);var k=a.attr("class")+" "+c;if(U(k)){var t=q,v=[],n=[],x=q,u=[],S=[],k=(" "+k).replace(/\s+/g,".");w(ha(k),function(a){!f(a,b)&&p&&(f(a,"addClass"),f(a,"removeClass"))});return{node:g,event:b,className:c,isClassBased:h,isSetClassOperation:p,before:function(a){t=a;e(n,v,function(){t=
q;a()})},after:function(a){x=a;e(S,u,function(){x=q;a()})},cancel:function(){v&&(w(v,function(a){(a||q)(!0)}),t(!0));u&&(w(u,function(a){(a||q)(!0)}),x(!0))}}}}}function F(a,b,c,f,e,m,p){function k(d){var e="$animate:"+d;x&&(x[e]&&0<x[e].length)&&K(function(){c.triggerHandler(e,{event:a,className:b})})}function l(){k("before")}function A(){k("after")}function q(){k("close");p&&K(function(){p()})}function t(){t.hasBeenRun||(t.hasBeenRun=!0,m())}function v(){if(!v.hasBeenRun){v.hasBeenRun=!0;var e=
c.data(g);e&&(n&&n.isClassBased?B(c,b):(K(function(){var e=c.data(g)||{};s==e.index&&B(c,b,a)}),c.data(g,e)));q()}}var n=M(c,a,b);if(n){b=n.className;var x=d.element._data(n.node),x=x&&x.events;f||(f=e?e.parent():c.parent());var u=c.data(g)||{};e=u.active||{};var h=u.totalActive||0,C=u.last,D;n.isClassBased&&(D=u.running||u.disabled||C&&!C.isClassBased);if(D||N(c,f))t(),l(),A(),v();else{f=!1;if(0<h){D=[];if(n.isClassBased)"setClass"==C.event?(D.push(C),B(c,b)):e[b]&&(y=e[b],y.event==a?f=!0:(D.push(y),
B(c,b)));else if("leave"==a&&e["ng-leave"])f=!0;else{for(var y in e)D.push(e[y]),B(c,y);e={};h=0}0<D.length&&w(D,function(a){a.cancel()})}!n.isClassBased||(n.isSetClassOperation||f)||(f="addClass"==a==c.hasClass(b));if(f)t(),l(),A(),q();else{if("leave"==a)c.one("$destroy",function(a){a=d.element(this);var b=a.data(g);b&&(b=b.active["ng-leave"])&&(b.cancel(),B(a,"ng-leave"))});c.addClass(I);var s=O++;h++;e[b]=n;c.data(g,{last:n,active:e,index:s,totalActive:h});l();n.before(function(e){var d=c.data(g);
e=e||!d||!d.active[b]||n.isClassBased&&d.active[b].event!=a;t();!0===e?v():(A(),n.after(v))})}}}else t(),l(),A(),v()}function V(a){if(a=e(a))a=d.isFunction(a.getElementsByClassName)?a.getElementsByClassName(I):a.querySelectorAll("."+I),w(a,function(a){a=d.element(a);(a=a.data(g))&&a.active&&w(a.active,function(a){a.cancel()})})}function B(a,b){if(e(a)==e(J))h.disabled||(h.running=!1,h.structural=!1);else if(b){var c=a.data(g)||{},d=!0===b;!d&&(c.active&&c.active[b])&&(c.totalActive--,delete c.active[b]);
if(d||!c.totalActive)a.removeClass(I),a.removeData(g)}}function N(a,b){if(h.disabled)return!0;if(e(a)==e(J))return h.running;var c,f,k;do{if(0===b.length)break;var m=e(b)==e(J),p=m?h:b.data(g)||{};if(p.disabled)return!0;m&&(k=!0);!1!==c&&(m=b.data(ga),d.isDefined(m)&&(c=m));f=f||p.running||p.last&&!p.last.isClassBased}while(b=b.parent());return!k||!c&&f}var O=0;J.data(g,h);k.$$postDigest(function(){k.$$postDigest(function(){h.running=!1})});var W=z.classNameFilter(),U=W?function(a){return W.test(a)}:
function(){return!0};return{enter:function(a,b,c,e){a=d.element(a);b=b&&d.element(b);c=c&&d.element(c);R(a);y.enter(a,b,c);k.$$postDigest(function(){a=E(a);F("enter","ng-enter",a,b,c,q,e)})},leave:function(a,b){a=d.element(a);V(a);R(a);k.$$postDigest(function(){F("leave","ng-leave",E(a),null,null,function(){y.leave(a)},b)})},move:function(a,b,c,e){a=d.element(a);b=b&&d.element(b);c=c&&d.element(c);V(a);R(a);y.move(a,b,c);k.$$postDigest(function(){a=E(a);F("move","ng-move",a,b,c,q,e)})},addClass:function(a,
b,c){a=d.element(a);a=E(a);F("addClass",b,a,null,null,function(){y.addClass(a,b)},c)},removeClass:function(a,b,c){a=d.element(a);a=E(a);F("removeClass",b,a,null,null,function(){y.removeClass(a,b)},c)},setClass:function(a,b,c,e){a=d.element(a);a=E(a);F("setClass",[b,c],a,null,null,function(){y.setClass(a,b,c)},e)},enabled:function(a,b){switch(arguments.length){case 2:if(a)B(b);else{var c=b.data(g)||{};c.disabled=!0;b.data(g,c)}break;case 1:h.disabled=!a;break;default:a=!h.disabled}return!!a}}}]);z.register("",
["$window","$sniffer","$timeout","$$animateReflow",function(g,h,z,J){function K(){L||(L=J(function(){T=[];L=null;s={}}))}function k(a,X){L&&L();T.push(X);L=J(function(){w(T,function(a){a()});T=[];L=null;s={}})}function E(a,X){var b=e(a);a=d.element(b);Y.push(a);b=Date.now()+X;b<=fa||(z.cancel(ea),fa=b,ea=z(function(){R(Y);Y=[]},X,!1))}function R(a){w(a,function(a){(a=a.data(u))&&(a.closeAnimationFn||q)()})}function I(a,b){var c=b?s[b]:null;if(!c){var e=0,d=0,f=0,k=0,h,Z,$,m;w(a,function(a){if(a.nodeType==
ba){a=g.getComputedStyle(a)||{};$=a[p+Q];e=Math.max(M($),e);m=a[p+t];h=a[p+v];d=Math.max(M(h),d);Z=a[l+v];k=Math.max(M(Z),k);var b=M(a[l+Q]);0<b&&(b*=parseInt(a[l+n],10)||1);f=Math.max(b,f)}});c={total:0,transitionPropertyStyle:m,transitionDurationStyle:$,transitionDelayStyle:h,transitionDelay:d,transitionDuration:e,animationDelayStyle:Z,animationDelay:k,animationDuration:f};b&&(s[b]=c)}return c}function M(a){var b=0;a=d.isString(a)?a.split(/\s*,\s*/):[];w(a,function(a){b=Math.max(parseFloat(a)||
0,b)});return b}function F(a){var b=a.parent(),c=b.data(x);c||(b.data(x,++da),c=da);return c+"-"+e(a).getAttribute("class")}function V(a,b,c,d){var f=F(b),g=f+" "+c,k=s[g]?++s[g].total:0,h={};if(0<k){var m=c+"-stagger",h=f+" "+m;(f=!s[h])&&b.addClass(m);h=I(b,h);f&&b.removeClass(m)}d=d||function(a){return a()};b.addClass(c);var m=b.data(u)||{},n=d(function(){return I(b,g)});d=n.transitionDuration;f=n.animationDuration;if(0===d&&0===f)return b.removeClass(c),!1;b.data(u,{running:m.running||0,itemIndex:k,
stagger:h,timings:n,closeAnimationFn:q});a=0<m.running||"setClass"==a;0<d&&B(b,c,a);0<f&&(0<h.animationDelay&&0===h.animationDuration)&&(e(b).style[l]="none 0s");return!0}function B(a,b,c){"ng-enter"!=b&&("ng-move"!=b&&"ng-leave"!=b)&&c?a.addClass(S):e(a).style[p+t]="none"}function N(a,b){var c=p+t,d=e(a);d.style[c]&&0<d.style[c].length&&(d.style[c]="");a.removeClass(S)}function O(a){var b=l;a=e(a);a.style[b]&&0<a.style[b].length&&(a.style[b]="")}function W(a,b,c,d){function g(a){b.off(z,h);b.removeClass(n);
f(b,c);a=e(b);for(var d in s)a.style.removeProperty(s[d])}function h(a){a.stopPropagation();var b=a.originalEvent||a;a=b.$manualTimeStamp||b.timeStamp||Date.now();b=parseFloat(b.elapsedTime.toFixed(C));Math.max(a-y,0)>=x&&b>=t&&d()}var k=e(b);a=b.data(u);if(-1!=k.getAttribute("class").indexOf(c)&&a){var n="";w(c.split(" "),function(a,b){n+=(0<b?" ":"")+a+"-active"});var p=a.stagger,l=a.timings,q=a.itemIndex,t=Math.max(l.transitionDuration,l.animationDuration),v=Math.max(l.transitionDelay,l.animationDelay),
x=v*ca,y=Date.now(),z=A+" "+H,r="",s=[];if(0<l.transitionDuration){var B=l.transitionPropertyStyle;-1==B.indexOf("all")&&(r+=m+"transition-property: "+B+";",r+=m+"transition-duration: "+l.transitionDurationStyle+";",s.push(m+"transition-property"),s.push(m+"transition-duration"))}0<q&&(0<p.transitionDelay&&0===p.transitionDuration&&(r+=m+"transition-delay: "+U(l.transitionDelayStyle,p.transitionDelay,q)+"; ",s.push(m+"transition-delay")),0<p.animationDelay&&0===p.animationDuration&&(r+=m+"animation-delay: "+
U(l.animationDelayStyle,p.animationDelay,q)+"; ",s.push(m+"animation-delay")));0<s.length&&(l=k.getAttribute("style")||"",k.setAttribute("style",l+"; "+r));b.on(z,h);b.addClass(n);a.closeAnimationFn=function(){g();d()};k=(q*(Math.max(p.animationDelay,p.transitionDelay)||0)+(v+t)*D)*ca;a.running++;E(b,k);return g}d()}function U(a,b,c){var d="";w(a.split(","),function(a,e){d+=(0<e?",":"")+(c*b+parseInt(a,10))+"s"});return d}function a(a,b,c,d){if(V(a,b,c,d))return function(a){a&&f(b,c)}}function b(a,
b,c,d){if(b.data(u))return W(a,b,c,d);f(b,c);d()}function c(c,d,e,f){var g=a(c,d,e);if(g){var h=g;k(d,function(){N(d,e);O(d);h=b(c,d,e,f)});return function(a){(h||q)(a)}}K();f()}function f(a,b){a.removeClass(b);var c=a.data(u);c&&(c.running&&c.running--,c.running&&0!==c.running||a.removeData(u))}function r(a,b){var c="";a=d.isArray(a)?a:a.split(/\s+/);w(a,function(a,d){a&&0<a.length&&(c+=(0<d?" ":"")+a+b)});return c}var m="",p,H,l,A;G.ontransitionend===P&&G.onwebkittransitionend!==P?(m="-webkit-",
p="WebkitTransition",H="webkitTransitionEnd transitionend"):(p="transition",H="transitionend");G.onanimationend===P&&G.onwebkitanimationend!==P?(m="-webkit-",l="WebkitAnimation",A="webkitAnimationEnd animationend"):(l="animation",A="animationend");var Q="Duration",t="Property",v="Delay",n="IterationCount",x="$$ngAnimateKey",u="$$ngAnimateCSS3Data",S="ng-animate-block-transitions",C=3,D=1.5,ca=1E3,s={},da=0,T=[],L,ea=null,fa=0,Y=[];return{enter:function(a,b){return c("enter",a,"ng-enter",b)},leave:function(a,
b){return c("leave",a,"ng-leave",b)},move:function(a,b){return c("move",a,"ng-move",b)},beforeSetClass:function(b,c,d,e){var f=r(d,"-remove")+" "+r(c,"-add"),g=a("setClass",b,f,function(a){var e=b.attr("class");b.removeClass(d);b.addClass(c);a=a();b.attr("class",e);return a});if(g)return k(b,function(){N(b,f);O(b);e()}),g;K();e()},beforeAddClass:function(b,c,d){var e=a("addClass",b,r(c,"-add"),function(a){b.addClass(c);a=a();b.removeClass(c);return a});if(e)return k(b,function(){N(b,c);O(b);d()}),
e;K();d()},setClass:function(a,c,d,e){d=r(d,"-remove");c=r(c,"-add");return b("setClass",a,d+" "+c,e)},addClass:function(a,c,d){return b("addClass",a,r(c,"-add"),d)},beforeRemoveClass:function(b,c,d){var e=a("removeClass",b,r(c,"-remove"),function(a){var d=b.attr("class");b.removeClass(c);a=a();b.attr("class",d);return a});if(e)return k(b,function(){N(b,c);O(b);d()}),e;d()},removeClass:function(a,c,d){return b("removeClass",a,r(c,"-remove"),d)}}}])}])})(window,window.angular);
//# sourceMappingURL=angular-animate.min.js.map

/**
 * angular-ui-utils - Swiss-Army-Knife of AngularJS tools (with no external dependencies!)
 * @version v0.1.1 - 2014-02-05
 * @link http://angular-ui.github.com
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
"use strict";angular.module("ui.alias",[]).config(["$compileProvider","uiAliasConfig",function(a,b){b=b||{},angular.forEach(b,function(b,c){angular.isString(b)&&(b={replace:!0,template:b}),a.directive(c,function(){return b})})}]),angular.module("ui.event",[]).directive("uiEvent",["$parse",function(a){return function(b,c,d){var e=b.$eval(d.uiEvent);angular.forEach(e,function(d,e){var f=a(d);c.bind(e,function(a){var c=Array.prototype.slice.call(arguments);c=c.splice(1),f(b,{$event:a,$params:c}),b.$$phase||b.$apply()})})}}]),angular.module("ui.format",[]).filter("format",function(){return function(a,b){var c=a;if(angular.isString(c)&&void 0!==b)if(angular.isArray(b)||angular.isObject(b)||(b=[b]),angular.isArray(b)){var d=b.length,e=function(a,c){return c=parseInt(c,10),c>=0&&d>c?b[c]:a};c=c.replace(/\$([0-9]+)/g,e)}else angular.forEach(b,function(a,b){c=c.split(":"+b).join(a)});return c}}),angular.module("ui.highlight",[]).filter("highlight",function(){return function(a,b,c){return b||angular.isNumber(b)?(a=a.toString(),b=b.toString(),c?a.split(b).join('<span class="ui-match">'+b+"</span>"):a.replace(new RegExp(b,"gi"),'<span class="ui-match">$&</span>')):a}}),angular.module("ui.include",[]).directive("uiInclude",["$http","$templateCache","$anchorScroll","$compile",function(a,b,c,d){return{restrict:"ECA",terminal:!0,compile:function(e,f){var g=f.uiInclude||f.src,h=f.fragment||"",i=f.onload||"",j=f.autoscroll;return function(e,f){function k(){var k=++m,o=e.$eval(g),p=e.$eval(h);o?a.get(o,{cache:b}).success(function(a){if(k===m){l&&l.$destroy(),l=e.$new();var b;b=p?angular.element("<div/>").html(a).find(p):angular.element("<div/>").html(a).contents(),f.html(b),d(b)(l),!angular.isDefined(j)||j&&!e.$eval(j)||c(),l.$emit("$includeContentLoaded"),e.$eval(i)}}).error(function(){k===m&&n()}):n()}var l,m=0,n=function(){l&&(l.$destroy(),l=null),f.html("")};e.$watch(h,k),e.$watch(g,k)}}}}]),angular.module("ui.indeterminate",[]).directive("uiIndeterminate",[function(){return{compile:function(a,b){return b.type&&"checkbox"===b.type.toLowerCase()?function(a,b,c){a.$watch(c.uiIndeterminate,function(a){b[0].indeterminate=!!a})}:angular.noop}}}]),angular.module("ui.inflector",[]).filter("inflector",function(){function a(a){return a.replace(/^([a-z])|\s+([a-z])/g,function(a){return a.toUpperCase()})}function b(a,b){return a.replace(/[A-Z]/g,function(a){return b+a})}var c={humanize:function(c){return a(b(c," ").split("_").join(" "))},underscore:function(a){return a.substr(0,1).toLowerCase()+b(a.substr(1),"_").toLowerCase().split(" ").join("_")},variable:function(b){return b=b.substr(0,1).toLowerCase()+a(b.split("_").join(" ")).substr(1).split(" ").join("")}};return function(a,b){return b!==!1&&angular.isString(a)?(b=b||"humanize",c[b](a)):a}}),angular.module("ui.jq",[]).value("uiJqConfig",{}).directive("uiJq",["uiJqConfig","$timeout",function(a,b){return{restrict:"A",compile:function(c,d){if(!angular.isFunction(c[d.uiJq]))throw new Error('ui-jq: The "'+d.uiJq+'" function does not exist');var e=a&&a[d.uiJq];return function(a,c,d){function f(){b(function(){c[d.uiJq].apply(c,g)},0,!1)}var g=[];d.uiOptions?(g=a.$eval("["+d.uiOptions+"]"),angular.isObject(e)&&angular.isObject(g[0])&&(g[0]=angular.extend({},e,g[0]))):e&&(g=[e]),d.ngModel&&c.is("select,input,textarea")&&c.bind("change",function(){c.trigger("input")}),d.uiRefresh&&a.$watch(d.uiRefresh,function(){f()}),f()}}}}]),angular.module("ui.keypress",[]).factory("keypressHelper",["$parse",function(a){var b={8:"backspace",9:"tab",13:"enter",27:"esc",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down",45:"insert",46:"delete"},c=function(a){return a.charAt(0).toUpperCase()+a.slice(1)};return function(d,e,f,g){var h,i=[];h=e.$eval(g["ui"+c(d)]),angular.forEach(h,function(b,c){var d,e;e=a(b),angular.forEach(c.split(" "),function(a){d={expression:e,keys:{}},angular.forEach(a.split("-"),function(a){d.keys[a]=!0}),i.push(d)})}),f.bind(d,function(a){var c=!(!a.metaKey||a.ctrlKey),f=!!a.altKey,g=!!a.ctrlKey,h=!!a.shiftKey,j=a.keyCode;"keypress"===d&&!h&&j>=97&&122>=j&&(j-=32),angular.forEach(i,function(d){var i=d.keys[b[j]]||d.keys[j.toString()],k=!!d.keys.meta,l=!!d.keys.alt,m=!!d.keys.ctrl,n=!!d.keys.shift;i&&k===c&&l===f&&m===g&&n===h&&e.$apply(function(){d.expression(e,{$event:a})})})})}}]),angular.module("ui.keypress").directive("uiKeydown",["keypressHelper",function(a){return{link:function(b,c,d){a("keydown",b,c,d)}}}]),angular.module("ui.keypress").directive("uiKeypress",["keypressHelper",function(a){return{link:function(b,c,d){a("keypress",b,c,d)}}}]),angular.module("ui.keypress").directive("uiKeyup",["keypressHelper",function(a){return{link:function(b,c,d){a("keyup",b,c,d)}}}]),angular.module("ui.mask",[]).value("uiMaskConfig",{maskDefinitions:{9:/\d/,A:/[a-zA-Z]/,"*":/[a-zA-Z0-9]/}}).directive("uiMask",["uiMaskConfig",function(a){return{priority:100,require:"ngModel",restrict:"A",compile:function(){var b=a;return function(a,c,d,e){function f(a){return angular.isDefined(a)?(s(a),N?(k(),l(),!0):j()):j()}function g(a){angular.isDefined(a)&&(D=a,N&&w())}function h(a){return N?(G=o(a||""),I=n(G),e.$setValidity("mask",I),I&&G.length?p(G):void 0):a}function i(a){return N?(G=o(a||""),I=n(G),e.$viewValue=G.length?p(G):"",e.$setValidity("mask",I),""===G&&void 0!==e.$error.required&&e.$setValidity("required",!1),I?G:void 0):a}function j(){return N=!1,m(),angular.isDefined(P)?c.attr("placeholder",P):c.removeAttr("placeholder"),angular.isDefined(Q)?c.attr("maxlength",Q):c.removeAttr("maxlength"),c.val(e.$modelValue),e.$viewValue=e.$modelValue,!1}function k(){G=K=o(e.$modelValue||""),H=J=p(G),I=n(G);var a=I&&G.length?H:"";d.maxlength&&c.attr("maxlength",2*B[B.length-1]),c.attr("placeholder",D),c.val(a),e.$viewValue=a}function l(){O||(c.bind("blur",t),c.bind("mousedown mouseup",u),c.bind("input keyup click focus",w),O=!0)}function m(){O&&(c.unbind("blur",t),c.unbind("mousedown",u),c.unbind("mouseup",u),c.unbind("input",w),c.unbind("keyup",w),c.unbind("click",w),c.unbind("focus",w),O=!1)}function n(a){return a.length?a.length>=F:!0}function o(a){var b="",c=C.slice();return a=a.toString(),angular.forEach(E,function(b){a=a.replace(b,"")}),angular.forEach(a.split(""),function(a){c.length&&c[0].test(a)&&(b+=a,c.shift())}),b}function p(a){var b="",c=B.slice();return angular.forEach(D.split(""),function(d,e){a.length&&e===c[0]?(b+=a.charAt(0)||"_",a=a.substr(1),c.shift()):b+=d}),b}function q(a){var b=d.placeholder;return"undefined"!=typeof b&&b[a]?b[a]:"_"}function r(){return D.replace(/[_]+/g,"_").replace(/([^_]+)([a-zA-Z0-9])([^_])/g,"$1$2_$3").split("_")}function s(a){var b=0;if(B=[],C=[],D="","string"==typeof a){F=0;var c=!1,d=a.split("");angular.forEach(d,function(a,d){R.maskDefinitions[a]?(B.push(b),D+=q(d),C.push(R.maskDefinitions[a]),b++,c||F++):"?"===a?c=!0:(D+=a,b++)})}B.push(B.slice().pop()+1),E=r(),N=B.length>1?!0:!1}function t(){L=0,M=0,I&&0!==G.length||(H="",c.val(""),a.$apply(function(){e.$setViewValue("")}))}function u(a){"mousedown"===a.type?c.bind("mouseout",v):c.unbind("mouseout",v)}function v(){M=A(this),c.unbind("mouseout",v)}function w(b){b=b||{};var d=b.which,f=b.type;if(16!==d&&91!==d){var g,h=c.val(),i=J,j=o(h),k=K,l=!1,m=y(this)||0,n=L||0,q=m-n,r=B[0],s=B[j.length]||B.slice().shift(),t=M||0,u=A(this)>0,v=t>0,w=h.length>i.length||t&&h.length>i.length-t,C=h.length<i.length||t&&h.length===i.length-t,D=d>=37&&40>=d&&b.shiftKey,E=37===d,F=8===d||"keyup"!==f&&C&&-1===q,G=46===d||"keyup"!==f&&C&&0===q&&!v,H=(E||F||"click"===f)&&m>r;if(M=A(this),!D&&(!u||"click"!==f&&"keyup"!==f)){if("input"===f&&C&&!v&&j===k){for(;F&&m>r&&!x(m);)m--;for(;G&&s>m&&-1===B.indexOf(m);)m++;var I=B.indexOf(m);j=j.substring(0,I)+j.substring(I+1),l=!0}for(g=p(j),J=g,K=j,c.val(g),l&&a.$apply(function(){e.$setViewValue(j)}),w&&r>=m&&(m=r+1),H&&m--,m=m>s?s:r>m?r:m;!x(m)&&m>r&&s>m;)m+=H?-1:1;(H&&s>m||w&&!x(n))&&m++,L=m,z(this,m)}}}function x(a){return B.indexOf(a)>-1}function y(a){if(!a)return 0;if(void 0!==a.selectionStart)return a.selectionStart;if(document.selection){a.focus();var b=document.selection.createRange();return b.moveStart("character",-a.value.length),b.text.length}return 0}function z(a,b){if(!a)return 0;if(0!==a.offsetWidth&&0!==a.offsetHeight)if(a.setSelectionRange)a.focus(),a.setSelectionRange(b,b);else if(a.createTextRange){var c=a.createTextRange();c.collapse(!0),c.moveEnd("character",b),c.moveStart("character",b),c.select()}}function A(a){return a?void 0!==a.selectionStart?a.selectionEnd-a.selectionStart:document.selection?document.selection.createRange().text.length:0:0}var B,C,D,E,F,G,H,I,J,K,L,M,N=!1,O=!1,P=d.placeholder,Q=d.maxlength,R={};d.uiOptions?(R=a.$eval("["+d.uiOptions+"]"),angular.isObject(R[0])&&(R=function(a,b){for(var c in a)Object.prototype.hasOwnProperty.call(a,c)&&(b[c]?angular.extend(b[c],a[c]):b[c]=angular.copy(a[c]));return b}(b,R[0]))):R=b,d.$observe("uiMask",f),d.$observe("placeholder",g),e.$formatters.push(h),e.$parsers.push(i),c.bind("mousedown mouseup",u),Array.prototype.indexOf||(Array.prototype.indexOf=function(a){if(null===this)throw new TypeError;var b=Object(this),c=b.length>>>0;if(0===c)return-1;var d=0;if(arguments.length>1&&(d=Number(arguments[1]),d!==d?d=0:0!==d&&1/0!==d&&d!==-1/0&&(d=(d>0||-1)*Math.floor(Math.abs(d)))),d>=c)return-1;for(var e=d>=0?d:Math.max(c-Math.abs(d),0);c>e;e++)if(e in b&&b[e]===a)return e;return-1})}}}}]),angular.module("ui.reset",[]).value("uiResetConfig",null).directive("uiReset",["uiResetConfig",function(a){var b=null;return void 0!==a&&(b=a),{require:"ngModel",link:function(a,c,d,e){var f;f=angular.element('<a class="ui-reset" />'),c.wrap('<span class="ui-resetwrap" />').after(f),f.bind("click",function(c){c.preventDefault(),a.$apply(function(){e.$setViewValue(d.uiReset?a.$eval(d.uiReset):b),e.$render()})})}}}]),angular.module("ui.route",[]).directive("uiRoute",["$location","$parse",function(a,b){return{restrict:"AC",scope:!0,compile:function(c,d){var e;if(d.uiRoute)e="uiRoute";else if(d.ngHref)e="ngHref";else{if(!d.href)throw new Error("uiRoute missing a route or href property on "+c[0]);e="href"}return function(c,d,f){function g(b){var d=b.indexOf("#");d>-1&&(b=b.substr(d+1)),(j=function(){i(c,a.path().indexOf(b)>-1)})()}function h(b){var d=b.indexOf("#");d>-1&&(b=b.substr(d+1)),(j=function(){var d=new RegExp("^"+b+"$",["i"]);i(c,d.test(a.path()))})()}var i=b(f.ngModel||f.routeModel||"$uiRoute").assign,j=angular.noop;switch(e){case"uiRoute":f.uiRoute?h(f.uiRoute):f.$observe("uiRoute",h);break;case"ngHref":f.ngHref?g(f.ngHref):f.$observe("ngHref",g);break;case"href":g(f.href)}c.$on("$routeChangeSuccess",function(){j()}),c.$on("$stateChangeSuccess",function(){j()})}}}}]),angular.module("ui.scroll.jqlite",["ui.scroll"]).service("jqLiteExtras",["$log","$window",function(a,b){return{registerFor:function(a){var c,d,e,f,g,h,i;return d=angular.element.prototype.css,a.prototype.css=function(a,b){var c,e;return e=this,c=e[0],c&&3!==c.nodeType&&8!==c.nodeType&&c.style?d.call(e,a,b):void 0},h=function(a){return a&&a.document&&a.location&&a.alert&&a.setInterval},i=function(a,b,c){var d,e,f,g,i;return d=a[0],i={top:["scrollTop","pageYOffset","scrollLeft"],left:["scrollLeft","pageXOffset","scrollTop"]}[b],e=i[0],g=i[1],f=i[2],h(d)?angular.isDefined(c)?d.scrollTo(a[f].call(a),c):g in d?d[g]:d.document.documentElement[e]:angular.isDefined(c)?d[e]=c:d[e]},b.getComputedStyle?(f=function(a){return b.getComputedStyle(a,null)},c=function(a,b){return parseFloat(b)}):(f=function(a){return a.currentStyle},c=function(a,b){var c,d,e,f,g,h,i;return c=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,f=new RegExp("^("+c+")(?!px)[a-z%]+$","i"),f.test(b)?(i=a.style,d=i.left,g=a.runtimeStyle,h=g&&g.left,g&&(g.left=i.left),i.left=b,e=i.pixelLeft,i.left=d,h&&(g.left=h),e):parseFloat(b)}),e=function(a,b){var d,e,g,i,j,k,l,m,n,o,p,q,r;return h(a)?(d=document.documentElement[{height:"clientHeight",width:"clientWidth"}[b]],{base:d,padding:0,border:0,margin:0}):(r={width:[a.offsetWidth,"Left","Right"],height:[a.offsetHeight,"Top","Bottom"]}[b],d=r[0],l=r[1],m=r[2],k=f(a),p=c(a,k["padding"+l])||0,q=c(a,k["padding"+m])||0,e=c(a,k["border"+l+"Width"])||0,g=c(a,k["border"+m+"Width"])||0,i=k["margin"+l],j=k["margin"+m],n=c(a,i)||0,o=c(a,j)||0,{base:d,padding:p+q,border:e+g,margin:n+o})},g=function(a,b,c){var d,g,h;return g=e(a,b),g.base>0?{base:g.base-g.padding-g.border,outer:g.base,outerfull:g.base+g.margin}[c]:(d=f(a),h=d[b],(0>h||null===h)&&(h=a.style[b]||0),h=parseFloat(h)||0,{base:h-g.padding-g.border,outer:h,outerfull:h+g.padding+g.border+g.margin}[c])},angular.forEach({before:function(a){var b,c,d,e,f,g,h;if(f=this,c=f[0],e=f.parent(),b=e.contents(),b[0]===c)return e.prepend(a);for(d=g=1,h=b.length-1;h>=1?h>=g:g>=h;d=h>=1?++g:--g)if(b[d]===c)return void angular.element(b[d-1]).after(a);throw new Error("invalid DOM structure "+c.outerHTML)},height:function(a){var b;return b=this,angular.isDefined(a)?(angular.isNumber(a)&&(a+="px"),d.call(b,"height",a)):g(this[0],"height","base")},outerHeight:function(a){return g(this[0],"height",a?"outerfull":"outer")},offset:function(a){var b,c,d,e,f,g;return f=this,arguments.length?void 0===a?f:a:(b={top:0,left:0},e=f[0],(c=e&&e.ownerDocument)?(d=c.documentElement,e.getBoundingClientRect&&(b=e.getBoundingClientRect()),g=c.defaultView||c.parentWindow,{top:b.top+(g.pageYOffset||d.scrollTop)-(d.clientTop||0),left:b.left+(g.pageXOffset||d.scrollLeft)-(d.clientLeft||0)}):void 0)},scrollTop:function(a){return i(this,"top",a)},scrollLeft:function(a){return i(this,"left",a)}},function(b,c){return a.prototype[c]?void 0:a.prototype[c]=b})}}}]).run(["$log","$window","jqLiteExtras",function(a,b,c){return b.jQuery?void 0:c.registerFor(angular.element)}]),angular.module("ui.scroll",[]).directive("ngScrollViewport",["$log",function(){return{controller:["$scope","$element",function(a,b){return b}]}}]).directive("ngScroll",["$log","$injector","$rootScope","$timeout",function(a,b,c,d){return{require:["?^ngScrollViewport"],transclude:"element",priority:1e3,terminal:!0,compile:function(e,f,g){return function(f,h,i,j){var k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T;if(H=i.ngScroll.match(/^\s*(\w+)\s+in\s+(\w+)\s*$/),!H)throw new Error('Expected ngScroll in form of "item_ in _datasource_" but got "'+i.ngScroll+'"');if(F=H[1],v=H[2],D=function(a){return angular.isObject(a)&&a.get&&angular.isFunction(a.get)},u=f[v],!D(u)&&(u=b.get(v),!D(u)))throw new Error(v+" is not a valid datasource");return r=Math.max(3,+i.bufferSize||10),q=function(){return T.height()*Math.max(.1,+i.padding||.1)},O=function(a){return a[0].scrollHeight||a[0].document.documentElement.scrollHeight},k=null,g(R=f.$new(),function(a){var b,c,d,f,g,h;if(f=a[0].localName,"dl"===f)throw new Error("ng-scroll directive does not support <"+a[0].localName+"> as a repeating tag: "+a[0].outerHTML);return"li"!==f&&"tr"!==f&&(f="div"),h=j[0]||angular.element(window),h.css({"overflow-y":"auto",display:"block"}),d=function(a){var b,c,d;switch(a){case"tr":return d=angular.element("<table><tr><td><div></div></td></tr></table>"),b=d.find("div"),c=d.find("tr"),c.paddingHeight=function(){return b.height.apply(b,arguments)},c;default:return c=angular.element("<"+a+"></"+a+">"),c.paddingHeight=c.height,c}},c=function(a,b,c){return b[{top:"before",bottom:"after"}[c]](a),{paddingHeight:function(){return a.paddingHeight.apply(a,arguments)},insert:function(b){return a[{top:"after",bottom:"before"}[c]](b)}}},g=c(d(f),e,"top"),b=c(d(f),e,"bottom"),R.$destroy(),k={viewport:h,topPadding:g.paddingHeight,bottomPadding:b.paddingHeight,append:b.insert,prepend:g.insert,bottomDataPos:function(){return O(h)-b.paddingHeight()},topDataPos:function(){return g.paddingHeight()}}}),T=k.viewport,B=1,I=1,p=[],J=[],x=!1,n=!1,G=u.loading||function(){},E=!1,L=function(a,b){var c,d;for(c=d=a;b>=a?b>d:d>b;c=b>=a?++d:--d)p[c].scope.$destroy(),p[c].element.remove();return p.splice(a,b-a)},K=function(){return B=1,I=1,L(0,p.length),k.topPadding(0),k.bottomPadding(0),J=[],x=!1,n=!1,l(!1)},o=function(){return T.scrollTop()+T.height()},S=function(){return T.scrollTop()},P=function(){return!x&&k.bottomDataPos()<o()+q()},s=function(){var b,c,d,e,f,g;for(b=0,e=0,c=f=g=p.length-1;(0>=g?0>=f:f>=0)&&(d=p[c].element.outerHeight(!0),k.bottomDataPos()-b-d>o()+q());c=0>=g?++f:--f)b+=d,e++,x=!1;return e>0?(k.bottomPadding(k.bottomPadding()+b),L(p.length-e,p.length),I-=e,a.log("clipped off bottom "+e+" bottom padding "+k.bottomPadding())):void 0},Q=function(){return!n&&k.topDataPos()>S()-q()},t=function(){var b,c,d,e,f,g;for(e=0,d=0,f=0,g=p.length;g>f&&(b=p[f],c=b.element.outerHeight(!0),k.topDataPos()+e+c<S()-q());f++)e+=c,d++,n=!1;return d>0?(k.topPadding(k.topPadding()+e),L(0,d),B+=d,a.log("clipped off top "+d+" top padding "+k.topPadding())):void 0},w=function(a,b){return E||(E=!0,G(!0)),1===J.push(a)?z(b):void 0},C=function(a,b){var c,d,e;return c=f.$new(),c[F]=b,d=a>B,c.$index=a,d&&c.$index--,e={scope:c},g(c,function(b){return e.element=b,d?a===I?(k.append(b),p.push(e)):(p[a-B].element.after(b),p.splice(a-B+1,0,e)):(k.prepend(b),p.unshift(e))}),{appended:d,wrapper:e}},m=function(a,b){var c;return a?k.bottomPadding(Math.max(0,k.bottomPadding()-b.element.outerHeight(!0))):(c=k.topPadding()-b.element.outerHeight(!0),c>=0?k.topPadding(c):T.scrollTop(T.scrollTop()+b.element.outerHeight(!0)))},l=function(b,c,e){var f;return f=function(){return a.log("top {actual="+k.topDataPos()+" visible from="+S()+" bottom {visible through="+o()+" actual="+k.bottomDataPos()+"}"),P()?w(!0,b):Q()&&w(!1,b),e?e():void 0},c?d(function(){var a,b,d;for(b=0,d=c.length;d>b;b++)a=c[b],m(a.appended,a.wrapper);return f()}):f()},A=function(a,b){return l(a,b,function(){return J.shift(),0===J.length?(E=!1,G(!1)):z(a)})},z=function(b){var c;return c=J[0],c?p.length&&!P()?A(b):u.get(I,r,function(c){var d,e,f,g;if(e=[],0===c.length)x=!0,k.bottomPadding(0),a.log("appended: requested "+r+" records starting from "+I+" recieved: eof");else{for(t(),f=0,g=c.length;g>f;f++)d=c[f],e.push(C(++I,d));a.log("appended: requested "+r+" received "+c.length+" buffer size "+p.length+" first "+B+" next "+I)}return A(b,e)}):p.length&&!Q()?A(b):u.get(B-r,r,function(c){var d,e,f,g;if(e=[],0===c.length)n=!0,k.topPadding(0),a.log("prepended: requested "+r+" records starting from "+(B-r)+" recieved: bof");else{for(s(),d=f=g=c.length-1;0>=g?0>=f:f>=0;d=0>=g?++f:--f)e.unshift(C(--B,c[d]));a.log("prepended: requested "+r+" received "+c.length+" buffer size "+p.length+" first "+B+" next "+I)}return A(b,e)})},M=function(){return c.$$phase||E?void 0:(l(!1),f.$apply())},T.bind("resize",M),N=function(){return c.$$phase||E?void 0:(l(!0),f.$apply())},T.bind("scroll",N),f.$watch(u.revision,function(){return K()}),y=u.scope?u.scope.$new():f.$new(),f.$on("$destroy",function(){return y.$destroy(),T.unbind("resize",M),T.unbind("scroll",N)}),y.$on("update.items",function(a,b,c){var d,e,f,g,h;if(angular.isFunction(b))for(e=function(a){return b(a.scope)},f=0,g=p.length;g>f;f++)d=p[f],e(d);else 0<=(h=b-B-1)&&h<p.length&&(p[b-B-1].scope[F]=c);return null}),y.$on("delete.items",function(a,b){var c,d,e,f,g,h,i,j,k,m,n,o;if(angular.isFunction(b)){for(e=[],h=0,k=p.length;k>h;h++)d=p[h],e.unshift(d);for(g=function(a){return b(a.scope)?(L(e.length-1-c,e.length-c),I--):void 0},c=i=0,m=e.length;m>i;c=++i)f=e[c],g(f)}else 0<=(o=b-B-1)&&o<p.length&&(L(b-B-1,b-B),I--);for(c=j=0,n=p.length;n>j;c=++j)d=p[c],d.scope.$index=B+c;return l(!1)}),y.$on("insert.item",function(a,b,c){var d,e,f,g,h,i,j,k,m,n,o,q;if(e=[],angular.isFunction(b)){for(f=[],i=0,m=p.length;m>i;i++)c=p[i],f.unshift(c);for(h=function(a){var f,g,h,i,j;if(g=b(a.scope)){if(C=function(a,b){return C(a,b),I++},angular.isArray(g)){for(j=[],f=h=0,i=g.length;i>h;f=++h)c=g[f],j.push(e.push(C(d+f,c)));return j}return e.push(C(d,g))}},d=j=0,n=f.length;n>j;d=++j)g=f[d],h(g)}else 0<=(q=b-B-1)&&q<p.length&&(e.push(C(b,c)),I++);for(d=k=0,o=p.length;o>k;d=++k)c=p[d],c.scope.$index=B+d;return l(!1,e)})}}}}]),angular.module("ui.scrollfix",[]).directive("uiScrollfix",["$window",function(a){return{require:"^?uiScrollfixTarget",link:function(b,c,d,e){function f(){var b;if(angular.isDefined(a.pageYOffset))b=a.pageYOffset;else{var e=document.compatMode&&"BackCompat"!==document.compatMode?document.documentElement:document.body;b=e.scrollTop}!c.hasClass("ui-scrollfix")&&b>d.uiScrollfix?c.addClass("ui-scrollfix"):c.hasClass("ui-scrollfix")&&b<d.uiScrollfix&&c.removeClass("ui-scrollfix")}var g=c[0].offsetTop,h=e&&e.$element||angular.element(a);d.uiScrollfix?"string"==typeof d.uiScrollfix&&("-"===d.uiScrollfix.charAt(0)?d.uiScrollfix=g-parseFloat(d.uiScrollfix.substr(1)):"+"===d.uiScrollfix.charAt(0)&&(d.uiScrollfix=g+parseFloat(d.uiScrollfix.substr(1)))):d.uiScrollfix=g,h.on("scroll",f),b.$on("$destroy",function(){h.off("scroll",f)})}}}]).directive("uiScrollfixTarget",[function(){return{controller:["$element",function(a){this.$element=a}]}}]),angular.module("ui.showhide",[]).directive("uiShow",[function(){return function(a,b,c){a.$watch(c.uiShow,function(a){a?b.addClass("ui-show"):b.removeClass("ui-show")})}}]).directive("uiHide",[function(){return function(a,b,c){a.$watch(c.uiHide,function(a){a?b.addClass("ui-hide"):b.removeClass("ui-hide")})}}]).directive("uiToggle",[function(){return function(a,b,c){a.$watch(c.uiToggle,function(a){a?b.removeClass("ui-hide").addClass("ui-show"):b.removeClass("ui-show").addClass("ui-hide")})}}]),angular.module("ui.unique",[]).filter("unique",["$parse",function(a){return function(b,c){if(c===!1)return b;if((c||angular.isUndefined(c))&&angular.isArray(b)){var d=[],e=angular.isString(c)?a(c):function(a){return a},f=function(a){return angular.isObject(a)?e(a):a};angular.forEach(b,function(a){for(var b=!1,c=0;c<d.length;c++)if(angular.equals(f(d[c]),f(a))){b=!0;break}b||d.push(a)}),b=d}return b}}]),angular.module("ui.validate",[]).directive("uiValidate",function(){return{restrict:"A",require:"ngModel",link:function(a,b,c,d){function e(b){return angular.isString(b)?void a.$watch(b,function(){angular.forEach(g,function(a){a(d.$modelValue)})}):angular.isArray(b)?void angular.forEach(b,function(b){a.$watch(b,function(){angular.forEach(g,function(a){a(d.$modelValue)})})}):void(angular.isObject(b)&&angular.forEach(b,function(b,c){angular.isString(b)&&a.$watch(b,function(){g[c](d.$modelValue)}),angular.isArray(b)&&angular.forEach(b,function(b){a.$watch(b,function(){g[c](d.$modelValue)})})}))}var f,g={},h=a.$eval(c.uiValidate);h&&(angular.isString(h)&&(h={validator:h}),angular.forEach(h,function(b,c){f=function(e){var f=a.$eval(b,{$value:e});return angular.isObject(f)&&angular.isFunction(f.then)?(f.then(function(){d.$setValidity(c,!0)},function(){d.$setValidity(c,!1)}),e):f?(d.$setValidity(c,!0),e):(d.$setValidity(c,!1),e)},g[c]=f,d.$formatters.push(f),d.$parsers.push(f)}),c.uiValidateWatch&&e(a.$eval(c.uiValidateWatch)))}}}),angular.module("ui.utils",["ui.event","ui.format","ui.highlight","ui.include","ui.indeterminate","ui.inflector","ui.jq","ui.keypress","ui.mask","ui.reset","ui.route","ui.scrollfix","ui.scroll","ui.scroll.jqlite","ui.showhide","ui.unique","ui.validate"]);
/**
 * Enhanced Select2 Dropmenus
 *
 * @AJAX Mode - When in this mode, your value will be an object (or array of objects) of the data used by Select2
 *     This change is so that you do not have to do an additional query yourself on top of Select2's own query
 * @params [options] {object} The configuration options passed to $.fn.select2(). Refer to the documentation
 */
angular.module('ui.select2', []).value('uiSelect2Config', {}).directive('uiSelect2', ['uiSelect2Config', '$timeout', function (uiSelect2Config, $timeout) {
  var options = {};
  if (uiSelect2Config) {
    angular.extend(options, uiSelect2Config);
  }
  return {
    require: 'ngModel',
    priority: 1,
    compile: function (tElm, tAttrs) {
      var watch,
        repeatOption,
        repeatAttr,
        isSelect = tElm.is('select'),
        isMultiple = angular.isDefined(tAttrs.multiple);

      // Enable watching of the options dataset if in use
      if (tElm.is('select')) {
        repeatOption = tElm.find('option[ng-repeat], option[data-ng-repeat]');

        if (repeatOption.length) {
          repeatAttr = repeatOption.attr('ng-repeat') || repeatOption.attr('data-ng-repeat');
          watch = jQuery.trim(repeatAttr.split('|')[0]).split(' ').pop();
        }
      }

      return function (scope, elm, attrs, controller) {
        // instance-specific options
        var opts = angular.extend({}, options, scope.$eval(attrs.uiSelect2));

        /*
        Convert from Select2 view-model to Angular view-model.
        */
        var convertToAngularModel = function(select2_data) {
          var model;
          if (opts.simple_tags) {
            model = [];
            angular.forEach(select2_data, function(value, index) {
              model.push(value.id);
            });
          } else {
            model = select2_data;
          }
          return model;
        };

        /*
        Convert from Angular view-model to Select2 view-model.
        */
        var convertToSelect2Model = function(angular_data) {
          var model = [];
          if (!angular_data) {
            return model;
          }

          if (opts.simple_tags) {
            model = [];
            angular.forEach(
              angular_data,
              function(value, index) {
                model.push({'id': value, 'text': value});
              });
          } else {
            model = angular_data;
          }
          return model;
        };

        if (isSelect) {
          // Use <select multiple> instead
          delete opts.multiple;
          delete opts.initSelection;
        } else if (isMultiple) {
          opts.multiple = true;
        }

        if (controller) {
          // Watch the model for programmatic changes
           scope.$watch(tAttrs.ngModel, function(current, old) {
            if (!current) {
              return;
            }
            if (current === old) {
              return;
            }
            controller.$render();
          }, true);
          controller.$render = function () {
            if (isSelect) {
              elm.select2('val', controller.$viewValue);
            } else {
              if (opts.multiple) {
                var viewValue = controller.$viewValue;
                if (angular.isString(viewValue)) {
                  viewValue = viewValue.split(',');
                }
                elm.select2(
                  'data', convertToSelect2Model(viewValue));
              } else {
                if (angular.isObject(controller.$viewValue)) {
                  elm.select2('data', controller.$viewValue);
                } else if (!controller.$viewValue) {
                  elm.select2('data', null);
                } else {
                  elm.select2('val', controller.$viewValue);
                }
              }
            }
          };

          // Watch the options dataset for changes
          if (watch) {
            scope.$watch(watch, function (newVal, oldVal, scope) {
              if (angular.equals(newVal, oldVal)) {
                return;
              }
              // Delayed so that the options have time to be rendered
              $timeout(function () {
                elm.select2('val', controller.$viewValue);
                // Refresh angular to remove the superfluous option
                elm.trigger('change');
                if(newVal && !oldVal && controller.$setPristine) {
                  controller.$setPristine(true);
                }
              });
            });
          }

          // Update valid and dirty statuses
          controller.$parsers.push(function (value) {
            var div = elm.prev();
            div
              .toggleClass('ng-invalid', !controller.$valid)
              .toggleClass('ng-valid', controller.$valid)
              .toggleClass('ng-invalid-required', !controller.$valid)
              .toggleClass('ng-valid-required', controller.$valid)
              .toggleClass('ng-dirty', controller.$dirty)
              .toggleClass('ng-pristine', controller.$pristine);
            return value;
          });

          if (!isSelect) {
            // Set the view and model value and update the angular template manually for the ajax/multiple select2.
            elm.bind("change", function (e) {
              e.stopImmediatePropagation();
              
              if (scope.$$phase || scope.$root.$$phase) {
                return;
              }
              scope.$apply(function () {
                controller.$setViewValue(
                  convertToAngularModel(elm.select2('data')));
              });
            });

            if (opts.initSelection) {
              var initSelection = opts.initSelection;
              opts.initSelection = function (element, callback) {
                initSelection(element, function (value) {
                  controller.$setViewValue(convertToAngularModel(value));
                  callback(value);
                });
              };
            }
          }
        }

        elm.bind("$destroy", function() {
          elm.select2("destroy");
        });

        attrs.$observe('disabled', function (value) {
          elm.select2('enable', !value);
        });

        attrs.$observe('readonly', function (value) {
          elm.select2('readonly', !!value);
        });

        if (attrs.ngMultiple) {
          scope.$watch(attrs.ngMultiple, function(newVal) {
            attrs.$set('multiple', !!newVal);
            elm.select2(opts);
          });
        }

        // Initialize the plugin late so that the injected DOM does not disrupt the template compiler
        $timeout(function () {
          elm.select2(opts);

          // Set initial value - I'm not sure about this but it seems to need to be there
          elm.val(controller.$viewValue);
          // important!
          controller.$render();

          // Not sure if I should just check for !isSelect OR if I should check for 'tags' key
          if (!opts.initSelection && !isSelect) {
            controller.$setViewValue(
              convertToAngularModel(elm.select2('data'))
            );
          }
        });
      };
    }
  };
}]);

/**
 * angular-ui-sortable - This directive allows you to jQueryUI Sortable.
 * @version v0.13.4 - 2015-06-07
 * @link http://angular-ui.github.com
 * @license MIT
 */

!function(a,b,c){"use strict";b.module("ui.sortable",[]).value("uiSortableConfig",{}).directive("uiSortable",["uiSortableConfig","$timeout","$log",function(a,d,e){return{require:"?ngModel",scope:{ngModel:"=",uiSortable:"="},link:function(f,g,h,i){function j(a,b){return b&&"function"==typeof b?function(){a.apply(this,arguments),b.apply(this,arguments)}:a}function k(a){var b=a.data("ui-sortable");return b&&"object"==typeof b&&"ui-sortable"===b.widgetFullName?b:null}function l(a,b){var c=a.sortable("option","helper");return"clone"===c||"function"==typeof c&&b.item.sortable.isCustomHelperUsed()}function m(a){return/left|right/.test(a.css("float"))||/inline|table-cell/.test(a.css("display"))}function n(a,b){for(var c=null,d=0;d<a.length;d++){var e=a[d];if(e.element[0]===b[0]){c=e.scope;break}}return c}function o(a,b){b.item.sortable._destroy()}var p,q={},r={"ui-floating":c},s={receive:null,remove:null,start:null,stop:null,update:null},t={helper:null};return b.extend(q,r,a,f.uiSortable),b.element.fn&&b.element.fn.jquery?(i?(f.$watch("ngModel.length",function(){d(function(){k(g)&&g.sortable("refresh")},0,!1)}),s.start=function(a,d){if("auto"===q["ui-floating"]){var e=d.item.siblings(),f=k(b.element(a.target));f.floating=m(e)}d.item.sortable={model:i.$modelValue[d.item.index()],index:d.item.index(),source:d.item.parent(),sourceModel:i.$modelValue,cancel:function(){d.item.sortable._isCanceled=!0},isCanceled:function(){return d.item.sortable._isCanceled},isCustomHelperUsed:function(){return!!d.item.sortable._isCustomHelperUsed},_isCanceled:!1,_isCustomHelperUsed:d.item.sortable._isCustomHelperUsed,_destroy:function(){b.forEach(d.item.sortable,function(a,b){d.item.sortable[b]=c})}}},s.activate=function(a,c){p=g.contents();var d=g.sortable("option","placeholder");if(d&&d.element&&"function"==typeof d.element){var e=d.element();e=b.element(e);var h=g.find('[class="'+e.attr("class")+'"]:not([ng-repeat], [data-ng-repeat])');p=p.not(h)}var i=c.item.sortable._connectedSortables||[];i.push({element:g,scope:f}),c.item.sortable._connectedSortables=i},s.update=function(a,b){if(!b.item.sortable.received){b.item.sortable.dropindex=b.item.index();var c=b.item.parent();b.item.sortable.droptarget=c;var d=n(b.item.sortable._connectedSortables,c);b.item.sortable.droptargetModel=d.ngModel,g.sortable("cancel")}l(g,b)&&!b.item.sortable.received&&"parent"===g.sortable("option","appendTo")&&(p=p.not(p.last())),p.appendTo(g),b.item.sortable.received&&(p=null),b.item.sortable.received&&!b.item.sortable.isCanceled()&&f.$apply(function(){i.$modelValue.splice(b.item.sortable.dropindex,0,b.item.sortable.moved)})},s.stop=function(a,b){!b.item.sortable.received&&"dropindex"in b.item.sortable&&!b.item.sortable.isCanceled()?f.$apply(function(){i.$modelValue.splice(b.item.sortable.dropindex,0,i.$modelValue.splice(b.item.sortable.index,1)[0])}):"dropindex"in b.item.sortable&&!b.item.sortable.isCanceled()||l(g,b)||p.appendTo(g),p=null},s.receive=function(a,b){b.item.sortable.received=!0},s.remove=function(a,b){"dropindex"in b.item.sortable||(g.sortable("cancel"),b.item.sortable.cancel()),b.item.sortable.isCanceled()||f.$apply(function(){b.item.sortable.moved=i.$modelValue.splice(b.item.sortable.index,1)[0]})},t.helper=function(a){return a&&"function"==typeof a?function(b,c){var d=a.apply(this,arguments);return c.sortable._isCustomHelperUsed=c!==d,d}:a},f.$watch("uiSortable",function(a){var c=k(g);c&&b.forEach(a,function(a,b){return b in r?("ui-floating"!==b||a!==!1&&a!==!0||(c.floating=a),void(q[b]=a)):(s[b]?("stop"===b&&(a=j(a,function(){f.$apply()}),a=j(a,o)),a=j(s[b],a)):t[b]&&(a=t[b](a)),q[b]=a,void g.sortable("option",b,a))})},!0),b.forEach(s,function(a,b){q[b]=j(a,q[b]),"stop"===b&&(q[b]=j(q[b],o))})):e.info("ui.sortable: ngModel not provided!",g),void g.sortable(q)):void e.error("ui.sortable: jQuery should be included before AngularJS!")}}}])}(window,window.angular);

/*
 * angular-ui-bootstrap
 * http://angular-ui.github.io/bootstrap/

 * Version: 0.12.1 - 2015-02-20
 * License: MIT
 */
angular.module("ui.bootstrap",["ui.bootstrap.tpls","ui.bootstrap.transition","ui.bootstrap.collapse","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.bindHtml","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.position","ui.bootstrap.datepicker","ui.bootstrap.dropdown","ui.bootstrap.modal","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.typeahead"]),angular.module("ui.bootstrap.tpls",["template/accordion/accordion-group.html","template/accordion/accordion.html","template/alert/alert.html","template/carousel/carousel.html","template/carousel/slide.html","template/datepicker/datepicker.html","template/datepicker/day.html","template/datepicker/month.html","template/datepicker/popup.html","template/datepicker/year.html","template/modal/backdrop.html","template/modal/window.html","template/pagination/pager.html","template/pagination/pagination.html","template/tooltip/tooltip-html-unsafe-popup.html","template/tooltip/tooltip-popup.html","template/popover/popover.html","template/progressbar/bar.html","template/progressbar/progress.html","template/progressbar/progressbar.html","template/rating/rating.html","template/tabs/tab.html","template/tabs/tabset.html","template/timepicker/timepicker.html","template/typeahead/typeahead-match.html","template/typeahead/typeahead-popup.html"]),angular.module("ui.bootstrap.transition",[]).factory("$transition",["$q","$timeout","$rootScope",function(a,b,c){function d(a){for(var b in a)if(void 0!==f.style[b])return a[b]}var e=function(d,f,g){g=g||{};var h=a.defer(),i=e[g.animation?"animationEndEventName":"transitionEndEventName"],j=function(){c.$apply(function(){d.unbind(i,j),h.resolve(d)})};return i&&d.bind(i,j),b(function(){angular.isString(f)?d.addClass(f):angular.isFunction(f)?f(d):angular.isObject(f)&&d.css(f),i||h.resolve(d)}),h.promise.cancel=function(){i&&d.unbind(i,j),h.reject("Transition cancelled")},h.promise},f=document.createElement("trans"),g={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"},h={WebkitTransition:"webkitAnimationEnd",MozTransition:"animationend",OTransition:"oAnimationEnd",transition:"animationend"};return e.transitionEndEventName=d(g),e.animationEndEventName=d(h),e}]),angular.module("ui.bootstrap.collapse",["ui.bootstrap.transition"]).directive("collapse",["$transition",function(a){return{link:function(b,c,d){function e(b){function d(){j===e&&(j=void 0)}var e=a(c,b);return j&&j.cancel(),j=e,e.then(d,d),e}function f(){k?(k=!1,g()):(c.removeClass("collapse").addClass("collapsing"),e({height:c[0].scrollHeight+"px"}).then(g))}function g(){c.removeClass("collapsing"),c.addClass("collapse in"),c.css({height:"auto"})}function h(){if(k)k=!1,i(),c.css({height:0});else{c.css({height:c[0].scrollHeight+"px"});{c[0].offsetWidth}c.removeClass("collapse in").addClass("collapsing"),e({height:0}).then(i)}}function i(){c.removeClass("collapsing"),c.addClass("collapse")}var j,k=!0;b.$watch(d.collapse,function(a){a?h():f()})}}}]),angular.module("ui.bootstrap.accordion",["ui.bootstrap.collapse"]).constant("accordionConfig",{closeOthers:!0}).controller("AccordionController",["$scope","$attrs","accordionConfig",function(a,b,c){this.groups=[],this.closeOthers=function(d){var e=angular.isDefined(b.closeOthers)?a.$eval(b.closeOthers):c.closeOthers;e&&angular.forEach(this.groups,function(a){a!==d&&(a.isOpen=!1)})},this.addGroup=function(a){var b=this;this.groups.push(a),a.$on("$destroy",function(){b.removeGroup(a)})},this.removeGroup=function(a){var b=this.groups.indexOf(a);-1!==b&&this.groups.splice(b,1)}}]).directive("accordion",function(){return{restrict:"EA",controller:"AccordionController",transclude:!0,replace:!1,templateUrl:"template/accordion/accordion.html"}}).directive("accordionGroup",function(){return{require:"^accordion",restrict:"EA",transclude:!0,replace:!0,templateUrl:"template/accordion/accordion-group.html",scope:{heading:"@",isOpen:"=?",isDisabled:"=?"},controller:function(){this.setHeading=function(a){this.heading=a}},link:function(a,b,c,d){d.addGroup(a),a.$watch("isOpen",function(b){b&&d.closeOthers(a)}),a.toggleOpen=function(){a.isDisabled||(a.isOpen=!a.isOpen)}}}}).directive("accordionHeading",function(){return{restrict:"EA",transclude:!0,template:"",replace:!0,require:"^accordionGroup",link:function(a,b,c,d,e){d.setHeading(e(a,function(){}))}}}).directive("accordionTransclude",function(){return{require:"^accordionGroup",link:function(a,b,c,d){a.$watch(function(){return d[c.accordionTransclude]},function(a){a&&(b.html(""),b.append(a))})}}}),angular.module("ui.bootstrap.alert",[]).controller("AlertController",["$scope","$attrs",function(a,b){a.closeable="close"in b,this.close=a.close}]).directive("alert",function(){return{restrict:"EA",controller:"AlertController",templateUrl:"template/alert/alert.html",transclude:!0,replace:!0,scope:{type:"@",close:"&"}}}).directive("dismissOnTimeout",["$timeout",function(a){return{require:"alert",link:function(b,c,d,e){a(function(){e.close()},parseInt(d.dismissOnTimeout,10))}}}]),angular.module("ui.bootstrap.bindHtml",[]).directive("bindHtmlUnsafe",function(){return function(a,b,c){b.addClass("ng-binding").data("$binding",c.bindHtmlUnsafe),a.$watch(c.bindHtmlUnsafe,function(a){b.html(a||"")})}}),angular.module("ui.bootstrap.buttons",[]).constant("buttonConfig",{activeClass:"active",toggleEvent:"click"}).controller("ButtonsController",["buttonConfig",function(a){this.activeClass=a.activeClass||"active",this.toggleEvent=a.toggleEvent||"click"}]).directive("btnRadio",function(){return{require:["btnRadio","ngModel"],controller:"ButtonsController",link:function(a,b,c,d){var e=d[0],f=d[1];f.$render=function(){b.toggleClass(e.activeClass,angular.equals(f.$modelValue,a.$eval(c.btnRadio)))},b.bind(e.toggleEvent,function(){var d=b.hasClass(e.activeClass);(!d||angular.isDefined(c.uncheckable))&&a.$apply(function(){f.$setViewValue(d?null:a.$eval(c.btnRadio)),f.$render()})})}}}).directive("btnCheckbox",function(){return{require:["btnCheckbox","ngModel"],controller:"ButtonsController",link:function(a,b,c,d){function e(){return g(c.btnCheckboxTrue,!0)}function f(){return g(c.btnCheckboxFalse,!1)}function g(b,c){var d=a.$eval(b);return angular.isDefined(d)?d:c}var h=d[0],i=d[1];i.$render=function(){b.toggleClass(h.activeClass,angular.equals(i.$modelValue,e()))},b.bind(h.toggleEvent,function(){a.$apply(function(){i.$setViewValue(b.hasClass(h.activeClass)?f():e()),i.$render()})})}}}),angular.module("ui.bootstrap.carousel",["ui.bootstrap.transition"]).controller("CarouselController",["$scope","$timeout","$interval","$transition",function(a,b,c,d){function e(){f();var b=+a.interval;!isNaN(b)&&b>0&&(h=c(g,b))}function f(){h&&(c.cancel(h),h=null)}function g(){var b=+a.interval;i&&!isNaN(b)&&b>0?a.next():a.pause()}var h,i,j=this,k=j.slides=a.slides=[],l=-1;j.currentSlide=null;var m=!1;j.select=a.select=function(c,f){function g(){if(!m){if(j.currentSlide&&angular.isString(f)&&!a.noTransition&&c.$element){c.$element.addClass(f);{c.$element[0].offsetWidth}angular.forEach(k,function(a){angular.extend(a,{direction:"",entering:!1,leaving:!1,active:!1})}),angular.extend(c,{direction:f,active:!0,entering:!0}),angular.extend(j.currentSlide||{},{direction:f,leaving:!0}),a.$currentTransition=d(c.$element,{}),function(b,c){a.$currentTransition.then(function(){h(b,c)},function(){h(b,c)})}(c,j.currentSlide)}else h(c,j.currentSlide);j.currentSlide=c,l=i,e()}}function h(b,c){angular.extend(b,{direction:"",active:!0,leaving:!1,entering:!1}),angular.extend(c||{},{direction:"",active:!1,leaving:!1,entering:!1}),a.$currentTransition=null}var i=k.indexOf(c);void 0===f&&(f=i>l?"next":"prev"),c&&c!==j.currentSlide&&(a.$currentTransition?(a.$currentTransition.cancel(),b(g)):g())},a.$on("$destroy",function(){m=!0}),j.indexOfSlide=function(a){return k.indexOf(a)},a.next=function(){var b=(l+1)%k.length;return a.$currentTransition?void 0:j.select(k[b],"next")},a.prev=function(){var b=0>l-1?k.length-1:l-1;return a.$currentTransition?void 0:j.select(k[b],"prev")},a.isActive=function(a){return j.currentSlide===a},a.$watch("interval",e),a.$on("$destroy",f),a.play=function(){i||(i=!0,e())},a.pause=function(){a.noPause||(i=!1,f())},j.addSlide=function(b,c){b.$element=c,k.push(b),1===k.length||b.active?(j.select(k[k.length-1]),1==k.length&&a.play()):b.active=!1},j.removeSlide=function(a){var b=k.indexOf(a);k.splice(b,1),k.length>0&&a.active?j.select(b>=k.length?k[b-1]:k[b]):l>b&&l--}}]).directive("carousel",[function(){return{restrict:"EA",transclude:!0,replace:!0,controller:"CarouselController",require:"carousel",templateUrl:"template/carousel/carousel.html",scope:{interval:"=",noTransition:"=",noPause:"="}}}]).directive("slide",function(){return{require:"^carousel",restrict:"EA",transclude:!0,replace:!0,templateUrl:"template/carousel/slide.html",scope:{active:"=?"},link:function(a,b,c,d){d.addSlide(a,b),a.$on("$destroy",function(){d.removeSlide(a)}),a.$watch("active",function(b){b&&d.select(a)})}}}),angular.module("ui.bootstrap.dateparser",[]).service("dateParser",["$locale","orderByFilter",function(a,b){function c(a){var c=[],d=a.split("");return angular.forEach(e,function(b,e){var f=a.indexOf(e);if(f>-1){a=a.split(""),d[f]="("+b.regex+")",a[f]="$";for(var g=f+1,h=f+e.length;h>g;g++)d[g]="",a[g]="$";a=a.join(""),c.push({index:f,apply:b.apply})}}),{regex:new RegExp("^"+d.join("")+"$"),map:b(c,"index")}}function d(a,b,c){return 1===b&&c>28?29===c&&(a%4===0&&a%100!==0||a%400===0):3===b||5===b||8===b||10===b?31>c:!0}this.parsers={};var e={yyyy:{regex:"\\d{4}",apply:function(a){this.year=+a}},yy:{regex:"\\d{2}",apply:function(a){this.year=+a+2e3}},y:{regex:"\\d{1,4}",apply:function(a){this.year=+a}},MMMM:{regex:a.DATETIME_FORMATS.MONTH.join("|"),apply:function(b){this.month=a.DATETIME_FORMATS.MONTH.indexOf(b)}},MMM:{regex:a.DATETIME_FORMATS.SHORTMONTH.join("|"),apply:function(b){this.month=a.DATETIME_FORMATS.SHORTMONTH.indexOf(b)}},MM:{regex:"0[1-9]|1[0-2]",apply:function(a){this.month=a-1}},M:{regex:"[1-9]|1[0-2]",apply:function(a){this.month=a-1}},dd:{regex:"[0-2][0-9]{1}|3[0-1]{1}",apply:function(a){this.date=+a}},d:{regex:"[1-2]?[0-9]{1}|3[0-1]{1}",apply:function(a){this.date=+a}},EEEE:{regex:a.DATETIME_FORMATS.DAY.join("|")},EEE:{regex:a.DATETIME_FORMATS.SHORTDAY.join("|")}};this.parse=function(b,e){if(!angular.isString(b)||!e)return b;e=a.DATETIME_FORMATS[e]||e,this.parsers[e]||(this.parsers[e]=c(e));var f=this.parsers[e],g=f.regex,h=f.map,i=b.match(g);if(i&&i.length){for(var j,k={year:1900,month:0,date:1,hours:0},l=1,m=i.length;m>l;l++){var n=h[l-1];n.apply&&n.apply.call(k,i[l])}return d(k.year,k.month,k.date)&&(j=new Date(k.year,k.month,k.date,k.hours)),j}}}]),angular.module("ui.bootstrap.position",[]).factory("$position",["$document","$window",function(a,b){function c(a,c){return a.currentStyle?a.currentStyle[c]:b.getComputedStyle?b.getComputedStyle(a)[c]:a.style[c]}function d(a){return"static"===(c(a,"position")||"static")}var e=function(b){for(var c=a[0],e=b.offsetParent||c;e&&e!==c&&d(e);)e=e.offsetParent;return e||c};return{position:function(b){var c=this.offset(b),d={top:0,left:0},f=e(b[0]);f!=a[0]&&(d=this.offset(angular.element(f)),d.top+=f.clientTop-f.scrollTop,d.left+=f.clientLeft-f.scrollLeft);var g=b[0].getBoundingClientRect();return{width:g.width||b.prop("offsetWidth"),height:g.height||b.prop("offsetHeight"),top:c.top-d.top,left:c.left-d.left}},offset:function(c){var d=c[0].getBoundingClientRect();return{width:d.width||c.prop("offsetWidth"),height:d.height||c.prop("offsetHeight"),top:d.top+(b.pageYOffset||a[0].documentElement.scrollTop),left:d.left+(b.pageXOffset||a[0].documentElement.scrollLeft)}},positionElements:function(a,b,c,d){var e,f,g,h,i=c.split("-"),j=i[0],k=i[1]||"center";e=d?this.offset(a):this.position(a),f=b.prop("offsetWidth"),g=b.prop("offsetHeight");var l={center:function(){return e.left+e.width/2-f/2},left:function(){return e.left},right:function(){return e.left+e.width}},m={center:function(){return e.top+e.height/2-g/2},top:function(){return e.top},bottom:function(){return e.top+e.height}};switch(j){case"right":h={top:m[k](),left:l[j]()};break;case"left":h={top:m[k](),left:e.left-f};break;case"bottom":h={top:m[j](),left:l[k]()};break;default:h={top:e.top-g,left:l[k]()}}return h}}}]),angular.module("ui.bootstrap.datepicker",["ui.bootstrap.dateparser","ui.bootstrap.position"]).constant("datepickerConfig",{formatDay:"dd",formatMonth:"MMMM",formatYear:"yyyy",formatDayHeader:"EEE",formatDayTitle:"MMMM yyyy",formatMonthTitle:"yyyy",datepickerMode:"day",minMode:"day",maxMode:"year",showWeeks:!0,startingDay:0,yearRange:20,minDate:null,maxDate:null}).controller("DatepickerController",["$scope","$attrs","$parse","$interpolate","$timeout","$log","dateFilter","datepickerConfig",function(a,b,c,d,e,f,g,h){var i=this,j={$setViewValue:angular.noop};this.modes=["day","month","year"],angular.forEach(["formatDay","formatMonth","formatYear","formatDayHeader","formatDayTitle","formatMonthTitle","minMode","maxMode","showWeeks","startingDay","yearRange"],function(c,e){i[c]=angular.isDefined(b[c])?8>e?d(b[c])(a.$parent):a.$parent.$eval(b[c]):h[c]}),angular.forEach(["minDate","maxDate"],function(d){b[d]?a.$parent.$watch(c(b[d]),function(a){i[d]=a?new Date(a):null,i.refreshView()}):i[d]=h[d]?new Date(h[d]):null}),a.datepickerMode=a.datepickerMode||h.datepickerMode,a.uniqueId="datepicker-"+a.$id+"-"+Math.floor(1e4*Math.random()),this.activeDate=angular.isDefined(b.initDate)?a.$parent.$eval(b.initDate):new Date,a.isActive=function(b){return 0===i.compare(b.date,i.activeDate)?(a.activeDateId=b.uid,!0):!1},this.init=function(a){j=a,j.$render=function(){i.render()}},this.render=function(){if(j.$modelValue){var a=new Date(j.$modelValue),b=!isNaN(a);b?this.activeDate=a:f.error('Datepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.'),j.$setValidity("date",b)}this.refreshView()},this.refreshView=function(){if(this.element){this._refreshView();var a=j.$modelValue?new Date(j.$modelValue):null;j.$setValidity("date-disabled",!a||this.element&&!this.isDisabled(a))}},this.createDateObject=function(a,b){var c=j.$modelValue?new Date(j.$modelValue):null;return{date:a,label:g(a,b),selected:c&&0===this.compare(a,c),disabled:this.isDisabled(a),current:0===this.compare(a,new Date)}},this.isDisabled=function(c){return this.minDate&&this.compare(c,this.minDate)<0||this.maxDate&&this.compare(c,this.maxDate)>0||b.dateDisabled&&a.dateDisabled({date:c,mode:a.datepickerMode})},this.split=function(a,b){for(var c=[];a.length>0;)c.push(a.splice(0,b));return c},a.select=function(b){if(a.datepickerMode===i.minMode){var c=j.$modelValue?new Date(j.$modelValue):new Date(0,0,0,0,0,0,0);c.setFullYear(b.getFullYear(),b.getMonth(),b.getDate()),j.$setViewValue(c),j.$render()}else i.activeDate=b,a.datepickerMode=i.modes[i.modes.indexOf(a.datepickerMode)-1]},a.move=function(a){var b=i.activeDate.getFullYear()+a*(i.step.years||0),c=i.activeDate.getMonth()+a*(i.step.months||0);i.activeDate.setFullYear(b,c,1),i.refreshView()},a.toggleMode=function(b){b=b||1,a.datepickerMode===i.maxMode&&1===b||a.datepickerMode===i.minMode&&-1===b||(a.datepickerMode=i.modes[i.modes.indexOf(a.datepickerMode)+b])},a.keys={13:"enter",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down"};var k=function(){e(function(){i.element[0].focus()},0,!1)};a.$on("datepicker.focus",k),a.keydown=function(b){var c=a.keys[b.which];if(c&&!b.shiftKey&&!b.altKey)if(b.preventDefault(),b.stopPropagation(),"enter"===c||"space"===c){if(i.isDisabled(i.activeDate))return;a.select(i.activeDate),k()}else!b.ctrlKey||"up"!==c&&"down"!==c?(i.handleKeyDown(c,b),i.refreshView()):(a.toggleMode("up"===c?1:-1),k())}}]).directive("datepicker",function(){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/datepicker.html",scope:{datepickerMode:"=?",dateDisabled:"&"},require:["datepicker","?^ngModel"],controller:"DatepickerController",link:function(a,b,c,d){var e=d[0],f=d[1];f&&e.init(f)}}}).directive("daypicker",["dateFilter",function(a){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/day.html",require:"^datepicker",link:function(b,c,d,e){function f(a,b){return 1!==b||a%4!==0||a%100===0&&a%400!==0?i[b]:29}function g(a,b){var c=new Array(b),d=new Date(a),e=0;for(d.setHours(12);b>e;)c[e++]=new Date(d),d.setDate(d.getDate()+1);return c}function h(a){var b=new Date(a);b.setDate(b.getDate()+4-(b.getDay()||7));var c=b.getTime();return b.setMonth(0),b.setDate(1),Math.floor(Math.round((c-b)/864e5)/7)+1}b.showWeeks=e.showWeeks,e.step={months:1},e.element=c;var i=[31,28,31,30,31,30,31,31,30,31,30,31];e._refreshView=function(){var c=e.activeDate.getFullYear(),d=e.activeDate.getMonth(),f=new Date(c,d,1),i=e.startingDay-f.getDay(),j=i>0?7-i:-i,k=new Date(f);j>0&&k.setDate(-j+1);for(var l=g(k,42),m=0;42>m;m++)l[m]=angular.extend(e.createDateObject(l[m],e.formatDay),{secondary:l[m].getMonth()!==d,uid:b.uniqueId+"-"+m});b.labels=new Array(7);for(var n=0;7>n;n++)b.labels[n]={abbr:a(l[n].date,e.formatDayHeader),full:a(l[n].date,"EEEE")};if(b.title=a(e.activeDate,e.formatDayTitle),b.rows=e.split(l,7),b.showWeeks){b.weekNumbers=[];for(var o=h(b.rows[0][0].date),p=b.rows.length;b.weekNumbers.push(o++)<p;);}},e.compare=function(a,b){return new Date(a.getFullYear(),a.getMonth(),a.getDate())-new Date(b.getFullYear(),b.getMonth(),b.getDate())},e.handleKeyDown=function(a){var b=e.activeDate.getDate();if("left"===a)b-=1;else if("up"===a)b-=7;else if("right"===a)b+=1;else if("down"===a)b+=7;else if("pageup"===a||"pagedown"===a){var c=e.activeDate.getMonth()+("pageup"===a?-1:1);e.activeDate.setMonth(c,1),b=Math.min(f(e.activeDate.getFullYear(),e.activeDate.getMonth()),b)}else"home"===a?b=1:"end"===a&&(b=f(e.activeDate.getFullYear(),e.activeDate.getMonth()));e.activeDate.setDate(b)},e.refreshView()}}}]).directive("monthpicker",["dateFilter",function(a){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/month.html",require:"^datepicker",link:function(b,c,d,e){e.step={years:1},e.element=c,e._refreshView=function(){for(var c=new Array(12),d=e.activeDate.getFullYear(),f=0;12>f;f++)c[f]=angular.extend(e.createDateObject(new Date(d,f,1),e.formatMonth),{uid:b.uniqueId+"-"+f});b.title=a(e.activeDate,e.formatMonthTitle),b.rows=e.split(c,3)},e.compare=function(a,b){return new Date(a.getFullYear(),a.getMonth())-new Date(b.getFullYear(),b.getMonth())},e.handleKeyDown=function(a){var b=e.activeDate.getMonth();if("left"===a)b-=1;else if("up"===a)b-=3;else if("right"===a)b+=1;else if("down"===a)b+=3;else if("pageup"===a||"pagedown"===a){var c=e.activeDate.getFullYear()+("pageup"===a?-1:1);e.activeDate.setFullYear(c)}else"home"===a?b=0:"end"===a&&(b=11);e.activeDate.setMonth(b)},e.refreshView()}}}]).directive("yearpicker",["dateFilter",function(){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/year.html",require:"^datepicker",link:function(a,b,c,d){function e(a){return parseInt((a-1)/f,10)*f+1}var f=d.yearRange;d.step={years:f},d.element=b,d._refreshView=function(){for(var b=new Array(f),c=0,g=e(d.activeDate.getFullYear());f>c;c++)b[c]=angular.extend(d.createDateObject(new Date(g+c,0,1),d.formatYear),{uid:a.uniqueId+"-"+c});a.title=[b[0].label,b[f-1].label].join(" - "),a.rows=d.split(b,5)},d.compare=function(a,b){return a.getFullYear()-b.getFullYear()},d.handleKeyDown=function(a){var b=d.activeDate.getFullYear();"left"===a?b-=1:"up"===a?b-=5:"right"===a?b+=1:"down"===a?b+=5:"pageup"===a||"pagedown"===a?b+=("pageup"===a?-1:1)*d.step.years:"home"===a?b=e(d.activeDate.getFullYear()):"end"===a&&(b=e(d.activeDate.getFullYear())+f-1),d.activeDate.setFullYear(b)},d.refreshView()}}}]).constant("datepickerPopupConfig",{datepickerPopup:"yyyy-MM-dd",currentText:"Today",clearText:"Clear",closeText:"Done",closeOnDateSelection:!0,appendToBody:!1,showButtonBar:!0}).directive("datepickerPopup",["$compile","$parse","$document","$position","dateFilter","dateParser","datepickerPopupConfig",function(a,b,c,d,e,f,g){return{restrict:"EA",require:"ngModel",scope:{isOpen:"=?",currentText:"@",clearText:"@",closeText:"@",dateDisabled:"&"},link:function(h,i,j,k){function l(a){return a.replace(/([A-Z])/g,function(a){return"-"+a.toLowerCase()})}function m(a){if(a){if(angular.isDate(a)&&!isNaN(a))return k.$setValidity("date",!0),a;if(angular.isString(a)){var b=f.parse(a,n)||new Date(a);return isNaN(b)?void k.$setValidity("date",!1):(k.$setValidity("date",!0),b)}return void k.$setValidity("date",!1)}return k.$setValidity("date",!0),null}var n,o=angular.isDefined(j.closeOnDateSelection)?h.$parent.$eval(j.closeOnDateSelection):g.closeOnDateSelection,p=angular.isDefined(j.datepickerAppendToBody)?h.$parent.$eval(j.datepickerAppendToBody):g.appendToBody;h.showButtonBar=angular.isDefined(j.showButtonBar)?h.$parent.$eval(j.showButtonBar):g.showButtonBar,h.getText=function(a){return h[a+"Text"]||g[a+"Text"]},j.$observe("datepickerPopup",function(a){n=a||g.datepickerPopup,k.$render()});var q=angular.element("<div datepicker-popup-wrap><div datepicker></div></div>");q.attr({"ng-model":"date","ng-change":"dateSelection()"});var r=angular.element(q.children()[0]);j.datepickerOptions&&angular.forEach(h.$parent.$eval(j.datepickerOptions),function(a,b){r.attr(l(b),a)}),h.watchData={},angular.forEach(["minDate","maxDate","datepickerMode"],function(a){if(j[a]){var c=b(j[a]);if(h.$parent.$watch(c,function(b){h.watchData[a]=b}),r.attr(l(a),"watchData."+a),"datepickerMode"===a){var d=c.assign;h.$watch("watchData."+a,function(a,b){a!==b&&d(h.$parent,a)})}}}),j.dateDisabled&&r.attr("date-disabled","dateDisabled({ date: date, mode: mode })"),k.$parsers.unshift(m),h.dateSelection=function(a){angular.isDefined(a)&&(h.date=a),k.$setViewValue(h.date),k.$render(),o&&(h.isOpen=!1,i[0].focus())},i.bind("input change keyup",function(){h.$apply(function(){h.date=k.$modelValue})}),k.$render=function(){var a=k.$viewValue?e(k.$viewValue,n):"";i.val(a),h.date=m(k.$modelValue)};var s=function(a){h.isOpen&&a.target!==i[0]&&h.$apply(function(){h.isOpen=!1})},t=function(a){h.keydown(a)};i.bind("keydown",t),h.keydown=function(a){27===a.which?(a.preventDefault(),a.stopPropagation(),h.close()):40!==a.which||h.isOpen||(h.isOpen=!0)},h.$watch("isOpen",function(a){a?(h.$broadcast("datepicker.focus"),h.position=p?d.offset(i):d.position(i),h.position.top=h.position.top+i.prop("offsetHeight"),c.bind("click",s)):c.unbind("click",s)}),h.select=function(a){if("today"===a){var b=new Date;angular.isDate(k.$modelValue)?(a=new Date(k.$modelValue),a.setFullYear(b.getFullYear(),b.getMonth(),b.getDate())):a=new Date(b.setHours(0,0,0,0))}h.dateSelection(a)},h.close=function(){h.isOpen=!1,i[0].focus()};var u=a(q)(h);q.remove(),p?c.find("body").append(u):i.after(u),h.$on("$destroy",function(){u.remove(),i.unbind("keydown",t),c.unbind("click",s)})}}}]).directive("datepickerPopupWrap",function(){return{restrict:"EA",replace:!0,transclude:!0,templateUrl:"template/datepicker/popup.html",link:function(a,b){b.bind("click",function(a){a.preventDefault(),a.stopPropagation()})}}}),angular.module("ui.bootstrap.dropdown",[]).constant("dropdownConfig",{openClass:"open"}).service("dropdownService",["$document",function(a){var b=null;this.open=function(e){b||(a.bind("click",c),a.bind("keydown",d)),b&&b!==e&&(b.isOpen=!1),b=e},this.close=function(e){b===e&&(b=null,a.unbind("click",c),a.unbind("keydown",d))};var c=function(a){if(b){var c=b.getToggleElement();a&&c&&c[0].contains(a.target)||b.$apply(function(){b.isOpen=!1})}},d=function(a){27===a.which&&(b.focusToggleElement(),c())}}]).controller("DropdownController",["$scope","$attrs","$parse","dropdownConfig","dropdownService","$animate",function(a,b,c,d,e,f){var g,h=this,i=a.$new(),j=d.openClass,k=angular.noop,l=b.onToggle?c(b.onToggle):angular.noop;this.init=function(d){h.$element=d,b.isOpen&&(g=c(b.isOpen),k=g.assign,a.$watch(g,function(a){i.isOpen=!!a}))},this.toggle=function(a){return i.isOpen=arguments.length?!!a:!i.isOpen},this.isOpen=function(){return i.isOpen},i.getToggleElement=function(){return h.toggleElement},i.focusToggleElement=function(){h.toggleElement&&h.toggleElement[0].focus()},i.$watch("isOpen",function(b,c){f[b?"addClass":"removeClass"](h.$element,j),b?(i.focusToggleElement(),e.open(i)):e.close(i),k(a,b),angular.isDefined(b)&&b!==c&&l(a,{open:!!b})}),a.$on("$locationChangeSuccess",function(){i.isOpen=!1}),a.$on("$destroy",function(){i.$destroy()})}]).directive("dropdown",function(){return{controller:"DropdownController",link:function(a,b,c,d){d.init(b)}}}).directive("dropdownToggle",function(){return{require:"?^dropdown",link:function(a,b,c,d){if(d){d.toggleElement=b;var e=function(e){e.preventDefault(),b.hasClass("disabled")||c.disabled||a.$apply(function(){d.toggle()})};b.bind("click",e),b.attr({"aria-haspopup":!0,"aria-expanded":!1}),a.$watch(d.isOpen,function(a){b.attr("aria-expanded",!!a)}),a.$on("$destroy",function(){b.unbind("click",e)})}}}}),angular.module("ui.bootstrap.modal",["ui.bootstrap.transition"]).factory("$$stackedMap",function(){return{createNew:function(){var a=[];return{add:function(b,c){a.push({key:b,value:c})},get:function(b){for(var c=0;c<a.length;c++)if(b==a[c].key)return a[c]},keys:function(){for(var b=[],c=0;c<a.length;c++)b.push(a[c].key);return b},top:function(){return a[a.length-1]},remove:function(b){for(var c=-1,d=0;d<a.length;d++)if(b==a[d].key){c=d;break}return a.splice(c,1)[0]},removeTop:function(){return a.splice(a.length-1,1)[0]},length:function(){return a.length}}}}}).directive("modalBackdrop",["$timeout",function(a){return{restrict:"EA",replace:!0,templateUrl:"template/modal/backdrop.html",link:function(b,c,d){b.backdropClass=d.backdropClass||"",b.animate=!1,a(function(){b.animate=!0})}}}]).directive("modalWindow",["$modalStack","$timeout",function(a,b){return{restrict:"EA",scope:{index:"@",animate:"="},replace:!0,transclude:!0,templateUrl:function(a,b){return b.templateUrl||"template/modal/window.html"},link:function(c,d,e){d.addClass(e.windowClass||""),c.size=e.size,b(function(){c.animate=!0,d[0].querySelectorAll("[autofocus]").length||d[0].focus()}),c.close=function(b){var c=a.getTop();c&&c.value.backdrop&&"static"!=c.value.backdrop&&b.target===b.currentTarget&&(b.preventDefault(),b.stopPropagation(),a.dismiss(c.key,"backdrop click"))}}}}]).directive("modalTransclude",function(){return{link:function(a,b,c,d,e){e(a.$parent,function(a){b.empty(),b.append(a)})}}}).factory("$modalStack",["$transition","$timeout","$document","$compile","$rootScope","$$stackedMap",function(a,b,c,d,e,f){function g(){for(var a=-1,b=n.keys(),c=0;c<b.length;c++)n.get(b[c]).value.backdrop&&(a=c);return a}function h(a){var b=c.find("body").eq(0),d=n.get(a).value;n.remove(a),j(d.modalDomEl,d.modalScope,300,function(){d.modalScope.$destroy(),b.toggleClass(m,n.length()>0),i()})}function i(){if(k&&-1==g()){var a=l;j(k,l,150,function(){a.$destroy(),a=null}),k=void 0,l=void 0}}function j(c,d,e,f){function g(){g.done||(g.done=!0,c.remove(),f&&f())}d.animate=!1;var h=a.transitionEndEventName;if(h){var i=b(g,e);c.bind(h,function(){b.cancel(i),g(),d.$apply()})}else b(g)}var k,l,m="modal-open",n=f.createNew(),o={};return e.$watch(g,function(a){l&&(l.index=a)}),c.bind("keydown",function(a){var b;27===a.which&&(b=n.top(),b&&b.value.keyboard&&(a.preventDefault(),e.$apply(function(){o.dismiss(b.key,"escape key press")})))}),o.open=function(a,b){n.add(a,{deferred:b.deferred,modalScope:b.scope,backdrop:b.backdrop,keyboard:b.keyboard});var f=c.find("body").eq(0),h=g();if(h>=0&&!k){l=e.$new(!0),l.index=h;var i=angular.element("<div modal-backdrop></div>");i.attr("backdrop-class",b.backdropClass),k=d(i)(l),f.append(k)}var j=angular.element("<div modal-window></div>");j.attr({"template-url":b.windowTemplateUrl,"window-class":b.windowClass,size:b.size,index:n.length()-1,animate:"animate"}).html(b.content);var o=d(j)(b.scope);n.top().value.modalDomEl=o,f.append(o),f.addClass(m)},o.close=function(a,b){var c=n.get(a);c&&(c.value.deferred.resolve(b),h(a))},o.dismiss=function(a,b){var c=n.get(a);c&&(c.value.deferred.reject(b),h(a))},o.dismissAll=function(a){for(var b=this.getTop();b;)this.dismiss(b.key,a),b=this.getTop()},o.getTop=function(){return n.top()},o}]).provider("$modal",function(){var a={options:{backdrop:!0,keyboard:!0},$get:["$injector","$rootScope","$q","$http","$templateCache","$controller","$modalStack",function(b,c,d,e,f,g,h){function i(a){return a.template?d.when(a.template):e.get(angular.isFunction(a.templateUrl)?a.templateUrl():a.templateUrl,{cache:f}).then(function(a){return a.data})}function j(a){var c=[];return angular.forEach(a,function(a){(angular.isFunction(a)||angular.isArray(a))&&c.push(d.when(b.invoke(a)))}),c}var k={};return k.open=function(b){var e=d.defer(),f=d.defer(),k={result:e.promise,opened:f.promise,close:function(a){h.close(k,a)},dismiss:function(a){h.dismiss(k,a)}};if(b=angular.extend({},a.options,b),b.resolve=b.resolve||{},!b.template&&!b.templateUrl)throw new Error("One of template or templateUrl options is required.");var l=d.all([i(b)].concat(j(b.resolve)));return l.then(function(a){var d=(b.scope||c).$new();d.$close=k.close,d.$dismiss=k.dismiss;var f,i={},j=1;b.controller&&(i.$scope=d,i.$modalInstance=k,angular.forEach(b.resolve,function(b,c){i[c]=a[j++]}),f=g(b.controller,i),b.controllerAs&&(d[b.controllerAs]=f)),h.open(k,{scope:d,deferred:e,content:a[0],backdrop:b.backdrop,keyboard:b.keyboard,backdropClass:b.backdropClass,windowClass:b.windowClass,windowTemplateUrl:b.windowTemplateUrl,size:b.size})},function(a){e.reject(a)}),l.then(function(){f.resolve(!0)},function(){f.reject(!1)}),k},k}]};return a}),angular.module("ui.bootstrap.pagination",[]).controller("PaginationController",["$scope","$attrs","$parse",function(a,b,c){var d=this,e={$setViewValue:angular.noop},f=b.numPages?c(b.numPages).assign:angular.noop;this.init=function(f,g){e=f,this.config=g,e.$render=function(){d.render()},b.itemsPerPage?a.$parent.$watch(c(b.itemsPerPage),function(b){d.itemsPerPage=parseInt(b,10),a.totalPages=d.calculateTotalPages()}):this.itemsPerPage=g.itemsPerPage},this.calculateTotalPages=function(){var b=this.itemsPerPage<1?1:Math.ceil(a.totalItems/this.itemsPerPage);return Math.max(b||0,1)},this.render=function(){a.page=parseInt(e.$viewValue,10)||1},a.selectPage=function(b){a.page!==b&&b>0&&b<=a.totalPages&&(e.$setViewValue(b),e.$render())},a.getText=function(b){return a[b+"Text"]||d.config[b+"Text"]},a.noPrevious=function(){return 1===a.page},a.noNext=function(){return a.page===a.totalPages},a.$watch("totalItems",function(){a.totalPages=d.calculateTotalPages()}),a.$watch("totalPages",function(b){f(a.$parent,b),a.page>b?a.selectPage(b):e.$render()})}]).constant("paginationConfig",{itemsPerPage:10,boundaryLinks:!1,directionLinks:!0,firstText:"First",previousText:"Previous",nextText:"Next",lastText:"Last",rotate:!0}).directive("pagination",["$parse","paginationConfig",function(a,b){return{restrict:"EA",scope:{totalItems:"=",firstText:"@",previousText:"@",nextText:"@",lastText:"@"},require:["pagination","?ngModel"],controller:"PaginationController",templateUrl:"template/pagination/pagination.html",replace:!0,link:function(c,d,e,f){function g(a,b,c){return{number:a,text:b,active:c}}function h(a,b){var c=[],d=1,e=b,f=angular.isDefined(k)&&b>k;f&&(l?(d=Math.max(a-Math.floor(k/2),1),e=d+k-1,e>b&&(e=b,d=e-k+1)):(d=(Math.ceil(a/k)-1)*k+1,e=Math.min(d+k-1,b)));for(var h=d;e>=h;h++){var i=g(h,h,h===a);c.push(i)}if(f&&!l){if(d>1){var j=g(d-1,"...",!1);c.unshift(j)}if(b>e){var m=g(e+1,"...",!1);c.push(m)}}return c}var i=f[0],j=f[1];if(j){var k=angular.isDefined(e.maxSize)?c.$parent.$eval(e.maxSize):b.maxSize,l=angular.isDefined(e.rotate)?c.$parent.$eval(e.rotate):b.rotate;c.boundaryLinks=angular.isDefined(e.boundaryLinks)?c.$parent.$eval(e.boundaryLinks):b.boundaryLinks,c.directionLinks=angular.isDefined(e.directionLinks)?c.$parent.$eval(e.directionLinks):b.directionLinks,i.init(j,b),e.maxSize&&c.$parent.$watch(a(e.maxSize),function(a){k=parseInt(a,10),i.render()
});var m=i.render;i.render=function(){m(),c.page>0&&c.page<=c.totalPages&&(c.pages=h(c.page,c.totalPages))}}}}}]).constant("pagerConfig",{itemsPerPage:10,previousText:"« Previous",nextText:"Next »",align:!0}).directive("pager",["pagerConfig",function(a){return{restrict:"EA",scope:{totalItems:"=",previousText:"@",nextText:"@"},require:["pager","?ngModel"],controller:"PaginationController",templateUrl:"template/pagination/pager.html",replace:!0,link:function(b,c,d,e){var f=e[0],g=e[1];g&&(b.align=angular.isDefined(d.align)?b.$parent.$eval(d.align):a.align,f.init(g,a))}}}]),angular.module("ui.bootstrap.tooltip",["ui.bootstrap.position","ui.bootstrap.bindHtml"]).provider("$tooltip",function(){function a(a){var b=/[A-Z]/g,c="-";return a.replace(b,function(a,b){return(b?c:"")+a.toLowerCase()})}var b={placement:"top",animation:!0,popupDelay:0},c={mouseenter:"mouseleave",click:"click",focus:"blur"},d={};this.options=function(a){angular.extend(d,a)},this.setTriggers=function(a){angular.extend(c,a)},this.$get=["$window","$compile","$timeout","$document","$position","$interpolate",function(e,f,g,h,i,j){return function(e,k,l){function m(a){var b=a||n.trigger||l,d=c[b]||b;return{show:b,hide:d}}var n=angular.extend({},b,d),o=a(e),p=j.startSymbol(),q=j.endSymbol(),r="<div "+o+'-popup title="'+p+"title"+q+'" content="'+p+"content"+q+'" placement="'+p+"placement"+q+'" animation="animation" is-open="isOpen"></div>';return{restrict:"EA",compile:function(){var a=f(r);return function(b,c,d){function f(){D.isOpen?l():j()}function j(){(!C||b.$eval(d[k+"Enable"]))&&(s(),D.popupDelay?z||(z=g(o,D.popupDelay,!1),z.then(function(a){a()})):o()())}function l(){b.$apply(function(){p()})}function o(){return z=null,y&&(g.cancel(y),y=null),D.content?(q(),w.css({top:0,left:0,display:"block"}),D.$digest(),E(),D.isOpen=!0,D.$digest(),E):angular.noop}function p(){D.isOpen=!1,g.cancel(z),z=null,D.animation?y||(y=g(r,500)):r()}function q(){w&&r(),x=D.$new(),w=a(x,function(a){A?h.find("body").append(a):c.after(a)})}function r(){y=null,w&&(w.remove(),w=null),x&&(x.$destroy(),x=null)}function s(){t(),u()}function t(){var a=d[k+"Placement"];D.placement=angular.isDefined(a)?a:n.placement}function u(){var a=d[k+"PopupDelay"],b=parseInt(a,10);D.popupDelay=isNaN(b)?n.popupDelay:b}function v(){var a=d[k+"Trigger"];F(),B=m(a),B.show===B.hide?c.bind(B.show,f):(c.bind(B.show,j),c.bind(B.hide,l))}var w,x,y,z,A=angular.isDefined(n.appendToBody)?n.appendToBody:!1,B=m(void 0),C=angular.isDefined(d[k+"Enable"]),D=b.$new(!0),E=function(){var a=i.positionElements(c,w,D.placement,A);a.top+="px",a.left+="px",w.css(a)};D.isOpen=!1,d.$observe(e,function(a){D.content=a,!a&&D.isOpen&&p()}),d.$observe(k+"Title",function(a){D.title=a});var F=function(){c.unbind(B.show,j),c.unbind(B.hide,l)};v();var G=b.$eval(d[k+"Animation"]);D.animation=angular.isDefined(G)?!!G:n.animation;var H=b.$eval(d[k+"AppendToBody"]);A=angular.isDefined(H)?H:A,A&&b.$on("$locationChangeSuccess",function(){D.isOpen&&p()}),b.$on("$destroy",function(){g.cancel(y),g.cancel(z),F(),r(),D=null})}}}}}]}).directive("tooltipPopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-popup.html"}}).directive("tooltip",["$tooltip",function(a){return a("tooltip","tooltip","mouseenter")}]).directive("tooltipHtmlUnsafePopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-html-unsafe-popup.html"}}).directive("tooltipHtmlUnsafe",["$tooltip",function(a){return a("tooltipHtmlUnsafe","tooltip","mouseenter")}]),angular.module("ui.bootstrap.popover",["ui.bootstrap.tooltip"]).directive("popoverPopup",function(){return{restrict:"EA",replace:!0,scope:{title:"@",content:"@",placement:"@",animation:"&",isOpen:"&"},templateUrl:"template/popover/popover.html"}}).directive("popover",["$tooltip",function(a){return a("popover","popover","click")}]),angular.module("ui.bootstrap.progressbar",[]).constant("progressConfig",{animate:!0,max:100}).controller("ProgressController",["$scope","$attrs","progressConfig",function(a,b,c){var d=this,e=angular.isDefined(b.animate)?a.$parent.$eval(b.animate):c.animate;this.bars=[],a.max=angular.isDefined(b.max)?a.$parent.$eval(b.max):c.max,this.addBar=function(b,c){e||c.css({transition:"none"}),this.bars.push(b),b.$watch("value",function(c){b.percent=+(100*c/a.max).toFixed(2)}),b.$on("$destroy",function(){c=null,d.removeBar(b)})},this.removeBar=function(a){this.bars.splice(this.bars.indexOf(a),1)}}]).directive("progress",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",require:"progress",scope:{},templateUrl:"template/progressbar/progress.html"}}).directive("bar",function(){return{restrict:"EA",replace:!0,transclude:!0,require:"^progress",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/bar.html",link:function(a,b,c,d){d.addBar(a,b)}}}).directive("progressbar",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/progressbar.html",link:function(a,b,c,d){d.addBar(a,angular.element(b.children()[0]))}}}),angular.module("ui.bootstrap.rating",[]).constant("ratingConfig",{max:5,stateOn:null,stateOff:null}).controller("RatingController",["$scope","$attrs","ratingConfig",function(a,b,c){var d={$setViewValue:angular.noop};this.init=function(e){d=e,d.$render=this.render,this.stateOn=angular.isDefined(b.stateOn)?a.$parent.$eval(b.stateOn):c.stateOn,this.stateOff=angular.isDefined(b.stateOff)?a.$parent.$eval(b.stateOff):c.stateOff;var f=angular.isDefined(b.ratingStates)?a.$parent.$eval(b.ratingStates):new Array(angular.isDefined(b.max)?a.$parent.$eval(b.max):c.max);a.range=this.buildTemplateObjects(f)},this.buildTemplateObjects=function(a){for(var b=0,c=a.length;c>b;b++)a[b]=angular.extend({index:b},{stateOn:this.stateOn,stateOff:this.stateOff},a[b]);return a},a.rate=function(b){!a.readonly&&b>=0&&b<=a.range.length&&(d.$setViewValue(b),d.$render())},a.enter=function(b){a.readonly||(a.value=b),a.onHover({value:b})},a.reset=function(){a.value=d.$viewValue,a.onLeave()},a.onKeydown=function(b){/(37|38|39|40)/.test(b.which)&&(b.preventDefault(),b.stopPropagation(),a.rate(a.value+(38===b.which||39===b.which?1:-1)))},this.render=function(){a.value=d.$viewValue}}]).directive("rating",function(){return{restrict:"EA",require:["rating","ngModel"],scope:{readonly:"=?",onHover:"&",onLeave:"&"},controller:"RatingController",templateUrl:"template/rating/rating.html",replace:!0,link:function(a,b,c,d){var e=d[0],f=d[1];f&&e.init(f)}}}),angular.module("ui.bootstrap.tabs",[]).controller("TabsetController",["$scope",function(a){var b=this,c=b.tabs=a.tabs=[];b.select=function(a){angular.forEach(c,function(b){b.active&&b!==a&&(b.active=!1,b.onDeselect())}),a.active=!0,a.onSelect()},b.addTab=function(a){c.push(a),1===c.length?a.active=!0:a.active&&b.select(a)},b.removeTab=function(a){var e=c.indexOf(a);if(a.active&&c.length>1&&!d){var f=e==c.length-1?e-1:e+1;b.select(c[f])}c.splice(e,1)};var d;a.$on("$destroy",function(){d=!0})}]).directive("tabset",function(){return{restrict:"EA",transclude:!0,replace:!0,scope:{type:"@"},controller:"TabsetController",templateUrl:"template/tabs/tabset.html",link:function(a,b,c){a.vertical=angular.isDefined(c.vertical)?a.$parent.$eval(c.vertical):!1,a.justified=angular.isDefined(c.justified)?a.$parent.$eval(c.justified):!1}}}).directive("tab",["$parse",function(a){return{require:"^tabset",restrict:"EA",replace:!0,templateUrl:"template/tabs/tab.html",transclude:!0,scope:{active:"=?",heading:"@",onSelect:"&select",onDeselect:"&deselect"},controller:function(){},compile:function(b,c,d){return function(b,c,e,f){b.$watch("active",function(a){a&&f.select(b)}),b.disabled=!1,e.disabled&&b.$parent.$watch(a(e.disabled),function(a){b.disabled=!!a}),b.select=function(){b.disabled||(b.active=!0)},f.addTab(b),b.$on("$destroy",function(){f.removeTab(b)}),b.$transcludeFn=d}}}}]).directive("tabHeadingTransclude",[function(){return{restrict:"A",require:"^tab",link:function(a,b){a.$watch("headingElement",function(a){a&&(b.html(""),b.append(a))})}}}]).directive("tabContentTransclude",function(){function a(a){return a.tagName&&(a.hasAttribute("tab-heading")||a.hasAttribute("data-tab-heading")||"tab-heading"===a.tagName.toLowerCase()||"data-tab-heading"===a.tagName.toLowerCase())}return{restrict:"A",require:"^tabset",link:function(b,c,d){var e=b.$eval(d.tabContentTransclude);e.$transcludeFn(e.$parent,function(b){angular.forEach(b,function(b){a(b)?e.headingElement=b:c.append(b)})})}}}),angular.module("ui.bootstrap.timepicker",[]).constant("timepickerConfig",{hourStep:1,minuteStep:1,showMeridian:!0,meridians:null,readonlyInput:!1,mousewheel:!0}).controller("TimepickerController",["$scope","$attrs","$parse","$log","$locale","timepickerConfig",function(a,b,c,d,e,f){function g(){var b=parseInt(a.hours,10),c=a.showMeridian?b>0&&13>b:b>=0&&24>b;return c?(a.showMeridian&&(12===b&&(b=0),a.meridian===p[1]&&(b+=12)),b):void 0}function h(){var b=parseInt(a.minutes,10);return b>=0&&60>b?b:void 0}function i(a){return angular.isDefined(a)&&a.toString().length<2?"0"+a:a}function j(a){k(),o.$setViewValue(new Date(n)),l(a)}function k(){o.$setValidity("time",!0),a.invalidHours=!1,a.invalidMinutes=!1}function l(b){var c=n.getHours(),d=n.getMinutes();a.showMeridian&&(c=0===c||12===c?12:c%12),a.hours="h"===b?c:i(c),a.minutes="m"===b?d:i(d),a.meridian=n.getHours()<12?p[0]:p[1]}function m(a){var b=new Date(n.getTime()+6e4*a);n.setHours(b.getHours(),b.getMinutes()),j()}var n=new Date,o={$setViewValue:angular.noop},p=angular.isDefined(b.meridians)?a.$parent.$eval(b.meridians):f.meridians||e.DATETIME_FORMATS.AMPMS;this.init=function(c,d){o=c,o.$render=this.render;var e=d.eq(0),g=d.eq(1),h=angular.isDefined(b.mousewheel)?a.$parent.$eval(b.mousewheel):f.mousewheel;h&&this.setupMousewheelEvents(e,g),a.readonlyInput=angular.isDefined(b.readonlyInput)?a.$parent.$eval(b.readonlyInput):f.readonlyInput,this.setupInputEvents(e,g)};var q=f.hourStep;b.hourStep&&a.$parent.$watch(c(b.hourStep),function(a){q=parseInt(a,10)});var r=f.minuteStep;b.minuteStep&&a.$parent.$watch(c(b.minuteStep),function(a){r=parseInt(a,10)}),a.showMeridian=f.showMeridian,b.showMeridian&&a.$parent.$watch(c(b.showMeridian),function(b){if(a.showMeridian=!!b,o.$error.time){var c=g(),d=h();angular.isDefined(c)&&angular.isDefined(d)&&(n.setHours(c),j())}else l()}),this.setupMousewheelEvents=function(b,c){var d=function(a){a.originalEvent&&(a=a.originalEvent);var b=a.wheelDelta?a.wheelDelta:-a.deltaY;return a.detail||b>0};b.bind("mousewheel wheel",function(b){a.$apply(d(b)?a.incrementHours():a.decrementHours()),b.preventDefault()}),c.bind("mousewheel wheel",function(b){a.$apply(d(b)?a.incrementMinutes():a.decrementMinutes()),b.preventDefault()})},this.setupInputEvents=function(b,c){if(a.readonlyInput)return a.updateHours=angular.noop,void(a.updateMinutes=angular.noop);var d=function(b,c){o.$setViewValue(null),o.$setValidity("time",!1),angular.isDefined(b)&&(a.invalidHours=b),angular.isDefined(c)&&(a.invalidMinutes=c)};a.updateHours=function(){var a=g();angular.isDefined(a)?(n.setHours(a),j("h")):d(!0)},b.bind("blur",function(){!a.invalidHours&&a.hours<10&&a.$apply(function(){a.hours=i(a.hours)})}),a.updateMinutes=function(){var a=h();angular.isDefined(a)?(n.setMinutes(a),j("m")):d(void 0,!0)},c.bind("blur",function(){!a.invalidMinutes&&a.minutes<10&&a.$apply(function(){a.minutes=i(a.minutes)})})},this.render=function(){var a=o.$modelValue?new Date(o.$modelValue):null;isNaN(a)?(o.$setValidity("time",!1),d.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')):(a&&(n=a),k(),l())},a.incrementHours=function(){m(60*q)},a.decrementHours=function(){m(60*-q)},a.incrementMinutes=function(){m(r)},a.decrementMinutes=function(){m(-r)},a.toggleMeridian=function(){m(720*(n.getHours()<12?1:-1))}}]).directive("timepicker",function(){return{restrict:"EA",require:["timepicker","?^ngModel"],controller:"TimepickerController",replace:!0,scope:{},templateUrl:"template/timepicker/timepicker.html",link:function(a,b,c,d){var e=d[0],f=d[1];f&&e.init(f,b.find("input"))}}}),angular.module("ui.bootstrap.typeahead",["ui.bootstrap.position","ui.bootstrap.bindHtml"]).factory("typeaheadParser",["$parse",function(a){var b=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;return{parse:function(c){var d=c.match(b);if(!d)throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "'+c+'".');return{itemName:d[3],source:a(d[4]),viewMapper:a(d[2]||d[1]),modelMapper:a(d[1])}}}}]).directive("typeahead",["$compile","$parse","$q","$timeout","$document","$position","typeaheadParser",function(a,b,c,d,e,f,g){var h=[9,13,27,38,40];return{require:"ngModel",link:function(i,j,k,l){var m,n=i.$eval(k.typeaheadMinLength)||1,o=i.$eval(k.typeaheadWaitMs)||0,p=i.$eval(k.typeaheadEditable)!==!1,q=b(k.typeaheadLoading).assign||angular.noop,r=b(k.typeaheadOnSelect),s=k.typeaheadInputFormatter?b(k.typeaheadInputFormatter):void 0,t=k.typeaheadAppendToBody?i.$eval(k.typeaheadAppendToBody):!1,u=i.$eval(k.typeaheadFocusFirst)!==!1,v=b(k.ngModel).assign,w=g.parse(k.typeahead),x=i.$new();i.$on("$destroy",function(){x.$destroy()});var y="typeahead-"+x.$id+"-"+Math.floor(1e4*Math.random());j.attr({"aria-autocomplete":"list","aria-expanded":!1,"aria-owns":y});var z=angular.element("<div typeahead-popup></div>");z.attr({id:y,matches:"matches",active:"activeIdx",select:"select(activeIdx)",query:"query",position:"position"}),angular.isDefined(k.typeaheadTemplateUrl)&&z.attr("template-url",k.typeaheadTemplateUrl);var A=function(){x.matches=[],x.activeIdx=-1,j.attr("aria-expanded",!1)},B=function(a){return y+"-option-"+a};x.$watch("activeIdx",function(a){0>a?j.removeAttr("aria-activedescendant"):j.attr("aria-activedescendant",B(a))});var C=function(a){var b={$viewValue:a};q(i,!0),c.when(w.source(i,b)).then(function(c){var d=a===l.$viewValue;if(d&&m)if(c.length>0){x.activeIdx=u?0:-1,x.matches.length=0;for(var e=0;e<c.length;e++)b[w.itemName]=c[e],x.matches.push({id:B(e),label:w.viewMapper(x,b),model:c[e]});x.query=a,x.position=t?f.offset(j):f.position(j),x.position.top=x.position.top+j.prop("offsetHeight"),j.attr("aria-expanded",!0)}else A();d&&q(i,!1)},function(){A(),q(i,!1)})};A(),x.query=void 0;var D,E=function(a){D=d(function(){C(a)},o)},F=function(){D&&d.cancel(D)};l.$parsers.unshift(function(a){return m=!0,a&&a.length>=n?o>0?(F(),E(a)):C(a):(q(i,!1),F(),A()),p?a:a?void l.$setValidity("editable",!1):(l.$setValidity("editable",!0),a)}),l.$formatters.push(function(a){var b,c,d={};return s?(d.$model=a,s(i,d)):(d[w.itemName]=a,b=w.viewMapper(i,d),d[w.itemName]=void 0,c=w.viewMapper(i,d),b!==c?b:a)}),x.select=function(a){var b,c,e={};e[w.itemName]=c=x.matches[a].model,b=w.modelMapper(i,e),v(i,b),l.$setValidity("editable",!0),r(i,{$item:c,$model:b,$label:w.viewMapper(i,e)}),A(),d(function(){j[0].focus()},0,!1)},j.bind("keydown",function(a){0!==x.matches.length&&-1!==h.indexOf(a.which)&&(-1!=x.activeIdx||13!==a.which&&9!==a.which)&&(a.preventDefault(),40===a.which?(x.activeIdx=(x.activeIdx+1)%x.matches.length,x.$digest()):38===a.which?(x.activeIdx=(x.activeIdx>0?x.activeIdx:x.matches.length)-1,x.$digest()):13===a.which||9===a.which?x.$apply(function(){x.select(x.activeIdx)}):27===a.which&&(a.stopPropagation(),A(),x.$digest()))}),j.bind("blur",function(){m=!1});var G=function(a){j[0]!==a.target&&(A(),x.$digest())};e.bind("click",G),i.$on("$destroy",function(){e.unbind("click",G),t&&H.remove()});var H=a(z)(x);t?e.find("body").append(H):j.after(H)}}}]).directive("typeaheadPopup",function(){return{restrict:"EA",scope:{matches:"=",query:"=",active:"=",position:"=",select:"&"},replace:!0,templateUrl:"template/typeahead/typeahead-popup.html",link:function(a,b,c){a.templateUrl=c.templateUrl,a.isOpen=function(){return a.matches.length>0},a.isActive=function(b){return a.active==b},a.selectActive=function(b){a.active=b},a.selectMatch=function(b){a.select({activeIdx:b})}}}}).directive("typeaheadMatch",["$http","$templateCache","$compile","$parse",function(a,b,c,d){return{restrict:"EA",scope:{index:"=",match:"=",query:"="},link:function(e,f,g){var h=d(g.templateUrl)(e.$parent)||"template/typeahead/typeahead-match.html";a.get(h,{cache:b}).success(function(a){f.replaceWith(c(a.trim())(e))})}}}]).filter("typeaheadHighlight",function(){function a(a){return a.replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1")}return function(b,c){return c?(""+b).replace(new RegExp(a(c),"gi"),"<strong>$&</strong>"):b}}),angular.module("template/accordion/accordion-group.html",[]).run(["$templateCache",function(a){a.put("template/accordion/accordion-group.html",'<div class="panel panel-default">\n  <div class="panel-heading">\n    <h4 class="panel-title">\n      <a href class="accordion-toggle" ng-click="toggleOpen()" accordion-transclude="heading"><span ng-class="{\'text-muted\': isDisabled}">{{heading}}</span></a>\n    </h4>\n  </div>\n  <div class="panel-collapse" collapse="!isOpen">\n	  <div class="panel-body" ng-transclude></div>\n  </div>\n</div>\n')}]),angular.module("template/accordion/accordion.html",[]).run(["$templateCache",function(a){a.put("template/accordion/accordion.html",'<div class="panel-group" ng-transclude></div>')}]),angular.module("template/alert/alert.html",[]).run(["$templateCache",function(a){a.put("template/alert/alert.html",'<div class="alert" ng-class="[\'alert-\' + (type || \'warning\'), closeable ? \'alert-dismissable\' : null]" role="alert">\n    <button ng-show="closeable" type="button" class="close" ng-click="close()">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <div ng-transclude></div>\n</div>\n')}]),angular.module("template/carousel/carousel.html",[]).run(["$templateCache",function(a){a.put("template/carousel/carousel.html",'<div ng-mouseenter="pause()" ng-mouseleave="play()" class="carousel" ng-swipe-right="prev()" ng-swipe-left="next()">\n    <ol class="carousel-indicators" ng-show="slides.length > 1">\n        <li ng-repeat="slide in slides track by $index" ng-class="{active: isActive(slide)}" ng-click="select(slide)"></li>\n    </ol>\n    <div class="carousel-inner" ng-transclude></div>\n    <a class="left carousel-control" ng-click="prev()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-left"></span></a>\n    <a class="right carousel-control" ng-click="next()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-right"></span></a>\n</div>\n')}]),angular.module("template/carousel/slide.html",[]).run(["$templateCache",function(a){a.put("template/carousel/slide.html","<div ng-class=\"{\n    'active': leaving || (active && !entering),\n    'prev': (next || active) && direction=='prev',\n    'next': (next || active) && direction=='next',\n    'right': direction=='prev',\n    'left': direction=='next'\n  }\" class=\"item text-center\" ng-transclude></div>\n")}]),angular.module("template/datepicker/datepicker.html",[]).run(["$templateCache",function(a){a.put("template/datepicker/datepicker.html",'<div ng-switch="datepickerMode" role="application" ng-keydown="keydown($event)">\n  <daypicker ng-switch-when="day" tabindex="0"></daypicker>\n  <monthpicker ng-switch-when="month" tabindex="0"></monthpicker>\n  <yearpicker ng-switch-when="year" tabindex="0"></yearpicker>\n</div>')}]),angular.module("template/datepicker/day.html",[]).run(["$templateCache",function(a){a.put("template/datepicker/day.html",'<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="{{5 + showWeeks}}"><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n    <tr>\n      <th ng-show="showWeeks" class="text-center"></th>\n      <th ng-repeat="label in labels track by $index" class="text-center"><small aria-label="{{label.full}}">{{label.abbr}}</small></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-show="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\n        <button type="button" style="width:100%;" class="btn btn-default btn-sm" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/datepicker/month.html",[]).run(["$templateCache",function(a){a.put("template/datepicker/month.html",'<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\n        <button type="button" style="width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/datepicker/popup.html",[]).run(["$templateCache",function(a){a.put("template/datepicker/popup.html",'<ul class="dropdown-menu" ng-style="{display: (isOpen && \'block\') || \'none\', top: position.top+\'px\', left: position.left+\'px\'}" ng-keydown="keydown($event)">\n	<li ng-transclude></li>\n	<li ng-if="showButtonBar" style="padding:10px 9px 2px">\n		<span class="btn-group pull-left">\n			<button type="button" class="btn btn-sm btn-info" ng-click="select(\'today\')">{{ getText(\'current\') }}</button>\n			<button type="button" class="btn btn-sm btn-danger" ng-click="select(null)">{{ getText(\'clear\') }}</button>\n		</span>\n		<button type="button" class="btn btn-sm btn-success pull-right" ng-click="close()">{{ getText(\'close\') }}</button>\n	</li>\n</ul>\n')}]),angular.module("template/datepicker/year.html",[]).run(["$templateCache",function(a){a.put("template/datepicker/year.html",'<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="3"><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\n        <button type="button" style="width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/modal/backdrop.html",[]).run(["$templateCache",function(a){a.put("template/modal/backdrop.html",'<div class="modal-backdrop fade {{ backdropClass }}"\n     ng-class="{in: animate}"\n     ng-style="{\'z-index\': 1040 + (index && 1 || 0) + index*10}"\n></div>\n')}]),angular.module("template/modal/window.html",[]).run(["$templateCache",function(a){a.put("template/modal/window.html",'<div tabindex="-1" role="dialog" class="modal fade" ng-class="{in: animate}" ng-style="{\'z-index\': 1050 + index*10, display: \'block\'}" ng-click="close($event)">\n    <div class="modal-dialog" ng-class="{\'modal-sm\': size == \'sm\', \'modal-lg\': size == \'lg\'}"><div class="modal-content" modal-transclude></div></div>\n</div>')}]),angular.module("template/pagination/pager.html",[]).run(["$templateCache",function(a){a.put("template/pagination/pager.html",'<ul class="pager">\n  <li ng-class="{disabled: noPrevious(), previous: align}"><a href ng-click="selectPage(page - 1)">{{getText(\'previous\')}}</a></li>\n  <li ng-class="{disabled: noNext(), next: align}"><a href ng-click="selectPage(page + 1)">{{getText(\'next\')}}</a></li>\n</ul>')}]),angular.module("template/pagination/pagination.html",[]).run(["$templateCache",function(a){a.put("template/pagination/pagination.html",'<ul class="pagination">\n  <li ng-if="boundaryLinks" ng-class="{disabled: noPrevious()}"><a href ng-click="selectPage(1)">{{getText(\'first\')}}</a></li>\n  <li ng-if="directionLinks" ng-class="{disabled: noPrevious()}"><a href ng-click="selectPage(page - 1)">{{getText(\'previous\')}}</a></li>\n  <li ng-repeat="page in pages track by $index" ng-class="{active: page.active}"><a href ng-click="selectPage(page.number)">{{page.text}}</a></li>\n  <li ng-if="directionLinks" ng-class="{disabled: noNext()}"><a href ng-click="selectPage(page + 1)">{{getText(\'next\')}}</a></li>\n  <li ng-if="boundaryLinks" ng-class="{disabled: noNext()}"><a href ng-click="selectPage(totalPages)">{{getText(\'last\')}}</a></li>\n</ul>')}]),angular.module("template/tooltip/tooltip-html-unsafe-popup.html",[]).run(["$templateCache",function(a){a.put("template/tooltip/tooltip-html-unsafe-popup.html",'<div class="tooltip {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" bind-html-unsafe="content"></div>\n</div>\n')}]),angular.module("template/tooltip/tooltip-popup.html",[]).run(["$templateCache",function(a){a.put("template/tooltip/tooltip-popup.html",'<div class="tooltip {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind="content"></div>\n</div>\n')}]),angular.module("template/popover/popover.html",[]).run(["$templateCache",function(a){a.put("template/popover/popover.html",'<div class="popover {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-show="title"></h3>\n      <div class="popover-content" ng-bind="content"></div>\n  </div>\n</div>\n')}]),angular.module("template/progressbar/bar.html",[]).run(["$templateCache",function(a){a.put("template/progressbar/bar.html",'<div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: percent + \'%\'}" aria-valuetext="{{percent | number:0}}%" ng-transclude></div>')}]),angular.module("template/progressbar/progress.html",[]).run(["$templateCache",function(a){a.put("template/progressbar/progress.html",'<div class="progress" ng-transclude></div>')}]),angular.module("template/progressbar/progressbar.html",[]).run(["$templateCache",function(a){a.put("template/progressbar/progressbar.html",'<div class="progress">\n  <div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: percent + \'%\'}" aria-valuetext="{{percent | number:0}}%" ng-transclude></div>\n</div>')}]),angular.module("template/rating/rating.html",[]).run(["$templateCache",function(a){a.put("template/rating/rating.html",'<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}">\n    <i ng-repeat="r in range track by $index" ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="glyphicon" ng-class="$index < value && (r.stateOn || \'glyphicon-star\') || (r.stateOff || \'glyphicon-star-empty\')">\n        <span class="sr-only">({{ $index < value ? \'*\' : \' \' }})</span>\n    </i>\n</span>')}]),angular.module("template/tabs/tab.html",[]).run(["$templateCache",function(a){a.put("template/tabs/tab.html",'<li ng-class="{active: active, disabled: disabled}">\n  <a href ng-click="select()" tab-heading-transclude>{{heading}}</a>\n</li>\n')}]),angular.module("template/tabs/tabset.html",[]).run(["$templateCache",function(a){a.put("template/tabs/tabset.html",'<div>\n  <ul class="nav nav-{{type || \'tabs\'}}" ng-class="{\'nav-stacked\': vertical, \'nav-justified\': justified}" ng-transclude></ul>\n  <div class="tab-content">\n    <div class="tab-pane" \n         ng-repeat="tab in tabs" \n         ng-class="{active: tab.active}"\n         tab-content-transclude="tab">\n    </div>\n  </div>\n</div>\n')}]),angular.module("template/timepicker/timepicker.html",[]).run(["$templateCache",function(a){a.put("template/timepicker/timepicker.html",'<table>\n	<tbody>\n		<tr class="text-center">\n			<td><a ng-click="incrementHours()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n			<td>&nbsp;</td>\n			<td><a ng-click="incrementMinutes()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n			<td ng-show="showMeridian"></td>\n		</tr>\n		<tr>\n			<td style="width:50px;" class="form-group" ng-class="{\'has-error\': invalidHours}">\n				<input type="text" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-mousewheel="incrementHours()" ng-readonly="readonlyInput" maxlength="2">\n			</td>\n			<td>:</td>\n			<td style="width:50px;" class="form-group" ng-class="{\'has-error\': invalidMinutes}">\n				<input type="text" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="readonlyInput" maxlength="2">\n			</td>\n			<td ng-show="showMeridian"><button type="button" class="btn btn-default text-center" ng-click="toggleMeridian()">{{meridian}}</button></td>\n		</tr>\n		<tr class="text-center">\n			<td><a ng-click="decrementHours()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n			<td>&nbsp;</td>\n			<td><a ng-click="decrementMinutes()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n			<td ng-show="showMeridian"></td>\n		</tr>\n	</tbody>\n</table>\n')}]),angular.module("template/typeahead/typeahead-match.html",[]).run(["$templateCache",function(a){a.put("template/typeahead/typeahead-match.html",'<a tabindex="-1" bind-html-unsafe="match.label | typeaheadHighlight:query"></a>')
}]),angular.module("template/typeahead/typeahead-popup.html",[]).run(["$templateCache",function(a){a.put("template/typeahead/typeahead-popup.html",'<ul class="dropdown-menu" ng-show="isOpen()" ng-style="{top: position.top+\'px\', left: position.left+\'px\'}" style="display: block;" role="listbox" aria-hidden="{{!isOpen()}}">\n    <li ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index)" role="option" id="{{match.id}}">\n        <div typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n    </li>\n</ul>\n')}]);
/* ng-infinite-scroll - v1.2.0 - 2015-02-14 */
var mod;

mod = angular.module('infinite-scroll', []);

mod.value('THROTTLE_MILLISECONDS', null);

mod.directive('infiniteScroll', [
    '$rootScope', '$window', '$interval', 'THROTTLE_MILLISECONDS', function($rootScope, $window, $interval, THROTTLE_MILLISECONDS) {
        return {
            scope: {
                infiniteScroll: '&',
                infiniteScrollContainer: '=',
                infiniteScrollDistance: '=',
                infiniteScrollDisabled: '=',
                infiniteScrollUseDocumentBottom: '=',
                infiniteScrollListenForEvent: '@'
            },
            link: function(scope, elem, attrs) {
                var changeContainer, checkWhenEnabled, container, handleInfiniteScrollContainer, handleInfiniteScrollDisabled, handleInfiniteScrollDistance, handleInfiniteScrollUseDocumentBottom, handler, height, immediateCheck, offsetTop, pageYOffset, scrollDistance, scrollEnabled, throttle, unregisterEventListener, useDocumentBottom, windowElement;
                windowElement = angular.element($window);
                scrollDistance = null;
                scrollEnabled = null;
                checkWhenEnabled = null;
                container = null;
                immediateCheck = true;
                useDocumentBottom = false;
                unregisterEventListener = null;
                height = function(elem) {
                    elem = elem[0] || elem;
                    if (isNaN(elem.offsetHeight)) {
                        return elem.document.documentElement.clientHeight;
                    } else {
                        return elem.offsetHeight;
                    }
                };
                offsetTop = function(elem) {
                    if (!elem[0].getBoundingClientRect || elem.css('none')) {
                        return;
                    }
                    return elem[0].getBoundingClientRect().top + pageYOffset(elem);
                };
                pageYOffset = function(elem) {
                    elem = elem[0] || elem;
                    if (isNaN(window.pageYOffset)) {
                        return elem.document.documentElement.scrollTop;
                    } else {
                        return elem.ownerDocument.defaultView.pageYOffset;
                    }
                };
                handler = function() {
                    var containerBottom, containerTopOffset, elementBottom, remaining, shouldScroll;
                    if (container === windowElement) {
                        containerBottom = height(container) + pageYOffset(container[0].document.documentElement);
                        elementBottom = offsetTop(elem) + height(elem);
                    } else {
                        containerBottom = height(container);
                        containerTopOffset = 0;
                        if (offsetTop(container) !== void 0) {
                            containerTopOffset = offsetTop(container);
                        }
                        elementBottom = offsetTop(elem) - containerTopOffset + height(elem);
                    }
                    if (useDocumentBottom) {
                        elementBottom = height((elem[0].ownerDocument || elem[0].document).documentElement);
                    }
                    remaining = elementBottom - containerBottom;
                    shouldScroll = remaining <= height(container) * scrollDistance + 1;
                    if (shouldScroll) {
                        checkWhenEnabled = true;
                        if (scrollEnabled) {
                            if (scope.$$phase || $rootScope.$$phase) {
                                return scope.infiniteScroll();
                            } else {
                                return scope.$apply(scope.infiniteScroll);
                            }
                        }
                    } else {
                        return checkWhenEnabled = false;
                    }
                };
                throttle = function(func, wait) {
                    var later, previous, timeout;
                    timeout = null;
                    previous = 0;
                    later = function() {
                        var context;
                        previous = new Date().getTime();
                        $interval.cancel(timeout);
                        timeout = null;
                        func.call();
                        return context = null;
                    };
                    return function() {
                        var now, remaining;
                        now = new Date().getTime();
                        remaining = wait - (now - previous);
                        if (remaining <= 0) {
                            clearTimeout(timeout);
                            $interval.cancel(timeout);
                            timeout = null;
                            previous = now;
                            return func.call();
                        } else {
                            if (!timeout) {
                                return timeout = $interval(later, remaining, 1);
                            }
                        }
                    };
                };
                if (THROTTLE_MILLISECONDS != null) {
                    handler = throttle(handler, THROTTLE_MILLISECONDS);
                }
                scope.$on('$destroy', function() {
                    container.unbind('scroll', handler);
                    if (unregisterEventListener != null) {
                        unregisterEventListener();
                        return unregisterEventListener = null;
                    }
                });
                handleInfiniteScrollDistance = function(v) {
                    return scrollDistance = parseFloat(v) || 0;
                };
                scope.$watch('infiniteScrollDistance', handleInfiniteScrollDistance);
                handleInfiniteScrollDistance(scope.infiniteScrollDistance);
                handleInfiniteScrollDisabled = function(v) {
                    scrollEnabled = !v;
                    if (scrollEnabled && checkWhenEnabled) {
                        checkWhenEnabled = false;
                        return handler();
                    }
                };
                scope.$watch('infiniteScrollDisabled', handleInfiniteScrollDisabled);
                handleInfiniteScrollDisabled(scope.infiniteScrollDisabled);
                handleInfiniteScrollUseDocumentBottom = function(v) {
                    return useDocumentBottom = v;
                };
                scope.$watch('infiniteScrollUseDocumentBottom', handleInfiniteScrollUseDocumentBottom);
                handleInfiniteScrollUseDocumentBottom(scope.infiniteScrollUseDocumentBottom);
                changeContainer = function(newContainer) {
                    if (container != null) {
                        container.unbind('scroll', handler);
                    }
                    container = newContainer;
                    if (newContainer != null) {
                        return container.bind('scroll', handler);
                    }
                };
                changeContainer(windowElement);
                if (scope.infiniteScrollListenForEvent) {
                    unregisterEventListener = $rootScope.$on(scope.infiniteScrollListenForEvent, handler);
                }
                handleInfiniteScrollContainer = function(newContainer) {
                    if ((newContainer == null) || newContainer.length === 0) {
                        return;
                    }
                    if (newContainer instanceof HTMLElement) {
                        newContainer = angular.element(newContainer);
                    } else if (typeof newContainer.append === 'function') {
                        newContainer = angular.element(newContainer[newContainer.length - 1]);
                    } else if (typeof newContainer === 'string') {
                        newContainer = angular.element(document.querySelector(newContainer));
                    }
                    if (newContainer != null) {
                        return changeContainer(newContainer);
                    } else {
                        throw new Exception("invalid infinite-scroll-container attribute.");
                    }
                };
                scope.$watch('infiniteScrollContainer', handleInfiniteScrollContainer);
                handleInfiniteScrollContainer(scope.infiniteScrollContainer || []);
                if (attrs.infiniteScrollParent != null) {
                    changeContainer(angular.element(elem.parent()));
                }
                if (attrs.infiniteScrollImmediateCheck != null) {
                    immediateCheck = scope.$eval(attrs.infiniteScrollImmediateCheck);
                }
                return $interval((function() {
                    if (immediateCheck) {
                        return handler();
                    }
                }), 0, 1);
            }
        };
    }
]);

(function(angular) {

	'use strict';

	angular.module('gridster', [])

	.constant('gridsterConfig', {
		columns: 6, // number of columns in the grid
		pushing: true, // whether to push other items out of the way
		floating: true, // whether to automatically float items up so they stack
		swapping: false, // whether or not to have items switch places instead of push down if they are the same size
		width: 'auto', // width of the grid. "auto" will expand the grid to its parent container
		colWidth: 'auto', // width of grid columns. "auto" will divide the width of the grid evenly among the columns
		rowHeight: 'match', // height of grid rows. 'match' will make it the same as the column width, a numeric value will be interpreted as pixels, '/2' is half the column width, '*5' is five times the column width, etc.
		margins: [10, 10], // margins in between grid items
		outerMargin: true,
		isMobile: false, // toggle mobile view
		mobileBreakPoint: 600, // width threshold to toggle mobile mode
		mobileModeEnabled: true, // whether or not to toggle mobile mode when screen width is less than mobileBreakPoint
		minColumns: 1, // minimum amount of columns the grid can scale down to
		minRows: 1, // minimum amount of rows to show if the grid is empty
		maxRows: 100, // maximum amount of rows in the grid
		defaultSizeX: 2, // default width of an item in columns
		defaultSizeY: 1, // default height of an item in rows
		minSizeX: 1, // minimum column width of an item
		maxSizeX: null, // maximum column width of an item
		minSizeY: 1, // minumum row height of an item
		maxSizeY: null, // maximum row height of an item
		saveGridItemCalculatedHeightInMobile: false, // grid item height in mobile display. true- to use the calculated height by sizeY given
		resizable: { // options to pass to resizable handler
			enabled: true,
			handles: ['s', 'e', 'n', 'w', 'se', 'ne', 'sw', 'nw']
		},
		draggable: { // options to pass to draggable handler
			enabled: true,
			scrollSensitivity: 20, // Distance in pixels from the edge of the viewport after which the viewport should scroll, relative to pointer
			scrollSpeed: 15 // Speed at which the window should scroll once the mouse pointer gets within scrollSensitivity distance
		}
	})

	.controller('GridsterCtrl', ['gridsterConfig', '$timeout',
		function(gridsterConfig, $timeout) {

			var gridster = this;

			/**
			 * Create options from gridsterConfig constant
			 */
			angular.extend(this, gridsterConfig);

			this.resizable = angular.extend({}, gridsterConfig.resizable || {});
			this.draggable = angular.extend({}, gridsterConfig.draggable || {});

			var flag = false;
			this.layoutChanged = function() {
				if (flag) {
					return;
				}
				flag = true;
				$timeout(function() {
					flag = false;
					if (gridster.loaded) {
						gridster.floatItemsUp();
					}
					gridster.updateHeight(gridster.movingItem ? gridster.movingItem.sizeY : 0);
				});
			};

			/**
			 * A positional array of the items in the grid
			 */
			this.grid = [];

			/**
			 * Clean up after yourself
			 */
			this.destroy = function() {
				if (this.grid) {
					this.grid.length = 0;
					this.grid = null;
				}
			};

			/**
			 * Overrides default options
			 *
			 * @param {object} options The options to override
			 */
			this.setOptions = function(options) {
				if (!options) {
					return;
				}

				options = angular.extend({}, options);

				// all this to avoid using jQuery...
				if (options.draggable) {
					angular.extend(this.draggable, options.draggable);
					delete(options.draggable);
				}
				if (options.resizable) {
					angular.extend(this.resizable, options.resizable);
					delete(options.resizable);
				}

				angular.extend(this, options);

				if (!this.margins || this.margins.length !== 2) {
					this.margins = [0, 0];
				} else {
					for (var x = 0, l = this.margins.length; x < l; ++x) {
						this.margins[x] = parseInt(this.margins[x], 10);
						if (isNaN(this.margins[x])) {
							this.margins[x] = 0;
						}
					}
				}
			};

			/**
			 * Check if item can occupy a specified position in the grid
			 *
			 * @param {object} item The item in question
			 * @param {number} row The row index
			 * @param {number} column The column index
			 * @returns {boolean} True if if item fits
			 */
			this.canItemOccupy = function(item, row, column) {
				return row > -1 && column > -1 && item.sizeX + column <= this.columns && item.sizeY + row <= this.maxRows;
			};

			/**
			 * Set the item in the first suitable position
			 *
			 * @param {object} item The item to insert
			 */
			this.autoSetItemPosition = function(item) {
				// walk through each row and column looking for a place it will fit
				for (var rowIndex = 0; rowIndex < this.maxRows; ++rowIndex) {
					for (var colIndex = 0; colIndex < this.columns; ++colIndex) {
						// only insert if position is not already taken and it can fit
						var items = this.getItems(rowIndex, colIndex, item.sizeX, item.sizeY, item);
						if (items.length === 0 && this.canItemOccupy(item, rowIndex, colIndex)) {
							this.putItem(item, rowIndex, colIndex);
							return;
						}
					}
				}
				throw new Error('Unable to place item!');
			};

			/**
			 * Gets items at a specific coordinate
			 *
			 * @param {number} row
			 * @param {number} column
			 * @param {number} sizeX
			 * @param {number} sizeY
			 * @param {array} excludeItems An array of items to exclude from selection
			 * @returns {array} Items that match the criteria
			 */
			this.getItems = function(row, column, sizeX, sizeY, excludeItems) {
				var items = [];
				if (!sizeX || !sizeY) {
					sizeX = sizeY = 1;
				}
				if (excludeItems && !(excludeItems instanceof Array)) {
					excludeItems = [excludeItems];
				}
				for (var h = 0; h < sizeY; ++h) {
					for (var w = 0; w < sizeX; ++w) {
						var item = this.getItem(row + h, column + w, excludeItems);
						if (item && (!excludeItems || excludeItems.indexOf(item) === -1) && items.indexOf(item) === -1) {
							items.push(item);
						}
					}
				}
				return items;
			};

			this.getBoundingBox = function(items) {

				if (items.length === 0) {
					return null;
				}
				if (items.length === 1) {
					return {
						row: items[0].row,
						col: items[0].col,
						sizeY: items[0].sizeY,
						sizeX: items[0].sizeX
					};
				}

				var maxRow = 0;
				var maxCol = 0;
				var minRow = 9999;
				var minCol = 9999;

				for (var i = 0, l = items.length; i < l; ++i) {
					var item = items[i];
					minRow = Math.min(item.row, minRow);
					minCol = Math.min(item.col, minCol);
					maxRow = Math.max(item.row + item.sizeY, maxRow);
					maxCol = Math.max(item.col + item.sizeX, maxCol);
				}

				return {
					row: minRow,
					col: minCol,
					sizeY: maxRow - minRow,
					sizeX: maxCol - minCol
				};
			};


			/**
			 * Removes an item from the grid
			 *
			 * @param {object} item
			 */
			this.removeItem = function(item) {
				for (var rowIndex = 0, l = this.grid.length; rowIndex < l; ++rowIndex) {
					var columns = this.grid[rowIndex];
					if (!columns) {
						continue;
					}
					var index = columns.indexOf(item);
					if (index !== -1) {
						columns[index] = null;
						break;
					}
				}
				this.layoutChanged();
			};

			/**
			 * Returns the item at a specified coordinate
			 *
			 * @param {number} row
			 * @param {number} column
			 * @param {array} excludeitems Items to exclude from selection
			 * @returns {object} The matched item or null
			 */
			this.getItem = function(row, column, excludeItems) {
				if (excludeItems && !(excludeItems instanceof Array)) {
					excludeItems = [excludeItems];
				}
				var sizeY = 1;
				while (row > -1) {
					var sizeX = 1,
						col = column;
					while (col > -1) {
						var items = this.grid[row];
						if (items) {
							var item = items[col];
							if (item && (!excludeItems || excludeItems.indexOf(item) === -1) && item.sizeX >= sizeX && item.sizeY >= sizeY) {
								return item;
							}
						}
						++sizeX;
						--col;
					}
					--row;
					++sizeY;
				}
				return null;
			};

			/**
			 * Insert an array of items into the grid
			 *
			 * @param {array} items An array of items to insert
			 */
			this.putItems = function(items) {
				for (var i = 0, l = items.length; i < l; ++i) {
					this.putItem(items[i]);
				}
			};

			/**
			 * Insert a single item into the grid
			 *
			 * @param {object} item The item to insert
			 * @param {number} row (Optional) Specifies the items row index
			 * @param {number} column (Optional) Specifies the items column index
			 * @param {array} ignoreItems
			 */
			this.putItem = function(item, row, column, ignoreItems) {
				if (typeof row === 'undefined' || row === null) {
					row = item.row;
					column = item.col;
					if (typeof row === 'undefined' || row === null) {
						this.autoSetItemPosition(item);
						return;
					}
				}
				if (!this.canItemOccupy(item, row, column)) {
					column = Math.min(this.columns - item.sizeX, Math.max(0, column));
					row = Math.min(this.maxRows - item.sizeY, Math.max(0, row));
				}

				if (item.oldRow !== null && typeof item.oldRow !== 'undefined') {
					var samePosition = item.oldRow === row && item.oldColumn === column;
					var inGrid = this.grid[row] && this.grid[row][column] === item;
					if (samePosition && inGrid) {
						item.row = row;
						item.col = column;
						return;
					} else {
						// remove from old position
						var oldRow = this.grid[item.oldRow];
						if (oldRow && oldRow[item.oldColumn] === item) {
							delete oldRow[item.oldColumn];
						}
					}
				}

				item.oldRow = item.row = row;
				item.oldColumn = item.col = column;

				this.moveOverlappingItems(item, ignoreItems);

				if (!this.grid[row]) {
					this.grid[row] = [];
				}
				this.grid[row][column] = item;

				if (this.movingItem === item) {
					this.floatItemUp(item);
				}
				this.layoutChanged();
			};

			/**
			 * Trade row and column if item1 with item2
			 *
			 * @param {object} item1
			 * @param {object} item2
			 */
			this.swapItems = function(item1, item2) {
				this.grid[item1.row][item1.col] = item2;
				this.grid[item2.row][item2.col] = item1;

				var item1Row = item1.row;
				var item1Col = item1.col;
				item1.row = item2.row;
				item1.col = item2.col;
				item2.row = item1Row;
				item2.col = item1Col;
			};

			/**
			 * Prevents items from being overlapped
			 *
			 * @param {object} item The item that should remain
			 * @param {array} ignoreItems
			 */
			this.moveOverlappingItems = function(item, ignoreItems) {
				if (ignoreItems) {
					if (ignoreItems.indexOf(item) === -1) {
						ignoreItems = ignoreItems.slice(0);
						ignoreItems.push(item);
					}
				} else {
					ignoreItems = [item];
				}
				var overlappingItems = this.getItems(
					item.row,
					item.col,
					item.sizeX,
					item.sizeY,
					ignoreItems
				);
				this.moveItemsDown(overlappingItems, item.row + item.sizeY, ignoreItems);
			};

			/**
			 * Moves an array of items to a specified row
			 *
			 * @param {array} items The items to move
			 * @param {number} newRow The target row
			 * @param {array} ignoreItems
			 */
			this.moveItemsDown = function(items, newRow, ignoreItems) {
				if (!items || items.length === 0) {
					return;
				}
				items.sort(function(a, b) {
					return a.row - b.row;
				});
				ignoreItems = ignoreItems ? ignoreItems.slice(0) : [];
				var topRows = {},
					item, i, l;
				// calculate the top rows in each column
				for (i = 0, l = items.length; i < l; ++i) {
					item = items[i];
					var topRow = topRows[item.col];
					if (typeof topRow === 'undefined' || item.row < topRow) {
						topRows[item.col] = item.row;
					}
				}
				// move each item down from the top row in its column to the row
				for (i = 0, l = items.length; i < l; ++i) {
					item = items[i];
					var rowsToMove = newRow - topRows[item.col];
					this.moveItemDown(item, item.row + rowsToMove, ignoreItems);
					ignoreItems.push(item);
				}
			};

			this.moveItemDown = function(item, newRow, ignoreItems) {
				if (item.row >= newRow) {
					return;
				}
				while (item.row < newRow) {
					++item.row;
					this.moveOverlappingItems(item, ignoreItems);
				}
				this.putItem(item, item.row, item.col, ignoreItems);
			};

			/**
			 * Moves all items up as much as possible
			 */
			this.floatItemsUp = function() {
				if (this.floating === false) {
					return;
				}
				if (this.grid) {
					for (var rowIndex = 0, l = this.grid.length; rowIndex < l; ++rowIndex) {
						var columns = this.grid[rowIndex];
						if (!columns) {
							continue;
						}
						for (var colIndex = 0, len = columns.length; colIndex < len; ++colIndex) {
							var item = columns[colIndex];
							if (item) {
								this.floatItemUp(item);
							}
						}
					}
				}
			};

			/**
			 * Float an item up to the most suitable row
			 *
			 * @param {object} item The item to move
			 */
			this.floatItemUp = function(item) {
				if (this.floating === false) {
					return;
				}
				var colIndex = item.col,
					sizeY = item.sizeY,
					sizeX = item.sizeX,
					bestRow = null,
					bestColumn = null,
					rowIndex = item.row - 1;

				while (rowIndex > -1) {
					var items = this.getItems(rowIndex, colIndex, sizeX, sizeY, item);
					if (items.length !== 0) {
						break;
					}
					bestRow = rowIndex;
					bestColumn = colIndex;
					--rowIndex;
				}
				if (bestRow !== null) {
					this.putItem(item, bestRow, bestColumn);
				}
			};

			/**
			 * Update gridsters height
			 *
			 * @param {number} plus (Optional) Additional height to add
			 */
			this.updateHeight = function(plus) {
				if (this.grid) {
					var maxHeight = this.minRows;
					plus = plus || 0;

					for (var rowIndex = this.grid.length; rowIndex >= 0; --rowIndex) {
						var columns = this.grid[rowIndex];
						if (!columns) {
							continue;
						}
						for (var colIndex = 0, len = columns.length; colIndex < len; ++colIndex) {
							if (columns[colIndex]) {
								maxHeight = Math.max(maxHeight, rowIndex + plus + columns[colIndex].sizeY);
							}
						}
					}
					this.gridHeight = this.maxRows - maxHeight > 0 ? Math.min(this.maxRows, maxHeight) : Math.max(this.maxRows, maxHeight);
				}
			};

			/**
			 * Returns the number of rows that will fit in given amount of pixels
			 *
			 * @param {number} pixels
			 * @param {boolean} ceilOrFloor (Optional) Determines rounding method
			 */
			this.pixelsToRows = function(pixels, ceilOrFloor) {
				if (ceilOrFloor === true) {
					return Math.ceil(pixels / this.curRowHeight);
				} else if (ceilOrFloor === false) {
					return Math.floor(pixels / this.curRowHeight);
				}

				return Math.round(pixels / this.curRowHeight);
			};

			/**
			 * Returns the number of columns that will fit in a given amount of pixels
			 *
			 * @param {number} pixels
			 * @param {boolean} ceilOrFloor (Optional) Determines rounding method
			 * @returns {number} The number of columns
			 */
			this.pixelsToColumns = function(pixels, ceilOrFloor) {
				if (ceilOrFloor === true) {
					return Math.ceil(pixels / this.curColWidth);
				} else if (ceilOrFloor === false) {
					return Math.floor(pixels / this.curColWidth);
				}

				return Math.round(pixels / this.curColWidth);
			};

			// unified input handling
			// adopted from a msdn blogs sample
			this.unifiedInput = function(target, startEvent, moveEvent, endEvent) {
				var lastXYById = {};

				//  Opera doesn't have Object.keys so we use this wrapper
				var numberOfKeys = function(theObject) {
					if (Object.keys) {
						return Object.keys(theObject).length;
					}

					var n = 0,
						key;
					for (key in theObject) {
						++n;
					}

					return n;
				};

				//  this calculates the delta needed to convert pageX/Y to offsetX/Y because offsetX/Y don't exist in the TouchEvent object or in Firefox's MouseEvent object
				var computeDocumentToElementDelta = function(theElement) {
					var elementLeft = 0;
					var elementTop = 0;
					var oldIEUserAgent = navigator.userAgent.match(/\bMSIE\b/);

					for (var offsetElement = theElement; offsetElement != null; offsetElement = offsetElement.offsetParent) {
						//  the following is a major hack for versions of IE less than 8 to avoid an apparent problem on the IEBlog with double-counting the offsets
						//  this may not be a general solution to IE7's problem with offsetLeft/offsetParent
						if (oldIEUserAgent &&
							(!document.documentMode || document.documentMode < 8) &&
							offsetElement.currentStyle.position === 'relative' && offsetElement.offsetParent && offsetElement.offsetParent.currentStyle.position === 'relative' && offsetElement.offsetLeft === offsetElement.offsetParent.offsetLeft) {
							// add only the top
							elementTop += offsetElement.offsetTop;
						} else {
							elementLeft += offsetElement.offsetLeft;
							elementTop += offsetElement.offsetTop;
						}
					}

					return {
						x: elementLeft,
						y: elementTop
					};
				};

				//  cache the delta from the document to our event target (reinitialized each mousedown/MSPointerDown/touchstart)
				var documentToTargetDelta = computeDocumentToElementDelta(target);

				//  common event handler for the mouse/pointer/touch models and their down/start, move, up/end, and cancel events
				var doEvent = function(theEvtObj) {

					if (theEvtObj.type === 'mousemove' && numberOfKeys(lastXYById) === 0) {
						return;
					}

					var prevent = true;

					var pointerList = theEvtObj.changedTouches ? theEvtObj.changedTouches : [theEvtObj];
					for (var i = 0; i < pointerList.length; ++i) {
						var pointerObj = pointerList[i];
						var pointerId = (typeof pointerObj.identifier !== 'undefined') ? pointerObj.identifier : (typeof pointerObj.pointerId !== 'undefined') ? pointerObj.pointerId : 1;

						//  use the pageX/Y coordinates to compute target-relative coordinates when we have them (in ie < 9, we need to do a little work to put them there)
						if (typeof pointerObj.pageX === 'undefined') {
							//  initialize assuming our source element is our target
							pointerObj.pageX = pointerObj.offsetX + documentToTargetDelta.x;
							pointerObj.pageY = pointerObj.offsetY + documentToTargetDelta.y;

							if (pointerObj.srcElement.offsetParent === target && document.documentMode && document.documentMode === 8 && pointerObj.type === 'mousedown') {
								//  source element is a child piece of VML, we're in IE8, and we've not called setCapture yet - add the origin of the source element
								pointerObj.pageX += pointerObj.srcElement.offsetLeft;
								pointerObj.pageY += pointerObj.srcElement.offsetTop;
							} else if (pointerObj.srcElement !== target && !document.documentMode || document.documentMode < 8) {
								//  source element isn't the target (most likely it's a child piece of VML) and we're in a version of IE before IE8 -
								//  the offsetX/Y values are unpredictable so use the clientX/Y values and adjust by the scroll offsets of its parents
								//  to get the document-relative coordinates (the same as pageX/Y)
								var sx = -2,
									sy = -2; // adjust for old IE's 2-pixel border
								for (var scrollElement = pointerObj.srcElement; scrollElement !== null; scrollElement = scrollElement.parentNode) {
									sx += scrollElement.scrollLeft ? scrollElement.scrollLeft : 0;
									sy += scrollElement.scrollTop ? scrollElement.scrollTop : 0;
								}

								pointerObj.pageX = pointerObj.clientX + sx;
								pointerObj.pageY = pointerObj.clientY + sy;
							}
						}


						var pageX = pointerObj.pageX;
						var pageY = pointerObj.pageY;

						if (theEvtObj.type.match(/(start|down)$/i)) {
							//  clause for processing MSPointerDown, touchstart, and mousedown

							//  refresh the document-to-target delta on start in case the target has moved relative to document
							documentToTargetDelta = computeDocumentToElementDelta(target);

							//  protect against failing to get an up or end on this pointerId
							if (lastXYById[pointerId]) {
								if (endEvent) {
									endEvent({
										target: theEvtObj.target,
										which: theEvtObj.which,
										pointerId: pointerId,
										pageX: pageX,
										pageY: pageY
									});
								}

								delete lastXYById[pointerId];
							}

							if (startEvent) {
								if (prevent) {
									prevent = startEvent({
										target: theEvtObj.target,
										which: theEvtObj.which,
										pointerId: pointerId,
										pageX: pageX,
										pageY: pageY
									});
								}
							}

							//  init last page positions for this pointer
							lastXYById[pointerId] = {
								x: pageX,
								y: pageY
							};

							// IE pointer model
							if (target.msSetPointerCapture) {
								target.msSetPointerCapture(pointerId);
							} else if (theEvtObj.type === 'mousedown' && numberOfKeys(lastXYById) === 1) {
								if (useSetReleaseCapture) {
									target.setCapture(true);
								} else {
									document.addEventListener('mousemove', doEvent, false);
									document.addEventListener('mouseup', doEvent, false);
								}
							}
						} else if (theEvtObj.type.match(/move$/i)) {
							//  clause handles mousemove, MSPointerMove, and touchmove

							if (lastXYById[pointerId] && !(lastXYById[pointerId].x === pageX && lastXYById[pointerId].y === pageY)) {
								//  only extend if the pointer is down and it's not the same as the last point

								if (moveEvent && prevent) {
									prevent = moveEvent({
										target: theEvtObj.target,
										which: theEvtObj.which,
										pointerId: pointerId,
										pageX: pageX,
										pageY: pageY
									});
								}

								//  update last page positions for this pointer
								lastXYById[pointerId].x = pageX;
								lastXYById[pointerId].y = pageY;
							}
						} else if (lastXYById[pointerId] && theEvtObj.type.match(/(up|end|cancel)$/i)) {
							//  clause handles up/end/cancel

							if (endEvent && prevent) {
								prevent = endEvent({
									target: theEvtObj.target,
									which: theEvtObj.which,
									pointerId: pointerId,
									pageX: pageX,
									pageY: pageY
								});
							}

							//  delete last page positions for this pointer
							delete lastXYById[pointerId];

							//  in the Microsoft pointer model, release the capture for this pointer
							//  in the mouse model, release the capture or remove document-level event handlers if there are no down points
							//  nothing is required for the iOS touch model because capture is implied on touchstart
							if (target.msReleasePointerCapture) {
								target.msReleasePointerCapture(pointerId);
							} else if (theEvtObj.type === 'mouseup' && numberOfKeys(lastXYById) === 0) {
								if (useSetReleaseCapture) {
									target.releaseCapture();
								} else {
									document.removeEventListener('mousemove', doEvent, false);
									document.removeEventListener('mouseup', doEvent, false);
								}
							}
						}
					}

					if (prevent) {
						if (theEvtObj.preventDefault) {
							theEvtObj.preventDefault();
						}

						if (theEvtObj.preventManipulation) {
							theEvtObj.preventManipulation();
						}

						if (theEvtObj.preventMouseEvent) {
							theEvtObj.preventMouseEvent();
						}
					}
				};

				var useSetReleaseCapture = false;
				// saving the settings for contentZooming and touchaction before activation
				var contentZooming, msTouchAction;

				this.enable = function() {

					if (window.navigator.msPointerEnabled) {
						//  Microsoft pointer model
						target.addEventListener('MSPointerDown', doEvent, false);
						target.addEventListener('MSPointerMove', doEvent, false);
						target.addEventListener('MSPointerUp', doEvent, false);
						target.addEventListener('MSPointerCancel', doEvent, false);

						//  css way to prevent panning in our target area
						if (typeof target.style.msContentZooming !== 'undefined') {
							contentZooming = target.style.msContentZooming;
							target.style.msContentZooming = 'none';
						}

						//  new in Windows Consumer Preview: css way to prevent all built-in touch actions on our target
						//  without this, you cannot touch draw on the element because IE will intercept the touch events
						if (typeof target.style.msTouchAction !== 'undefined') {
							msTouchAction = target.style.msTouchAction;
							target.style.msTouchAction = 'none';
						}
					} else if (target.addEventListener) {
						//  iOS touch model
						target.addEventListener('touchstart', doEvent, false);
						target.addEventListener('touchmove', doEvent, false);
						target.addEventListener('touchend', doEvent, false);
						target.addEventListener('touchcancel', doEvent, false);

						//  mouse model
						target.addEventListener('mousedown', doEvent, false);

						//  mouse model with capture
						//  rejecting gecko because, unlike ie, firefox does not send events to target when the mouse is outside target
						if (target.setCapture && !window.navigator.userAgent.match(/\bGecko\b/)) {
							useSetReleaseCapture = true;

							target.addEventListener('mousemove', doEvent, false);
							target.addEventListener('mouseup', doEvent, false);
						}
					} else if (target.attachEvent && target.setCapture) {
						//  legacy IE mode - mouse with capture
						useSetReleaseCapture = true;
						target.attachEvent('onmousedown', function() {
							doEvent(window.event);
							window.event.returnValue = false;
							return false;
						});
						target.attachEvent('onmousemove', function() {
							doEvent(window.event);
							window.event.returnValue = false;
							return false;
						});
						target.attachEvent('onmouseup', function() {
							doEvent(window.event);
							window.event.returnValue = false;
							return false;
						});
					}
				};

				this.disable = function() {
					if (window.navigator.msPointerEnabled) {
						//  Microsoft pointer model
						target.removeEventListener('MSPointerDown', doEvent, false);
						target.removeEventListener('MSPointerMove', doEvent, false);
						target.removeEventListener('MSPointerUp', doEvent, false);
						target.removeEventListener('MSPointerCancel', doEvent, false);

						//  reset zooming to saved value
						if (contentZooming) {
							target.style.msContentZooming = contentZooming;
						}

						// reset touch action setting
						if (msTouchAction) {
							target.style.msTouchAction = msTouchAction;
						}
					} else if (target.removeEventListener) {
						//  iOS touch model
						target.removeEventListener('touchstart', doEvent, false);
						target.removeEventListener('touchmove', doEvent, false);
						target.removeEventListener('touchend', doEvent, false);
						target.removeEventListener('touchcancel', doEvent, false);

						//  mouse model
						target.removeEventListener('mousedown', doEvent, false);

						//  mouse model with capture
						//  rejecting gecko because, unlike ie, firefox does not send events to target when the mouse is outside target
						if (target.setCapture && !window.navigator.userAgent.match(/\bGecko\b/)) {
							useSetReleaseCapture = true;

							target.removeEventListener('mousemove', doEvent, false);
							target.removeEventListener('mouseup', doEvent, false);
						}
					} else if (target.detachEvent && target.setCapture) {
						//  legacy IE mode - mouse with capture
						useSetReleaseCapture = true;
						target.detachEvent('onmousedown');
						target.detachEvent('onmousemove');
						target.detachEvent('onmouseup');
					}
				};

				return this;
			};

		}
	])

	/**
	 * The gridster directive
	 *
	 * @param {object} $parse
	 * @param {object} $timeout
	 */
	.directive('gridster', ['$timeout', '$rootScope', '$window',
		function($timeout, $rootScope, $window) {
			return {
				restrict: 'EAC',
				// without transclude, some child items may lose their parent scope
				transclude: true,
				replace: true,
				template: '<div ng-class="gridsterClass()"><div ng-style="previewStyle()" class="gridster-item gridster-preview-holder"></div><div class="gridster-content" ng-transclude></div></div>',
				controller: 'GridsterCtrl',
				controllerAs: 'gridster',
				scope: {
					config: '=?gridster'
				},
				compile: function() {

					return function(scope, $elem, attrs, gridster) {
						gridster.loaded = false;

						scope.gridsterClass = function() {
							return {
								gridster: true,
								'gridster-desktop': !gridster.isMobile,
								'gridster-mobile': gridster.isMobile,
								'gridster-loaded': gridster.loaded
							};
						};

						/**
						 * @returns {Object} style object for preview element
						 */
						scope.previewStyle = function() {
							if (!gridster.movingItem) {
								return {
									display: 'none'
								};
							}

							return {
								display: 'block',
								height: (gridster.movingItem.sizeY * gridster.curRowHeight - gridster.margins[0]) + 'px',
								width: (gridster.movingItem.sizeX * gridster.curColWidth - gridster.margins[1]) + 'px',
								top: (gridster.movingItem.row * gridster.curRowHeight + (gridster.outerMargin ? gridster.margins[0] : 0)) + 'px',
								left: (gridster.movingItem.col * gridster.curColWidth + (gridster.outerMargin ? gridster.margins[1] : 0)) + 'px'
							};
						};

						var refresh = function() {
							gridster.setOptions(scope.config);

							// resolve "auto" & "match" values
							if (gridster.width === 'auto') {
								gridster.curWidth = $elem[0].offsetWidth || parseInt($elem.css('width'), 10);
							} else {
								gridster.curWidth = gridster.width;
							}

							if (gridster.colWidth === 'auto') {
								gridster.curColWidth = (gridster.curWidth + (gridster.outerMargin ? -gridster.margins[1] : gridster.margins[1])) / gridster.columns;
							} else {
								gridster.curColWidth = gridster.colWidth;
							}

							gridster.curRowHeight = gridster.rowHeight;
							if (typeof gridster.rowHeight === 'string') {
								if (gridster.rowHeight === 'match') {
									gridster.curRowHeight = Math.round(gridster.curColWidth);
								} else if (gridster.rowHeight.indexOf('*') !== -1) {
									gridster.curRowHeight = Math.round(gridster.curColWidth * gridster.rowHeight.replace('*', '').replace(' ', ''));
								} else if (gridster.rowHeight.indexOf('/') !== -1) {
									gridster.curRowHeight = Math.round(gridster.curColWidth / gridster.rowHeight.replace('/', '').replace(' ', ''));
								}
							}

							gridster.isMobile = gridster.mobileModeEnabled && gridster.curWidth <= gridster.mobileBreakPoint;

							// loop through all items and reset their CSS
							for (var rowIndex = 0, l = gridster.grid.length; rowIndex < l; ++rowIndex) {
								var columns = gridster.grid[rowIndex];
								if (!columns) {
									continue;
								}

								for (var colIndex = 0, len = columns.length; colIndex < len; ++colIndex) {
									if (columns[colIndex]) {
										var item = columns[colIndex];
										item.setElementPosition();
										item.setElementSizeY();
										item.setElementSizeX();
									}
								}
							}

							updateHeight();
						};

						// update grid items on config changes
						scope.$watch('config', refresh, true);

						scope.$watch('config.draggable', function() {
							$rootScope.$broadcast('gridster-draggable-changed');
						}, true);

						scope.$watch('config.resizable', function() {
							$rootScope.$broadcast('gridster-resizable-changed');
						}, true);

						var updateHeight = function() {
							$elem.css('height', (gridster.gridHeight * gridster.curRowHeight) + (gridster.outerMargin ? gridster.margins[0] : -gridster.margins[0]) + 'px');
						};

						scope.$watch('gridster.gridHeight', updateHeight);

						scope.$watch('gridster.movingItem', function() {
							gridster.updateHeight(gridster.movingItem ? gridster.movingItem.sizeY : 0);
						});

						var prevWidth = $elem[0].offsetWidth || parseInt($elem.css('width'), 10);

						function resize() {
							var width = $elem[0].offsetWidth || parseInt($elem.css('width'), 10);

							if (!width || width === prevWidth || gridster.movingItem) {
								return;
							}
							prevWidth = width;

							if (gridster.loaded) {
								$elem.removeClass('gridster-loaded');
							}

							refresh();

							if (gridster.loaded) {
								$elem.addClass('gridster-loaded');
							}

							scope.$parent.$broadcast('gridster-resized', [width, $elem.offsetHeight]);
						}

						// track element width changes any way we can
						function onResize() {
							resize();
							$timeout(function() {
								scope.$apply();
							});
						}
						if (typeof $elem.resize === 'function') {
							$elem.resize(onResize);
						}
						var $win = angular.element($window);
						$win.on('resize', onResize);

						scope.$watch(function() {
							return $elem[0].offsetWidth || parseInt($elem.css('width'), 10);
						}, resize);

						// be sure to cleanup
						scope.$on('$destroy', function() {
							gridster.destroy();
							$win.off('resize', onResize);
						});

						// allow a little time to place items before floating up
						$timeout(function() {
							scope.$watch('gridster.floating', function() {
								gridster.floatItemsUp();
							});
							gridster.loaded = true;
						}, 100);
					};
				}
			};
		}
	])

	.controller('GridsterItemCtrl', function() {
		this.$element = null;
		this.gridster = null;
		this.row = null;
		this.col = null;
		this.sizeX = null;
		this.sizeY = null;
		this.minSizeX = 0;
		this.minSizeY = 0;
		this.maxSizeX = null;
		this.maxSizeY = null;

		this.init = function($element, gridster) {
			this.$element = $element;
			this.gridster = gridster;
			this.sizeX = gridster.defaultSizeX;
			this.sizeY = gridster.defaultSizeY;
		};

		this.destroy = function() {
			this.gridster = null;
			this.$element = null;
		};

		/**
		 * Returns the items most important attributes
		 */
		this.toJSON = function() {
			return {
				row: this.row,
				col: this.col,
				sizeY: this.sizeY,
				sizeX: this.sizeX
			};
		};

		this.isMoving = function() {
			return this.gridster.movingItem === this;
		};

		/**
		 * Set the items position
		 *
		 * @param {number} row
		 * @param {number} column
		 */
		this.setPosition = function(row, column) {
			this.gridster.putItem(this, row, column);

			if (!this.isMoving()) {
				this.setElementPosition();
			}
		};

		/**
		 * Sets a specified size property
		 *
		 * @param {string} key Can be either "x" or "y"
		 * @param {number} value The size amount
		 */
		this.setSize = function(key, value, preventMove) {
			key = key.toUpperCase();
			var camelCase = 'size' + key,
				titleCase = 'Size' + key;
			if (value === '') {
				return;
			}
			value = parseInt(value, 10);
			if (isNaN(value) || value === 0) {
				value = this.gridster['default' + titleCase];
			}
			var max = key === 'X' ? this.gridster.columns : this.gridster.maxRows;
			if (this['max' + titleCase]) {
				max = Math.min(this['max' + titleCase], max);
			}
			if (this.gridster['max' + titleCase]) {
				max = Math.min(this.gridster['max' + titleCase], max);
			}
			if (key === 'X' && this.cols) {
				max -= this.cols;
			} else if (key === 'Y' && this.rows) {
				max -= this.rows;
			}

			var min = 0;
			if (this['min' + titleCase]) {
				min = Math.max(this['min' + titleCase], min);
			}
			if (this.gridster['min' + titleCase]) {
				min = Math.max(this.gridster['min' + titleCase], min);
			}

			value = Math.max(Math.min(value, max), min);

			var changed = (this[camelCase] !== value || (this['old' + titleCase] && this['old' + titleCase] !== value));
			this['old' + titleCase] = this[camelCase] = value;

			if (!this.isMoving()) {
				this['setElement' + titleCase]();
			}
			if (!preventMove && changed) {
				this.gridster.moveOverlappingItems(this);
				this.gridster.layoutChanged();
			}

			return changed;
		};

		/**
		 * Sets the items sizeY property
		 *
		 * @param {number} rows
		 */
		this.setSizeY = function(rows, preventMove) {
			return this.setSize('Y', rows, preventMove);
		};

		/**
		 * Sets the items sizeX property
		 *
		 * @param {number} rows
		 */
		this.setSizeX = function(columns, preventMove) {
			return this.setSize('X', columns, preventMove);
		};

		/**
		 * Sets an elements position on the page
		 *
		 * @param {number} row
		 * @param {number} column
		 */
		this.setElementPosition = function() {
			if (this.gridster.isMobile) {
				this.$element.css({
					marginLeft: this.gridster.margins[0] + 'px',
					marginRight: this.gridster.margins[0] + 'px',
					marginTop: this.gridster.margins[1] + 'px',
					marginBottom: this.gridster.margins[1] + 'px',
					top: '',
					left: ''
				});
			} else {
				this.$element.css({
					margin: 0,
					top: (this.row * this.gridster.curRowHeight + (this.gridster.outerMargin ? this.gridster.margins[0] : 0)) + 'px',
					left: (this.col * this.gridster.curColWidth + (this.gridster.outerMargin ? this.gridster.margins[1] : 0)) + 'px'
				});
			}
		};

		/**
		 * Sets an elements height
		 */
		this.setElementSizeY = function() {
			if (this.gridster.isMobile && !this.gridster.saveGridItemCalculatedHeightInMobile) {
				this.$element.css('height', '');
			} else {
				this.$element.css('height', (this.sizeY * this.gridster.curRowHeight - this.gridster.margins[0]) + 'px');
			}
		};

		/**
		 * Sets an elements width
		 */
		this.setElementSizeX = function() {
			if (this.gridster.isMobile) {
				this.$element.css('width', '');
			} else {
				this.$element.css('width', (this.sizeX * this.gridster.curColWidth - this.gridster.margins[1]) + 'px');
			}
		};

		/**
		 * Gets an element's width
		 */
		this.getElementSizeX = function() {
			return (this.sizeX * this.gridster.curColWidth - this.gridster.margins[1]);
		};

		/**
		 * Gets an element's height
		 */
		this.getElementSizeY = function() {
			return (this.sizeY * this.gridster.curRowHeight - this.gridster.margins[0]);
		};

	})

	.factory('GridsterDraggable', ['$document', '$timeout', '$window',
		function($document, $timeout, $window) {
			function GridsterDraggable($el, scope, gridster, item, itemOptions) {

				var elmX, elmY, elmW, elmH,

					mouseX = 0,
					mouseY = 0,
					lastMouseX = 0,
					lastMouseY = 0,
					mOffX = 0,
					mOffY = 0,

					minTop = 0,
					maxTop = 9999,
					minLeft = 0,
					realdocument = $document[0];

				var originalCol, originalRow;
				var inputTags = ['select', 'input', 'textarea', 'button'];

				function mouseDown(e) {
					if (inputTags.indexOf(e.target.nodeName.toLowerCase()) !== -1) {
						return false;
					}

					// exit, if a resize handle was hit
					if (angular.element(e.target).hasClass('gridster-item-resizable-handler')) {
						return false;
					}

					// exit, if the target has it's own click event
					if (angular.element(e.target).attr('onclick') || angular.element(e.target).attr('ng-click')) {
						return false;
					}

					switch (e.which) {
						case 1:
							// left mouse button
							break;
						case 2:
						case 3:
							// right or middle mouse button
							return;
					}

					lastMouseX = e.pageX;
					lastMouseY = e.pageY;

					elmX = parseInt($el.css('left'), 10);
					elmY = parseInt($el.css('top'), 10);
					elmW = $el[0].offsetWidth;
					elmH = $el[0].offsetHeight;

					originalCol = item.col;
					originalRow = item.row;

					dragStart(e);

					return true;
				}

				function mouseMove(e) {
					if (!$el.hasClass('gridster-item-moving') || $el.hasClass('gridster-item-resizing')) {
						return false;
					}

					var maxLeft = gridster.curWidth - 1;

					// Get the current mouse position.
					mouseX = e.pageX;
					mouseY = e.pageY;

					// Get the deltas
					var diffX = mouseX - lastMouseX + mOffX;
					var diffY = mouseY - lastMouseY + mOffY;
					mOffX = mOffY = 0;

					// Update last processed mouse positions.
					lastMouseX = mouseX;
					lastMouseY = mouseY;

					var dX = diffX,
						dY = diffY;
					if (elmX + dX < minLeft) {
						diffX = minLeft - elmX;
						mOffX = dX - diffX;
					} else if (elmX + elmW + dX > maxLeft) {
						diffX = maxLeft - elmX - elmW;
						mOffX = dX - diffX;
					}

					if (elmY + dY < minTop) {
						diffY = minTop - elmY;
						mOffY = dY - diffY;
					} else if (elmY + elmH + dY > maxTop) {
						diffY = maxTop - elmY - elmH;
						mOffY = dY - diffY;
					}
					elmX += diffX;
					elmY += diffY;

					// set new position
					$el.css({
						'top': elmY + 'px',
						'left': elmX + 'px'
					});

					drag(e);

					return true;
				}

				function mouseUp(e) {
					if (!$el.hasClass('gridster-item-moving') || $el.hasClass('gridster-item-resizing')) {
						return false;
					}

					mOffX = mOffY = 0;

					dragStop(e);

					return true;
				}

				function dragStart(event) {
					$el.addClass('gridster-item-moving');
					gridster.movingItem = item;

					gridster.updateHeight(item.sizeY);
					scope.$apply(function() {
						if (gridster.draggable && gridster.draggable.start) {
							gridster.draggable.start(event, $el, itemOptions);
						}
					});
				}

				function drag(event) {
					var oldRow = item.row,
						oldCol = item.col,
						hasCallback = gridster.draggable && gridster.draggable.drag,
						scrollSensitivity = gridster.draggable.scrollSensitivity,
						scrollSpeed = gridster.draggable.scrollSpeed;

					var row = gridster.pixelsToRows(elmY);
					var col = gridster.pixelsToColumns(elmX);

					var itemsInTheWay = gridster.getItems(row, col, item.sizeX, item.sizeY, item);
					var hasItemsInTheWay = itemsInTheWay.length !== 0;

					if (gridster.swapping === true && hasItemsInTheWay) {
						var boundingBoxItem = gridster.getBoundingBox(itemsInTheWay);
						var sameSize = boundingBoxItem.sizeX === item.sizeX && boundingBoxItem.sizeY === item.sizeY;
						var sameRow = boundingBoxItem.row === row;
						var sameCol = boundingBoxItem.col === col;
						var samePosition = sameRow && sameCol;
						var inline = sameRow || sameCol;

						if (sameSize && itemsInTheWay.length === 1) {
							if (samePosition) {
								gridster.swapItems(item, itemsInTheWay[0]);
							} else if (inline) {
								return;
							}
						} else if (boundingBoxItem.sizeX <= item.sizeX && boundingBoxItem.sizeY <= item.sizeY && inline) {
							var emptyRow = item.row <= row ? item.row : row + item.sizeY;
							var emptyCol = item.col <= col ? item.col : col + item.sizeX;
							var rowOffset = emptyRow - boundingBoxItem.row;
							var colOffset = emptyCol - boundingBoxItem.col;

							for (var i = 0, l = itemsInTheWay.length; i < l; ++i) {
								var itemInTheWay = itemsInTheWay[i];

								var itemsInFreeSpace = gridster.getItems(
									itemInTheWay.row + rowOffset,
									itemInTheWay.col + colOffset,
									itemInTheWay.sizeX,
									itemInTheWay.sizeY,
									item
								);

								if (itemsInFreeSpace.length === 0) {
									gridster.putItem(itemInTheWay, itemInTheWay.row + rowOffset, itemInTheWay.col + colOffset);
								}
							}
						}
					}

					if (gridster.pushing !== false || !hasItemsInTheWay) {
						item.row = row;
						item.col = col;
					}

					if (event.pageY - realdocument.body.scrollTop < scrollSensitivity) {
						realdocument.body.scrollTop = realdocument.body.scrollTop - scrollSpeed;
					} else if ($window.innerHeight - (event.pageY - realdocument.body.scrollTop) < scrollSensitivity) {
						realdocument.body.scrollTop = realdocument.body.scrollTop + scrollSpeed;
					}

					if (event.pageX - realdocument.body.scrollLeft < scrollSensitivity) {
						realdocument.body.scrollLeft = realdocument.body.scrollLeft - scrollSpeed;
					} else if ($window.innerWidth - (event.pageX - realdocument.body.scrollLeft) < scrollSensitivity) {
						realdocument.body.scrollLeft = realdocument.body.scrollLeft + scrollSpeed;
					}

					if (hasCallback || oldRow !== item.row || oldCol !== item.col) {
						scope.$apply(function() {
							if (hasCallback) {
								gridster.draggable.drag(event, $el, itemOptions);
							}
						});
					}
				}

				function dragStop(event) {
					$el.removeClass('gridster-item-moving');
					var row = gridster.pixelsToRows(elmY);
					var col = gridster.pixelsToColumns(elmX);
					if (gridster.pushing !== false || gridster.getItems(row, col, item.sizeX, item.sizeY, item).length === 0) {
						item.row = row;
						item.col = col;
					}
					gridster.movingItem = null;
					item.setPosition(item.row, item.col);

					scope.$apply(function() {
						if (gridster.draggable && gridster.draggable.stop) {
							gridster.draggable.stop(event, $el, itemOptions);
						}
					});
				}

				var enabled = false;
				var $dragHandle = null;
				var unifiedInput;

				this.enable = function() {
					var self = this;
					// disable and timeout required for some template rendering
					$timeout(function() {
						self.disable();

						if (gridster.draggable && gridster.draggable.handle) {
							$dragHandle = angular.element($el[0].querySelector(gridster.draggable.handle));
							if ($dragHandle.length === 0) {
								// fall back to element if handle not found...
								$dragHandle = $el;
							}
						} else {
							$dragHandle = $el;
						}

						unifiedInput = new gridster.unifiedInput($dragHandle[0], mouseDown, mouseMove, mouseUp);
						unifiedInput.enable();

						enabled = true;
					});
				};

				this.disable = function() {
					if (!enabled) {
						return;
					}

					unifiedInput.disable();
					unifiedInput = undefined;
					enabled = false;
				};

				this.toggle = function(enabled) {
					if (enabled) {
						this.enable();
					} else {
						this.disable();
					}
				};

				this.destroy = function() {
					this.disable();
				};
			}

			return GridsterDraggable;
		}
	])

	.factory('GridsterResizable', [
		function() {
			function GridsterResizable($el, scope, gridster, item, itemOptions) {

				function ResizeHandle(handleClass) {

					var hClass = handleClass;

					var elmX, elmY, elmW, elmH,

						mouseX = 0,
						mouseY = 0,
						lastMouseX = 0,
						lastMouseY = 0,
						mOffX = 0,
						mOffY = 0,

						minTop = 0,
						maxTop = 9999,
						minLeft = 0;

					var getMinHeight = function() {
						return gridster.curRowHeight - gridster.margins[0];
					};
					var getMinWidth = function() {
						return gridster.curColWidth - gridster.margins[1];
					};

					var originalWidth, originalHeight;
					var savedDraggable;

					function mouseDown(e) {
						switch (e.which) {
							case 1:
								// left mouse button
								break;
							case 2:
							case 3:
								// right or middle mouse button
								return;
						}

						// save the draggable setting to restore after resize
						savedDraggable = gridster.draggable.enabled;
						if (savedDraggable) {
							gridster.draggable.enabled = false;
							scope.$broadcast('gridster-draggable-changed');
						}

						// Get the current mouse position.
						lastMouseX = e.pageX;
						lastMouseY = e.pageY;

						// Record current widget dimensions
						elmX = parseInt($el.css('left'), 10);
						elmY = parseInt($el.css('top'), 10);
						elmW = $el[0].offsetWidth;
						elmH = $el[0].offsetHeight;

						originalWidth = item.sizeX;
						originalHeight = item.sizeY;

						resizeStart(e);

						return true;
					}

					function resizeStart(e) {
						$el.addClass('gridster-item-moving');
						$el.addClass('gridster-item-resizing');

						gridster.movingItem = item;

						item.setElementSizeX();
						item.setElementSizeY();
						item.setElementPosition();
						gridster.updateHeight(1);

						scope.$apply(function() {
							// callback
							if (gridster.resizable && gridster.resizable.start) {
								gridster.resizable.start(e, $el, itemOptions); // options is the item model
							}
						});
					}

					function mouseMove(e) {
						var maxLeft = gridster.curWidth - 1;

						// Get the current mouse position.
						mouseX = e.pageX;
						mouseY = e.pageY;

						// Get the deltas
						var diffX = mouseX - lastMouseX + mOffX;
						var diffY = mouseY - lastMouseY + mOffY;
						mOffX = mOffY = 0;

						// Update last processed mouse positions.
						lastMouseX = mouseX;
						lastMouseY = mouseY;

						var dY = diffY,
							dX = diffX;

						if (hClass.indexOf('n') >= 0) {
							if (elmH - dY < getMinHeight()) {
								diffY = elmH - getMinHeight();
								mOffY = dY - diffY;
							} else if (elmY + dY < minTop) {
								diffY = minTop - elmY;
								mOffY = dY - diffY;
							}
							elmY += diffY;
							elmH -= diffY;
						}
						if (hClass.indexOf('s') >= 0) {
							if (elmH + dY < getMinHeight()) {
								diffY = getMinHeight() - elmH;
								mOffY = dY - diffY;
							} else if (elmY + elmH + dY > maxTop) {
								diffY = maxTop - elmY - elmH;
								mOffY = dY - diffY;
							}
							elmH += diffY;
						}
						if (hClass.indexOf('w') >= 0) {
							if (elmW - dX < getMinWidth()) {
								diffX = elmW - getMinWidth();
								mOffX = dX - diffX;
							} else if (elmX + dX < minLeft) {
								diffX = minLeft - elmX;
								mOffX = dX - diffX;
							}
							elmX += diffX;
							elmW -= diffX;
						}
						if (hClass.indexOf('e') >= 0) {
							if (elmW + dX < getMinWidth()) {
								diffX = getMinWidth() - elmW;
								mOffX = dX - diffX;
							} else if (elmX + elmW + dX > maxLeft) {
								diffX = maxLeft - elmX - elmW;
								mOffX = dX - diffX;
							}
							elmW += diffX;
						}

						// set new position
						$el.css({
							'top': elmY + 'px',
							'left': elmX + 'px',
							'width': elmW + 'px',
							'height': elmH + 'px'
						});

						resize(e);

						return true;
					}

					function mouseUp(e) {
						// restore draggable setting to its original state
						if (gridster.draggable.enabled !== savedDraggable) {
							gridster.draggable.enabled = savedDraggable;
							scope.$broadcast('gridster-draggable-changed');
						}

						mOffX = mOffY = 0;

						resizeStop(e);

						return true;
					}

					function resize(e) {
						var oldRow = item.row,
							oldCol = item.col,
							oldSizeX = item.sizeX,
							oldSizeY = item.sizeY,
							hasCallback = gridster.resizable && gridster.resizable.resize;

						var col = item.col;
						// only change column if grabbing left edge
						if (['w', 'nw', 'sw'].indexOf(handleClass) !== -1) {
							col = gridster.pixelsToColumns(elmX, false);
						}

						var row = item.row;
						// only change row if grabbing top edge
						if (['n', 'ne', 'nw'].indexOf(handleClass) !== -1) {
							row = gridster.pixelsToRows(elmY, false);
						}

						var sizeX = item.sizeX;
						// only change row if grabbing left or right edge
						if (['n', 's'].indexOf(handleClass) === -1) {
							sizeX = gridster.pixelsToColumns(elmW, true);
						}

						var sizeY = item.sizeY;
						// only change row if grabbing top or bottom edge
						if (['e', 'w'].indexOf(handleClass) === -1) {
							sizeY = gridster.pixelsToRows(elmH, true);
						}

						if (gridster.pushing !== false || gridster.getItems(row, col, sizeX, sizeY, item).length === 0) {
							item.row = row;
							item.col = col;
							item.sizeX = sizeX;
							item.sizeY = sizeY;
						}
						var isChanged = item.row !== oldRow || item.col !== oldCol || item.sizeX !== oldSizeX || item.sizeY !== oldSizeY;

						if (hasCallback || isChanged) {
							scope.$apply(function() {
								if (hasCallback) {
									gridster.resizable.resize(e, $el, itemOptions); // options is the item model
								}
							});
						}
					}

					function resizeStop(e) {
						$el.removeClass('gridster-item-moving');
						$el.removeClass('gridster-item-resizing');

						gridster.movingItem = null;

						item.setPosition(item.row, item.col);
						item.setSizeY(item.sizeY);
						item.setSizeX(item.sizeX);

						scope.$apply(function() {
							if (gridster.resizable && gridster.resizable.stop) {
								gridster.resizable.stop(e, $el, itemOptions); // options is the item model
							}
						});
					}

					var $dragHandle = null;
					var unifiedInput;

					this.enable = function() {
						if (!$dragHandle) {
							$dragHandle = angular.element('<div class="gridster-item-resizable-handler handle-' + hClass + '"></div>');
							$el.append($dragHandle);
						}

						unifiedInput = new gridster.unifiedInput($dragHandle[0], mouseDown, mouseMove, mouseUp);
						unifiedInput.enable();
					};

					this.disable = function() {
						if ($dragHandle) {
							$dragHandle.remove();
							$dragHandle = null;
						}

						unifiedInput.disable();
						unifiedInput = undefined;
					};

					this.destroy = function() {
						this.disable();
					};
				}

				var handles = [];
				var handlesOpts = gridster.resizable.handles;
				if (typeof handlesOpts === 'string') {
					handlesOpts = gridster.resizable.handles.split(',');
				}
				var enabled = false;

				for (var c = 0, l = handlesOpts.length; c < l; c++) {
					handles.push(new ResizeHandle(handlesOpts[c]));
				}

				this.enable = function() {
					if (enabled) {
						return;
					}
					for (var c = 0, l = handles.length; c < l; c++) {
						handles[c].enable();
					}
					enabled = true;
				};

				this.disable = function() {
					if (!enabled) {
						return;
					}
					for (var c = 0, l = handles.length; c < l; c++) {
						handles[c].disable();
					}
					enabled = false;
				};

				this.toggle = function(enabled) {
					if (enabled) {
						this.enable();
					} else {
						this.disable();
					}
				};

				this.destroy = function() {
					for (var c = 0, l = handles.length; c < l; c++) {
						handles[c].destroy();
					}
				};
			}
			return GridsterResizable;
		}
	])

	/**
	 * GridsterItem directive
	 */
	.directive('gridsterItem', ['$parse', 'GridsterDraggable', 'GridsterResizable',
		function($parse, GridsterDraggable, GridsterResizable) {
			return {
				restrict: 'EA',
				controller: 'GridsterItemCtrl',
				require: ['^gridster', 'gridsterItem'],
				link: function(scope, $el, attrs, controllers) {
					var optionsKey = attrs.gridsterItem,
						options;

					var gridster = controllers[0],
						item = controllers[1];

					// bind the item's position properties
					if (optionsKey) {
						var $optionsGetter = $parse(optionsKey);
						options = $optionsGetter(scope) || {};
						if (!options && $optionsGetter.assign) {
							options = {
								row: item.row,
								col: item.col,
								sizeX: item.sizeX,
								sizeY: item.sizeY,
								minSizeX: 0,
								minSizeY: 0,
								maxSizeX: null,
								maxSizeY: null
							};
							$optionsGetter.assign(scope, options);
						}
					} else {
						options = attrs;
					}

					item.init($el, gridster);

					$el.addClass('gridster-item');

					var aspects = ['minSizeX', 'maxSizeX', 'minSizeY', 'maxSizeY', 'sizeX', 'sizeY', 'row', 'col'],
						$getters = {};

					var aspectFn = function(aspect) {
						var key;
						if (typeof options[aspect] === 'string') {
							key = options[aspect];
						} else if (typeof options[aspect.toLowerCase()] === 'string') {
							key = options[aspect.toLowerCase()];
						} else if (optionsKey) {
							key = $parse(optionsKey + '.' + aspect);
						} else {
							return;
						}
						$getters[aspect] = $parse(key);

						// when the value changes externally, update the internal item object
						scope.$watch(key, function(newVal) {
							newVal = parseInt(newVal, 10);
							if (!isNaN(newVal)) {
								item[aspect] = newVal;
							}
						});

						// initial set
						var val = $getters[aspect](scope);
						if (typeof val === 'number') {
							item[aspect] = val;
						}
					};

					for (var i = 0, l = aspects.length; i < l; ++i) {
						aspectFn(aspects[i]);
					}

					scope.$broadcast('gridster-item-initialized', [item.sizeY, item.sizeX, item.getElementSizeY(), item.getElementSizeX()]);

					function positionChanged() {
						// call setPosition so the element and gridster controller are updated
						item.setPosition(item.row, item.col);

						// when internal item position changes, update externally bound values
						if ($getters.row && $getters.row.assign) {
							$getters.row.assign(scope, item.row);
						}
						if ($getters.col && $getters.col.assign) {
							$getters.col.assign(scope, item.col);
						}
					}
					scope.$watch(function() {
						return item.row + ',' + item.col;
					}, positionChanged);

					function sizeChanged() {
						var changedX = item.setSizeX(item.sizeX, true);
						if (changedX && $getters.sizeX && $getters.sizeX.assign) {
							$getters.sizeX.assign(scope, item.sizeX);
						}
						var changedY = item.setSizeY(item.sizeY, true);
						if (changedY && $getters.sizeY && $getters.sizeY.assign) {
							$getters.sizeY.assign(scope, item.sizeY);
						}

						if (changedX || changedY) {
							item.gridster.moveOverlappingItems(item);
							gridster.layoutChanged();
						}
					}
					scope.$watch(function() {
						return item.sizeY + ',' + item.sizeX + '|' + item.minSizeX + ',' + item.maxSizeX + ',' + item.minSizeY + ',' + item.maxSizeY;
					}, sizeChanged);

					var draggable = new GridsterDraggable($el, scope, gridster, item, options);
					var resizable = new GridsterResizable($el, scope, gridster, item, options);

					scope.$on('gridster-draggable-changed', function() {
						draggable.toggle(!gridster.isMobile && gridster.draggable && gridster.draggable.enabled);
					});
					scope.$on('gridster-resizable-changed', function() {
						resizable.toggle(!gridster.isMobile && gridster.resizable && gridster.resizable.enabled);
					});
					scope.$on('gridster-resized', function() {
						resizable.toggle(!gridster.isMobile && gridster.resizable && gridster.resizable.enabled);
					});
					scope.$watch(function() {
						return gridster.isMobile;
					}, function() {
						resizable.toggle(!gridster.isMobile && gridster.resizable && gridster.resizable.enabled);
						draggable.toggle(!gridster.isMobile && gridster.draggable && gridster.draggable.enabled);
					});

					function whichTransitionEvent() {
						var el = document.createElement('div');
						var transitions = {
							'transition': 'transitionend',
							'OTransition': 'oTransitionEnd',
							'MozTransition': 'transitionend',
							'WebkitTransition': 'webkitTransitionEnd'
						};
						for (var t in transitions) {
							if (el.style[t] !== undefined) {
								return transitions[t];
							}
						}
					}

					$el.on(whichTransitionEvent(), function() {
						scope.$apply(function() {
							scope.$broadcast('gridster-item-transition-end');
						});
					});

					return scope.$on('$destroy', function() {
						try {
							resizable.destroy();
							draggable.destroy();
						} catch (e) {}

						try {
							gridster.removeItem(item);
						} catch (e) {}

						try {
							item.destroy();
						} catch (e) {}
					});
				}
			};
		}
	])

	;

})(angular);

/*!
 * ui-select
 * http://github.com/angular-ui/ui-select
 * Version: 0.19.5 - 2016-10-24T23:13:59.434Z
 * License: MIT
 */


(function () { 
"use strict";
var KEY = {
    TAB: 9,
    ENTER: 13,
    ESC: 27,
    SPACE: 32,
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
    SHIFT: 16,
    CTRL: 17,
    ALT: 18,
    PAGE_UP: 33,
    PAGE_DOWN: 34,
    HOME: 36,
    END: 35,
    BACKSPACE: 8,
    DELETE: 46,
    COMMAND: 91,

    MAP: { 91 : "COMMAND", 8 : "BACKSPACE" , 9 : "TAB" , 13 : "ENTER" , 16 : "SHIFT" , 17 : "CTRL" , 18 : "ALT" , 19 : "PAUSEBREAK" , 20 : "CAPSLOCK" , 27 : "ESC" , 32 : "SPACE" , 33 : "PAGE_UP", 34 : "PAGE_DOWN" , 35 : "END" , 36 : "HOME" , 37 : "LEFT" , 38 : "UP" , 39 : "RIGHT" , 40 : "DOWN" , 43 : "+" , 44 : "PRINTSCREEN" , 45 : "INSERT" , 46 : "DELETE", 48 : "0" , 49 : "1" , 50 : "2" , 51 : "3" , 52 : "4" , 53 : "5" , 54 : "6" , 55 : "7" , 56 : "8" , 57 : "9" , 59 : ";", 61 : "=" , 65 : "A" , 66 : "B" , 67 : "C" , 68 : "D" , 69 : "E" , 70 : "F" , 71 : "G" , 72 : "H" , 73 : "I" , 74 : "J" , 75 : "K" , 76 : "L", 77 : "M" , 78 : "N" , 79 : "O" , 80 : "P" , 81 : "Q" , 82 : "R" , 83 : "S" , 84 : "T" , 85 : "U" , 86 : "V" , 87 : "W" , 88 : "X" , 89 : "Y" , 90 : "Z", 96 : "0" , 97 : "1" , 98 : "2" , 99 : "3" , 100 : "4" , 101 : "5" , 102 : "6" , 103 : "7" , 104 : "8" , 105 : "9", 106 : "*" , 107 : "+" , 109 : "-" , 110 : "." , 111 : "/", 112 : "F1" , 113 : "F2" , 114 : "F3" , 115 : "F4" , 116 : "F5" , 117 : "F6" , 118 : "F7" , 119 : "F8" , 120 : "F9" , 121 : "F10" , 122 : "F11" , 123 : "F12", 144 : "NUMLOCK" , 145 : "SCROLLLOCK" , 186 : ";" , 187 : "=" , 188 : "," , 189 : "-" , 190 : "." , 191 : "/" , 192 : "`" , 219 : "[" , 220 : "\\" , 221 : "]" , 222 : "'"
    },

    isControl: function (e) {
        var k = e.which;
        switch (k) {
        case KEY.COMMAND:
        case KEY.SHIFT:
        case KEY.CTRL:
        case KEY.ALT:
            return true;
        }

        if (e.metaKey || e.ctrlKey || e.altKey) return true;

        return false;
    },
    isFunctionKey: function (k) {
        k = k.which ? k.which : k;
        return k >= 112 && k <= 123;
    },
    isVerticalMovement: function (k){
      return ~[KEY.UP, KEY.DOWN].indexOf(k);
    },
    isHorizontalMovement: function (k){
      return ~[KEY.LEFT,KEY.RIGHT,KEY.BACKSPACE,KEY.DELETE].indexOf(k);
    },
    toSeparator: function (k) {
      var sep = {ENTER:"\n",TAB:"\t",SPACE:" "}[k];
      if (sep) return sep;
      // return undefined for special keys other than enter, tab or space.
      // no way to use them to cut strings.
      return KEY[k] ? undefined : k;
    }
  };

/**
 * Add querySelectorAll() to jqLite.
 *
 * jqLite find() is limited to lookups by tag name.
 * TODO This will change with future versions of AngularJS, to be removed when this happens
 *
 * See jqLite.find - why not use querySelectorAll? https://github.com/angular/angular.js/issues/3586
 * See feat(jqLite): use querySelectorAll instead of getElementsByTagName in jqLite.find https://github.com/angular/angular.js/pull/3598
 */
if (angular.element.prototype.querySelectorAll === undefined) {
  angular.element.prototype.querySelectorAll = function(selector) {
    return angular.element(this[0].querySelectorAll(selector));
  };
}

/**
 * Add closest() to jqLite.
 */
if (angular.element.prototype.closest === undefined) {
  angular.element.prototype.closest = function( selector) {
    var elem = this[0];
    var matchesSelector = elem.matches || elem.webkitMatchesSelector || elem.mozMatchesSelector || elem.msMatchesSelector;

    while (elem) {
      if (matchesSelector.bind(elem)(selector)) {
        return elem;
      } else {
        elem = elem.parentElement;
      }
    }
    return false;
  };
}

var latestId = 0;

var uis = angular.module('ui.select', [])

.constant('uiSelectConfig', {
  theme: 'bootstrap',
  searchEnabled: true,
  sortable: false,
  placeholder: '', // Empty by default, like HTML tag <select>
  refreshDelay: 1000, // In milliseconds
  closeOnSelect: true,
  skipFocusser: false,
  dropdownPosition: 'auto',
  removeSelected: true,
  resetSearchInput: true,
  generateId: function() {
    return latestId++;
  },
  appendToBody: false,
  spinnerEnabled: false,
  spinnerClass: 'glyphicon-refresh ui-select-spin'
})

// See Rename minErr and make it accessible from outside https://github.com/angular/angular.js/issues/6913
.service('uiSelectMinErr', function() {
  var minErr = angular.$$minErr('ui.select');
  return function() {
    var error = minErr.apply(this, arguments);
    var message = error.message.replace(new RegExp('\nhttp://errors.angularjs.org/.*'), '');
    return new Error(message);
  };
})

// Recreates old behavior of ng-transclude. Used internally.
.directive('uisTranscludeAppend', function () {
  return {
    link: function (scope, element, attrs, ctrl, transclude) {
        transclude(scope, function (clone) {
          element.append(clone);
        });
      }
    };
})

/**
 * Highlights text that matches $select.search.
 *
 * Taken from AngularUI Bootstrap Typeahead
 * See https://github.com/angular-ui/bootstrap/blob/0.10.0/src/typeahead/typeahead.js#L340
 */
.filter('highlight', function() {
  function escapeRegexp(queryToEscape) {
    return ('' + queryToEscape).replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
  }

  return function(matchItem, query) {
    return query && matchItem ? ('' + matchItem).replace(new RegExp(escapeRegexp(query), 'gi'), '<span class="ui-select-highlight">$&</span>') : matchItem;
  };
})

/**
 * A read-only equivalent of jQuery's offset function: http://api.jquery.com/offset/
 *
 * Taken from AngularUI Bootstrap Position:
 * See https://github.com/angular-ui/bootstrap/blob/master/src/position/position.js#L70
 */
.factory('uisOffset',
  ['$document', '$window',
  function ($document, $window) {

  return function(element) {
    var boundingClientRect = element[0].getBoundingClientRect();
    return {
      width: boundingClientRect.width || element.prop('offsetWidth'),
      height: boundingClientRect.height || element.prop('offsetHeight'),
      top: boundingClientRect.top + ($window.pageYOffset || $document[0].documentElement.scrollTop),
      left: boundingClientRect.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft)
    };
  };
}]);

uis.directive('uiSelectChoices',
  ['uiSelectConfig', 'uisRepeatParser', 'uiSelectMinErr', '$compile', '$window',
  function(uiSelectConfig, RepeatParser, uiSelectMinErr, $compile, $window) {

  return {
    restrict: 'EA',
    require: '^uiSelect',
    replace: true,
    transclude: true,
    templateUrl: function(tElement) {
      // Needed so the uiSelect can detect the transcluded content
      tElement.addClass('ui-select-choices');

      // Gets theme attribute from parent (ui-select)
      var theme = tElement.parent().attr('theme') || uiSelectConfig.theme;
      return theme + '/choices.tpl.html';
    },

    compile: function(tElement, tAttrs) {

      if (!tAttrs.repeat) throw uiSelectMinErr('repeat', "Expected 'repeat' expression.");

      // var repeat = RepeatParser.parse(attrs.repeat);
      var groupByExp = tAttrs.groupBy;
      var groupFilterExp = tAttrs.groupFilter;

      if (groupByExp) {
        var groups = tElement.querySelectorAll('.ui-select-choices-group');
        if (groups.length !== 1) throw uiSelectMinErr('rows', "Expected 1 .ui-select-choices-group but got '{0}'.", groups.length);
        groups.attr('ng-repeat', RepeatParser.getGroupNgRepeatExpression());
      }

      var parserResult = RepeatParser.parse(tAttrs.repeat);

      var choices = tElement.querySelectorAll('.ui-select-choices-row');
      if (choices.length !== 1) {
        throw uiSelectMinErr('rows', "Expected 1 .ui-select-choices-row but got '{0}'.", choices.length);
      }

      choices.attr('ng-repeat', parserResult.repeatExpression(groupByExp))
             .attr('ng-if', '$select.open'); //Prevent unnecessary watches when dropdown is closed
    

      var rowsInner = tElement.querySelectorAll('.ui-select-choices-row-inner');
      if (rowsInner.length !== 1) {
        throw uiSelectMinErr('rows', "Expected 1 .ui-select-choices-row-inner but got '{0}'.", rowsInner.length);
      }
      rowsInner.attr('uis-transclude-append', ''); //Adding uisTranscludeAppend directive to row element after choices element has ngRepeat

      // If IE8 then need to target rowsInner to apply the ng-click attr as choices will not capture the event. 
      var clickTarget = $window.document.addEventListener ? choices : rowsInner;
      clickTarget.attr('ng-click', '$select.select(' + parserResult.itemName + ',$select.skipFocusser,$event)');
      
      return function link(scope, element, attrs, $select) {

       
        $select.parseRepeatAttr(attrs.repeat, groupByExp, groupFilterExp); //Result ready at $select.parserResult

        $select.disableChoiceExpression = attrs.uiDisableChoice;
        $select.onHighlightCallback = attrs.onHighlight;

        $select.dropdownPosition = attrs.position ? attrs.position.toLowerCase() : uiSelectConfig.dropdownPosition;        

        scope.$on('$destroy', function() {
          choices.remove();
        });

        scope.$watch('$select.search', function(newValue) {
          if(newValue && !$select.open && $select.multiple) $select.activate(false, true);
          $select.activeIndex = $select.tagging.isActivated ? -1 : 0;
          if (!attrs.minimumInputLength || $select.search.length >= attrs.minimumInputLength) {
            $select.refresh(attrs.refresh);
          } else {
            $select.items = [];
          }
        });

        attrs.$observe('refreshDelay', function() {
          // $eval() is needed otherwise we get a string instead of a number
          var refreshDelay = scope.$eval(attrs.refreshDelay);
          $select.refreshDelay = refreshDelay !== undefined ? refreshDelay : uiSelectConfig.refreshDelay;
        });

        scope.$watch('$select.open', function(open) {
          if (open) {
            tElement.attr('role', 'listbox');
          } else {
            tElement.removeAttr('role');
          }
        });
      };
    }
  };
}]);

/**
 * Contains ui-select "intelligence".
 *
 * The goal is to limit dependency on the DOM whenever possible and
 * put as much logic in the controller (instead of the link functions) as possible so it can be easily tested.
 */
uis.controller('uiSelectCtrl',
  ['$scope', '$element', '$timeout', '$filter', '$$uisDebounce', 'uisRepeatParser', 'uiSelectMinErr', 'uiSelectConfig', '$parse', '$injector', '$window',
  function($scope, $element, $timeout, $filter, $$uisDebounce, RepeatParser, uiSelectMinErr, uiSelectConfig, $parse, $injector, $window) {

  var ctrl = this;

  var EMPTY_SEARCH = '';

  ctrl.placeholder = uiSelectConfig.placeholder;
  ctrl.searchEnabled = uiSelectConfig.searchEnabled;
  ctrl.sortable = uiSelectConfig.sortable;
  ctrl.refreshDelay = uiSelectConfig.refreshDelay;
  ctrl.paste = uiSelectConfig.paste;
  ctrl.resetSearchInput = uiSelectConfig.resetSearchInput;
  ctrl.refreshing = false;
  ctrl.spinnerEnabled = uiSelectConfig.spinnerEnabled;
  ctrl.spinnerClass = uiSelectConfig.spinnerClass;

  ctrl.removeSelected = uiSelectConfig.removeSelected; //If selected item(s) should be removed from dropdown list
  ctrl.closeOnSelect = true; //Initialized inside uiSelect directive link function
  ctrl.skipFocusser = false; //Set to true to avoid returning focus to ctrl when item is selected
  ctrl.search = EMPTY_SEARCH;

  ctrl.activeIndex = 0; //Dropdown of choices
  ctrl.items = []; //All available choices

  ctrl.open = false;
  ctrl.focus = false;
  ctrl.disabled = false;
  ctrl.selected = undefined;

  ctrl.dropdownPosition = 'auto';

  ctrl.focusser = undefined; //Reference to input element used to handle focus events
  ctrl.multiple = undefined; // Initialized inside uiSelect directive link function
  ctrl.disableChoiceExpression = undefined; // Initialized inside uiSelectChoices directive link function
  ctrl.tagging = {isActivated: false, fct: undefined};
  ctrl.taggingTokens = {isActivated: false, tokens: undefined};
  ctrl.lockChoiceExpression = undefined; // Initialized inside uiSelectMatch directive link function
  ctrl.clickTriggeredSelect = false;
  ctrl.$filter = $filter;
  ctrl.$element = $element;

  // Use $injector to check for $animate and store a reference to it
  ctrl.$animate = (function () {
    try {
      return $injector.get('$animate');
    } catch (err) {
      // $animate does not exist
      return null;
    }
  })();

  ctrl.searchInput = $element.querySelectorAll('input.ui-select-search');
  if (ctrl.searchInput.length !== 1) {
    throw uiSelectMinErr('searchInput', "Expected 1 input.ui-select-search but got '{0}'.", ctrl.searchInput.length);
  }

  ctrl.isEmpty = function() {
    return angular.isUndefined(ctrl.selected) || ctrl.selected === null || ctrl.selected === '' || (ctrl.multiple && ctrl.selected.length === 0);
  };

  function _findIndex(collection, predicate, thisArg){
    if (collection.findIndex){
      return collection.findIndex(predicate, thisArg);
    } else {
      var list = Object(collection);
      var length = list.length >>> 0;
      var value;

      for (var i = 0; i < length; i++) {
        value = list[i];
        if (predicate.call(thisArg, value, i, list)) {
          return i;
        }
      }
      return -1;
    }
  }

  // Most of the time the user does not want to empty the search input when in typeahead mode
  function _resetSearchInput() {
    if (ctrl.resetSearchInput) {
      ctrl.search = EMPTY_SEARCH;
      //reset activeIndex
      if (ctrl.selected && ctrl.items.length && !ctrl.multiple) {
        ctrl.activeIndex = _findIndex(ctrl.items, function(item){
          return angular.equals(this, item);
        }, ctrl.selected);
      }
    }
  }

    function _groupsFilter(groups, groupNames) {
      var i, j, result = [];
      for(i = 0; i < groupNames.length ;i++){
        for(j = 0; j < groups.length ;j++){
          if(groups[j].name == [groupNames[i]]){
            result.push(groups[j]);
          }
        }
      }
      return result;
    }

  // When the user clicks on ui-select, displays the dropdown list
  ctrl.activate = function(initSearchValue, avoidReset) {
    if (!ctrl.disabled  && !ctrl.open) {
      if(!avoidReset) _resetSearchInput();

      $scope.$broadcast('uis:activate');

      ctrl.open = true;

      ctrl.activeIndex = ctrl.activeIndex >= ctrl.items.length ? 0 : ctrl.activeIndex;

      // ensure that the index is set to zero for tagging variants
      // that where first option is auto-selected
      if ( ctrl.activeIndex === -1 && ctrl.taggingLabel !== false ) {
        ctrl.activeIndex = 0;
      }

      var container = $element.querySelectorAll('.ui-select-choices-content');
      var searchInput = $element.querySelectorAll('.ui-select-search');
      if (ctrl.$animate && ctrl.$animate.on && ctrl.$animate.enabled(container[0])) {
        var animateHandler = function(elem, phase) {
          if (phase === 'start' && ctrl.items.length === 0) {
            // Only focus input after the animation has finished
            ctrl.$animate.off('removeClass', searchInput[0], animateHandler);
            $timeout(function () {
              ctrl.focusSearchInput(initSearchValue);
            });
          } else if (phase === 'close') {
            // Only focus input after the animation has finished
            ctrl.$animate.off('enter', container[0], animateHandler);
            $timeout(function () {
              ctrl.focusSearchInput(initSearchValue);
            });
          }
        };

        if (ctrl.items.length > 0) {
          ctrl.$animate.on('enter', container[0], animateHandler);
        } else {
          ctrl.$animate.on('removeClass', searchInput[0], animateHandler);
        }
      } else {
        $timeout(function () {
          ctrl.focusSearchInput(initSearchValue);
          if(!ctrl.tagging.isActivated && ctrl.items.length > 1) {
            _ensureHighlightVisible();
          }
        });
      }
    }
    else if (ctrl.open && !ctrl.searchEnabled) {
      // Close the selection if we don't have search enabled, and we click on the select again
      ctrl.close();
    }
  };

  ctrl.focusSearchInput = function (initSearchValue) {
    ctrl.search = initSearchValue || ctrl.search;
    ctrl.searchInput[0].focus();
  };

  ctrl.findGroupByName = function(name) {
    return ctrl.groups && ctrl.groups.filter(function(group) {
      return group.name === name;
    })[0];
  };

  ctrl.parseRepeatAttr = function(repeatAttr, groupByExp, groupFilterExp) {
    function updateGroups(items) {
      var groupFn = $scope.$eval(groupByExp);
      ctrl.groups = [];
      angular.forEach(items, function(item) {
        var groupName = angular.isFunction(groupFn) ? groupFn(item) : item[groupFn];
        var group = ctrl.findGroupByName(groupName);
        if(group) {
          group.items.push(item);
        }
        else {
          ctrl.groups.push({name: groupName, items: [item]});
        }
      });
      if(groupFilterExp){
        var groupFilterFn = $scope.$eval(groupFilterExp);
        if( angular.isFunction(groupFilterFn)){
          ctrl.groups = groupFilterFn(ctrl.groups);
        } else if(angular.isArray(groupFilterFn)){
          ctrl.groups = _groupsFilter(ctrl.groups, groupFilterFn);
        }
      }
      ctrl.items = [];
      ctrl.groups.forEach(function(group) {
        ctrl.items = ctrl.items.concat(group.items);
      });
    }

    function setPlainItems(items) {
      ctrl.items = items;
    }

    ctrl.setItemsFn = groupByExp ? updateGroups : setPlainItems;

    ctrl.parserResult = RepeatParser.parse(repeatAttr);

    ctrl.isGrouped = !!groupByExp;
    ctrl.itemProperty = ctrl.parserResult.itemName;

    //If collection is an Object, convert it to Array

    var originalSource = ctrl.parserResult.source;

    //When an object is used as source, we better create an array and use it as 'source'
    var createArrayFromObject = function(){
      var origSrc = originalSource($scope);
      $scope.$uisSource = Object.keys(origSrc).map(function(v){
        var result = {};
        result[ctrl.parserResult.keyName] = v;
        result.value = origSrc[v];
        return result;
      });
    };

    if (ctrl.parserResult.keyName){ // Check for (key,value) syntax
      createArrayFromObject();
      ctrl.parserResult.source = $parse('$uisSource' + ctrl.parserResult.filters);
      $scope.$watch(originalSource, function(newVal, oldVal){
        if (newVal !== oldVal) createArrayFromObject();
      }, true);
    }

    ctrl.refreshItems = function (data){
      data = data || ctrl.parserResult.source($scope);
      var selectedItems = ctrl.selected;
      //TODO should implement for single mode removeSelected
      if (ctrl.isEmpty() || (angular.isArray(selectedItems) && !selectedItems.length) || !ctrl.multiple || !ctrl.removeSelected) {
        ctrl.setItemsFn(data);
      }else{
        if ( data !== undefined && data !== null ) {
          var filteredItems = data.filter(function(i) {
            return angular.isArray(selectedItems) ? selectedItems.every(function(selectedItem) {
              return !angular.equals(i, selectedItem);
            }) : !angular.equals(i, selectedItems);
          });
          ctrl.setItemsFn(filteredItems);
        }
      }
      if (ctrl.dropdownPosition === 'auto' || ctrl.dropdownPosition === 'up'){
        $scope.calculateDropdownPos();
      }

      $scope.$broadcast('uis:refresh');
    };

    // See https://github.com/angular/angular.js/blob/v1.2.15/src/ng/directive/ngRepeat.js#L259
    $scope.$watchCollection(ctrl.parserResult.source, function(items) {
      if (items === undefined || items === null) {
        // If the user specifies undefined or null => reset the collection
        // Special case: items can be undefined if the user did not initialized the collection on the scope
        // i.e $scope.addresses = [] is missing
        ctrl.items = [];
      } else {
        if (!angular.isArray(items)) {
          throw uiSelectMinErr('items', "Expected an array but got '{0}'.", items);
        } else {
          //Remove already selected items (ex: while searching)
          //TODO Should add a test
          ctrl.refreshItems(items);

          //update the view value with fresh data from items, if there is a valid model value
          if(angular.isDefined(ctrl.ngModel.$modelValue)) {
            ctrl.ngModel.$modelValue = null; //Force scope model value and ngModel value to be out of sync to re-run formatters
          }
        }
      }
    });

  };

  var _refreshDelayPromise;

  /**
   * Typeahead mode: lets the user refresh the collection using his own function.
   *
   * See Expose $select.search for external / remote filtering https://github.com/angular-ui/ui-select/pull/31
   */
  ctrl.refresh = function(refreshAttr) {
    if (refreshAttr !== undefined) {
      // Debounce
      // See https://github.com/angular-ui/bootstrap/blob/0.10.0/src/typeahead/typeahead.js#L155
      // FYI AngularStrap typeahead does not have debouncing: https://github.com/mgcrea/angular-strap/blob/v2.0.0-rc.4/src/typeahead/typeahead.js#L177
      if (_refreshDelayPromise) {
        $timeout.cancel(_refreshDelayPromise);
      }
      _refreshDelayPromise = $timeout(function() {
        var refreshPromise =  $scope.$eval(refreshAttr);
        if (refreshPromise && angular.isFunction(refreshPromise.then) && !ctrl.refreshing) {
          ctrl.refreshing = true;
          refreshPromise.then(function() {
            ctrl.refreshing = false;
          });
      }}, ctrl.refreshDelay);
    }
  };

  ctrl.isActive = function(itemScope) {
    if ( !ctrl.open ) {
      return false;
    }
    var itemIndex = ctrl.items.indexOf(itemScope[ctrl.itemProperty]);
    var isActive =  itemIndex == ctrl.activeIndex;

    if ( !isActive || itemIndex < 0 ) {
      return false;
    }

    if (isActive && !angular.isUndefined(ctrl.onHighlightCallback)) {
      itemScope.$eval(ctrl.onHighlightCallback);
    }

    return isActive;
  };

  var _isItemSelected = function (item) {
    return (ctrl.selected && angular.isArray(ctrl.selected) &&
        ctrl.selected.filter(function (selection) { return angular.equals(selection, item); }).length > 0);
  };

  var disabledItems = [];

  function _updateItemDisabled(item, isDisabled) {
    var disabledItemIndex = disabledItems.indexOf(item);
    if (isDisabled && disabledItemIndex === -1) {
      disabledItems.push(item);
    }

    if (!isDisabled && disabledItemIndex > -1) {
      disabledItems.splice(disabledItemIndex, 1);
    }
  }

  function _isItemDisabled(item) {
    return disabledItems.indexOf(item) > -1;
  }

  ctrl.isDisabled = function(itemScope) {

    if (!ctrl.open) return;

    var item = itemScope[ctrl.itemProperty];
    var itemIndex = ctrl.items.indexOf(item);
    var isDisabled = false;

    if (itemIndex >= 0 && (angular.isDefined(ctrl.disableChoiceExpression) || ctrl.multiple)) {

      if (item.isTag) return false;

      if (ctrl.multiple) {
        isDisabled = _isItemSelected(item);
      }

      if (!isDisabled && angular.isDefined(ctrl.disableChoiceExpression)) {
        isDisabled = !!(itemScope.$eval(ctrl.disableChoiceExpression));
      }

      _updateItemDisabled(item, isDisabled);
    }

    return isDisabled;
  };


  // When the user selects an item with ENTER or clicks the dropdown
  ctrl.select = function(item, skipFocusser, $event) {
    if (item === undefined || !_isItemDisabled(item)) {

      if ( ! ctrl.items && ! ctrl.search && ! ctrl.tagging.isActivated) return;

      if (!item || !_isItemDisabled(item)) {
        // if click is made on existing item, prevent from tagging, ctrl.search does not matter
        ctrl.clickTriggeredSelect = false;
        if($event && ($event.type === 'click' || $event.type === 'touchend') && item)
          ctrl.clickTriggeredSelect = true;

        if(ctrl.tagging.isActivated && ctrl.clickTriggeredSelect === false) {
          // if taggingLabel is disabled and item is undefined we pull from ctrl.search
          if ( ctrl.taggingLabel === false ) {
            if ( ctrl.activeIndex < 0 ) {
              if (item === undefined) {
                item = ctrl.tagging.fct !== undefined ? ctrl.tagging.fct(ctrl.search) : ctrl.search;
              }
              if (!item || angular.equals( ctrl.items[0], item ) ) {
                return;
              }
            } else {
              // keyboard nav happened first, user selected from dropdown
              item = ctrl.items[ctrl.activeIndex];
            }
          } else {
            // tagging always operates at index zero, taggingLabel === false pushes
            // the ctrl.search value without having it injected
            if ( ctrl.activeIndex === 0 ) {
              // ctrl.tagging pushes items to ctrl.items, so we only have empty val
              // for `item` if it is a detected duplicate
              if ( item === undefined ) return;

              // create new item on the fly if we don't already have one;
              // use tagging function if we have one
              if ( ctrl.tagging.fct !== undefined && typeof item === 'string' ) {
                item = ctrl.tagging.fct(item);
                if (!item) return;
              // if item type is 'string', apply the tagging label
              } else if ( typeof item === 'string' ) {
                // trim the trailing space
                item = item.replace(ctrl.taggingLabel,'').trim();
              }
            }
          }
          // search ctrl.selected for dupes potentially caused by tagging and return early if found
          if (_isItemSelected(item)) {
            ctrl.close(skipFocusser);
            return;
          }
        }        
        _resetSearchInput();
        $scope.$broadcast('uis:select', item);

        var locals = {};
        locals[ctrl.parserResult.itemName] = item;

        $timeout(function(){
          ctrl.onSelectCallback($scope, {
            $item: item,
            $model: ctrl.parserResult.modelMapper($scope, locals)
          });
        });

        if (ctrl.closeOnSelect) {
          ctrl.close(skipFocusser);
        }
      }
    }
  };

  // Closes the dropdown
  ctrl.close = function(skipFocusser) {
    if (!ctrl.open) return;
    if (ctrl.ngModel && ctrl.ngModel.$setTouched) ctrl.ngModel.$setTouched();
    ctrl.open = false;
    _resetSearchInput();
    $scope.$broadcast('uis:close', skipFocusser);

  };

  ctrl.setFocus = function(){
    if (!ctrl.focus) ctrl.focusInput[0].focus();
  };

  ctrl.clear = function($event) {
    ctrl.select(undefined);
    $event.stopPropagation();
    $timeout(function() {
      ctrl.focusser[0].focus();
    }, 0, false);
  };

  // Toggle dropdown
  ctrl.toggle = function(e) {
    if (ctrl.open) {
      ctrl.close();
      e.preventDefault();
      e.stopPropagation();
    } else {
      ctrl.activate();
    }
  };

  // Set default function for locked choices - avoids unnecessary
  // logic if functionality is not being used
  ctrl.isLocked = function () {
    return false;
  };

  $scope.$watch(function () {
    return angular.isDefined(ctrl.lockChoiceExpression) && ctrl.lockChoiceExpression !== "";
  }, _initaliseLockedChoices);

  function _initaliseLockedChoices(doInitalise) {
    if(!doInitalise) return;

    var lockedItems = [];

    function _updateItemLocked(item, isLocked) {
      var lockedItemIndex = lockedItems.indexOf(item);
      if (isLocked && lockedItemIndex === -1) {
        lockedItems.push(item);
        }

      if (!isLocked && lockedItemIndex > -1) {
        lockedItems.splice(lockedItemIndex, 0);
      }
    }

    function _isItemlocked(item) {
      return lockedItems.indexOf(item) > -1;
    }

    ctrl.isLocked = function (itemScope, itemIndex) {
      var isLocked = false,
          item = ctrl.selected[itemIndex];

      if(item) {
        if (itemScope) {
          isLocked = !!(itemScope.$eval(ctrl.lockChoiceExpression));
          _updateItemLocked(item, isLocked);
        } else {
          isLocked = _isItemlocked(item);
        }
      }

      return isLocked;
    };
  }


  var sizeWatch = null;
  var updaterScheduled = false;
  ctrl.sizeSearchInput = function() {

    var input = ctrl.searchInput[0],
        container = ctrl.searchInput.parent().parent()[0],
        calculateContainerWidth = function() {
          // Return the container width only if the search input is visible
          return container.clientWidth * !!input.offsetParent;
        },
        updateIfVisible = function(containerWidth) {
          if (containerWidth === 0) {
            return false;
          }
          var inputWidth = containerWidth - input.offsetLeft - 10;
          if (inputWidth < 50) inputWidth = containerWidth;
          ctrl.searchInput.css('width', inputWidth+'px');
          return true;
        };

    ctrl.searchInput.css('width', '10px');
    $timeout(function() { //Give tags time to render correctly
      if (sizeWatch === null && !updateIfVisible(calculateContainerWidth())) {
        sizeWatch = $scope.$watch(function() {
          if (!updaterScheduled) {
            updaterScheduled = true;
            $scope.$$postDigest(function() {
              updaterScheduled = false;
              if (updateIfVisible(calculateContainerWidth())) {
                sizeWatch();
                sizeWatch = null;
              }
            });
          }
        }, angular.noop);
      }
    });
  };

  function _handleDropDownSelection(key) {
    var processed = true;
    switch (key) {
      case KEY.DOWN:
        if (!ctrl.open && ctrl.multiple) ctrl.activate(false, true); //In case its the search input in 'multiple' mode
        else if (ctrl.activeIndex < ctrl.items.length - 1) { ctrl.activeIndex++; }
        break;
      case KEY.UP:
        if (!ctrl.open && ctrl.multiple) ctrl.activate(false, true); //In case its the search input in 'multiple' mode
        else if (ctrl.activeIndex > 0 || (ctrl.search.length === 0 && ctrl.tagging.isActivated && ctrl.activeIndex > -1)) { ctrl.activeIndex--; }
        break;
      case KEY.TAB:
        if (!ctrl.multiple || ctrl.open) ctrl.select(ctrl.items[ctrl.activeIndex], true);
        break;
      case KEY.ENTER:
        if(ctrl.open && (ctrl.tagging.isActivated || ctrl.activeIndex >= 0)){
          ctrl.select(ctrl.items[ctrl.activeIndex], ctrl.skipFocusser); // Make sure at least one dropdown item is highlighted before adding if not in tagging mode
        } else {
          ctrl.activate(false, true); //In case its the search input in 'multiple' mode
        }
        break;
      case KEY.ESC:
        ctrl.close();
        break;
      default:
        processed = false;
    }
    return processed;
  }

  // Bind to keyboard shortcuts
  ctrl.searchInput.on('keydown', function(e) {

    var key = e.which;

    if (~[KEY.ENTER,KEY.ESC].indexOf(key)){
      e.preventDefault();
      e.stopPropagation();
    }

    $scope.$apply(function() {

      var tagged = false;

      if (ctrl.items.length > 0 || ctrl.tagging.isActivated) {
        if(!_handleDropDownSelection(key) && !ctrl.searchEnabled) {
          e.preventDefault();
          e.stopPropagation();
        }
        if ( ctrl.taggingTokens.isActivated ) {
          for (var i = 0; i < ctrl.taggingTokens.tokens.length; i++) {
            if ( ctrl.taggingTokens.tokens[i] === KEY.MAP[e.keyCode] ) {
              // make sure there is a new value to push via tagging
              if ( ctrl.search.length > 0 ) {
                tagged = true;
              }
            }
          }
          if ( tagged ) {
            $timeout(function() {
              ctrl.searchInput.triggerHandler('tagged');
              var newItem = ctrl.search.replace(KEY.MAP[e.keyCode],'').trim();
              if ( ctrl.tagging.fct ) {
                newItem = ctrl.tagging.fct( newItem );
              }
              if (newItem) ctrl.select(newItem, true);
            });
          }
        }
      }

    });

    if(KEY.isVerticalMovement(key) && ctrl.items.length > 0){
      _ensureHighlightVisible();
    }

    if (key === KEY.ENTER || key === KEY.ESC) {
      e.preventDefault();
      e.stopPropagation();
    }

  });

  ctrl.searchInput.on('paste', function (e) {
    var data;

    if (window.clipboardData && window.clipboardData.getData) { // IE
      data = window.clipboardData.getData('Text');
    } else {
      data = (e.originalEvent || e).clipboardData.getData('text/plain');
    }

    // Prepend the current input field text to the paste buffer.
    data = ctrl.search + data;

    if (data && data.length > 0) {
      // If tagging try to split by tokens and add items
      if (ctrl.taggingTokens.isActivated) {
        var items = [];
        for (var i = 0; i < ctrl.taggingTokens.tokens.length; i++) {  // split by first token that is contained in data
          var separator = KEY.toSeparator(ctrl.taggingTokens.tokens[i]) || ctrl.taggingTokens.tokens[i];
          if (data.indexOf(separator) > -1) {
            items = data.split(separator);
            break;  // only split by one token
          }
        }
        if (items.length === 0) {
          items = [data];
        }
        var oldsearch = ctrl.search;
        angular.forEach(items, function (item) {
          var newItem = ctrl.tagging.fct ? ctrl.tagging.fct(item) : item;
          if (newItem) {
            ctrl.select(newItem, true);
          }
        });
        ctrl.search = oldsearch || EMPTY_SEARCH;
        e.preventDefault();
        e.stopPropagation();
      } else if (ctrl.paste) {
        ctrl.paste(data);
        ctrl.search = EMPTY_SEARCH;
        e.preventDefault();
        e.stopPropagation();
      }
    }
  });

  ctrl.searchInput.on('tagged', function() {
    $timeout(function() {
      _resetSearchInput();
    });
  });

  // See https://github.com/ivaynberg/select2/blob/3.4.6/select2.js#L1431
  function _ensureHighlightVisible() {
    var container = $element.querySelectorAll('.ui-select-choices-content');
    var choices = container.querySelectorAll('.ui-select-choices-row');
    if (choices.length < 1) {
      throw uiSelectMinErr('choices', "Expected multiple .ui-select-choices-row but got '{0}'.", choices.length);
    }

    if (ctrl.activeIndex < 0) {
      return;
    }

    var highlighted = choices[ctrl.activeIndex];
    var posY = highlighted.offsetTop + highlighted.clientHeight - container[0].scrollTop;
    var height = container[0].offsetHeight;

    if (posY > height) {
      container[0].scrollTop += posY - height;
    } else if (posY < highlighted.clientHeight) {
      if (ctrl.isGrouped && ctrl.activeIndex === 0)
        container[0].scrollTop = 0; //To make group header visible when going all the way up
      else
        container[0].scrollTop -= highlighted.clientHeight - posY;
    }
  }

  var onResize = $$uisDebounce(function() {
    ctrl.sizeSearchInput();
  }, 50);

  angular.element($window).bind('resize', onResize);

  $scope.$on('$destroy', function() {
    ctrl.searchInput.off('keyup keydown tagged blur paste');
    angular.element($window).off('resize', onResize);
  });

  $scope.$watch('$select.activeIndex', function(activeIndex) {
    if (activeIndex)
      $element.find('input').attr(
        'aria-activedescendant',
        'ui-select-choices-row-' + ctrl.generatedId + '-' + activeIndex);
  });

  $scope.$watch('$select.open', function(open) {
    if (!open)
      $element.find('input').removeAttr('aria-activedescendant');
  });
}]);

uis.directive('uiSelect',
  ['$document', 'uiSelectConfig', 'uiSelectMinErr', 'uisOffset', '$compile', '$parse', '$timeout',
  function($document, uiSelectConfig, uiSelectMinErr, uisOffset, $compile, $parse, $timeout) {

  return {
    restrict: 'EA',
    templateUrl: function(tElement, tAttrs) {
      var theme = tAttrs.theme || uiSelectConfig.theme;
      return theme + (angular.isDefined(tAttrs.multiple) ? '/select-multiple.tpl.html' : '/select.tpl.html');
    },
    replace: true,
    transclude: true,
    require: ['uiSelect', '^ngModel'],
    scope: true,

    controller: 'uiSelectCtrl',
    controllerAs: '$select',
    compile: function(tElement, tAttrs) {

      // Allow setting ngClass on uiSelect
      var match = /{(.*)}\s*{(.*)}/.exec(tAttrs.ngClass);
      if(match) {
        var combined = '{'+ match[1] +', '+ match[2] +'}';
        tAttrs.ngClass = combined;
        tElement.attr('ng-class', combined);
      }

      //Multiple or Single depending if multiple attribute presence
      if (angular.isDefined(tAttrs.multiple))
        tElement.append('<ui-select-multiple/>').removeAttr('multiple');
      else
        tElement.append('<ui-select-single/>');

      if (tAttrs.inputId)
        tElement.querySelectorAll('input.ui-select-search')[0].id = tAttrs.inputId;

      return function(scope, element, attrs, ctrls, transcludeFn) {

        var $select = ctrls[0];
        var ngModel = ctrls[1];

        $select.generatedId = uiSelectConfig.generateId();
        $select.baseTitle = attrs.title || 'Select box';
        $select.focusserTitle = $select.baseTitle + ' focus';
        $select.focusserId = 'focusser-' + $select.generatedId;

        $select.closeOnSelect = function() {
          if (angular.isDefined(attrs.closeOnSelect)) {
            return $parse(attrs.closeOnSelect)();
          } else {
            return uiSelectConfig.closeOnSelect;
          }
        }();

        scope.$watch('skipFocusser', function() {
            var skipFocusser = scope.$eval(attrs.skipFocusser);
            $select.skipFocusser = skipFocusser !== undefined ? skipFocusser : uiSelectConfig.skipFocusser;
        });

        $select.onSelectCallback = $parse(attrs.onSelect);
        $select.onRemoveCallback = $parse(attrs.onRemove);

        //Set reference to ngModel from uiSelectCtrl
        $select.ngModel = ngModel;

        $select.choiceGrouped = function(group){
          return $select.isGrouped && group && group.name;
        };

        if(attrs.tabindex){
          attrs.$observe('tabindex', function(value) {
            $select.focusInput.attr('tabindex', value);
            element.removeAttr('tabindex');
          });
        }

        scope.$watch(function () { return scope.$eval(attrs.searchEnabled); }, function(newVal) {
          $select.searchEnabled = newVal !== undefined ? newVal : uiSelectConfig.searchEnabled;
        });

        scope.$watch('sortable', function() {
            var sortable = scope.$eval(attrs.sortable);
            $select.sortable = sortable !== undefined ? sortable : uiSelectConfig.sortable;
        });

        attrs.$observe('limit', function() {
          //Limit the number of selections allowed
          $select.limit = (angular.isDefined(attrs.limit)) ? parseInt(attrs.limit, 10) : undefined;
        });

        scope.$watch('removeSelected', function() {
            var removeSelected = scope.$eval(attrs.removeSelected);
            $select.removeSelected = removeSelected !== undefined ? removeSelected : uiSelectConfig.removeSelected;
        });

        attrs.$observe('disabled', function() {
          // No need to use $eval() (thanks to ng-disabled) since we already get a boolean instead of a string
          $select.disabled = attrs.disabled !== undefined ? attrs.disabled : false;
        });

        attrs.$observe('resetSearchInput', function() {
          // $eval() is needed otherwise we get a string instead of a boolean
          var resetSearchInput = scope.$eval(attrs.resetSearchInput);
          $select.resetSearchInput = resetSearchInput !== undefined ? resetSearchInput : true;
        });

        attrs.$observe('paste', function() {
          $select.paste = scope.$eval(attrs.paste);
        });

        attrs.$observe('tagging', function() {
          if(attrs.tagging !== undefined)
          {
            // $eval() is needed otherwise we get a string instead of a boolean
            var taggingEval = scope.$eval(attrs.tagging);
            $select.tagging = {isActivated: true, fct: taggingEval !== true ? taggingEval : undefined};
          }
          else
          {
            $select.tagging = {isActivated: false, fct: undefined};
          }
        });

        attrs.$observe('taggingLabel', function() {
          if(attrs.tagging !== undefined )
          {
            // check eval for FALSE, in this case, we disable the labels
            // associated with tagging
            if ( attrs.taggingLabel === 'false' ) {
              $select.taggingLabel = false;
            }
            else
            {
              $select.taggingLabel = attrs.taggingLabel !== undefined ? attrs.taggingLabel : '(new)';
            }
          }
        });

        attrs.$observe('taggingTokens', function() {
          if (attrs.tagging !== undefined) {
            var tokens = attrs.taggingTokens !== undefined ? attrs.taggingTokens.split('|') : [',','ENTER'];
            $select.taggingTokens = {isActivated: true, tokens: tokens };
          }
        });

        attrs.$observe('spinnerEnabled', function() {
          // $eval() is needed otherwise we get a string instead of a boolean
          var spinnerEnabled = scope.$eval(attrs.spinnerEnabled);
          $select.spinnerEnabled = spinnerEnabled !== undefined ? spinnerEnabled : uiSelectConfig.spinnerEnabled;
        });

        attrs.$observe('spinnerClass', function() {
          var spinnerClass = attrs.spinnerClass;
          $select.spinnerClass = spinnerClass !== undefined ? attrs.spinnerClass : uiSelectConfig.spinnerClass;
        });

        //Automatically gets focus when loaded
        if (angular.isDefined(attrs.autofocus)){
          $timeout(function(){
            $select.setFocus();
          });
        }

        //Gets focus based on scope event name (e.g. focus-on='SomeEventName')
        if (angular.isDefined(attrs.focusOn)){
          scope.$on(attrs.focusOn, function() {
              $timeout(function(){
                $select.setFocus();
              });
          });
        }

        function onDocumentClick(e) {
          if (!$select.open) return; //Skip it if dropdown is close

          var contains = false;

          if (window.jQuery) {
            // Firefox 3.6 does not support element.contains()
            // See Node.contains https://developer.mozilla.org/en-US/docs/Web/API/Node.contains
            contains = window.jQuery.contains(element[0], e.target);
          } else {
            contains = element[0].contains(e.target);
          }

          if (!contains && !$select.clickTriggeredSelect) {
            var skipFocusser;
            if (!$select.skipFocusser) {
              //Will lose focus only with certain targets
              var focusableControls = ['input','button','textarea','select'];
              var targetController = angular.element(e.target).controller('uiSelect'); //To check if target is other ui-select
              skipFocusser = targetController && targetController !== $select; //To check if target is other ui-select
              if (!skipFocusser) skipFocusser =  ~focusableControls.indexOf(e.target.tagName.toLowerCase()); //Check if target is input, button or textarea
            } else {
              skipFocusser = true;
            }
            $select.close(skipFocusser);
            scope.$digest();
          }
          $select.clickTriggeredSelect = false;
        }

        // See Click everywhere but here event http://stackoverflow.com/questions/12931369
        $document.on('click', onDocumentClick);

        scope.$on('$destroy', function() {
          $document.off('click', onDocumentClick);
        });

        // Move transcluded elements to their correct position in main template
        transcludeFn(scope, function(clone) {
          // See Transclude in AngularJS http://blog.omkarpatil.com/2012/11/transclude-in-angularjs.html

          // One day jqLite will be replaced by jQuery and we will be able to write:
          // var transcludedElement = clone.filter('.my-class')
          // instead of creating a hackish DOM element:
          var transcluded = angular.element('<div>').append(clone);

          var transcludedMatch = transcluded.querySelectorAll('.ui-select-match');
          transcludedMatch.removeAttr('ui-select-match'); //To avoid loop in case directive as attr
          transcludedMatch.removeAttr('data-ui-select-match'); // Properly handle HTML5 data-attributes
          if (transcludedMatch.length !== 1) {
            throw uiSelectMinErr('transcluded', "Expected 1 .ui-select-match but got '{0}'.", transcludedMatch.length);
          }
          element.querySelectorAll('.ui-select-match').replaceWith(transcludedMatch);

          var transcludedChoices = transcluded.querySelectorAll('.ui-select-choices');
          transcludedChoices.removeAttr('ui-select-choices'); //To avoid loop in case directive as attr
          transcludedChoices.removeAttr('data-ui-select-choices'); // Properly handle HTML5 data-attributes
          if (transcludedChoices.length !== 1) {
            throw uiSelectMinErr('transcluded', "Expected 1 .ui-select-choices but got '{0}'.", transcludedChoices.length);
          }
          element.querySelectorAll('.ui-select-choices').replaceWith(transcludedChoices);

          var transcludedNoChoice = transcluded.querySelectorAll('.ui-select-no-choice');
          transcludedNoChoice.removeAttr('ui-select-no-choice'); //To avoid loop in case directive as attr
          transcludedNoChoice.removeAttr('data-ui-select-no-choice'); // Properly handle HTML5 data-attributes
          if (transcludedNoChoice.length == 1) {
            element.querySelectorAll('.ui-select-no-choice').replaceWith(transcludedNoChoice);
          }
        });

        // Support for appending the select field to the body when its open
        var appendToBody = scope.$eval(attrs.appendToBody);
        if (appendToBody !== undefined ? appendToBody : uiSelectConfig.appendToBody) {
          scope.$watch('$select.open', function(isOpen) {
            if (isOpen) {
              positionDropdown();
            } else {
              resetDropdown();
            }
          });

          // Move the dropdown back to its original location when the scope is destroyed. Otherwise
          // it might stick around when the user routes away or the select field is otherwise removed
          scope.$on('$destroy', function() {
            resetDropdown();
          });
        }

        // Hold on to a reference to the .ui-select-container element for appendToBody support
        var placeholder = null,
            originalWidth = '';

        function positionDropdown() {
          // Remember the absolute position of the element
          var offset = uisOffset(element);

          // Clone the element into a placeholder element to take its original place in the DOM
          placeholder = angular.element('<div class="ui-select-placeholder"></div>');
          placeholder[0].style.width = offset.width + 'px';
          placeholder[0].style.height = offset.height + 'px';
          element.after(placeholder);

          // Remember the original value of the element width inline style, so it can be restored
          // when the dropdown is closed
          originalWidth = element[0].style.width;

          // Now move the actual dropdown element to the end of the body
          $document.find('body').append(element);

          element[0].style.position = 'absolute';
          element[0].style.left = offset.left + 'px';
          element[0].style.top = offset.top + 'px';
          element[0].style.width = offset.width + 'px';
        }

        function resetDropdown() {
          if (placeholder === null) {
            // The dropdown has not actually been display yet, so there's nothing to reset
            return;
          }

          // Move the dropdown element back to its original location in the DOM
          placeholder.replaceWith(element);
          placeholder = null;

          element[0].style.position = '';
          element[0].style.left = '';
          element[0].style.top = '';
          element[0].style.width = originalWidth;

          // Set focus back on to the moved element
          $select.setFocus();
        }

        // Hold on to a reference to the .ui-select-dropdown element for direction support.
        var dropdown = null,
            directionUpClassName = 'direction-up';

        // Support changing the direction of the dropdown if there isn't enough space to render it.
        scope.$watch('$select.open', function() {

          if ($select.dropdownPosition === 'auto' || $select.dropdownPosition === 'up'){
            scope.calculateDropdownPos();
          }

        });

        var setDropdownPosUp = function(offset, offsetDropdown){

          offset = offset || uisOffset(element);
          offsetDropdown = offsetDropdown || uisOffset(dropdown);

          dropdown[0].style.position = 'absolute';
          dropdown[0].style.top = (offsetDropdown.height * -1) + 'px';
          element.addClass(directionUpClassName);

        };

        var setDropdownPosDown = function(offset, offsetDropdown){

          element.removeClass(directionUpClassName);

          offset = offset || uisOffset(element);
          offsetDropdown = offsetDropdown || uisOffset(dropdown);

          dropdown[0].style.position = '';
          dropdown[0].style.top = '';

        };

        var calculateDropdownPosAfterAnimation = function() {
          // Delay positioning the dropdown until all choices have been added so its height is correct.
          $timeout(function() {
            if ($select.dropdownPosition === 'up') {
              //Go UP
              setDropdownPosUp();
            } else {
              //AUTO
              element.removeClass(directionUpClassName);

              var offset = uisOffset(element);
              var offsetDropdown = uisOffset(dropdown);

              //https://code.google.com/p/chromium/issues/detail?id=342307#c4
              var scrollTop = $document[0].documentElement.scrollTop || $document[0].body.scrollTop; //To make it cross browser (blink, webkit, IE, Firefox).

              // Determine if the direction of the dropdown needs to be changed.
              if (offset.top + offset.height + offsetDropdown.height > scrollTop + $document[0].documentElement.clientHeight) {
                //Go UP
                setDropdownPosUp(offset, offsetDropdown);
              }else{
                //Go DOWN
                setDropdownPosDown(offset, offsetDropdown);
              }
            }

            // Display the dropdown once it has been positioned.
            dropdown[0].style.opacity = 1;
          });
        };

        var opened = false;
        
        scope.calculateDropdownPos = function() {
          if ($select.open) {
            dropdown = angular.element(element).querySelectorAll('.ui-select-dropdown');

            if (dropdown.length === 0) {
              return;
            }

           // Hide the dropdown so there is no flicker until $timeout is done executing.
           if ($select.search === '' && !opened) {
              dropdown[0].style.opacity = 0;
              opened = true;
           }

            if (!uisOffset(dropdown).height && $select.$animate && $select.$animate.on && $select.$animate.enabled(dropdown)) {
              var needsCalculated = true;

              $select.$animate.on('enter', dropdown, function (elem, phase) {
                if (phase === 'close' && needsCalculated) {
                  calculateDropdownPosAfterAnimation();
                  needsCalculated = false;
                }
              });
            } else {
              calculateDropdownPosAfterAnimation();
            }
          } else {
            if (dropdown === null || dropdown.length === 0) {
              return;
            }

            // Reset the position of the dropdown.
            dropdown[0].style.opacity = 0;
            dropdown[0].style.position = '';
            dropdown[0].style.top = '';
            element.removeClass(directionUpClassName);
          }
        };
      };
    }
  };
}]);

uis.directive('uiSelectMatch', ['uiSelectConfig', function(uiSelectConfig) {
  return {
    restrict: 'EA',
    require: '^uiSelect',
    replace: true,
    transclude: true,
    templateUrl: function(tElement) {
      // Needed so the uiSelect can detect the transcluded content
      tElement.addClass('ui-select-match');

      var parent = tElement.parent();
      // Gets theme attribute from parent (ui-select)
      var theme = getAttribute(parent, 'theme') || uiSelectConfig.theme;
      var multi = angular.isDefined(getAttribute(parent, 'multiple'));

      return theme + (multi ? '/match-multiple.tpl.html' : '/match.tpl.html');      
    },
    link: function(scope, element, attrs, $select) {
      $select.lockChoiceExpression = attrs.uiLockChoice;
      attrs.$observe('placeholder', function(placeholder) {
        $select.placeholder = placeholder !== undefined ? placeholder : uiSelectConfig.placeholder;
      });

      function setAllowClear(allow) {
        $select.allowClear = (angular.isDefined(allow)) ? (allow === '') ? true : (allow.toLowerCase() === 'true') : false;
      }

      attrs.$observe('allowClear', setAllowClear);
      setAllowClear(attrs.allowClear);

      if($select.multiple){
        $select.sizeSearchInput();
      }

    }
  };

  function getAttribute(elem, attribute) {
    if (elem[0].hasAttribute(attribute))
      return elem.attr(attribute);

    if (elem[0].hasAttribute('data-' + attribute))
      return elem.attr('data-' + attribute);

    if (elem[0].hasAttribute('x-' + attribute))
      return elem.attr('x-' + attribute);
  }
}]);

uis.directive('uiSelectMultiple', ['uiSelectMinErr','$timeout', function(uiSelectMinErr, $timeout) {
  return {
    restrict: 'EA',
    require: ['^uiSelect', '^ngModel'],

    controller: ['$scope','$timeout', function($scope, $timeout){

      var ctrl = this,
          $select = $scope.$select,
          ngModel;

      if (angular.isUndefined($select.selected))
        $select.selected = [];

      //Wait for link fn to inject it
      $scope.$evalAsync(function(){ ngModel = $scope.ngModel; });

      ctrl.activeMatchIndex = -1;

      ctrl.updateModel = function(){
        ngModel.$setViewValue(Date.now()); //Set timestamp as a unique string to force changes
        ctrl.refreshComponent();
      };

      ctrl.refreshComponent = function(){
        //Remove already selected items
        //e.g. When user clicks on a selection, the selected array changes and
        //the dropdown should remove that item
        if($select.refreshItems){
          $select.refreshItems();
        }
        if($select.sizeSearchInput){
          $select.sizeSearchInput();
        }
      };

      // Remove item from multiple select
      ctrl.removeChoice = function(index){

        // if the choice is locked, don't remove it
        if($select.isLocked(null, index)) return false;

        var removedChoice = $select.selected[index];

        var locals = {};
        locals[$select.parserResult.itemName] = removedChoice;

        $select.selected.splice(index, 1);
        ctrl.activeMatchIndex = -1;
        $select.sizeSearchInput();

        // Give some time for scope propagation.
        $timeout(function(){
          $select.onRemoveCallback($scope, {
            $item: removedChoice,
            $model: $select.parserResult.modelMapper($scope, locals)
          });
        });

        ctrl.updateModel();

        return true;
      };

      ctrl.getPlaceholder = function(){
        //Refactor single?
        if($select.selected && $select.selected.length) return;
        return $select.placeholder;
      };


    }],
    controllerAs: '$selectMultiple',

    link: function(scope, element, attrs, ctrls) {

      var $select = ctrls[0];
      var ngModel = scope.ngModel = ctrls[1];
      var $selectMultiple = scope.$selectMultiple;

      //$select.selected = raw selected objects (ignoring any property binding)

      $select.multiple = true;

      //Input that will handle focus
      $select.focusInput = $select.searchInput;

      //Properly check for empty if set to multiple
      ngModel.$isEmpty = function(value) {
        return !value || value.length === 0;
      };

      //From view --> model
      ngModel.$parsers.unshift(function () {
        var locals = {},
            result,
            resultMultiple = [];
        for (var j = $select.selected.length - 1; j >= 0; j--) {
          locals = {};
          locals[$select.parserResult.itemName] = $select.selected[j];
          result = $select.parserResult.modelMapper(scope, locals);
          resultMultiple.unshift(result);
        }
        return resultMultiple;
      });

      // From model --> view
      ngModel.$formatters.unshift(function (inputValue) {
        var data = $select.parserResult && $select.parserResult.source (scope, { $select : {search:''}}), //Overwrite $search
            locals = {},
            result;
        if (!data) return inputValue;
        var resultMultiple = [];
        var checkFnMultiple = function(list, value){
          if (!list || !list.length) return;
          for (var p = list.length - 1; p >= 0; p--) {
            locals[$select.parserResult.itemName] = list[p];
            result = $select.parserResult.modelMapper(scope, locals);
            if($select.parserResult.trackByExp){
                var propsItemNameMatches = /(\w*)\./.exec($select.parserResult.trackByExp);
                var matches = /\.([^\s]+)/.exec($select.parserResult.trackByExp);
                if(propsItemNameMatches && propsItemNameMatches.length > 0 && propsItemNameMatches[1] == $select.parserResult.itemName){
                  if(matches && matches.length>0 && result[matches[1]] == value[matches[1]]){
                      resultMultiple.unshift(list[p]);
                      return true;
                  }
                }
            }
            if (angular.equals(result,value)){
              resultMultiple.unshift(list[p]);
              return true;
            }
          }
          return false;
        };
        if (!inputValue) return resultMultiple; //If ngModel was undefined
        for (var k = inputValue.length - 1; k >= 0; k--) {
          //Check model array of currently selected items
          if (!checkFnMultiple($select.selected, inputValue[k])){
            //Check model array of all items available
            if (!checkFnMultiple(data, inputValue[k])){
              //If not found on previous lists, just add it directly to resultMultiple
              resultMultiple.unshift(inputValue[k]);
            }
          }
        }
        return resultMultiple;
      });

      //Watch for external model changes
      scope.$watchCollection(function(){ return ngModel.$modelValue; }, function(newValue, oldValue) {
        if (oldValue != newValue){
          //update the view value with fresh data from items, if there is a valid model value
          if(angular.isDefined(ngModel.$modelValue)) {
            ngModel.$modelValue = null; //Force scope model value and ngModel value to be out of sync to re-run formatters
          }
          $selectMultiple.refreshComponent();
        }
      });

      ngModel.$render = function() {
        // Make sure that model value is array
        if(!angular.isArray(ngModel.$viewValue)){
          // Have tolerance for null or undefined values
          if(angular.isUndefined(ngModel.$viewValue) || ngModel.$viewValue === null){
            ngModel.$viewValue = [];
          } else {
            throw uiSelectMinErr('multiarr', "Expected model value to be array but got '{0}'", ngModel.$viewValue);
          }
        }
        $select.selected = ngModel.$viewValue;
        $selectMultiple.refreshComponent();
        scope.$evalAsync(); //To force $digest
      };

      scope.$on('uis:select', function (event, item) {
        if($select.selected.length >= $select.limit) {
          return;
        }
        $select.selected.push(item);
        $selectMultiple.updateModel();
      });

      scope.$on('uis:activate', function () {
        $selectMultiple.activeMatchIndex = -1;
      });

      scope.$watch('$select.disabled', function(newValue, oldValue) {
        // As the search input field may now become visible, it may be necessary to recompute its size
        if (oldValue && !newValue) $select.sizeSearchInput();
      });

      $select.searchInput.on('keydown', function(e) {
        var key = e.which;
        scope.$apply(function() {
          var processed = false;
          // var tagged = false; //Checkme
          if(KEY.isHorizontalMovement(key)){
            processed = _handleMatchSelection(key);
          }
          if (processed  && key != KEY.TAB) {
            //TODO Check si el tab selecciona aun correctamente
            //Crear test
            e.preventDefault();
            e.stopPropagation();
          }
        });
      });
      function _getCaretPosition(el) {
        if(angular.isNumber(el.selectionStart)) return el.selectionStart;
        // selectionStart is not supported in IE8 and we don't want hacky workarounds so we compromise
        else return el.value.length;
      }
      // Handles selected options in "multiple" mode
      function _handleMatchSelection(key){
        var caretPosition = _getCaretPosition($select.searchInput[0]),
            length = $select.selected.length,
            // none  = -1,
            first = 0,
            last  = length-1,
            curr  = $selectMultiple.activeMatchIndex,
            next  = $selectMultiple.activeMatchIndex+1,
            prev  = $selectMultiple.activeMatchIndex-1,
            newIndex = curr;

        if(caretPosition > 0 || ($select.search.length && key == KEY.RIGHT)) return false;

        $select.close();

        function getNewActiveMatchIndex(){
          switch(key){
            case KEY.LEFT:
              // Select previous/first item
              if(~$selectMultiple.activeMatchIndex) return prev;
              // Select last item
              else return last;
              break;
            case KEY.RIGHT:
              // Open drop-down
              if(!~$selectMultiple.activeMatchIndex || curr === last){
                $select.activate();
                return false;
              }
              // Select next/last item
              else return next;
              break;
            case KEY.BACKSPACE:
              // Remove selected item and select previous/first
              if(~$selectMultiple.activeMatchIndex){
                if($selectMultiple.removeChoice(curr)) {
                  return prev;
                } else {
                  return curr;
                }
                
              } else {
                // If nothing yet selected, select last item
                return last;  
              }              
              break;
            case KEY.DELETE:
              // Remove selected item and select next item
              if(~$selectMultiple.activeMatchIndex){
                $selectMultiple.removeChoice($selectMultiple.activeMatchIndex);
                return curr;
              }
              else return false;
          }
        }

        newIndex = getNewActiveMatchIndex();

        if(!$select.selected.length || newIndex === false) $selectMultiple.activeMatchIndex = -1;
        else $selectMultiple.activeMatchIndex = Math.min(last,Math.max(first,newIndex));

        return true;
      }

      $select.searchInput.on('keyup', function(e) {

        if ( ! KEY.isVerticalMovement(e.which) ) {
          scope.$evalAsync( function () {
            $select.activeIndex = $select.taggingLabel === false ? -1 : 0;
          });
        }
        // Push a "create new" item into array if there is a search string
        if ( $select.tagging.isActivated && $select.search.length > 0 ) {

          // return early with these keys
          if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC || KEY.isVerticalMovement(e.which) ) {
            return;
          }
          // always reset the activeIndex to the first item when tagging
          $select.activeIndex = $select.taggingLabel === false ? -1 : 0;
          // taggingLabel === false bypasses all of this
          if ($select.taggingLabel === false) return;

          var items = angular.copy( $select.items );
          var stashArr = angular.copy( $select.items );
          var newItem;
          var item;
          var hasTag = false;
          var dupeIndex = -1;
          var tagItems;
          var tagItem;

          // case for object tagging via transform `$select.tagging.fct` function
          if ( $select.tagging.fct !== undefined) {
            tagItems = $select.$filter('filter')(items,{'isTag': true});
            if ( tagItems.length > 0 ) {
              tagItem = tagItems[0];
            }
            // remove the first element, if it has the `isTag` prop we generate a new one with each keyup, shaving the previous
            if ( items.length > 0 && tagItem ) {
              hasTag = true;
              items = items.slice(1,items.length);
              stashArr = stashArr.slice(1,stashArr.length);
            }
            newItem = $select.tagging.fct($select.search);
            // verify the new tag doesn't match the value of a possible selection choice or an already selected item.
            if (
              stashArr.some(function (origItem) {
                 return angular.equals(origItem, newItem);
              }) ||
              $select.selected.some(function (origItem) {
                return angular.equals(origItem, newItem);
              })
            ) {
              scope.$evalAsync(function () {
                $select.activeIndex = 0;
                $select.items = items;
              });
              return;
            }
            if (newItem) newItem.isTag = true;
          // handle newItem string and stripping dupes in tagging string context
          } else {
            // find any tagging items already in the $select.items array and store them
            tagItems = $select.$filter('filter')(items,function (item) {
              return item.match($select.taggingLabel);
            });
            if ( tagItems.length > 0 ) {
              tagItem = tagItems[0];
            }
            item = items[0];
            // remove existing tag item if found (should only ever be one tag item)
            if ( item !== undefined && items.length > 0 && tagItem ) {
              hasTag = true;
              items = items.slice(1,items.length);
              stashArr = stashArr.slice(1,stashArr.length);
            }
            newItem = $select.search+' '+$select.taggingLabel;
            if ( _findApproxDupe($select.selected, $select.search) > -1 ) {
              return;
            }
            // verify the the tag doesn't match the value of an existing item from
            // the searched data set or the items already selected
            if ( _findCaseInsensitiveDupe(stashArr.concat($select.selected)) ) {
              // if there is a tag from prev iteration, strip it / queue the change
              // and return early
              if ( hasTag ) {
                items = stashArr;
                scope.$evalAsync( function () {
                  $select.activeIndex = 0;
                  $select.items = items;
                });
              }
              return;
            }
            if ( _findCaseInsensitiveDupe(stashArr) ) {
              // if there is a tag from prev iteration, strip it
              if ( hasTag ) {
                $select.items = stashArr.slice(1,stashArr.length);
              }
              return;
            }
          }
          if ( hasTag ) dupeIndex = _findApproxDupe($select.selected, newItem);
          // dupe found, shave the first item
          if ( dupeIndex > -1 ) {
            items = items.slice(dupeIndex+1,items.length-1);
          } else {
            items = [];
            if (newItem) items.push(newItem);
            items = items.concat(stashArr);
          }
          scope.$evalAsync( function () {
            $select.activeIndex = 0;
            $select.items = items;

            if ($select.isGrouped) {
              // update item references in groups, so that indexOf will work after angular.copy
              var itemsWithoutTag = newItem ? items.slice(1) : items;
              $select.setItemsFn(itemsWithoutTag);
              if (newItem) {
                // add tag item as a new group
                $select.items.unshift(newItem);
                $select.groups.unshift({name: '', items: [newItem], tagging: true});
              }
            }
          });
        }
      });
      function _findCaseInsensitiveDupe(arr) {
        if ( arr === undefined || $select.search === undefined ) {
          return false;
        }
        var hasDupe = arr.filter( function (origItem) {
          if ( $select.search.toUpperCase() === undefined || origItem === undefined ) {
            return false;
          }
          return origItem.toUpperCase() === $select.search.toUpperCase();
        }).length > 0;

        return hasDupe;
      }
      function _findApproxDupe(haystack, needle) {
        var dupeIndex = -1;
        if(angular.isArray(haystack)) {
          var tempArr = angular.copy(haystack);
          for (var i = 0; i <tempArr.length; i++) {
            // handle the simple string version of tagging
            if ( $select.tagging.fct === undefined ) {
              // search the array for the match
              if ( tempArr[i]+' '+$select.taggingLabel === needle ) {
              dupeIndex = i;
              }
            // handle the object tagging implementation
            } else {
              var mockObj = tempArr[i];
              if (angular.isObject(mockObj)) {
                mockObj.isTag = true;
              }
              if ( angular.equals(mockObj, needle) ) {
                dupeIndex = i;
              }
            }
          }
        }
        return dupeIndex;
      }

      $select.searchInput.on('blur', function() {
        $timeout(function() {
          $selectMultiple.activeMatchIndex = -1;
        });
      });

    }
  };
}]);

uis.directive('uiSelectNoChoice',
    ['uiSelectConfig', function (uiSelectConfig) {
        return {
            restrict: 'EA',
            require: '^uiSelect',
            replace: true,
            transclude: true,
            templateUrl: function (tElement) {
                // Needed so the uiSelect can detect the transcluded content
                tElement.addClass('ui-select-no-choice');
      
                // Gets theme attribute from parent (ui-select)
                var theme = tElement.parent().attr('theme') || uiSelectConfig.theme;
                return theme + '/no-choice.tpl.html';
            }
        };
    }]);

uis.directive('uiSelectSingle', ['$timeout','$compile', function($timeout, $compile) {
  return {
    restrict: 'EA',
    require: ['^uiSelect', '^ngModel'],
    link: function(scope, element, attrs, ctrls) {

      var $select = ctrls[0];
      var ngModel = ctrls[1];

      //From view --> model
      ngModel.$parsers.unshift(function (inputValue) {
        var locals = {},
            result;
        locals[$select.parserResult.itemName] = inputValue;
        result = $select.parserResult.modelMapper(scope, locals);
        return result;
      });

      //From model --> view
      ngModel.$formatters.unshift(function (inputValue) {
        var data = $select.parserResult && $select.parserResult.source (scope, { $select : {search:''}}), //Overwrite $search
            locals = {},
            result;
        if (data){
          var checkFnSingle = function(d){
            locals[$select.parserResult.itemName] = d;
            result = $select.parserResult.modelMapper(scope, locals);
            return result === inputValue;
          };
          //If possible pass same object stored in $select.selected
          if ($select.selected && checkFnSingle($select.selected)) {
            return $select.selected;
          }
          for (var i = data.length - 1; i >= 0; i--) {
            if (checkFnSingle(data[i])) return data[i];
          }
        }
        return inputValue;
      });

      //Update viewValue if model change
      scope.$watch('$select.selected', function(newValue) {
        if (ngModel.$viewValue !== newValue) {
          ngModel.$setViewValue(newValue);
        }
      });

      ngModel.$render = function() {
        $select.selected = ngModel.$viewValue;
      };

      scope.$on('uis:select', function (event, item) {
        $select.selected = item;
      });

      scope.$on('uis:close', function (event, skipFocusser) {
        $timeout(function(){
          $select.focusser.prop('disabled', false);
          if (!skipFocusser) $select.focusser[0].focus();
        },0,false);
      });

      scope.$on('uis:activate', function () {
        focusser.prop('disabled', true); //Will reactivate it on .close()
      });

      //Idea from: https://github.com/ivaynberg/select2/blob/79b5bf6db918d7560bdd959109b7bcfb47edaf43/select2.js#L1954
      var focusser = angular.element("<input ng-disabled='$select.disabled' class='ui-select-focusser ui-select-offscreen' type='text' id='{{ $select.focusserId }}' aria-label='{{ $select.focusserTitle }}' aria-haspopup='true' role='button' />");
      $compile(focusser)(scope);
      $select.focusser = focusser;

      //Input that will handle focus
      $select.focusInput = focusser;

      element.parent().append(focusser);
      focusser.bind("focus", function(){
        scope.$evalAsync(function(){
          $select.focus = true;
        });
      });
      focusser.bind("blur", function(){
        scope.$evalAsync(function(){
          $select.focus = false;
        });
      });
      focusser.bind("keydown", function(e){

        if (e.which === KEY.BACKSPACE) {
          e.preventDefault();
          e.stopPropagation();
          $select.select(undefined);
          scope.$apply();
          return;
        }

        if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC) {
          return;
        }

        if (e.which == KEY.DOWN  || e.which == KEY.UP || e.which == KEY.ENTER || e.which == KEY.SPACE){
          e.preventDefault();
          e.stopPropagation();
          $select.activate();
        }

        scope.$digest();
      });

      focusser.bind("keyup input", function(e){

        if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC || e.which == KEY.ENTER || e.which === KEY.BACKSPACE) {
          return;
        }

        $select.activate(focusser.val()); //User pressed some regular key, so we pass it to the search input
        focusser.val('');
        scope.$digest();

      });


    }
  };
}]);

// Make multiple matches sortable
uis.directive('uiSelectSort', ['$timeout', 'uiSelectConfig', 'uiSelectMinErr', function($timeout, uiSelectConfig, uiSelectMinErr) {
  return {
    require: ['^^uiSelect', '^ngModel'],
    link: function(scope, element, attrs, ctrls) {
      if (scope[attrs.uiSelectSort] === null) {
        throw uiSelectMinErr('sort', 'Expected a list to sort');
      }

      var $select = ctrls[0];
      var $ngModel = ctrls[1];

      var options = angular.extend({
          axis: 'horizontal'
        },
        scope.$eval(attrs.uiSelectSortOptions));

      var axis = options.axis;
      var draggingClassName = 'dragging';
      var droppingClassName = 'dropping';
      var droppingBeforeClassName = 'dropping-before';
      var droppingAfterClassName = 'dropping-after';

      scope.$watch(function(){
        return $select.sortable;
      }, function(newValue){
        if (newValue) {
          element.attr('draggable', true);
        } else {
          element.removeAttr('draggable');
        }
      });

      element.on('dragstart', function(event) {
        element.addClass(draggingClassName);

        (event.dataTransfer || event.originalEvent.dataTransfer).setData('text', scope.$index.toString());
      });

      element.on('dragend', function() {
        removeClass(draggingClassName);
      });

      var move = function(from, to) {
        /*jshint validthis: true */
        this.splice(to, 0, this.splice(from, 1)[0]);
      };

      var removeClass = function(className) {
        angular.forEach($select.$element.querySelectorAll('.' + className), function(el){
          angular.element(el).removeClass(className);
        });
      };

      var dragOverHandler = function(event) {
        event.preventDefault();

        var offset = axis === 'vertical' ? event.offsetY || event.layerY || (event.originalEvent ? event.originalEvent.offsetY : 0) : event.offsetX || event.layerX || (event.originalEvent ? event.originalEvent.offsetX : 0);

        if (offset < (this[axis === 'vertical' ? 'offsetHeight' : 'offsetWidth'] / 2)) {
          removeClass(droppingAfterClassName);
          element.addClass(droppingBeforeClassName);

        } else {
          removeClass(droppingBeforeClassName);
          element.addClass(droppingAfterClassName);
        }
      };

      var dropTimeout;

      var dropHandler = function(event) {
        event.preventDefault();

        var droppedItemIndex = parseInt((event.dataTransfer || event.originalEvent.dataTransfer).getData('text'), 10);

        // prevent event firing multiple times in firefox
        $timeout.cancel(dropTimeout);
        dropTimeout = $timeout(function() {
          _dropHandler(droppedItemIndex);
        }, 20);
      };

      var _dropHandler = function(droppedItemIndex) {
        var theList = scope.$eval(attrs.uiSelectSort);
        var itemToMove = theList[droppedItemIndex];
        var newIndex = null;

        if (element.hasClass(droppingBeforeClassName)) {
          if (droppedItemIndex < scope.$index) {
            newIndex = scope.$index - 1;
          } else {
            newIndex = scope.$index;
          }
        } else {
          if (droppedItemIndex < scope.$index) {
            newIndex = scope.$index;
          } else {
            newIndex = scope.$index + 1;
          }
        }

        move.apply(theList, [droppedItemIndex, newIndex]);

        $ngModel.$setViewValue(Date.now());

        scope.$apply(function() {
          scope.$emit('uiSelectSort:change', {
            array: theList,
            item: itemToMove,
            from: droppedItemIndex,
            to: newIndex
          });
        });

        removeClass(droppingClassName);
        removeClass(droppingBeforeClassName);
        removeClass(droppingAfterClassName);

        element.off('drop', dropHandler);
      };

      element.on('dragenter', function() {
        if (element.hasClass(draggingClassName)) {
          return;
        }

        element.addClass(droppingClassName);

        element.on('dragover', dragOverHandler);
        element.on('drop', dropHandler);
      });

      element.on('dragleave', function(event) {
        if (event.target != element) {
          return;
        }

        removeClass(droppingClassName);
        removeClass(droppingBeforeClassName);
        removeClass(droppingAfterClassName);

        element.off('dragover', dragOverHandler);
        element.off('drop', dropHandler);
      });
    }
  };
}]);

/**
 * Debounces functions
 *
 * Taken from UI Bootstrap $$debounce source code
 * See https://github.com/angular-ui/bootstrap/blob/master/src/debounce/debounce.js
 *
 */
uis.factory('$$uisDebounce', ['$timeout', function($timeout) {
  return function(callback, debounceTime) {
    var timeoutPromise;

    return function() {
      var self = this;
      var args = Array.prototype.slice.call(arguments);
      if (timeoutPromise) {
        $timeout.cancel(timeoutPromise);
      }

      timeoutPromise = $timeout(function() {
        callback.apply(self, args);
      }, debounceTime);
    };
  };
}]);

uis.directive('uisOpenClose', ['$parse', '$timeout', function ($parse, $timeout) {
  return {
    restrict: 'A',
    require: 'uiSelect',
    link: function (scope, element, attrs, $select) {
      $select.onOpenCloseCallback = $parse(attrs.uisOpenClose);

      scope.$watch('$select.open', function (isOpen, previousState) {
        if (isOpen !== previousState) {
          $timeout(function () {
            $select.onOpenCloseCallback(scope, {
              isOpen: isOpen
            });
          });
        }
      });
    }
  };
}]);

/**
 * Parses "repeat" attribute.
 *
 * Taken from AngularJS ngRepeat source code
 * See https://github.com/angular/angular.js/blob/v1.2.15/src/ng/directive/ngRepeat.js#L211
 *
 * Original discussion about parsing "repeat" attribute instead of fully relying on ng-repeat:
 * https://github.com/angular-ui/ui-select/commit/5dd63ad#commitcomment-5504697
 */

uis.service('uisRepeatParser', ['uiSelectMinErr','$parse', function(uiSelectMinErr, $parse) {
  var self = this;

  /**
   * Example:
   * expression = "address in addresses | filter: {street: $select.search} track by $index"
   * itemName = "address",
   * source = "addresses | filter: {street: $select.search}",
   * trackByExp = "$index",
   */
  self.parse = function(expression) {


    var match;
    //var isObjectCollection = /\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)/.test(expression);
    // If an array is used as collection

    // if (isObjectCollection){
    // 000000000000000000000000000000111111111000000000000000222222222222220033333333333333333333330000444444444444444444000000000000000055555555555000000000000000000000066666666600000000
    match = expression.match(/^\s*(?:([\s\S]+?)\s+as\s+)?(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+(\s*[\s\S]+?)?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);

    // 1 Alias
    // 2 Item
    // 3 Key on (key,value)
    // 4 Value on (key,value)
    // 5 Source expression (including filters)
    // 6 Track by

    if (!match) {
      throw uiSelectMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
              expression);
    }
    
    var source = match[5], 
        filters = '';

    // When using (key,value) ui-select requires filters to be extracted, since the object
    // is converted to an array for $select.items 
    // (in which case the filters need to be reapplied)
    if (match[3]) {
      // Remove any enclosing parenthesis
      source = match[5].replace(/(^\()|(\)$)/g, '');
      // match all after | but not after ||
      var filterMatch = match[5].match(/^\s*(?:[\s\S]+?)(?:[^\|]|\|\|)+([\s\S]*)\s*$/);
      if(filterMatch && filterMatch[1].trim()) {
        filters = filterMatch[1];
        source = source.replace(filters, '');
      }      
    }

    return {
      itemName: match[4] || match[2], // (lhs) Left-hand side,
      keyName: match[3], //for (key, value) syntax
      source: $parse(source),
      filters: filters,
      trackByExp: match[6],
      modelMapper: $parse(match[1] || match[4] || match[2]),
      repeatExpression: function (grouped) {
        var expression = this.itemName + ' in ' + (grouped ? '$group.items' : '$select.items');
        if (this.trackByExp) {
          expression += ' track by ' + this.trackByExp;
        }
        return expression;
      } 
    };

  };

  self.getGroupNgRepeatExpression = function() {
    return '$group in $select.groups track by $group.name';
  };

}]);

}());
angular.module("ui.select").run(["$templateCache", function($templateCache) {$templateCache.put("bootstrap/choices.tpl.html","<ul class=\"ui-select-choices ui-select-choices-content ui-select-dropdown dropdown-menu\" ng-show=\"$select.open && $select.items.length > 0\"><li class=\"ui-select-choices-group\" id=\"ui-select-choices-{{ $select.generatedId }}\"><div class=\"divider\" ng-show=\"$select.isGrouped && $index > 0\"></div><div ng-show=\"$select.isGrouped\" class=\"ui-select-choices-group-label dropdown-header\" ng-bind=\"$group.name\"></div><div ng-attr-id=\"ui-select-choices-row-{{ $select.generatedId }}-{{$index}}\" class=\"ui-select-choices-row\" ng-class=\"{active: $select.isActive(this), disabled: $select.isDisabled(this)}\" role=\"option\"><span class=\"ui-select-choices-row-inner\"></span></div></li></ul>");
$templateCache.put("bootstrap/match-multiple.tpl.html","<span class=\"ui-select-match\"><span ng-repeat=\"$item in $select.selected track by $index\"><span class=\"ui-select-match-item btn btn-default btn-xs\" tabindex=\"-1\" type=\"button\" ng-disabled=\"$select.disabled\" ng-click=\"$selectMultiple.activeMatchIndex = $index;\" ng-class=\"{\'btn-primary\':$selectMultiple.activeMatchIndex === $index, \'select-locked\':$select.isLocked(this, $index)}\" ui-select-sort=\"$select.selected\"><span class=\"close ui-select-match-close\" ng-hide=\"$select.disabled\" ng-click=\"$selectMultiple.removeChoice($index)\">&nbsp;&times;</span> <span uis-transclude-append=\"\"></span></span></span></span>");
$templateCache.put("bootstrap/match.tpl.html","<div class=\"ui-select-match\" ng-hide=\"$select.open && $select.searchEnabled\" ng-disabled=\"$select.disabled\" ng-class=\"{\'btn-default-focus\':$select.focus}\"><span tabindex=\"-1\" class=\"btn btn-default form-control ui-select-toggle\" aria-label=\"{{ $select.baseTitle }} activate\" ng-disabled=\"$select.disabled\" ng-click=\"$select.activate()\" style=\"outline: 0;\"><span ng-show=\"$select.isEmpty()\" class=\"ui-select-placeholder text-muted\">{{$select.placeholder}}</span> <span ng-hide=\"$select.isEmpty()\" class=\"ui-select-match-text pull-left\" ng-class=\"{\'ui-select-allow-clear\': $select.allowClear && !$select.isEmpty()}\" ng-transclude=\"\"></span> <i class=\"caret pull-right\" ng-click=\"$select.toggle($event)\"></i> <a ng-show=\"$select.allowClear && !$select.isEmpty() && ($select.disabled !== true)\" aria-label=\"{{ $select.baseTitle }} clear\" style=\"margin-right: 10px\" ng-click=\"$select.clear($event)\" class=\"btn btn-xs btn-link pull-right\"><i class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></i></a></span></div>");
$templateCache.put("bootstrap/no-choice.tpl.html","<ul class=\"ui-select-no-choice dropdown-menu\" ng-show=\"$select.items.length == 0\"><li ng-transclude=\"\"></li></ul>");
$templateCache.put("bootstrap/select-multiple.tpl.html","<div class=\"ui-select-container ui-select-multiple ui-select-bootstrap dropdown form-control\" ng-class=\"{open: $select.open}\"><div><div class=\"ui-select-match\"></div><input type=\"search\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" class=\"ui-select-search input-xs\" placeholder=\"{{$selectMultiple.getPlaceholder()}}\" ng-disabled=\"$select.disabled\" ng-click=\"$select.activate()\" ng-model=\"$select.search\" role=\"combobox\" aria-expanded=\"{{$select.open}}\" aria-label=\"{{$select.baseTitle}}\" ng-class=\"{\'spinner\': $select.refreshing}\" ondrop=\"return false;\"></div><div class=\"ui-select-choices\"></div><div class=\"ui-select-no-choice\"></div></div>");
$templateCache.put("bootstrap/select.tpl.html","<div class=\"ui-select-container ui-select-bootstrap dropdown\" ng-class=\"{open: $select.open}\"><div class=\"ui-select-match\"></div><span ng-show=\"$select.open && $select.refreshing && $select.spinnerEnabled\" class=\"ui-select-refreshing {{$select.spinnerClass}}\"></span> <input type=\"search\" autocomplete=\"off\" tabindex=\"-1\" aria-expanded=\"true\" aria-label=\"{{ $select.baseTitle }}\" aria-owns=\"ui-select-choices-{{ $select.generatedId }}\" class=\"form-control ui-select-search\" ng-class=\"{ \'ui-select-search-hidden\' : !$select.searchEnabled }\" placeholder=\"{{$select.placeholder}}\" ng-model=\"$select.search\" ng-show=\"$select.open\"><div class=\"ui-select-choices\"></div><div class=\"ui-select-no-choice\"></div></div>");
$templateCache.put("select2/choices.tpl.html","<ul tabindex=\"-1\" class=\"ui-select-choices ui-select-choices-content select2-results\"><li class=\"ui-select-choices-group\" ng-class=\"{\'select2-result-with-children\': $select.choiceGrouped($group) }\"><div ng-show=\"$select.choiceGrouped($group)\" class=\"ui-select-choices-group-label select2-result-label\" ng-bind=\"$group.name\"></div><ul id=\"ui-select-choices-{{ $select.generatedId }}\" ng-class=\"{\'select2-result-sub\': $select.choiceGrouped($group), \'select2-result-single\': !$select.choiceGrouped($group) }\"><li role=\"option\" ng-attr-id=\"ui-select-choices-row-{{ $select.generatedId }}-{{$index}}\" class=\"ui-select-choices-row\" ng-class=\"{\'select2-highlighted\': $select.isActive(this), \'select2-disabled\': $select.isDisabled(this)}\"><div class=\"select2-result-label ui-select-choices-row-inner\"></div></li></ul></li></ul>");
$templateCache.put("select2/match-multiple.tpl.html","<span class=\"ui-select-match\"><li class=\"ui-select-match-item select2-search-choice\" ng-repeat=\"$item in $select.selected track by $index\" ng-class=\"{\'select2-search-choice-focus\':$selectMultiple.activeMatchIndex === $index, \'select2-locked\':$select.isLocked(this, $index)}\" ui-select-sort=\"$select.selected\"><span uis-transclude-append=\"\"></span> <a href=\"javascript:;\" class=\"ui-select-match-close select2-search-choice-close\" ng-click=\"$selectMultiple.removeChoice($index)\" tabindex=\"-1\"></a></li></span>");
$templateCache.put("select2/match.tpl.html","<a class=\"select2-choice ui-select-match\" ng-class=\"{\'select2-default\': $select.isEmpty()}\" ng-click=\"$select.toggle($event)\" aria-label=\"{{ $select.baseTitle }} select\"><span ng-show=\"$select.isEmpty()\" class=\"select2-chosen\">{{$select.placeholder}}</span> <span ng-hide=\"$select.isEmpty()\" class=\"select2-chosen\" ng-transclude=\"\"></span> <abbr ng-if=\"$select.allowClear && !$select.isEmpty()\" class=\"select2-search-choice-close\" ng-click=\"$select.clear($event)\"></abbr> <span class=\"select2-arrow ui-select-toggle\"><b></b></span></a>");
$templateCache.put("select2/no-choice.tpl.html","<div class=\"ui-select-no-choice dropdown\" ng-show=\"$select.items.length == 0\"><div class=\"dropdown-content\"><div data-selectable=\"\" ng-transclude=\"\"></div></div></div>");
$templateCache.put("select2/select-multiple.tpl.html","<div class=\"ui-select-container ui-select-multiple select2 select2-container select2-container-multi\" ng-class=\"{\'select2-container-active select2-dropdown-open open\': $select.open, \'select2-container-disabled\': $select.disabled}\"><ul class=\"select2-choices\"><span class=\"ui-select-match\"></span><li class=\"select2-search-field\"><input type=\"search\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" role=\"combobox\" aria-expanded=\"true\" aria-owns=\"ui-select-choices-{{ $select.generatedId }}\" aria-label=\"{{ $select.baseTitle }}\" aria-activedescendant=\"ui-select-choices-row-{{ $select.generatedId }}-{{ $select.activeIndex }}\" class=\"select2-input ui-select-search\" placeholder=\"{{$selectMultiple.getPlaceholder()}}\" ng-disabled=\"$select.disabled\" ng-hide=\"$select.disabled\" ng-model=\"$select.search\" ng-click=\"$select.activate()\" style=\"width: 34px;\" ondrop=\"return false;\"></li></ul><div class=\"ui-select-dropdown select2-drop select2-with-searchbox select2-drop-active\" ng-class=\"{\'select2-display-none\': !$select.open || $select.items.length === 0}\"><div class=\"ui-select-choices\"></div></div></div>");
$templateCache.put("select2/select.tpl.html","<div class=\"ui-select-container select2 select2-container\" ng-class=\"{\'select2-container-active select2-dropdown-open open\': $select.open, \'select2-container-disabled\': $select.disabled, \'select2-container-active\': $select.focus, \'select2-allowclear\': $select.allowClear && !$select.isEmpty()}\"><div class=\"ui-select-match\"></div><div class=\"ui-select-dropdown select2-drop select2-with-searchbox select2-drop-active\" ng-class=\"{\'select2-display-none\': !$select.open}\"><div class=\"search-container\" ng-class=\"{\'ui-select-search-hidden\':!$select.searchEnabled, \'select2-search\':$select.searchEnabled}\"><input type=\"search\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" ng-class=\"{\'select2-active\': $select.refreshing}\" role=\"combobox\" aria-expanded=\"true\" aria-owns=\"ui-select-choices-{{ $select.generatedId }}\" aria-label=\"{{ $select.baseTitle }}\" class=\"ui-select-search select2-input\" ng-model=\"$select.search\"></div><div class=\"ui-select-choices\"></div><div class=\"ui-select-no-choice\"></div></div></div>");
$templateCache.put("selectize/choices.tpl.html","<div ng-show=\"$select.open\" class=\"ui-select-choices ui-select-dropdown selectize-dropdown\" ng-class=\"{\'single\': !$select.multiple, \'multi\': $select.multiple}\"><div class=\"ui-select-choices-content selectize-dropdown-content\"><div class=\"ui-select-choices-group optgroup\"><div ng-show=\"$select.isGrouped\" class=\"ui-select-choices-group-label optgroup-header\" ng-bind=\"$group.name\"></div><div role=\"option\" class=\"ui-select-choices-row\" ng-class=\"{active: $select.isActive(this), disabled: $select.isDisabled(this)}\"><div class=\"option ui-select-choices-row-inner\" data-selectable=\"\"></div></div></div></div></div>");
$templateCache.put("selectize/match-multiple.tpl.html","<div class=\"ui-select-match\" data-value=\"\" ng-repeat=\"$item in $select.selected track by $index\" ng-click=\"$selectMultiple.activeMatchIndex = $index;\" ng-class=\"{\'active\':$selectMultiple.activeMatchIndex === $index}\" ui-select-sort=\"$select.selected\"><span class=\"ui-select-match-item\" ng-class=\"{\'select-locked\':$select.isLocked(this, $index)}\"><span uis-transclude-append=\"\"></span> <span class=\"remove ui-select-match-close\" ng-hide=\"$select.disabled\" ng-click=\"$selectMultiple.removeChoice($index)\">&times;</span></span></div>");
$templateCache.put("selectize/match.tpl.html","<div ng-hide=\"$select.searchEnabled && ($select.open || $select.isEmpty())\" class=\"ui-select-match\"><span ng-show=\"!$select.searchEnabled && ($select.isEmpty() || $select.open)\" class=\"ui-select-placeholder text-muted\">{{$select.placeholder}}</span> <span ng-hide=\"$select.isEmpty() || $select.open\" ng-transclude=\"\"></span></div>");
$templateCache.put("selectize/no-choice.tpl.html","<div class=\"ui-select-no-choice selectize-dropdown\" ng-show=\"$select.items.length == 0\"><div class=\"selectize-dropdown-content\"><div data-selectable=\"\" ng-transclude=\"\"></div></div></div>");
$templateCache.put("selectize/select-multiple.tpl.html","<div class=\"ui-select-container selectize-control multi plugin-remove_button\" ng-class=\"{\'open\': $select.open}\"><div class=\"selectize-input\" ng-class=\"{\'focus\': $select.open, \'disabled\': $select.disabled, \'selectize-focus\' : $select.focus}\" ng-click=\"$select.open && !$select.searchEnabled ? $select.toggle($event) : $select.activate()\"><div class=\"ui-select-match\"></div><input type=\"search\" autocomplete=\"off\" tabindex=\"-1\" class=\"ui-select-search\" ng-class=\"{\'ui-select-search-hidden\':!$select.searchEnabled}\" placeholder=\"{{$selectMultiple.getPlaceholder()}}\" ng-model=\"$select.search\" ng-disabled=\"$select.disabled\" aria-expanded=\"{{$select.open}}\" aria-label=\"{{ $select.baseTitle }}\" ondrop=\"return false;\"></div><div class=\"ui-select-choices\"></div><div class=\"ui-select-no-choice\"></div></div>");
$templateCache.put("selectize/select.tpl.html","<div class=\"ui-select-container selectize-control single\" ng-class=\"{\'open\': $select.open}\"><div class=\"selectize-input\" ng-class=\"{\'focus\': $select.open, \'disabled\': $select.disabled, \'selectize-focus\' : $select.focus}\" ng-click=\"$select.open && !$select.searchEnabled ? $select.toggle($event) : $select.activate()\"><div class=\"ui-select-match\"></div><input type=\"search\" autocomplete=\"off\" tabindex=\"-1\" class=\"ui-select-search ui-select-toggle\" ng-class=\"{\'ui-select-search-hidden\':!$select.searchEnabled}\" ng-click=\"$select.toggle($event)\" placeholder=\"{{$select.placeholder}}\" ng-model=\"$select.search\" ng-hide=\"!$select.isEmpty() && !$select.open\" ng-disabled=\"$select.disabled\" aria-label=\"{{ $select.baseTitle }}\"></div><div class=\"ui-select-choices\"></div><div class=\"ui-select-no-choice\"></div></div>");}]);
/*
 AngularJS v1.4.3
 (c) 2010-2015 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(p,g,l){'use strict';function m(b,a,f){var c=f.baseHref(),k=b[0];return function(b,d,e){var f,h;e=e||{};h=e.expires;f=g.isDefined(e.path)?e.path:c;d===l&&(h="Thu, 01 Jan 1970 00:00:00 GMT",d="");g.isString(h)&&(h=new Date(h));d=encodeURIComponent(b)+"="+encodeURIComponent(d);d=d+(f?";path="+f:"")+(e.domain?";domain="+e.domain:"");d+=h?";expires="+h.toUTCString():"";d+=e.secure?";secure":"";e=d.length+1;4096<e&&a.warn("Cookie '"+b+"' possibly not set or overflowed because it was too large ("+
e+" > 4096 bytes)!");k.cookie=d}}g.module("ngCookies",["ng"]).provider("$cookies",[function(){var b=this.defaults={};this.$get=["$$cookieReader","$$cookieWriter",function(a,f){return{get:function(c){return a()[c]},getObject:function(c){return(c=this.get(c))?g.fromJson(c):c},getAll:function(){return a()},put:function(c,a,n){f(c,a,n?g.extend({},b,n):b)},putObject:function(c,b,a){this.put(c,g.toJson(b),a)},remove:function(a,k){f(a,l,k?g.extend({},b,k):b)}}}]}]);g.module("ngCookies").factory("$cookieStore",
["$cookies",function(b){return{get:function(a){return b.getObject(a)},put:function(a,f){b.putObject(a,f)},remove:function(a){b.remove(a)}}}]);m.$inject=["$document","$log","$browser"];g.module("ngCookies").provider("$$cookieWriter",function(){this.$get=m})})(window,window.angular);
//# sourceMappingURL=angular-cookies.min.js.map

'use strict';
angular.module('underscore', []).factory('_', function () {
  return window._;  // assumes underscore has already been loaded on the page
});
'use strict';
angular.module('ark-components', [
  'ngCookies',
  'ngSanitize',
  'underscore'
]);
angular.module('ark-components').run([
  '$templateCache',
  function ($templateCache) {
    'use strict';
    $templateCache.put('ark-app-launcher/ark-app-launcher.html', '<nav class="ark-app-launcher navbar navbar-default" role="navigation">\n' + '  <div class="container-fluid">\n' + '    <!-- Brand and toggle get grouped for better mobile display -->\n' + '    <div id="nav_header" class="navbar-header">\n' + '      <a class="navbar-brand" href="#">\n' + '        <span class="fonticon icon-special-g-brandmark"></span>\n' + '        <span>{{ currentAppName }}</span>\n' + '      </a>\n' + '    </div>\n' + '\n' + '    <!-- Collect the nav links, forms, and other content for toggling -->\n' + '    <div class="collapse navbar-collapse">\n' + '      <ul class="nav navbar-nav navbar-right">\n' + '        <!-- User Menu -->\n' + '        <li class="dropdown">\n' + '          <a href data-toggle="dropdown">{{ user.name | truncate:false:25 }}</a>\n' + '          <ul class="dropdown-menu">\n' + '            <li ng-if="aboutApplication">\n' + '              <a href ng-click="aboutApplication()">{{ localization.localizedStrings.ABOUT }} {{ currentAppName }}</a>\n' + '            </li>\n' + '            <li ng-if="aboutApplication" class="divider"></li>\n' + '            <li ng-repeat="item in usermenu" ng-if="!item.disable" ng-class="{divider: item.isDivider}">\n' + '              <a ng-if="!item.isDivider && !item.customAction" ng-href="{{ item.url }}" ng-attr-target="{{ item.target }}">\n' + '                {{ item.name }}\n' + '              </a>\n' + '              <a ng-if="!item.isDivider && item.customAction" href ng-click="customAction(item)">\n' + '                {{ item.name }}\n' + '              </a>\n' + '            </li>\n' + '          </ul>\n' + '        </li>\n' + '        <!-- Localization -->\n' + '        <li class="dropdown" ng-if="localization">\n' + '          <a href class="dropdown-toggle" data-toggle="dropdown">\n' + '            <div ng-class="localizationIcons[currentLanguage.id]"></div>\n' + '            {{ currentLanguage.shortName }}\n' + '          </a>\n' + '          <ul class="dropdown-menu">\n' + '            <li ng-repeat="language in localization.languages">\n' + '              <a href ng-click="changeLanguage(language.id)">\n' + '                <div ng-class="localizationIcons[language.id]"></div>\n' + '                {{ language.localizedName }}\n' + '              </a>\n' + '            </li>\n' + '          </ul>\n' + '        </li>\n' + '        <!-- Help -->\n' + '        <li ng-if="helpmenu">\n' + '          <a ng-href="{{ helpmenu.getUrl() }}" ng-attr-target="{{ helpmenu.target }}">\n' + '            <span ng-if="helpmenu.fonticon" class="fonticon"\n' + '            ng-class="helpmenu.fonticon"\n' + '            ng-attr-title="{{ helpmenu.name }}"></span>\n' + '          </a>\n' + '        </li>\n' + '        <!-- App Launcher -->\n' + '        <li class="app-launcher-dropdown dropdown" ng-if="appLauncherEnable && appGroups">\n' + '          <a href class="dropdown-toggle" data-toggle="dropdown">\n' + '            <span title="App Launcher">\n' + '              <span class="fonticon icon-dialpad"></span>\n' + '            </span>\n' + '          </a>\n' + '          <ul class="dropdown-menu">\n' + '            <li ng-repeat-start="(name, apps) in appGroups" class="title">{{ name }}</li>\n' + '            <li ng-repeat="app in apps">\n' + '              <a href ng-href="{{ app.links[0].url }}" target="_blank">\n' + '                <img ng-src="{{ baseUrlAssets }}{{ app.image32 }}">\n' + '                <span>{{ app.name }}</span>\n' + '              </a>\n' + '            </li>\n' + '            <li ng-repeat-end class="divider"></li>\n' + '            <li ng-if="false">\n' + '              <a href>\n' + '                <span class="fonticon icon-dialpad" style="font-size: 24px"></span>\n' + '                {{ localization.localizedStrings.ALL_APPS }}\n' + '              </a>\n' + '            </li>\n' + '          </ul>\n' + '        </li>\n' + '      </ul>\n' + '    </div><!-- /.navbar-collapse -->\n' + '  </div><!-- /.container-fluid -->\n' + '</nav>\n');
    $templateCache.put('ark-datepicker/ark-datepicker-popup-wrap.html', '<ul class="dropdown-menu ark-datepicker-wrap" ng-style="{display: (isOpen && \'block\') || \'none\', top: position.top+\'px\', left: position.left+\'px\'}">\n' + '  <li ng-transclude></li>\n' + '  <li ng-if="showButtonBar" style="padding:10px 9px 2px">\n' + '    <span class="btn-group">\n' + '      <button type="button" class="btn btn-sm btn-info" ng-click="select(\'today\')">{{ getText(\'current\') }}</button>\n' + '      <button type="button" class="btn btn-sm btn-danger" ng-click="select(null)">{{ getText(\'clear\') }}</button>\n' + '    </span>\n' + '    <button type="button" class="btn btn-sm btn-success pull-right" ng-click="$parent.isOpen = false">{{ getText(\'close\') }}</button>\n' + '  </li>\n' + '</ul>\n');
    $templateCache.put('ark-datepicker/ark-datepicker.html', '<div ng-switch="datepickerMode" class="ark-datepicker">\n' + '  <ark-daypicker ng-switch-when="day"></ark-daypicker>\n' + '  <ark-monthpicker ng-switch-when="month"></ark-monthpicker>\n' + '  <ark-yearpicker ng-switch-when="year"></ark-yearpicker>\n' + '</div>\n');
    $templateCache.put('ark-datepicker/ark-daypicker.html', '<div class="day-view text-center">\n' + '  <div class="month-index">\n' + '    <table>\n' + '      <thead>\n' + '        <tr>\n' + '          <th>\n' + '            <button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)">\n' + '              <i class="fonticon icon-chevron-left"></i>\n' + '            </button>\n' + '          </th>\n' + '          <th colspan="{{ 5 + showWeeks }}">\n' + '            <button type="button" class="btn btn-default btn-sm btn-block" ng-click="toggleMode()">\n' + '              <strong>{{ title }}</strong>\n' + '            </button>\n' + '          </th>\n' + '          <th>\n' + '            <button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)">\n' + '              <i class="fonticon icon-chevron-right"></i>\n' + '            </button>\n' + '          </th>\n' + '        </tr>\n' + '      </thead>\n' + '    </table>\n' + '  </div>\n' + '  <div class="day-table">\n' + '    <table>\n' + '      <thead>\n' + '        <tr class="ark-datepicker-labels">\n' + '          <th ng-show="showWeeks" class="text-center"></th>\n' + '          <th ng-repeat="label in labels track by $index" class="text-center day-label">\n' + '            <small>{{ label }}</small>\n' + '          </th>\n' + '        </tr>\n' + '      </thead>\n' + '      <tbody>\n' + '        <tr ng-repeat="row in rows track by $index">\n' + '          <td ng-show="showWeeks" class="text-center">\n' + '            <small><em>{{ weekNumbers[$index] }}</em></small>\n' + '          </td>\n' + '          <td ng-repeat="dt in row track by dt.date" class="text-center">\n' + '            <button type="button" style="width:100%;" class="btn btn-default btn-sm" ng-class="{\'btn-info\': dt.selected}" ng-click="select(dt.date)" ng-disabled="dt.disabled">\n' + '              <span ng-class="{\'text-muted\': dt.secondary, \'text-info\': dt.current}">\n' + '                {{ dt.label }}\n' + '              </span>\n' + '            </button>\n' + '          </td>\n' + '        </tr>\n' + '      </tbody>\n' + '    </table>\n' + '  </div>\n' + '  <div class="ark-timepicker calendar-timepicker" ng-if="timepickerMode">\n' + '    <div class="timepicker-content" ng-show="!timeZoneShow">\n' + '      <div class="col-container first">\n' + '        <div class="icon-iw-circle-no-chevron-up arrow" while-pressed="addHour()"></div>\n' + '        <div class="dropdown open">\n' + '          <input type="text" maxlength="2" ng-model="timeData.hour" ng-click="showHour()" ng-blur="validateHour()">\n' + '          <ul ng-show="showHourList" class="dropdown-menu">\n' + '            <li ng-repeat="list in hourList">\n' + '              <a href ng-mousedown="selectHour(list)" ng-class="{selected: list === hour}">\n' + '              {{ list }}\n' + '              </a>\n' + '            </li>\n' + '          </ul>\n' + '        </div>\n' + '        <div class="icon-iw-circle-no-chevron-down arrow" while-pressed="minusHour()"></div>\n' + '      </div>\n' + '      <div class="col-container column"><b>:</b></div>\n' + '      <div class="col-container">\n' + '        <div class="icon-iw-circle-no-chevron-up arrow" while-pressed="addMinute()"></div>\n' + '        <div class="dropdown open">\n' + '          <input type="text" maxlength="2" ng-model="timeData.minute" ng-click="showMinute()" ng-blur="validateMinute()">\n' + '          <ul ng-show="showMinuteList" class="dropdown-menu">\n' + '            <li ng-repeat="list in minuteList">\n' + '              <a href ng-mousedown="selectMinute(list)" ng-class="{selected: list===minute}">\n' + '              {{ list }}\n' + '              </a>\n' + '            </li>\n' + '          </ul>\n' + '        </div>\n' + '        <div class="icon-iw-circle-no-chevron-down arrow" while-pressed="minusMinute()"></div>\n' + '      </div>\n' + '      <div class="col-container last">\n' + '        <div class="icon-iw-circle-no-chevron-up arrow" ng-click="changeNoon()"></div>\n' + '        <input type="text" maxlength="2" ng-model="timeData.noon" ng-blur="validateNoon()" readonly>\n' + '        <div class="icon-iw-circle-no-chevron-down arrow" ng-click="changeNoon()"></div>\n' + '      </div>\n' + '      <div class="col-container last timepicker-button" ng-if="timezoneMode" ng-click="toggleTimeZone()">\n' + '        <span class="fonticon icon-clock-timezone"></span>\n' + '      </div>\n' + '    </div>\n' + '    <div class="timepicker-content" ng-if="timezoneMode" ng-show="timeZoneShow">\n' + '      <div class="col-container">\n' + '        <div class="icon-iw-circle-no-chevron-up arrow timezone" ng-click="addTimeZone()"></div>\n' + '        <div class="dropdown open">\n' + '          <input type="text" class="timezone" maxlength="9" ng-model="timeData.timeZone" ng-click="showTimeZone()" ng-blur="validateTimeZone()" readonly>\n' + '          <ul ng-show="showTimeZoneList" class="dropdown-menu timezone">\n' + '            <li ng-repeat="list in timeZoneList">\n' + '              <a href ng-mousedown="selectTimeZone(list, $index)" class="timezone" ng-class="{selected: list === timeZone}">\n' + '              {{ list }}\n' + '              </a>\n' + '            </li>\n' + '          </ul>\n' + '        </div>\n' + '        <div class="icon-iw-circle-no-chevron-down arrow timezone" ng-click="minusTimeZone()"></div>\n' + '      </div>\n' + '      <div class="col-container last timepicker-button" ng-click="toggleTimeZone()">\n' + '        <span class="fonticon icon-clock"></span>\n' + '      </div>\n' + '    </div>\n' + '  </div>\n' + '</div>\n');
    $templateCache.put('ark-datepicker/ark-monthpicker.html', '<table>\n' + '  <thead>\n' + '    <tr>\n' + '      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n' + '      <th><button type="button" class="btn btn-default btn-sm btn-block" ng-click="toggleMode()"><strong>{{title}}</strong></button></th>\n' + '      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n' + '    </tr>\n' + '  </thead>\n' + '  <tbody>\n' + '    <tr ng-repeat="row in rows track by $index">\n' + '      <td ng-repeat="dt in row track by dt.date" class="text-center">\n' + '        <button type="button" style="width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected}" ng-click="select(dt.date)" ng-disabled="dt.disabled"><span ng-class="{\'text-info\': dt.current}">{{dt.label}}</span></button>\n' + '      </td>\n' + '    </tr>\n' + '  </tbody>\n' + '</table>\n');
    $templateCache.put('ark-datepicker/ark-yearpicker.html', '<table>\n' + '  <thead>\n' + '    <tr>\n' + '      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n' + '      <th colspan="3"><button type="button" class="btn btn-default btn-sm btn-block" ng-click="toggleMode()"><strong>{{title}}</strong></button></th>\n' + '      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n' + '    </tr>\n' + '  </thead>\n' + '  <tbody>\n' + '    <tr ng-repeat="row in rows track by $index">\n' + '      <td ng-repeat="dt in row track by dt.date" class="text-center">\n' + '        <button type="button" style="width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected}" ng-click="select(dt.date)" ng-disabled="dt.disabled"><span ng-class="{\'text-info\': dt.current}">{{dt.label}}</span></button>\n' + '      </td>\n' + '    </tr>\n' + '  </tbody>\n' + '</table>\n');
    $templateCache.put('ark-filter-bar/ark-filter-bar.html', '<div class="ark-filter-bar">\r' + '\n' + '  <div class="input-container">\r' + '\n' + '    <input type="text" ng-model="searchText" class="form-control filter-search-box" placeholder="Search">\r' + '\n' + '    <span class="icon-search search-box-icon"></span>\r' + '\n' + '    <span class="icon-close search-box-cancel" ng-show="hasContent" ng-click="clearInputText()"></span>\r' + '\n' + '    <div class="spinner-container input-spinner" ng-show="isSearching">\r' + '\n' + '      <div class="spin-circle"></div>\r' + '\n' + '      <div class="spin-inner-circle"></div>\r' + '\n' + '    </div>\r' + '\n' + '  </div>\r' + '\n' + '  <div ng-if="displayDropdown" class="dropdown open">\r' + '\n' + '    <ul class="dropdown-menu filter-dropdown" aria-labelledby="filterDropdown">\r' + '\n' + '      <li ng-repeat="item in items" ng-init="breakIndex = item.toLowerCase().indexOf(prevSearchText.toLowerCase())">\r' + '\n' + '        <a class="items-found" ng-click="clickItem(item)">\r' + '\n' + '          {{ item.substring(0, breakIndex) }}<b>{{ item.substring(breakIndex, (breakIndex + prevSearchText.length)) }}</b>{{ item.substring((breakIndex + prevSearchText.length)) }}\r' + '\n' + '        </a>\r' + '\n' + '      </li>\r' + '\n' + '      <li ng-if="items.length === 0">\r' + '\n' + '        <a class="not-found">\r' + '\n' + '          Search for "<b>{{ prevSearchText }}</b>" not found\r' + '\n' + '        </a>\r' + '\n' + '      </li>\r' + '\n' + '    </ul>\r' + '\n' + '  </div>\r' + '\n' + '</div>\r' + '\n');
    $templateCache.put('ark-footer/ark-footer.html', '<footer ng-class="showLargeFooter ? \'ark-footer\' : \'ark-footer-slim\'">\r' + '\n' + '  <!-- Large footer - displayed if @showLargeFooter is true -->\r' + '\n' + '  <div class="large-footer" ng-if="showLargeFooter">\r' + '\n' + '    <div class="rsection">\r' + '\n' + '      <img class="logo-img" ng-src="{{ tenantLogoLink }}" alt="">\r' + '\n' + '      <div class="powered-by">{{ i18n.POWERED_BY }}</div>\r' + '\n' + '      <div class="version" ng-if="appVersion">{{ appVersion }}</div>\r' + '\n' + '    </div>\r' + '\n' + '\r' + '\n' + '    <div class="links" ng-if="showTermsofUse || showPrivacyPolicy">\r' + '\n' + '      <span ng-if="showTermsofUse">\r' + '\n' + '        <a class="terms-of-use" target="_blank" href ng-href="{{ termsAndConditions }}">\r' + '\n' + '          {{ i18n.TERMS_OF_USE }}\r' + '\n' + '        </a>\r' + '\n' + '      </span>\r' + '\n' + '      <span ng-if="showTermsofUse && showPrivacyPolicy"> / </span>\r' + '\n' + '      <span ng-if="showPrivacyPolicy">\r' + '\n' + '        <a class="privacy-policy" target="_blank" href ng-href="{{ privacyPolicy }}">\r' + '\n' + '          {{ i18n.PRIVACY_POLICY }}\r' + '\n' + '        </a>\r' + '\n' + '      </span>\r' + '\n' + '    </div>\r' + '\n' + '    <div class="logo" ng-if="genesysLogoLink && !(showTermsofUse || showPrivacyPolicy)">\r' + '\n' + '      <img ng-src="{{ genesysLogoLink }}" alt="Genesys">\r' + '\n' + '    </div>\r' + '\n' + '    <div class="copyright">&copy; {{ currentYear }} {{ i18n.COPYRIGHT }}</div>\r' + '\n' + '  </div>\r' + '\n' + '\r' + '\n' + '  <!-- Small footer - displayed if @showLargeFooter is false -->\r' + '\n' + '  <ul class="small-footer" ng-if="!showLargeFooter">\r' + '\n' + '    <li class="left">\r' + '\n' + '      <div class="copyright">\r' + '\n' + '        <span class="fonticon icon-special-g-brandmark g-thumb"></span>\r' + '\n' + '        &copy; {{ currentYear }} {{ i18n.COPYRIGHT }}\r' + '\n' + '      </div><!-- left -->\r' + '\n' + '    </li>\r' + '\n' + '    <li class="left" ng-if="showTermsofUse">\r' + '\n' + '      <div class="terms-of-use">\r' + '\n' + '        <a target="_blank" href ng-href="{{ termsAndConditions }}">{{ i18n.TERMS_OF_USE }}</a>\r' + '\n' + '      </div>\r' + '\n' + '    </li>\r' + '\n' + '    <li class="left" ng-if="showPrivacyPolicy">\r' + '\n' + '      <div class="privacy-policy">\r' + '\n' + '        <a target="_blank" href ng-href="{{ privacyPolicy }}">{{ i18n.PRIVACY_POLICY }}</a>\r' + '\n' + '      </div>\r' + '\n' + '    </li>\r' + '\n' + '    <li class="right">\r' + '\n' + '      <div class="logo">\r' + '\n' + '        <img ng-src="{{ tenantLogoLink }}" alt="">\r' + '\n' + '      </div>\r' + '\n' + '    </li>\r' + '\n' + '    <li class="right" ng-if="appVersion">\r' + '\n' + '      <div class="version">Version {{ appVersion }}</div>\r' + '\n' + '    </li>\r' + '\n' + '  </ul>\r' + '\n' + '</footer>\r' + '\n');
    $templateCache.put('ark-login/ark-login.html', '<div class="ark-login">\r' + '\n' + '  <div class="container">\r' + '\n' + '    <div class="branding">\r' + '\n' + '      <img ng-src="{{ genesysLogoLink }}" alt="Genesys Logo" />\r' + '\n' + '    </div>\r' + '\n' + '    <div class="well">\r' + '\n' + '      <form class="form-signin" role="form" ng-show="!isLoading">\r' + '\n' + '        <div class="form-group">\r' + '\n' + '          <h2>{{ formTitle.page }}</h2>\r' + '\n' + '          <div class="ark-login-fields" ng-class="{\'has-error\': errorMessage}">\r' + '\n' + '            <input type="text" ng-model="userNameInput" class="form-control ark-login-username" placeholder="{{ formTitle.username }}"/>\r' + '\n' + '            <input type="password" ng-model="passwordInput" class="form-control ark-login-password" placeholder="{{ formTitle.password }}"/>\r' + '\n' + '          </div>\r' + '\n' + '          <div class="btn-group bootstrap-select login-select" ng-show="showLanguageBar">\r' + '\n' + '            <button ark-select type="button" class="btn btn-default dropdown-toggle selectpicker" ng-model="language" ng-options="item.title for item in languageMenu">\r' + '\n' + '            </button>\r' + '\n' + '          </div>\r' + '\n' + '          <div class="error-container" ng-show="errorMessage">\r' + '\n' + '            <span class="icon-alert-octo"> </span>\r' + '\n' + '            <div class="ark-login-error-messages">{{ errorMessage }}</div>\r' + '\n' + '          </div>\r' + '\n' + '          <div class="ark-login-button">\r' + '\n' + '            <button ng-click="login()" class="btn btn-primary btn-block">\r' + '\n' + '              {{ formTitle.button }}\r' + '\n' + '            </button>\r' + '\n' + '          </div>\r' + '\n' + '          <div class="ark-login-forgot-password" ng-if="showForgotPassword">\r' + '\n' + '            <a href ng-click="forgotPasswordFn()">\r' + '\n' + '              {{ formTitle.forgotPassword }}\r' + '\n' + '            </a>\r' + '\n' + '          </div>\r' + '\n' + '          <div class="remote-message" ng-if="remoteMessageUrl">\r' + '\n' + '            {{ remoteMessage }}\r' + '\n' + '          </div>\r' + '\n' + '        </div>\r' + '\n' + '      </form>\r' + '\n' + '      <div class="loading-container" ng-show="isLoading">\r' + '\n' + '        <h2>{{ formTitle.loading }}</h2>\r' + '\n' + '        <div class="spinner-container">\r' + '\n' + '          <div class="spin-circle"></div>\r' + '\n' + '          <div class="spin-inner-circle"></div>\r' + '\n' + '        </div>\r' + '\n' + '      </div>\r' + '\n' + '    </div><!-- well -->\r' + '\n' + '  </div><!-- container -->\r' + '\n' + '</div><!-- login -->\r' + '\n');
    $templateCache.put('ark-navbar/ark-navbar.html', '<nav class="ark-navbar navbar navbar-default" role="navigation">\n' + '  <div class="container-fluid">\n' + '    <!-- Brand and toggle get grouped for better mobile display -->\n' + '    <div ng-if="navigationJSON.header"\n' + '      ng-attr-id="{{ navigationJSON.header.id }}"\n' + '      class="navbar-header">\n' + '      <a ng-if="navigationJSON.header && navigationJSON.header.route"\n' + '        ng-href="{{ navigationJSON.header.route }}"\n' + '        class="navbar-brand">\n' + '        <span ng-if="navigationJSON.header.fonticon" class="fonticon"\n' + '          ng-class="navigationJSON.header.fonticon"></span>\n' + '        <span>{{ i18n ? i18n[navigationJSON.header.id] : \'\' }}</span>\n' + '      </a>\n' + '      <a ng-if="navigationJSON.header && !navigationJSON.header.route"\n' + '        class="navbar-brand">\n' + '        <span ng-if="navigationJSON.header.fonticon" class="fonticon"\n' + '          ng-class="navigationJSON.header.fonticon"></span>\n' + '        <span>{{ i18n ? i18n[navigationJSON.header.id] : \'\' }}</span>\n' + '      </a>\n' + '    </div>\n' + '    <!-- Collect the nav links, forms, and other content for toggling -->\n' + '    <div class="collapse navbar-collapse">\n' + '      <!-- left -->\n' + '      <ul class="nav navbar-nav">\n' + '        <li ng-repeat="item in navigationJSON.left"\n' + '          ng-attr-id="{{ item.id }}"\n' + '          ng-class="{dropdown: item.children, active: matchRoute(item.route).module}">\n' + '          <a ng-href="{{ !item.children ? item.route : \'#\' }}"\n' + '            ng-class="{\'dropdown-toggle\': item.children}"\n' + '            data-toggle="{{ item.children ? \'dropdown\' : \'\' }}">\n' + '            <span ng-if="!item.fonticon">{{ i18n ? i18n[item.id] : \'\' }} <b ng-if="item.caret == true" class="caret"></b></span>\n' + '            <span ng-if="item.fonticon" ng-attr-title="{{ i18n ? i18n[item.id] : \'\' }}">\n' + '              <span class="fonticon" ng-class="item.fonticon"></span>\n' + '              <b ng-if="item.caret == true" class="caret"></b>\n' + '            </span>\n' + '          </a>\n' + '          <ul ng-if="item.children" class="dropdown-menu">\n' + '              <li ng-repeat="subItem in item.children"\n' + '                ng-attr-id="{{ subItem.id }}"\n' + '                ng-class="{dropdown: subItem.children, divider: subItem.type == \'sub-group\', active: matchRoute(subItem.route).subModule}">\n' + '                <a ng-if="subItem.type == \'sub-item\'"\n' + '                  ng-href="{{ !subItem.children ? subItem.route : \'\' }}"\n' + '                  ng-class="{\'dropdown-toggle dropdown-nested\': subItem.children}"\n' + '                  data-toggle="{{ subItem.children ? \'dropdown\' : \'\' }}">\n' + '                  {{ i18n ? i18n[subItem.id] : \'\' }}</a>\n' + '                <span ng-if="subItem.type == \'sub-group\'">{{ i18n ? i18n[subItem.id] : \'\' }}</span>\n' + '                <ul ng-if="subItem.children" class="dropdown-menu sub-menu">\n' + '                  <li ng-repeat="subSubItem in subItem.children"\n' + '                    ng-attr-id="{{ subSubItem.id }}"\n' + '                    ng-class="{divider: subSubItem.type == \'sub-group\', active: matchRoute(subSubItem.route).subModule}">\n' + '                    <a ng-if="subSubItem.type == \'sub-item\'"\n' + '                      ng-href="{{ subSubItem.route }}">\n' + '                      {{ i18n ? i18n[subSubItem.id] : \'\' }}</a>\n' + '                    <span ng-if="subSubItem.type == \'sub-group\'">{{ i18n ? i18n[subSubItem.id]  : \'\' }}</span>\n' + '                  </li>\n' + '                </ul>\n' + '              </li>\n' + '          </ul>\n' + '        </li>\n' + '      </ul>\n' + '      <!-- right -->\n' + '      <ul class="nav navbar-nav navbar-right">\n' + '        <li ng-repeat="item in navigationJSON.right"\n' + '          ng-attr-id="{{ item.id }}"\n' + '          ng-class="{dropdown: (item.children || item.type === \'search-item\'), active: (matchRoute(item.route).module)}">\n' + '          <a ng-if="item.route && item.type !== \'search-item\'"\n' + '            ng-href="{{ !item.children ? item.route : \'#\' }}"\n' + '            ng-class="{\'dropdown-toggle\': item.children}"\n' + '            data-toggle="{{ item.children ? \'dropdown\' : \'\' }}">\n' + '            <span ng-if="!item.fonticon">{{ i18n ? i18n[item.id] : \'\' }} <b ng-if="item.caret == true" class="caret"></b></span>\n' + '            <span ng-if="item.fonticon"\n' + '              ng-attr-title="{{ i18n ? i18n[item.id] :\'\' }}">\n' + '              <span class="fonticon" ng-class="item.fonticon"></span>\n' + '              <b ng-if="item.caret == true" class="caret"></b>\n' + '            </span>\n' + '          </a>\n' + '          <a ng-if="!item.route && item.type === \'search-item\'"\n' + '            class="dropdown-toggle"\n' + '            data-toggle="dropdown">\n' + '            <span ng-if="!item.fonticon">{{ i18n ? i18n[item.id] : \'\' }} <b ng-if="item.caret == true" class="caret"></b></span>\n' + '            <span ng-if="item.fonticon" ng-attr-title="{{ i18n ? i18n[item.id] : \'\' }}">\n' + '                <span class="fonticon" ng-class="item.fonticon"></span>\n' + '                <b ng-if="item.caret == true" class="caret"></b>\n' + '            </span>\n' + '          </a>\n' + '          <ul ng-if="item.children" class="dropdown-menu">\n' + '            <li ng-repeat="subItem in item.children"\n' + '              ng-attr-id="{{ subItem.id }}"\n' + '              ng-class="{dropdown: subItem.children, divider: subItem.type == \'sub-group\', active: matchRoute(subItem.route).subModule}">\n' + '              <a ng-if="subItem.type == \'sub-item\'"\n' + '                ng-href="{{ !subItem.children ? subItem.route : \'\' }}"\n' + '                ng-class="{\'dropdown-toggle dropdown-nested\': subItem.children}"\n' + '                data-toggle="{{ subItem.children ? \'dropdown\' : \'\' }}">\n' + '                {{ i18n ? i18n[subItem.id] : \'\' }}</a>\n' + '              <span ng-if="subItem.type == \'sub-group\'">{{ i18n ? i18n[subItem.id] : \'\' }}</span>\n' + '              <ul ng-if="subItem.children" class="dropdown-menu sub-menu">\n' + '                  <li ng-repeat="subSubItem in subItem.children"\n' + '                    ng-attr-id="{{ subSubItem.id }}"\n' + '                    ng-class="{divider: subSubItem.type == \'sub-group\', active: matchRoute(subSubItem.route).subModule}">\n' + '                      <a ng-if="subSubItem.type == \'sub-item\'"\n' + '                        ng-href="{{ subSubItem.route }}">\n' + '                        {{ i18n ? i18n[subSubItem.id] : \'\' }}</a>\n' + '                      <span ng-if="subSubItem.type == \'sub-group\'">{{ i18n ? i18n[subSubItem.id] : \'\' }}</span>\n' + '                  </li>\n' + '              </ul>\n' + '            </li>\n' + '          </ul>\n' + '          <ul ng-if="item.type === \'search-item\'" class="dropdown-menu searchbar">\n' + '            <li>\n' + '              <div class="ark-filter-bar">\n' + '                <div class="input-container" stop-close>\n' + '                  <input type="text" ng-model="searchbar.searchText" class="form-control filter-search-box" placeholder="Search">\n' + '                  <span class="icon-search search-box-icon"></span>\n' + '                  <span class="icon-close search-box-cancel" ng-show="hasContent" ng-click="clearInputText()"></span>\n' + '                  <div class="spinner-container input-spinner" ng-show="isSearching">\n' + '                    <div class="spin-circle"></div>\n' + '                    <div class="spin-inner-circle"></div>\n' + '                  </div>\n' + '                </div>\n' + '                <div ng-if="displayDropdown" class="dropdown open">\n' + '                  <ul class="dropdown-menu filter-dropdown search-result" aria-labelledby="filterDropdown">\n' + '                    <li ng-repeat="item in items" ng-init="breakIndex = item.toLowerCase().indexOf(prevSearchText.toLowerCase())">\n' + '                      <a class="items-found" ng-click="clickItem(item)">\n' + '                        {{ item.substring(0, breakIndex) }}<b>{{ item.substring(breakIndex, (breakIndex + prevSearchText.length)) }}</b>{{ item.substring((breakIndex + prevSearchText.length)) }}\n' + '                      </a>\n' + '                    </li>\n' + '                    <li ng-if="items.length === 0">\n' + '                      <a class="not-found">\n' + '                        Search for "<b>{{ prevSearchText }}</b>" not found\n' + '                      </a>\n' + '                    </li>\n' + '                  </ul>\n' + '                </div>\n' + '              </div>\n' + '            </li>\n' + '          </ul>\n' + '        </li>\n' + '      </ul>\n' + '    </div><!-- /.navbar-collapse -->\n' + '  </div><!-- /.container-fluid -->\n' + '</nav>\n');
    $templateCache.put('ark-nested-search/ark-nested-search.html', '<span class="ark-nested-search">\r' + '\n' + '  <span class="searchContainer" style="width: calc(100% - 72px)">\r' + '\n' + '    <span class="fonticon icon-search"></span>\r' + '\n' + '    <input ng-keydown="searchKeyPress($event)" placeholder="Search Items" class="form-control nestedSearchInput" ng-model="search.searchValue">\r' + '\n' + '    <span ng-if="!delayPromise">\r' + '\n' + '      <span ng-if="search.searchValue && searchResults.length" class="searchcount">\r' + '\n' + '        {{ currSearchIndex + 1 }} of {{ searchResults.length }}\r' + '\n' + '      </span>\r' + '\n' + '      <span ng-if="search.searchValue && !searchResults.length" class="searchcount">\r' + '\n' + '        0 results\r' + '\n' + '      </span>\r' + '\n' + '      <span ng-show="search.searchValue && !delayPromise" class="icon-close search-box-cancel close-span ark-fonticon" ng-click="search.searchValue = \'\'">\r' + '\n' + '      </span>\r' + '\n' + '    </span>\r' + '\n' + '    <span ng-if="delayPromise && config.delay" class="searchcount wait">waiting...</span>\r' + '\n' + '  </span>\r' + '\n' + '  <span>\r' + '\n' + '    <button ng-disabled="!searchResults.length" ng-click="switchPrimaryResult(\'next\')" type="button" class="nextResult btn btn-default fonticon icon-iw-circle-no-chevron-down" style="padding: 2px 12px"></button><!--\r' + '\n' + '    --><button ng-disabled="!searchResults.length" ng-click="switchPrimaryResult(\'previous\')" type="button" class="previousResult btn btn-default fonticon icon-iw-circle-no-chevron-up" style="padding: 2px 12px; margin-left:1px;"></button>\r' + '\n' + '  </span>\r' + '\n' + '</span>\r' + '\n');
    $templateCache.put('ark-nested-tree/ark-nested-tree.html', '<div class="ark-nested-tree panel panel-default"\n' + '  ng-class="{ \'no-border\': !showBorder }"\n' + '  filter-treeview="true"\n' + '  tree-id="myTree"\n' + '  tree-model="model"\n' + '  node-id="id"\n' + '  node-label="label"\n' + '  node-children="items"\n' + '  tree-name="{{treeName}}"\n' + '  level-depth="0"\n' + '  node-unselectable="unselectable"\n' + '  node-html-content="htmlContent"\n' + '  max-child-height="maxHeight">\n' + '</div>\n');
    $templateCache.put('ark-select/ark-select.html', '<div class="ark-select-wrapper bootstrap-select dropdown-menu" ng-class="{ scrollable: $matches.length > 10 }">\n' + '  <ul tabindex="-1" class="inner select dropdown-menu selectpicker" ng-show="$isVisible()" role="select" style="display:block;">\n' + '    <li role="presentation" ng-repeat="match in $matches" ng-class="{selected: $isActive($index)}"><!-- ng-class="{active: $isActive($index)}" -->\n' + '      <a style="cursor: default;" role="menuitem" tabindex="-1" id=\'{{ $parentId + "-" + (match.value.name || match.value.id || "select-default-id-"+match.label) }}\' ng-checked="$isActive($index)" ng-click="$select($index, $event)">\n' + '        <span ng-bind="match.label"></span>\n' + '        <i class="{{$iconCheckmark}} pull-right" ng-if="$isMultiple && $isActive($index)"><!-- --></i>\n' + '      </a>\n' + '    </li>\n' + '  </ul>\n' + '</div>\n');
    $templateCache.put('ark-select/tooltip.tpl.html', '<div class="tooltip in" ng-show="title">\n' + '  <div class="tooltip-arrow"></div>\n' + '  <div class="tooltip-inner" ng-bind="title"></div>\n' + '</div>\n');
    $templateCache.put('ark-side-tabs/ark-side-tabs.html', '<div class="side-tabs-container">\r' + '\n' + '  <ul class="nav nav-side-tabs">\r' + '\n' + '    <li ng-repeat="tab in tabs" ng-class="{active: $index === selectedItemIndex}" ng-click="setActive($index)">\r' + '\n' + '      <a href><span class="fonticon {{ tab.icon }}" ng-if="tab.icon"></span>{{ tab.title }}</a>\r' + '\n' + '    </li>\r' + '\n' + '  </ul>\r' + '\n' + '  <div class="tabs-contents" style="width: calc(100% - 140px)">\r' + '\n' + '    <div ng-if="!reload">\r' + '\n' + '      <div ng-include ng-repeat="tab in tabs" src="tab.templateUrl" ng-show="$index === selectedItemIndex"></div>\r' + '\n' + '    </div>\r' + '\n' + '    <div ng-if="reload">\r' + '\n' + '      <div ng-include src="selectedTemplate"></div>\r' + '\n' + '    </div>\r' + '\n' + '  </div>\r' + '\n' + '</div>\r' + '\n');
    $templateCache.put('ark-sidebar/ark-sidebar.html', '<div class="ark-sidebar" ng-hide="!showSidebar">\r' + '\n' + '  <div class="ark-sidebar-container" ng-class="{\'ark-sidebar-shadow\': showShadow}">\r' + '\n' + '    <div ng-include="template"></div>\r' + '\n' + '  </div>\r' + '\n' + '</div>\r' + '\n');
    $templateCache.put('ark-slider/ark-slider.html', '<div class="slider-track" ng-class="{\'slider-active\': isActive}">\n' + '  <span ng-transclude ng-mousedown="setActive()" ng-mouseup="setActive()"></span>\n' + '  <div class="slider-value-container"\n' + '  ng-class="{\'slider-value-container-active\': isActive}" ng-if="!useTooltip">\n' + '    {{inputValue}}<span ng-if="showPercentage">&#37;</span>\n' + '  </div>\n' + '  <div class="slider-fill">\n' + '    <div ng-show="isActive && useTooltip" class="slider-value">\n' + '      {{inputValue}}<span ng-if="showPercentage">&#37;</span>\n' + '      <div class="arrow-bottom"></div>\n' + '    </div>\n' + '    <div class="slider-thumb"></div>\n' + '  </div>\n' + '</div>\n');
    $templateCache.put('ark-tags/ark-tags.html', '<div class="ark-tags">\r' + '\n' + '  <span>\r' + '\n' + '    <span ng-repeat="tag in tagList" ng-click="removeTag(tag)" class="tag animated pulse">\r' + '\n' + '      <span class="tag-label">{{ tag }}</span>\r' + '\n' + '      <a class="tagsinput-remove-link">\r' + '\n' + '        <span class="fonticon icon-close"></span>\r' + '\n' + '      </a>\r' + '\n' + '    </span>\r' + '\n' + '  </span>\r' + '\n' + '  <div class="tagsinput-add-container">\r' + '\n' + '    <div ng-click="addTag()" class="tagsinput-add">\r' + '\n' + '      <span class="fonticon icon-add"></span>\r' + '\n' + '    </div>\r' + '\n' + '    <input ng-model="inputTag" placeholder="Add a Tag" id="tagsinput_tag" value="" style="color: rgb(102, 102, 102);">\r' + '\n' + '  </div>\r' + '\n' + '</div>\r' + '\n');
    $templateCache.put('ark-time-picker/ark-time-picker.html', '<div class="ark-timepicker">\n' + '  <div class="timepicker-header" ng-if="widgetMode">\n' + '    <b>{{ headerLabel }}</b>\n' + '  </div>\n' + '  <div class="timepicker-content">\n' + '    <div class="col-container first">\n' + '      <div class="icon-iw-circle-no-chevron-up arrow" ng-if="widgetMode" while-pressed="addHour()"></div>\n' + '      <div class="dropdown open">\n' + '        <input type="text" maxlength="2" ng-model="hour" ng-click="showHour()" ng-blur="validateHour()">\n' + '        <ul ng-show="showHourList" class="dropdown-menu">\n' + '          <li ng-repeat="list in hourList">\n' + '            <a href ng-mousedown="selectHour(list)" ng-class="{selected: list === hour}">\n' + '              {{ list }}\n' + '            </a>\n' + '          </li>\n' + '        </ul>\n' + '      </div>\n' + '      <div class="icon-iw-circle-no-chevron-down arrow" ng-if="widgetMode" while-pressed="minusHour()"></div>\n' + '    </div>\n' + '\n' + '    <div class="col-container column"><b>:</b></div>\n' + '\n' + '    <div class="col-container">\n' + '      <div class="icon-iw-circle-no-chevron-up arrow" ng-if="widgetMode" while-pressed="addMinute()"></div>\n' + '      <div class="dropdown open">\n' + '        <input type="text" maxlength="2" ng-model="minute" ng-click="showMinute()" ng-blur="validateMinute()">\n' + '        <ul ng-show="showMinuteList" class="dropdown-menu">\n' + '          <li ng-repeat="list in minuteList">\n' + '            <a href ng-mousedown="selectMinute(list)" ng-class="{selected: list===minute}">\n' + '              {{ list }}\n' + '            </a>\n' + '          </li>\n' + '        </ul>\n' + '      </div>\n' + '      <div class="icon-iw-circle-no-chevron-down arrow" ng-if="widgetMode" while-pressed="minusMinute()"></div>\n' + '    </div>\n' + '\n' + '    <div class="col-container last">\n' + '      <div class="icon-iw-circle-no-chevron-up arrow" ng-if="widgetMode" ng-click="changeNoon()"></div>\n' + '      <input type="text" maxlength="2" ng-model="noon" ng-blur="validateNoon()">\n' + '      <div class="icon-iw-circle-no-chevron-down arrow" ng-if="widgetMode" ng-click="changeNoon()"></div>\n' + '    </div>\n' + '\n' + '    <div class="col-container last" ng-if="timezoneMode">\n' + '      <div class="icon-iw-circle-no-chevron-up arrow timezone" ng-if="widgetMode" ng-click="addTimeZone()"></div>\n' + '      <div class="dropdown open">\n' + '        <input type="text" class="timezone" maxlength="9" ng-model="timeZone" ng-click="showTimeZone()" ng-blur="validateTimeZone()" readonly>\n' + '        <ul ng-show="showTimeZoneList" class="dropdown-menu timezone">\n' + '          <li ng-repeat="list in timeZoneList">\n' + '            <a href ng-mousedown="selectTimeZone(list, $index)" class="timezone" ng-class="{selected: list === timeZone}">\n' + '              {{ list }}\n' + '            </a>\n' + '          </li>\n' + '        </ul>\n' + '      </div>\n' + '      <div class="icon-iw-circle-no-chevron-down arrow timezone" ng-if="widgetMode" ng-click="minusTimeZone()"></div>\n' + '    </div>\n' + '  </div>\n' + '</div>\n');
    $templateCache.put('ark-toolbar/ark-toolbar.html', '<div class="ark-toolbar {{options.toolbarContainer}} {{options.theme}}-theme" style="{{options.toolbarStyle}}">\n' + '  <ul class="lefttoolbar ark-toolbar-buttons {{options.leftButtonContainer}}">\n' + '    <li ng-repeat="button in options.lefttoolbar"\n' + '      ng-click="button.click($event, button)"\n' + '      ng-href="{{button.href}}"\n' + '      ng-class="{\'non-clickable\': button.nonClickable, \'spacer\' : button.spacer}"\n' + '      id="{{button.id}}"\n' + '      class="{{button.class}}">\n' + '      <span\n' + '        class="{{button.icon}} {{button.buttonStyleClass}} ark-fonticon"\n' + '        data-toggle="tooltip"\n' + '        data-placement="bottom"\n' + '        title="{{button.tooltipTitle}}"\n' + '        ng-if="button.icon"></span>\n' + '      <span\n' + '        class="icon-title"\n' + '        title="{{button.tooltipTitle}}"\n' + '        ng-if="button.title">\n' + '        {{ button.title }}\n' + '      </span>\n' + '      <div ng-if="button.select" class="btn-group bootstrap-select show-tick">\n' + '        <button ng-if="!button.select.multiple" ark-select type="button" class="btn btn-default dropdown-toggle selectpicker"\n' + '        ng-model="button.select.value"\n' + '        id="{{ button.select.id }}"\n' + '        ng-options="{{button.select.options}}"\n' + '        placeholder="{{button.select.placeholder}}"\n' + '        ></button>\n' + '        <button ng-if="button.select.multiple" ark-select type="button" class="btn btn-default dropdown-toggle selectpicker"\n' + '        ng-model="button.select.value"\n' + '        id="{{ button.select.id }}"\n' + '        ng-options="{{button.select.options}}"\n' + '        placeholder="{{button.select.placeholder}}"\n' + '        multiple\n' + '        ></button>\n' + '      </div>\n' + '      <div class="inline input-container" ng-if="button.input">\n' + '        <div class="spacer nonClickable"></div>\n' + '        <span class="{{button.input.icon}} ark-fonticon" ng-if="button.input.icon"></span>\n' + '        <input\n' + '          ng-if="!button.input.eventHandlers"\n' + '          ng-model="button.input.value"\n' + '          class="inline form-control search-input"\n' + '          ng-class="{{button.input.className}}"\n' + '          id="{{button.input.id}}"\n' + '          type="text"\n' + '          placeholder="{{button.input.placeholder}}" >\n' + '        <input\n' + '          ng-if="button.input.eventHandlers"\n' + '          ng-model="button.input.value"\n' + '          class="inline form-control search-input"\n' + '          ng-class="{{button.input.className}}"\n' + '          id="{{button.input.id}}"\n' + '          type="text"\n' + '          placeholder="{{button.input.placeholder}}"\n' + '          parse-handlers handler-array="button.input.eventHandlers">\n' + '        <span class="icon-close search-box-cancel close-span ark-fonticon" ng-show="button.input.value !== \'\'" ng-click="button.input.value = \'\'"></span>\n' + '        <div class="spacer nonClickable"></div>\n' + '      </div>\n' + '      <div ng-if="button.HTMLtemplate" ng-bind-html="button.HTMLtemplate" class="toolbar-template"></div>\n' + '    </li>\n' + '  </ul>\n' + '  <ul class="righttoolbar ark-toolbar-buttons {{options.rightButtonContainer}}">\n' + '    <li ng-repeat="button in options.righttoolbar"\n' + '      ng-click="button.click($event, button)"\n' + '      ng-href="{{button.href}}"\n' + '      ng-class="{\'non-clickable\': button.nonClickable, \'spacer\' : button.spacer}"\n' + '      id="{{button.id}}"\n' + '      class="{{button.class}}">\n' + '      <span\n' + '        class="{{button.icon}} {{button.buttonStyleClass}} ark-fonticon"\n' + '        data-toggle="tooltip"\n' + '        data-placement="bottom"\n' + '        title="{{button.tooltipTitle}}"\n' + '        ng-if="button.icon"></span>\n' + '      <span\n' + '        class="icon-title"\n' + '        title="{{button.tooltipTitle}}"\n' + '        ng-if="button.title">\n' + '        {{ button.title }}\n' + '      </span>\n' + '      <div ng-if="button.select" class="btn-group bootstrap-select show-tick">\n' + '        <button ng-if="!button.select.multiple" ark-select type="button" class="btn btn-default dropdown-toggle selectpicker"\n' + '        ng-model="button.select.value"\n' + '        id="{{ button.select.id }}"\n' + '        ng-options="{{button.select.options}}"\n' + '        placeholder="{{button.select.placeholder}}"\n' + '        ></button>\n' + '        <button ng-if="button.select.multiple" ark-select type="button" class="btn btn-default dropdown-toggle selectpicker"\n' + '        ng-model="button.select.value"\n' + '        id="{{ button.select.id }}"\n' + '        ng-options="{{button.select.options}}"\n' + '        placeholder="{{button.select.placeholder}}"\n' + '        multiple\n' + '        ></button>\n' + '      </div>\n' + '\n' + '      <div class="inline input-container" ng-if="button.input">\n' + '        <div class="spacer nonClickable"></div>\n' + '        <span class="{{button.input.icon}} ark-fonticon" ng-if="button.input.icon"></span>\n' + '        <input\n' + '          ng-if="!button.input.eventHandlers"\n' + '          ng-model="button.input.value"\n' + '          class="inline form-control search-input"\n' + '          type="text"\n' + '          placeholder="{{button.input.placeholder}}" >\n' + '        <input\n' + '          ng-if="button.input.eventHandlers"\n' + '          ng-model="button.input.value"\n' + '          class="inline form-control search-input"\n' + '          type="text"\n' + '          placeholder="{{button.input.placeholder}}"\n' + '          parse-handlers handler-array="button.input.eventHandlers" >\n' + '        <span class="icon-close search-box-cancel close-span ark-fonticon" ng-show="button.input.value !== \'\'" ng-click="button.input.value = \'\'"></span>\n' + '        <div class="spacer nonClickable"></div>\n' + '      </div>\n' + '      <div ng-if="button.HTMLtemplate" ng-bind-html="button.HTMLtemplate" class="toolbar-template"></div>\n' + '    </li>\n' + '  </ul>\n' + '</div>\n');
  }
]);
'use strict';
angular.module('ark-components').controller('arkAppLauncherCtrl', [
  '$scope',
  '$window',
  '$timeout',
  '$log',
  '_',
  'arkNavMenuModel',
  function ($scope, $window, $timeout, $log, _, arkNavMenuModel) {
    var delegate = $scope.delegate;
    $scope.customAction = function customAction(item) {
      var confirmation;
      if (item.id && item.url && delegate.customAction[item.id]) {
        if (item.requireConfirmation) {
          confirmation = $window.confirm(delegate.localization.localizedStrings.ARE_YOU_SURE);
          if (confirmation) {
            delegate.customAction[item.id](item.url);
          }
        } else {
          delegate.customAction[item.id](item.url);
        }
      }
    };
    (function init() {
      var i18n = $scope.appSettings.i18n[delegate.localization.currentLanguage], localization = delegate.localization;
      $scope.user = $scope.userData.user;
      $scope.usermenu = arkNavMenuModel($scope.appSettings.usermenu, i18n);
      $scope.currentAppName = $scope.appSettings.appDisplayName;
      $scope.aboutApplication = delegate.aboutApplication;
      $scope.baseUrlAssets = $scope.appSettings.baseUrlAssets;
      function onTranslateChangeSuccess() {
        $scope.currentLanguage = _.findWhere(localization.languages, { id: localization.currentLanguageId });
        $scope.usermenu = arkNavMenuModel($scope.appSettings.usermenu, localization.localizedStrings);
      }
      if (localization) {
        $scope.localization = localization;
        $scope.localizationIcons = {};
        _.each(localization.languages, function (item) {
          var country = /\-([^\-]*)/.exec(item.id)[1];
          $scope.localizationIcons[item.id] = 'country-' + country.toLowerCase();
        });
        // Listen when translation change
        // TODO: Refactor
        $scope.$root.$on('$translateChangeSuccess', onTranslateChangeSuccess);
        // Initial state
        onTranslateChangeSuccess();
        $scope.changeLanguage = function (langId) {
          var selectedLanguage = _.findWhere(localization.languages, { id: langId });
          if (selectedLanguage) {
            $scope.currentLanguage = selectedLanguage;
            if (localization.changeLanguage) {
              localization.changeLanguage(langId).then(function (localizedStrings) {
                localization.localizedStrings = localizedStrings;
              });
            }
          } else {
            $log.error('Could not change to language', langId, 'as it could not be found');
          }
        };
      }
      $scope.appGroups = $scope.userData.getAppGroups && $scope.userData.getAppGroups();  // TODO: get rid of previous line and replace it with following
                                                                                          // if ($scope.userData.widgets) {
                                                                                          //   $scope.appGroups = _.groupBy(_.where($scope.userData.widgets, {
                                                                                          //     'status': 'ok'
                                                                                          //   }), 'category');
                                                                                          // }
    }());
  }
]);
'use strict';
angular.module('ark-components').directive('arkAppLauncher', function () {
  return {
    templateUrl: 'ark-app-launcher/ark-app-launcher.html',
    restrict: 'E',
    transclude: false,
    replace: true,
    scope: {
      delegate: '=',
      helpmenu: '=',
      appSettings: '=',
      userData: '=',
      appLauncherEnable: '='
    },
    controller: 'arkAppLauncherCtrl'
  };
}).filter('truncate', function () {
  return function (value, wordwise, max, tail) {
    if (!value) {
      return '';
    }
    max = parseInt(max, 10);
    if (!max) {
      return value;
    }
    if (value.length <= max) {
      return value;
    }
    value = value.substr(0, max);
    if (wordwise) {
      var lastspace = value.lastIndexOf(' ');
      if (lastspace !== -1) {
        value = value.substr(0, lastspace);
      }
    }
    return value + (tail || '\u2026');
  };
});
/*jshint camelcase: false */
'use strict';
angular.module('ark-components').factory('arkNavMenuItemModel', function () {
  function arkNavMenuItemModel(item, i18n) {
    var processedItem;
    if (item) {
      processedItem = {};
      processedItem.id = item.id || '';
      processedItem.name = item.name || item.id || '';
      processedItem.fonticon = item.fonticon || '';
      processedItem.url = item.url || '';
      processedItem.target = item.target || '';
      processedItem.customAction = item.custom_action || false;
      processedItem.requireConfirmation = item.require_confirmation || false;
      processedItem.disable = item.disable || false;
      if (i18n && item.id && i18n[item.id]) {
        processedItem.name = i18n[item.id];
      }
      processedItem.isDivider = item.type && item.type === 'divider' || false;
    }
    return processedItem;
  }
  return arkNavMenuItemModel;
});
'use strict';
angular.module('ark-components').factory('arkNavMenuModel', [
  'arkNavMenuItemModel',
  '$log',
  function (arkNavMenuItemModel, $log) {
    function arkNavMenu(items, i18n) {
      var processedItems = [];
      if (items && angular.isArray(items)) {
        for (var i in items) {
          processedItems.push(arkNavMenuItemModel(items[i], i18n));
        }
      } else {
        $log.error('arkNavMenu: items not an array');
      }
      return processedItems;
    }
    return arkNavMenu;
  }
]);
'use strict';
angular.module('ark-components').directive('arkDatepickerPopupWrap', [
  '$templateCache',
  function ($templateCache) {
    return {
      restrict: 'EA',
      replace: true,
      transclude: true,
      template: $templateCache.get('ark-datepicker/ark-datepicker-popup-wrap.html'),
      link: function (scope, element) {
        element.bind('click', function (event) {
          event.preventDefault();
          event.stopPropagation();
        });
      }
    };
  }
]);
'use strict';
angular.module('ark-components').constant('arkDatepickerPopupConfig', {
  datepickerPopup: 'yyyy-MM-dd',
  currentText: 'Today',
  clearText: 'Clear',
  closeText: 'Done',
  closeOnDateSelection: true,
  appendToBody: false,
  showButtonBar: false
});
'use strict';
angular.module('ark-components').directive('arkDatepickerPopup', [
  '$compile',
  '$parse',
  '$document',
  '$position',
  'dateFilter',
  'arkDatepickerPopupConfig',
  function ($compile, $parse, $document, $position, dateFilter, arkDatepickerPopupConfig) {
    return {
      restrict: 'EA',
      require: 'ngModel',
      scope: {
        isOpen: '=?',
        currentText: '@',
        clearText: '@',
        closeText: '@',
        dateDisabled: '&'
      },
      link: function (scope, element, attrs, ngModel) {
        var dateFormat, closeOnDateSelection = angular.isDefined(attrs.closeOnDateSelection) ? scope.$parent.$eval(attrs.closeOnDateSelection) : arkDatepickerPopupConfig.closeOnDateSelection, appendToBody = angular.isDefined(attrs.datepickerAppendToBody) ? scope.$parent.$eval(attrs.datepickerAppendToBody) : arkDatepickerPopupConfig.appendToBody;
        scope.showButtonBar = angular.isDefined(attrs.showButtonBar) ? scope.$parent.$eval(attrs.showButtonBar) : arkDatepickerPopupConfig.showButtonBar;
        scope.getText = function (key) {
          return scope[key + 'Text'] || arkDatepickerPopupConfig[key + 'Text'];
        };
        attrs.$observe('arkDatepickerPopup', function (value) {
          dateFormat = value || arkDatepickerPopupConfig.datepickerPopup;
          ngModel.$render();
        });
        // popup element used to display calendar
        var popupEl = angular.element('<div ark-datepicker-popup-wrap><div ark-datepicker></div></div>');
        popupEl.attr({
          'ng-model': 'date',
          'ng-change': 'dateSelection()'
        });
        function cameltoDash(string) {
          return string.replace(/([A-Z])/g, function ($1) {
            return '-' + $1.toLowerCase();
          });
        }
        // datepicker element
        var datepickerEl = angular.element(popupEl.children()[0]);
        if (attrs.datepickerOptions) {
          angular.forEach(scope.$parent.$eval(attrs.datepickerOptions), function (value, option) {
            datepickerEl.attr(cameltoDash(option), value);
          });
        }
        angular.forEach([
          'minDate',
          'maxDate'
        ], function (key) {
          if (attrs[key]) {
            scope.$parent.$watch($parse(attrs[key]), function (value) {
              scope[key] = value;
            });
            datepickerEl.attr(cameltoDash(key), key);
          }
        });
        if (attrs.dateDisabled) {
          datepickerEl.attr('date-disabled', 'dateDisabled({ date: date, mode: mode })');
        }
        // TODO: reverse from dateFilter string to Date object
        function parseDate(viewValue) {
          if (!viewValue) {
            ngModel.$setValidity('date', true);
            return null;
          } else if (angular.isDate(viewValue) && !isNaN(viewValue)) {
            ngModel.$setValidity('date', true);
            return viewValue;
          } else if (angular.isString(viewValue)) {
            var date = new Date(viewValue);
            if (isNaN(date)) {
              ngModel.$setValidity('date', false);
              return undefined;
            } else {
              ngModel.$setValidity('date', true);
              return date;
            }
          } else {
            ngModel.$setValidity('date', false);
            return undefined;
          }
        }
        ngModel.$parsers.unshift(parseDate);
        // Inner change
        scope.dateSelection = function (dt) {
          if (angular.isDefined(dt)) {
            scope.date = dt;
          }
          ngModel.$setViewValue(scope.date);
          ngModel.$render();
          if (closeOnDateSelection) {
            scope.isOpen = false;
          }
        };
        element.bind('input change keyup', function () {
          scope.$apply(function () {
            scope.date = ngModel.$modelValue;
          });
        });
        // Outter change
        ngModel.$render = function () {
          var date = ngModel.$viewValue ? dateFilter(ngModel.$viewValue, dateFormat) : '';
          element.val(date);
          scope.date = parseDate(ngModel.$modelValue);
        };
        var documentClickBind = function (event) {
          if (scope.isOpen && event.target !== element[0]) {
            scope.$apply(function () {
              scope.isOpen = false;
            });
          }
        };
        var openCalendar = function () {
          scope.$apply(function () {
            scope.isOpen = true;
          });
        };
        scope.$watch('isOpen', function (value) {
          if (value) {
            scope.position = appendToBody ? $position.offset(element) : $position.position(element);
            scope.position.top = scope.position.top + element.prop('offsetHeight');
            $document.bind('click', documentClickBind);
            element.unbind('focus', openCalendar);
            element[0].focus();
          } else {
            $document.unbind('click', documentClickBind);
            element.bind('focus', openCalendar);
          }
        });
        scope.select = function (date) {
          if (date === 'today') {
            var today = new Date();
            if (angular.isDate(ngModel.$modelValue)) {
              date = new Date(ngModel.$modelValue);
              date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());
            } else {
              date = new Date(today.setHours(0, 0, 0, 0));
            }
          }
          scope.dateSelection(date);
        };
        var $popup = $compile(popupEl)(scope);
        if (appendToBody) {
          $document.find('body').append($popup);
        } else {
          element.after($popup);
        }
        scope.$on('$destroy', function () {
          $popup.remove();
          element.unbind('focus', openCalendar);
          $document.unbind('click', documentClickBind);
        });
      }
    };
  }
]);
'use strict';
angular.module('ark-components').constant('arkDatepickerConfig', {
  formatDay: 'd',
  formatMonth: 'MMMM',
  formatYear: 'yyyy',
  formatDayHeader: 'E',
  formatDayTitle: 'MMMM yyyy',
  formatMonthTitle: 'yyyy',
  datepickerMode: 'day',
  minMode: 'day',
  maxMode: 'year',
  showWeeks: false,
  startingDay: 0,
  yearRange: 20,
  minDate: null,
  maxDate: null
});
'use strict';
angular.module('ark-components').controller('arkDatepickerCtrl', [
  '$scope',
  '$attrs',
  '$parse',
  '$interpolate',
  '$log',
  'dateFilter',
  'arkDatepickerConfig',
  '_',
  function ($scope, $attrs, $parse, $interpolate, $log, dateFilter, arkDatepickerConfig, _) {
    var self = this, ngModelCtrl = { $setViewValue: angular.noop };
    // nullModelCtrl;
    // Configuration attributes
    angular.forEach([
      'formatDay',
      'formatMonth',
      'formatYear',
      'formatDayHeader',
      'formatDayTitle',
      'formatMonthTitle',
      'minMode',
      'maxMode',
      'showWeeks',
      'startingDay',
      'yearRange'
    ], function (key, index) {
      self[key] = angular.isDefined($attrs[key]) ? index < 8 ? $interpolate($attrs[key])($scope.$parent) : $scope.$parent.$eval($attrs[key]) : arkDatepickerConfig[key];
    });
    // Watchable attributes
    angular.forEach([
      'minDate',
      'maxDate'
    ], function (key) {
      if ($attrs[key]) {
        $scope.$parent.$watch($parse($attrs[key]), function (value) {
          self[key] = value ? new Date(value) : null;
          self.refreshView();
        });
      } else {
        self[key] = arkDatepickerConfig[key] ? new Date(arkDatepickerConfig[key]) : null;
      }
    });
    this.currentCalendarDate = angular.isDefined($attrs.initDate) ? $scope.$parent.$eval($attrs.initDate) : new Date();
    this.init = function (ngModelCtrl_) {
      ngModelCtrl = ngModelCtrl_;
      ngModelCtrl.$render = function () {
        self.render();
      };
    };
    this.render = function () {
      if (ngModelCtrl.$modelValue) {
        var date = $scope.timezoneMode ? new Date($scope.prevDate) : new Date(ngModelCtrl.$modelValue);
        var isValid = !isNaN(date);
        if (isValid) {
          this.currentCalendarDate = date;
        } else {
          $log.error('Datepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.');
        }
        ngModelCtrl.$setValidity('date', isValid);
      }
      this.refreshView();
    };
    this.refreshView = function () {
      if (this.mode) {
        this._refreshView();
        var date;
        if ($scope.timezoneMode) {
          date = new Date($scope.prevDate);
        } else {
          date = ngModelCtrl.$modelValue ? new Date(ngModelCtrl.$modelValue) : null;
        }
        ngModelCtrl.$setValidity('date-disabled', !date || this.mode && !this.isDisabled(date));
      }
    };
    this.createDateObject = function (date, format) {
      var model;
      if ($scope.timezoneMode) {
        model = new Date($scope.prevDate);
      } else {
        model = ngModelCtrl.$modelValue ? new Date(ngModelCtrl.$modelValue) : null;
      }
      return {
        date: date,
        label: dateFilter(date, format),
        selected: model && this.compare(date, model) === 0,
        disabled: this.isDisabled(date),
        current: this.compare(date, new Date()) === 0
      };
    };
    this.isDisabled = function (date) {
      return this.minDate && this.compare(date, this.minDate) < 0 || this.maxDate && this.compare(date, this.maxDate) > 0 || $scope.dateDisabled && $scope.dateDisabled({
        date: date,
        mode: $scope.datepickerMode
      });
    };
    // Split array into smaller arrays
    this.split = function (arr, size) {
      var arrays = [];
      while (arr.length > 0) {
        arrays.push(arr.splice(0, size));
      }
      return arrays;
    };
    $scope.select = function (date) {
      if ($scope.datepickerMode === self.minMode) {
        var dt = ngModelCtrl.$modelValue ? new Date(ngModelCtrl.$modelValue) : new Date(0, 0, 0, 0, 0, 0, 0);
        dt.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
        if ($scope.timepickerMode) {
          dt.setHours($scope.date.getHours());
          dt.setMinutes($scope.date.getMinutes());
        }
        $scope.date = dt;
        if ($scope.timepickerMode && $scope.timezoneMode) {
          // format date string for timezoneMode
          $scope.prevDate = dt;
          ngModelCtrl.$setViewValue(dt.toLocaleString() + ' ' + $scope.timeData.timeZone);
          ngModelCtrl.$render();
        } else if ($scope.timepickerMode) {
          // format date string for timepickerMode
          ngModelCtrl.$setViewValue(dt.toLocaleString());
          ngModelCtrl.$render();
        } else {
          // format date string for default
          ngModelCtrl.$setViewValue(dt);
          ngModelCtrl.$render();
        }
      } else {
        self.currentCalendarDate = date;
        $scope.datepickerMode = self.mode.previous;
      }
    };
    $scope.move = function (direction) {
      var year = self.currentCalendarDate.getFullYear() + direction * (self.mode.step.years || 0), month = self.currentCalendarDate.getMonth() + direction * (self.mode.step.months || 0);
      self.currentCalendarDate.setFullYear(year, month, 1);
      self.refreshView();
    };
    $scope.toggleMode = function () {
      $scope.datepickerMode = $scope.datepickerMode === self.maxMode ? self.minMode : self.mode.next;
    };
    // timepicker controller resources
    $scope.hourList = [
      '1',
      '2',
      '3',
      '4',
      '5',
      '6',
      '7',
      '8',
      '9',
      '10',
      '11',
      '12'
    ];
    $scope.minuteList = [
      '00',
      '05',
      '10',
      '15',
      '20',
      '25',
      '30',
      '35',
      '40',
      '45',
      '50',
      '55'
    ];
    $scope.timeZoneList = [
      'GMT-12:00',
      'GMT-11:00',
      'GMT-10:00',
      'GMT-09:00',
      'GMT-08:00',
      'GMT-07:00',
      'GMT-06:00',
      'GMT-05:00',
      'GMT-04:30',
      'GMT-04:00',
      'GMT-03:30',
      'GMT-03:00',
      'GMT-02:00',
      'GMT-01:00',
      'GMT+00:00',
      'GMT+01:00',
      'GMT+02:00',
      'GMT+03:00',
      'GMT+03:30',
      'GMT+04:00',
      'GMT+05:00',
      'GMT+05:30',
      'GMT+05:45',
      'GMT+06:00',
      'GMT+06:30',
      'GMT+07:00',
      'GMT+08:00',
      'GMT+09:00',
      'GMT+09:30',
      'GMT+10:00',
      'GMT+11:00',
      'GMT+12:00',
      'GMT+13:00'
    ];
    $scope.showHourList = false;
    $scope.showMinuteList = false;
    $scope.showTimeZoneList = false;
    $scope.timeZoneShow = false;
    // initialize timeData object for two-way data binding within child scopes (i.e. within ng-if)
    $scope.timeData = {
      hour: 0,
      minute: 0,
      noon: 'AM',
      timeZone: 'GMT-05:00'
    };
    var controller = this;
    // watches for changes to timeData variables
    $scope.$watchCollection('[timeData.hour, timeData.minute, timeData.noon, timeData.timeZone]', function () {
      if (!$scope.isInvalidHour() && !$scope.isInvalidMinute() && !$scope.isInvalidNoon()) {
        var newDate = angular.copy($scope.date);
        var hours = parseInt($scope.timeData.hour);
        var minutes = parseInt($scope.timeData.minute);
        if ($scope.timeData.noon === 'PM') {
          if (hours < 12) {
            hours = hours + 12;
          }
        } else {
          if (hours === 12) {
            hours = 0;
          }
        }
        newDate.setHours(hours);
        newDate.setMinutes(minutes);
        $scope.date = newDate;
        $scope.select(newDate);
      }
    });
    //Hour Section
    $scope.isInvalidHour = function () {
      return controller.isInvalidHour($scope.timeData.hour, $scope.timeData.noon);
    };
    controller.isInvalidHour = function (hour, noon) {
      return !hour || isNaN(hour) || hour.indexOf('.') !== -1 || hour.length > 2 || noon === 'AM' && (parseInt(hour) > 12 || parseInt(hour) < 0) || noon === 'PM' && (parseInt(hour) > 12 || parseInt(hour) < 1);
    };
    $scope.validateHour = function () {
      if ($scope.isInvalidHour()) {
        $scope.timeData.hour = $scope.prevHour;
      } else {
        $scope.prevHour = $scope.timeData.hour;
      }
      $scope.showHourList = false;
    };
    $scope.addHour = function () {
      if ($scope.timeData.noon === 'AM') {
        if ($scope.timeData.hour === '11') {
          $scope.timeData.noon = 'PM';
          $scope.timeData.hour = '12';
        } else {
          $scope.timeData.hour = parseInt($scope.timeData.hour) % 12 + 1 + '';
        }
      } else {
        if ($scope.timeData.hour === '11') {
          $scope.timeData.noon = 'AM';
        }
        $scope.timeData.hour = parseInt($scope.timeData.hour) % 12 + 1 + '';
      }
      $scope.prevHour = $scope.timeData.hour;
      $scope.prevNoon = $scope.timeData.noon;
    };
    $scope.minusHour = function () {
      if ($scope.timeData.noon === 'AM') {
        if ($scope.timeData.hour === '00' || $scope.timeData.hour === '0' || $scope.timeData.hour === '12') {
          $scope.timeData.noon = 'PM';
          $scope.timeData.hour = '11';
        } else {
          $scope.timeData.hour = parseInt($scope.timeData.hour) - 1 + '';
        }
      } else {
        if ($scope.timeData.hour === '12') {
          $scope.timeData.noon = 'AM';
        }
        $scope.timeData.hour = $scope.timeData.hour === '01' || $scope.timeData.hour === '1' ? $scope.timeData.hour = '12' : parseInt($scope.timeData.hour) - 1 + '';
      }
      $scope.prevHour = $scope.timeData.hour;
      $scope.prevNoon = $scope.timeData.noon;
    };
    // Minute section
    $scope.isInvalidMinute = function () {
      return controller.isInvalidMinute($scope.timeData.minute);
    };
    controller.isInvalidMinute = function (minute) {
      return !minute || isNaN(minute) || minute.indexOf('.') !== -1 || minute.length > 2 || parseInt(minute) > 59 || parseInt(minute) < 0;
    };
    $scope.formatNumber = function (input) {
      if (input.length === 1) {
        input = '0' + input;
      }
      return input;
    };
    $scope.addMinute = function () {
      if ($scope.timeData.minute === '59') {
        $scope.addHour();
      }
      $scope.timeData.minute = $scope.formatNumber((parseInt($scope.timeData.minute) + 1) % 60 + '');
      $scope.prevMinute = $scope.timeData.minute;
    };
    $scope.minusMinute = function () {
      if ($scope.timeData.minute === '0' || $scope.timeData.minute === '00') {
        $scope.minusHour();
      }
      $scope.timeData.minute = $scope.formatNumber((parseInt($scope.timeData.minute) + 59) % 60 + '');
      $scope.prevMinute = $scope.timeData.minute;
    };
    $scope.validateMinute = function () {
      if ($scope.isInvalidMinute()) {
        $scope.timeData.minute = $scope.prevMinute;
      } else {
        $scope.timeData.minute = $scope.formatNumber($scope.timeData.minute);
        $scope.prevMinute = $scope.timeData.minute;
      }
      $scope.showMinuteList = false;
    };
    // AM/PM section
    $scope.changeNoon = function () {
      if ($scope.timeData.noon === 'AM') {
        if ($scope.timeData.hour === '0' || $scope.timeData.hour === '00') {
          $scope.timeData.hour = '12';
          $scope.prevHour = $scope.timeData.hour;
        }
        $scope.timeData.noon = 'PM';
      } else {
        $scope.timeData.noon = 'AM';
      }
      $scope.prevNoon = $scope.timeData.noon;
    };
    $scope.validateNoon = function () {
      if (!$scope.isInvalidNoon()) {
        if ($scope.timeData.noon.toLowerCase() === 'pm' && $scope.timeData.hour === '0') {
          $scope.timeData.hour = '12';
          $scope.prevHour = $scope.timeData.hour;
        }
        $scope.timeData.noon = $scope.timeData.noon.toUpperCase();
        $scope.prevNoon = $scope.timeData.noon;
      } else {
        $scope.timeData.noon = $scope.prevNoon;
      }
    };
    $scope.isInvalidNoon = function () {
      return controller.isInvalidNoon($scope.timeData.noon);
    };
    // returns bool
    controller.isInvalidNoon = function (noon) {
      return noon.toUpperCase() !== 'AM' && noon.toUpperCase() !== 'PM';
    };
    // Timezone Section
    $scope.isInvalidTimeZone = function () {
      return !_.contains($scope.timeZoneList, $scope.timeData.timeZone);
    };
    $scope.validateTimeZone = function () {
      if ($scope.isInvalidTimeZone()) {
        $scope.timeData.timeZone = $scope.prevTimeZone;
      } else {
        $scope.prevTimeZone = $scope.timeData.timeZone;
      }
      $scope.showTimeZoneList = false;
    };
    $scope.addTimeZone = function () {
      if ($scope.timeZoneIndex > 0) {
        $scope.timeZoneIndex--;
      }
      $scope.timeData.timeZone = $scope.timeZoneList[$scope.timeZoneIndex];
      $scope.prevTimeZone = $scope.timeData.timeZone;
    };
    $scope.minusTimeZone = function () {
      if ($scope.timeZoneIndex < $scope.timeZoneList.length - 1) {
        $scope.timeZoneIndex++;
      }
      $scope.timeData.timeZone = $scope.timeZoneList[$scope.timeZoneIndex];
      $scope.prevTimeZone = $scope.timeData.timeZone;
    };
    // UI section
    $scope.showHour = function () {
      $scope.showHourList = true;
    };
    $scope.showMinute = function () {
      $scope.showMinuteList = true;
    };
    $scope.showTimeZone = function () {
      $scope.showTimeZoneList = true;
    };
    $scope.toggleTimeZone = function () {
      $scope.timeZoneShow = !$scope.timeZoneShow;
    };
    $scope.selectHour = function (item) {
      $scope.timeData.hour = item;
      $scope.prevHour = item;
    };
    $scope.selectMinute = function (item) {
      $scope.timeData.minute = item;
      $scope.prevMinute = item;
    };
    $scope.selectTimeZone = function (item, index) {
      $scope.timeData.timeZone = item;
      $scope.prevTimeZone = item;
      $scope.timeZoneIndex = index;
    };
    $scope.initializeTimeVars = function () {
      if ($scope.dateTimeDefault) {
        var dateTimeDefault = new Date($scope.dateTimeDefault);
        if (!isNaN(dateTimeDefault)) {
          $scope.date = angular.copy(dateTimeDefault);
        } else {
          $scope.date = new Date();
        }
      } else {
        $scope.date = new Date();
      }
      $scope.timeZoneIndex = 7;
      $scope.prevTimeZone = $scope.timeZoneList[$scope.timeZoneIndex];
      $scope.timeData.timeZone = $scope.timeZoneList[$scope.timeZoneIndex];
      var hours = $scope.date.getHours();
      var minutes = $scope.date.getMinutes();
      var noon;
      if (hours >= 12) {
        noon = 'PM';
        if (hours > 12) {
          hours = hours - 12;
        }
      } else {
        noon = 'AM';
      }
      if (minutes < 10) {
        minutes = '0' + minutes;
      }
      $scope.prevHour = hours.toString();
      $scope.timeData.hour = hours.toString();
      $scope.prevMinute = minutes.toString();
      $scope.timeData.minute = minutes.toString();
      $scope.prevNoon = noon;
      $scope.timeData.noon = noon;
    };
    (function init() {
      if ($scope.timepickerMode) {
        $scope.initializeTimeVars();
      }
      $scope.datepickerMode = $scope.datepickerMode || arkDatepickerConfig.datepickerMode;
    }());
  }
]);
'use strict';
angular.module('ark-components').directive('arkDatepicker', [
  '$templateCache',
  function ($templateCache) {
    return {
      restrict: 'EA',
      replace: true,
      template: $templateCache.get('ark-datepicker/ark-datepicker.html'),
      scope: {
        datepickerMode: '=?',
        dateDisabled: '&',
        timepickerMode: '@',
        timezoneMode: '@',
        dateTimeDefault: '@'
      },
      require: [
        'arkDatepicker',
        '?^ngModel'
      ],
      controller: 'arkDatepickerCtrl',
      link: function (scope, element, attrs, ctrls) {
        var datepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];
        if (ngModelCtrl) {
          datepickerCtrl.init(ngModelCtrl);
        }
        scope.timepickerMode = scope.$eval(scope.timepickerMode) || false;
        scope.timezoneMode = scope.$eval(scope.timezoneMode) || false;
      }
    };
  }
]);
'use strict';
angular.module('ark-components').directive('arkDaypicker', [
  'dateFilter',
  '$templateCache',
  function (dateFilter, $templateCache) {
    return {
      restrict: 'EA',
      replace: true,
      template: $templateCache.get('ark-datepicker/ark-daypicker.html'),
      require: '^arkDatepicker',
      link: function (scope, element, attrs, ctrl) {
        scope.showWeeks = ctrl.showWeeks;
        ctrl.mode = {
          step: { months: 1 },
          next: 'month'
        };
        function getDaysInMonth(year, month) {
          return new Date(year, month, 0).getDate();
        }
        function getDates(startDate, n) {
          var dates = new Array(n), current = new Date(startDate), i = 0;
          current.setHours(12);
          // Prevent repeated dates because of timezone bug
          while (i < n) {
            dates[i++] = new Date(current);
            current.setDate(current.getDate() + 1);
          }
          return dates;
        }
        ctrl._refreshView = function () {
          var year = ctrl.currentCalendarDate.getFullYear(), month = ctrl.currentCalendarDate.getMonth(), firstDayOfMonth = new Date(year, month, 1), difference = ctrl.startingDay - firstDayOfMonth.getDay(), numDisplayedFromPreviousMonth = difference > 0 ? 7 - difference : -difference, firstDate = new Date(firstDayOfMonth), numDates = 0;
          if (numDisplayedFromPreviousMonth > 0) {
            firstDate.setDate(-numDisplayedFromPreviousMonth + 1);
            numDates += numDisplayedFromPreviousMonth;  // Previous
          }
          numDates += getDaysInMonth(year, month + 1);
          // Current
          numDates += (7 - numDates % 7) % 7;
          // Next
          var days = getDates(firstDate, numDates);
          for (var i = 0; i < numDates; i++) {
            days[i] = angular.extend(ctrl.createDateObject(days[i], ctrl.formatDay), { secondary: days[i].getMonth() !== month });
          }
          scope.labels = new Array(7);
          for (var j = 0; j < 7; j++) {
            if (ctrl.formatDayHeader === 'E') {
              //Substring grabs just the first character. This is to match AW design mockups
              scope.labels[j] = dateFilter(days[j].date, 'EEE').substr(0, 1);
            } else {
              scope.labels[j] = dateFilter(days[j].date, ctrl.formatDayHeader);
            }
          }
          scope.title = dateFilter(ctrl.currentCalendarDate, ctrl.formatDayTitle);
          scope.rows = ctrl.split(days, 7);
          if (scope.showWeeks) {
            scope.weekNumbers = [];
            var weekNumber = getISO8601WeekNumber(scope.rows[0][0].date), numWeeks = scope.rows.length;
            while (scope.weekNumbers.push(weekNumber++) < numWeeks) {
            }
          }
        };
        ctrl.compare = function (date1, date2) {
          return new Date(date1.getFullYear(), date1.getMonth(), date1.getDate()) - new Date(date2.getFullYear(), date2.getMonth(), date2.getDate());
        };
        function getISO8601WeekNumber(date) {
          var checkDate = new Date(date);
          checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
          // Thursday
          var time = checkDate.getTime();
          checkDate.setMonth(0);
          // Compare with Jan 1
          checkDate.setDate(1);
          return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
        }
        ctrl.refreshView();
      }
    };
  }
]);
'use strict';
angular.module('ark-components').directive('arkMonthpicker', [
  'dateFilter',
  '$templateCache',
  function (dateFilter, $templateCache) {
    return {
      restrict: 'EA',
      replace: true,
      template: $templateCache.get('ark-datepicker/ark-monthpicker.html'),
      require: '^arkDatepicker',
      link: function (scope, element, attrs, ctrl) {
        ctrl.mode = {
          step: { years: 1 },
          previous: 'day',
          next: 'year'
        };
        ctrl._refreshView = function () {
          var months = new Array(12), year = ctrl.currentCalendarDate.getFullYear();
          for (var i = 0; i < 12; i++) {
            months[i] = ctrl.createDateObject(new Date(year, i, 1), ctrl.formatMonth);
          }
          scope.title = dateFilter(ctrl.currentCalendarDate, ctrl.formatMonthTitle);
          scope.rows = ctrl.split(months, 3);
        };
        ctrl.compare = function (date1, date2) {
          return new Date(date1.getFullYear(), date1.getMonth()) - new Date(date2.getFullYear(), date2.getMonth());
        };
        ctrl.refreshView();
      }
    };
  }
]);
'use strict';
angular.module('ark-components').directive('arkYearpicker', [
  'dateFilter',
  '$templateCache',
  function (dateFilter, $templateCache) {
    return {
      restrict: 'EA',
      replace: true,
      template: $templateCache.get('ark-datepicker/ark-yearpicker.html'),
      require: '^arkDatepicker',
      link: function (scope, element, attrs, ctrl) {
        ctrl.mode = {
          step: { years: ctrl.yearRange },
          previous: 'month'
        };
        ctrl._refreshView = function () {
          var range = this.mode.step.years, years = new Array(range), start = parseInt((ctrl.currentCalendarDate.getFullYear() - 1) / range, 10) * range + 1;
          for (var i = 0; i < range; i++) {
            years[i] = ctrl.createDateObject(new Date(start + i, 0, 1), ctrl.formatYear);
          }
          scope.title = [
            years[0].label,
            years[range - 1].label
          ].join(' - ');
          scope.rows = ctrl.split(years, 5);
        };
        ctrl.compare = function (date1, date2) {
          return date1.getFullYear() - date2.getFullYear();
        };
        ctrl.refreshView();
      }
    };
  }
]);
'use strict';
angular.module('ark-components').factory('$position', [
  '$document',
  '$window',
  function ($document, $window) {
    function getStyle(el, cssprop) {
      if (el.currentStyle) {
        //IE
        return el.currentStyle[cssprop];
      } else if ($window.getComputedStyle) {
        return $window.getComputedStyle(el)[cssprop];
      }
      // finally try and get inline style
      return el.style[cssprop];
    }
    /**
     * Checks if a given element is statically positioned
     * @param element - raw DOM element
     */
    function isStaticPositioned(element) {
      return (getStyle(element, 'position') || 'static') === 'static';
    }
    /**
     * returns the closest, non-statically positioned parentOffset of a given element
     * @param element
     */
    var parentOffsetEl = function (element) {
      var docDomEl = $document[0];
      var offsetParent = element.offsetParent || docDomEl;
      while (offsetParent && offsetParent !== docDomEl && isStaticPositioned(offsetParent)) {
        offsetParent = offsetParent.offsetParent;
      }
      return offsetParent || docDomEl;
    };
    return {
      position: function (element) {
        var elBCR = this.offset(element);
        var offsetParentBCR = {
            top: 0,
            left: 0
          };
        var offsetParentEl = parentOffsetEl(element[0]);
        if (offsetParentEl !== $document[0]) {
          offsetParentBCR = this.offset(angular.element(offsetParentEl));
          offsetParentBCR.top += offsetParentEl.clientTop - offsetParentEl.scrollTop;
          offsetParentBCR.left += offsetParentEl.clientLeft - offsetParentEl.scrollLeft;
        }
        var boundingClientRect = element[0].getBoundingClientRect();
        return {
          width: boundingClientRect.width || element.prop('offsetWidth'),
          height: boundingClientRect.height || element.prop('offsetHeight'),
          top: elBCR.top - offsetParentBCR.top,
          left: elBCR.left - offsetParentBCR.left
        };
      },
      offset: function (element) {
        var boundingClientRect = element[0].getBoundingClientRect();
        return {
          width: boundingClientRect.width || element.prop('offsetWidth'),
          height: boundingClientRect.height || element.prop('offsetHeight'),
          top: boundingClientRect.top + ($window.pageYOffset || $document[0].documentElement.scrollTop),
          left: boundingClientRect.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft)
        };
      },
      positionElements: function (hostEl, targetEl, positionStr, appendToBody) {
        var positionStrParts = positionStr.split('-');
        var pos0 = positionStrParts[0], pos1 = positionStrParts[1] || 'center';
        var hostElPos, targetElWidth, targetElHeight, targetElPos;
        hostElPos = appendToBody ? this.offset(hostEl) : this.position(hostEl);
        targetElWidth = targetEl.prop('offsetWidth');
        targetElHeight = targetEl.prop('offsetHeight');
        var shiftWidth = {
            center: function () {
              return hostElPos.left + hostElPos.width / 2 - targetElWidth / 2;
            },
            left: function () {
              return hostElPos.left;
            },
            right: function () {
              return hostElPos.left + hostElPos.width;
            }
          };
        var shiftHeight = {
            center: function () {
              return hostElPos.top + hostElPos.height / 2 - targetElHeight / 2;
            },
            top: function () {
              return hostElPos.top;
            },
            bottom: function () {
              return hostElPos.top + hostElPos.height;
            }
          };
        switch (pos0) {
        case 'right':
          targetElPos = {
            top: shiftHeight[pos1](),
            left: shiftWidth[pos0]()
          };
          break;
        case 'left':
          targetElPos = {
            top: shiftHeight[pos1](),
            left: hostElPos.left - targetElWidth
          };
          break;
        case 'bottom':
          targetElPos = {
            top: shiftHeight[pos0](),
            left: shiftWidth[pos1]()
          };
          break;
        default:
          targetElPos = {
            top: hostElPos.top - targetElHeight,
            left: shiftWidth[pos1]()
          };
          break;
        }
        return targetElPos;
      }
    };
  }
]);
'use strict';
angular.module('ark-components').controller('arkFilterBarCtrl', [
  '$scope',
  function ($scope) {
    $scope.hasContent = false;
    $scope.isSearching = false;
    $scope.displayDropdown = false;
    $scope.items = [];
    $scope.clearInputText = function () {
      $scope.searchText = '';
    };
    $scope.clickItem = function (selectedItem) {
      $scope.selectFunction({ item: selectedItem });
      $scope.clickedItem = true;
      $scope.prevSearchText = selectedItem;
      $scope.searchText = selectedItem;
      $scope.isSearching = false;
      $scope.displayDropdown = false;
    };
    $scope.searchForContent = function (searchText) {
      $scope.isSearching = true;
      $scope.prevSearchText = searchText;
      $scope.filterFunction({
        searchText: $scope.searchText,
        callback: function (data) {
          $scope.items = $scope.itemsLength ? data.slice(0, parseInt($scope.itemsLength)) : data.slice(0, 3);
          $scope.isSearching = false;
          $scope.displayDropdown = true;
        }
      });
    };
  }
]);
'use strict';
angular.module('ark-components').directive('arkFilterBar', [
  '$timeout',
  function ($timeout) {
    return {
      restrict: 'E',
      scope: {
        itemsLength: '@listLength',
        filterFunction: '&',
        selectFunction: '&',
        delay: '@searchDelay'
      },
      controller: 'arkFilterBarCtrl',
      templateUrl: 'ark-filter-bar/ark-filter-bar.html',
      link: function ($scope) {
        $scope.newSearchText = '';
        $scope.$watch('searchText', function (newVal) {
          if (!$scope.clickedItem) {
            if (!newVal) {
              $scope.hasContent = false;
              $scope.displayDropdown = false;
            } else {
              $scope.hasContent = true;
              $scope.newSearchText = newVal;
              var delay = $scope.delay ? parseInt($scope.delay) : 500;
              $timeout(function () {
                if ($scope.newSearchText === newVal && $scope.searchText) {
                  $scope.searchForContent(newVal);
                }
              }, delay);
            }
          } else {
            $scope.clickedItem = false;
          }
        });
      }
    };
  }
]);
'use strict';
angular.module('ark-components').controller('arkFooterCtrl', [
  '$scope',
  function ($scope) {
    var self = this;
    $scope.i18n = {};
    self.defaultTexts = {
      'COPYRIGHT': 'Genesys',
      'PRIVACY_POLICY': 'Privacy Policy',
      'TERMS_OF_USE': 'Terms of Use',
      'POWERED_BY': 'Powered by Genesys'
    };
    function updateLocale() {
      if ($scope.locale) {
        for (var name in self.defaultTexts) {
          if (self.defaultTexts.hasOwnProperty(name)) {
            $scope.i18n[name] = $scope.locale[name] || self.defaultTexts[name];
          }
        }
      }
    }
    $scope.$watch('locale', updateLocale, true);
    if (!$scope.locale) {
      $scope.i18n = this.defaultTexts;
    }
    $scope.currentYear = new Date().getFullYear();
  }
]);
'use strict';
angular.module('ark-components').directive('arkFooter', function () {
  return {
    restrict: 'E',
    replace: true,
    scope: {
      tenantLogoLink: '@',
      genesysLogoLink: '@',
      termsAndConditions: '@',
      privacyPolicy: '@',
      appVersion: '=',
      footerSize: '@',
      locale: '='
    },
    templateUrl: 'ark-footer/ark-footer.html',
    controller: 'arkFooterCtrl',
    link: function ($scope, element, attrs) {
      $scope.showLargeFooter = !(angular.isDefined(attrs.footerSize) && attrs.footerSize === 'small');
      $scope.showTermsofUse = angular.isDefined(attrs.termsAndConditions) && attrs.termsAndConditions !== '';
      $scope.showPrivacyPolicy = angular.isDefined(attrs.privacyPolicy) && attrs.privacyPolicy !== '';
    }
  };
});
/*
 * angular-loading-bar
 *
 * intercepts XHR requests and creates a loading bar.
 * Based on the excellent nprogress work by rstacruz (more info in readme)
 *
 * (c) 2013 Wes Cruver
 * License: MIT
 */
(function () {
  'use strict';
  angular.module('ark-loading-bar', ['cfp.loadingBarInterceptor']);
  /**
   * loadingBarInterceptor service
   *
   * Registers itself as an Angular interceptor and listens for XHR requests.
   */
  angular.module('cfp.loadingBarInterceptor', ['ark-loading-bar-manual']).config([
    '$httpProvider',
    function ($httpProvider) {
      var interceptor = [
          '$q',
          '$cacheFactory',
          '$timeout',
          '$rootScope',
          'arkLoadingBar',
          function ($q, $cacheFactory, $timeout, $rootScope, arkLoadingBar) {
            /**
             * The total number of requests made
             */
            var reqsTotal = 0;
            /**
             * The number of requests completed (either successfully or not)
             */
            var reqsCompleted = 0;
            /**
             * The amount of time spent fetching before showing the loading bar
             */
            var latencyThreshold = arkLoadingBar.latencyThreshold;
            /**
             * $timeout handle for latencyThreshold
             */
            var startTimeout;
            /**
             * calls arkLoadingBar.complete() which removes the
             * loading bar from the DOM.
             */
            function setComplete() {
              $timeout.cancel(startTimeout);
              arkLoadingBar.complete();
              reqsCompleted = 0;
              reqsTotal = 0;
            }
            /**
             * Determine if the response has already been cached
             * @param  {Object}  config the config option from the request
             * @return {Boolean} retrns true if cached, otherwise false
             */
            function isCached(config) {
              var cache;
              var defaults = $httpProvider.defaults;
              if (config.method !== 'GET' || config.cache === false) {
                config.cached = false;
                return false;
              }
              if (config.cache === true && defaults.cache === undefined) {
                cache = $cacheFactory.get('$http');
              } else if (defaults.cache !== undefined) {
                cache = defaults.cache;
              } else {
                cache = config.cache;
              }
              var cached = cache !== undefined ? cache.get(config.url) !== undefined : false;
              if (config.cached !== undefined && cached !== config.cached) {
                return config.cached;
              }
              config.cached = cached;
              return cached;
            }
            return {
              'request': function (config) {
                // Check to make sure this request hasn't already been cached and that
                // the requester didn't explicitly ask us to ignore this request:
                if (!config.ignoreLoadingBar && !isCached(config)) {
                  $rootScope.$broadcast('arkLoadingBar:loading', { url: config.url });
                  if (reqsTotal === 0) {
                    startTimeout = $timeout(function () {
                      arkLoadingBar.start();
                    }, latencyThreshold);
                  }
                  reqsTotal++;
                  arkLoadingBar.set(reqsCompleted / reqsTotal);
                }
                return config;
              },
              'response': function (response) {
                if (!response.config.ignoreLoadingBar && !isCached(response.config)) {
                  reqsCompleted++;
                  $rootScope.$broadcast('arkLoadingBar:loaded', { url: response.config.url });
                  if (reqsCompleted >= reqsTotal) {
                    setComplete();
                  } else {
                    arkLoadingBar.set(reqsCompleted / reqsTotal);
                  }
                }
                return response;
              },
              'responseError': function (rejection) {
                if (!rejection.config.ignoreLoadingBar && !isCached(rejection.config)) {
                  reqsCompleted++;
                  $rootScope.$broadcast('arkLoadingBar:loaded', { url: rejection.config.url });
                  if (reqsCompleted >= reqsTotal) {
                    setComplete();
                  } else {
                    arkLoadingBar.set(reqsCompleted / reqsTotal);
                  }
                }
                return $q.reject(rejection);
              }
            };
          }
        ];
      $httpProvider.interceptors.push(interceptor);
    }
  ]);
  /**
   * Loading Bar
   *
   * This service handles adding and removing the actual element in the DOM.
   * Generally, best practices for DOM manipulation is to take place in a
   * directive, but because the element itself is injected in the DOM only upon
   * XHR requests, and it's likely needed on every view, the best option is to
   * use a service.
   */
  angular.module('ark-loading-bar-manual', []).provider('arkLoadingBar', function () {
    this.includeSpinner = false;
    this.includeBar = true;
    this.latencyThreshold = 100;
    this.startSize = 0.02;
    this.parentSelector = 'body';
    this.spinnerTemplate = '<div id="loading-bar-spinner"><div class="spinner-icon"></div></div>';
    this.$get = [
      '$document',
      '$timeout',
      '$animate',
      '$rootScope',
      function ($document, $timeout, $animate, $rootScope) {
        var $parentSelector = this.parentSelector, loadingBarContainer = angular.element('<div id="loading-bar"><div class="bar"><div class="peg"></div></div></div>'), loadingBar = loadingBarContainer.find('div').eq(0), spinner = angular.element(this.spinnerTemplate);
        var incTimeout, completeTimeout, started = false, status = 0;
        var includeSpinner = this.includeSpinner;
        var includeBar = this.includeBar;
        var startSize = this.startSize;
        /**
           * Inserts the loading bar element into the dom, and sets it to 2%
           */
        function _start() {
          var $parent = $document.find($parentSelector);
          $timeout.cancel(completeTimeout);
          // do not continually broadcast the started event:
          if (started) {
            return;
          }
          $rootScope.$broadcast('arkLoadingBar:started');
          started = true;
          if (includeBar) {
            $animate.enter(loadingBarContainer, $parent);
          }
          if (includeSpinner) {
            $animate.enter(spinner, $parent);
          }
          _set(startSize);
        }
        /**
           * Set the loading bar's width to a certain percent.
           *
           * @param n any value between 0 and 1
           */
        function _set(n) {
          if (!started) {
            return;
          }
          var pct = n * 100 + '%';
          loadingBar.css('width', pct);
          status = n;
          // increment loadingbar to give the illusion that there is always
          // progress but make sure to cancel the previous timeouts so we don't
          // have multiple incs running at the same time.
          $timeout.cancel(incTimeout);
          incTimeout = $timeout(function () {
            _inc();
          }, 250);
        }
        /**
           * Increments the loading bar by a random amount
           * but slows down as it progresses
           */
        function _inc() {
          if (_status() >= 1) {
            return;
          }
          var rnd = 0;
          // TODO: do this mathmatically instead of through conditions
          var stat = _status();
          if (stat >= 0 && stat < 0.25) {
            // Start out between 3 - 6% increments
            rnd = (Math.random() * (5 - 3 + 1) + 3) / 100;
          } else if (stat >= 0.25 && stat < 0.65) {
            // increment between 0 - 3%
            rnd = Math.random() * 3 / 100;
          } else if (stat >= 0.65 && stat < 0.9) {
            // increment between 0 - 2%
            rnd = Math.random() * 2 / 100;
          } else if (stat >= 0.9 && stat < 0.99) {
            // finally, increment it .5 %
            rnd = 0.005;
          } else {
            // after 99%, don't increment:
            rnd = 0;
          }
          var pct = _status() + rnd;
          _set(pct);
        }
        function _status() {
          return status;
        }
        function _complete() {
          $rootScope.$broadcast('arkLoadingBar:completed');
          _set(1);
          $timeout.cancel(completeTimeout);
          // Attempt to aggregate any start/complete calls within 500ms:
          completeTimeout = $timeout(function () {
            $animate.leave(loadingBarContainer, function () {
              status = 0;
              started = false;
            });
            $animate.leave(spinner);
          }, 500);
        }
        return {
          start: _start,
          set: _set,
          status: _status,
          inc: _inc,
          complete: _complete,
          includeSpinner: this.includeSpinner,
          latencyThreshold: this.latencyThreshold,
          parentSelector: this.parentSelector,
          startSize: this.startSize
        };
      }
    ];  //
  });  // wtf javascript. srsly
}());
//
/**
 * @name login controller
 * @description
 *     Provides implementation for the login Controller
 */
'use strict';
angular.module('ark-components').controller('arkLoginCtrl', [
  '$scope',
  '$http',
  function ($scope, $http) {
    var controller = this;
    $scope.languageMenu = [];
    $scope.isLoading = false;
    this.loadDisplayPage = function () {
      var loginJSON = $scope.loginService.getLoginJSON();
      var keys = Object.keys(loginJSON);
      for (var i = 0; i < keys.length; i++) {
        $scope.languageMenu.push({
          value: keys[i],
          title: loginJSON[keys[i]].title,
          errorMsg: loginJSON[keys[i]].errorMessages
        });
      }
    };
    $scope.login = function () {
      $scope.isLoading = true;
      $scope.errorMessage = '';
      $scope.errorMsgType = '';
      var usernameInput = $scope.userNameInput;
      var passwordInput = $scope.passwordInput;
      var languageInput = $scope.language.value;
      var loginJSON = $scope.loginService.getLoginJSON();
      if (!usernameInput || !passwordInput && $scope.isPasswordMandatory) {
        $scope.errorMessage = loginJSON[$scope.language.value].errorMessages.emptyField;
        $scope.errorMsgType = 'emptyField';
        $scope.isLoading = false;
        return;
      }
      $scope.loginService.login(usernameInput, passwordInput, languageInput, function (error) {
        var foundError = $scope.errorField !== undefined && error && error[$scope.errorField] ? error[$scope.errorField] : 'incorrectLogin';
        $scope.errorMessage = loginJSON[$scope.language.value].errorMessages[foundError] || loginJSON[$scope.language.value].errorMessages.incorrectLogin;
        $scope.errorMsgType = 'incorrectLogin';
        $scope.isLoading = false;
      });
    };
    if (angular.isDefined($scope.remoteMessageUrl)) {
      $http.get($scope.remoteMessageUrl).success(function (data) {
        $scope.remoteMessage = data;
      });
    }
    this.ctrlInit = function ctrlInit() {
      $scope.loginService.init(function () {
        controller.loadDisplayPage();
        $scope.language = $scope.languageMenu[0];
      });
    };
    this.ctrlInit();
  }
]);
'use strict';
angular.module('ark-components').directive('arkLogin', [
  '$window',
  function ($window) {
    return {
      restrict: 'E',
      transclude: true,
      scope: {
        genesysLogoLink: '@logoLink',
        forgotPassword: '=',
        loginService: '=',
        remoteMessageUrl: '@'
      },
      controller: 'arkLoginCtrl',
      templateUrl: 'ark-login/ark-login.html',
      link: function ($scope, element, attrs) {
        $scope.showLanguageBar = !angular.isDefined(attrs.showLanguageBar) ? true : $scope.$eval(attrs.showLanguageBar);
        $scope.isPasswordMandatory = !angular.isDefined(attrs.isPasswordMandatory) ? true : $scope.$eval(attrs.isPasswordMandatory);
        $scope.errorField = !angular.isDefined(attrs.errorField) ? undefined : attrs.errorField;
        $scope.showForgotPassword = angular.isDefined(attrs.forgotPassword);
        $scope.forgotPasswordFn = typeof $scope.forgotPassword === 'function' ? $scope.forgotPassword : function () {
          $window.open($scope.forgotPassword);
        };
        $scope.$watch('language', function (newValue) {
          if (newValue) {
            $scope.loginService.changeLanguage(newValue.value, function (data) {
              $scope.formTitle = data.loginFormTitle;
              $scope.errorMessages = data.errorMessages;
              var type = $scope.errorMsgType;
              $scope.errorMessage = $scope.language.errorMsg[type];
            });
          }
        }, true);
      }
    };
  }
]);
/**
 * @ngdoc controller
 * @name arkNavbarCtrl
 * @description
 *     Provides implementation for the Navigation Bar Controller
 */
'use strict';
angular.module('ark-components').controller('arkNavbarCtrl', [
  'navigationBarService',
  '$scope',
  '$timeout',
  function (navigationBarService, $scope, $timeout) {
    $scope.sDefaultI18n = 'en-US';
    $scope.hasContent = false;
    $scope.isSearching = false;
    $scope.displayDropdown = false;
    $scope.items = [];
    $scope.searchbar = { searchText: '' };
    $scope.updateNavigation = function () {
      var oJSON = navigationBarService.getNavigationJSON();
      if (oJSON) {
        $scope.navigationJSON = oJSON;
        if ($scope.navigationJSON.i18n[navigationBarService.getI18n()]) {
          $scope.i18n = $scope.navigationJSON.i18n[navigationBarService.getI18n()];
        } else {
          $scope.i18n = $scope.navigationJSON.i18n[$scope.sDefaultI18n];
        }
      }
    };
    $scope.matchRoute = function (sRoute) {
      if (navigationBarService.matchRoute) {
        return navigationBarService.matchRoute(sRoute);
      }
      return {
        module: false,
        subModule: false
      };
    };
    $scope.clearInputText = function () {
      $scope.searchbar.searchText = '';
    };
    $scope.clickItem = function (selectedItem) {
      $scope.search.selectFunction(selectedItem);
    };
    $scope.searchForContent = function (searchText) {
      $scope.isSearching = true;
      $scope.prevSearchText = searchText;
      $scope.search.filterFunction(searchText, function (data) {
        $scope.items = $scope.itemsLength ? data.slice(0, parseInt($scope.itemsLength)) : data.slice(0, 3);
        $scope.isSearching = false;
        $scope.displayDropdown = true;
      });
    };
    navigationBarService.onJSONUpdate(function () {
      $timeout(function () {
        $scope.updateNavigation();
      });
    });
    $scope.updateNavigation();
  }
]);
'use strict';
angular.module('ark-components').directive('arkNavbar', [
  '$timeout',
  '$templateCache',
  '_',
  function ($timeout, $templateCache, _) {
    return {
      restrict: 'E',
      scope: { search: '=searchAction' },
      transclude: false,
      replace: true,
      templateUrl: 'ark-navbar/ark-navbar.html',
      controller: 'arkNavbarCtrl',
      link: function ($scope) {
        $scope.newSearchText = '';
        var deferSearch = _.throttle(function (newVal) {
            if ($scope.newSearchText === newVal && $scope.searchbar.searchText) {
              $scope.searchForContent(newVal);
            }
          }, 300);
        $scope.$watch('searchbar.searchText', function (newVal) {
          if (!newVal) {
            $scope.hasContent = false;
            $scope.displayDropdown = false;
          } else {
            $scope.hasContent = true;
            $scope.newSearchText = newVal;
            deferSearch(newVal);
          }
        });
      }
    };
  }
]).directive('stopClose', function () {
  return {
    restrict: 'A',
    link: function (scope, element) {
      element.bind('click', function (event) {
        event.preventDefault();
        event.stopPropagation();
      });
    }
  };
});
'use strict';
(function (d) {
  var b = '[data-toggle="dropdown"]', a = function (f) {
      var e = d(f).on('click.dropdown.data-api', this.toggle);
      d('html').on('click.dropdown.data-api', function () {
        if (!e.hasClass('dropdown-nested')) {
          e.parent().removeClass('open');
        }
      });
    };
  a.prototype = {
    constructor: a,
    toggle: function (j) {
      var i = d(this), h, f, g;
      if (i.is('.disabled, :disabled')) {
        return;
      }
      f = i.attr('data-target');
      if (!f) {
        f = i.attr('href');
        f = f && f.replace(/.*(?=#[^\s]*$)/, '');
      }
      h = d(f);
      if (!h.length) {
        h = i.parent();
      }
      g = h.hasClass('open');
      var isNested = i.hasClass('dropdown-nested');
      if (!g && isNested) {
        h.addClass('nesting');
      } else {
        c();
      }
      if (!g) {
        $('.dropdown.open.nesting').removeClass('open nesting');
        h.toggleClass('open');
      }
      return false;
    }
  };
  function c() {
    d(b).parent().removeClass('open');
  }
  d.fn.dropdown = function (e) {
    return this.each(function () {
      var g = d(this), f = g.data('dropdown');
      if (!f) {
        g.data('dropdown', f = new a(this));
      }
      if (typeof e === 'string') {
        f[e].call(g);
      }
    });
  };
  d.fn.dropdown.Constructor = a;
  d(function () {
    d('html').on('click.dropdown.data-api', c);
    d('body').on('click.dropdown', '.dropdown form', function (f) {
      f.stopPropagation();
    }).on('click.dropdown.data-api', b, a.prototype.toggle);
  });
}(window.jQuery));
'use strict';
angular.module('ark-components').controller('arkNestedSearchCtrl', [
  '$scope',
  '$timeout',
  function ($scope, $timeout) {
    $scope.searchResults = [];
    $scope.currSearchIndex = '';
    $scope.collapseList = [];
    $scope.$watch('search.searchValue', function (newValue, oldValue) {
      if (newValue !== oldValue) {
        $scope.delayPromise = $timeout(function () {
          //delayed call will finally run after 'delay' amount of ms after the
          //input stops changing
          if (newValue !== $scope.search.searchValue) {
            return;
          }
          // Searching start
          //case sensitivity is set here
          var searchValue = $scope.config.caseSensitive ? newValue : newValue.toLowerCase();
          //if the query is not the required length, just clear all results and do nothing
          if (searchValue.length < $scope.config.minChars) {
            $scope.clearSearchResults();
            $scope.lastSearch = '';
          }  //if the query is a continuation of a previous query, ex. 'Suga' -> 'Sugar'
          else if ($scope.lastSearch && $scope.lastSearch.length !== 0 && searchValue.indexOf($scope.lastSearch) === 0) {
            var tempList = [];
            //loop through previous query's results
            for (var i = 0; i < $scope.searchResults.length; i++) {
              //loop through searchable fields
              for (var j = 0; j < $scope.config.searchParam.length; j++) {
                //string compare is the field value to compare the query with
                //if the field matches the query, keep it. Otherwise reset it
                if (typeof $scope.searchResults[i][0][$scope.config.searchParam[j]] === 'string') {
                  var stringCompare = $scope.config.caseSensitive ? $scope.searchResults[i][0][$scope.config.searchParam[j]] : $scope.searchResults[i][0][$scope.config.searchParam[j]].toLowerCase();
                  if ($scope.config.indexSensitive ? stringCompare.indexOf(searchValue) === 0 : stringCompare.indexOf(searchValue) >= 0) {
                    tempList.push($scope.searchResults[i]);
                    break;
                  } else {
                    $scope.searchResults[i][0].secondarySearchResult = false;
                    $scope.searchResults[i][0].primarySearchResult = false;
                    $scope.toggleExpand(false, i);
                  }
                }
              }
            }
            $scope.searchResults = tempList;
            //go to first result
            $scope.switchPrimaryResult('init');
            $scope.lastSearch = searchValue;
          } else {
            $scope.clearSearchResults();
            //call the recursive search for every tree in the forest
            $scope.currDepth = 0;
            for (var k = 0; k < $scope.model.length; k++) {
              $scope.recursiveSearch($scope.model[k], searchValue, $scope.recursionResultFound);
            }
            //go to first result
            $scope.switchPrimaryResult('init');
            $scope.lastSearch = searchValue;
          }
          if ($scope.callback) {
            $scope.callback({ results: $scope.searchResults });
          }
          $timeout.cancel($scope.delayPromise);
          $scope.delayPromise = null;
        }, $scope.config.delay);
      }
    });
    $scope.recursiveSearch = function (currNode, searchValue, callback) {
      $scope.currDepth += 1;
      //only search the fields if the node is of required depth
      if ($scope.currDepth >= $scope.config.minDepth) {
        //loop through searchable fields
        for (var i = 0; i < $scope.config.searchParam.length; i++) {
          //string compare is the field value to compare the query with
          if (typeof currNode[$scope.config.searchParam[i]] === 'string') {
            var stringCompare = $scope.config.caseSensitive ? currNode[$scope.config.searchParam[i]] : currNode[$scope.config.searchParam[i]].toLowerCase();
            if ($scope.config.indexSensitive ? stringCompare.indexOf(searchValue) === 0 : stringCompare.indexOf(searchValue) >= 0) {
              callback(currNode);
              break;
            }
          }
        }
      }
      //if the node is not expanded, push it into stack as a non-expanded parent node
      if (!currNode[$scope.config.expandedParam]) {
        $scope.collapseList.push(currNode);
      }
      //recurse
      if ($scope.currDepth <= $scope.config.maxDepth && currNode[$scope.config.subTreeParam]) {
        for (var j = 0; j < currNode[$scope.config.subTreeParam].length; j++) {
          $scope.recursiveSearch(currNode[$scope.config.subTreeParam][j], searchValue, callback);
        }
      }
      //pop the non-expanded parent node
      if (!currNode[$scope.config.expandedParam]) {
        $scope.collapseList.pop();
      }
      $scope.currDepth -= 1;
    };
    $scope.recursionResultFound = function (currNode) {
      //if the field matches the query, push the following pair:
      // ['matched node','non-expanded parentNodes']
      //set as secondary result
      var tempIndex = $scope.searchResults.push([
          currNode,
          $scope.collapseList.slice(0)
        ]) - 1;
      currNode.secondarySearchResult = true;
      if ($scope.config.expandResults === 'find') {
        $scope.toggleExpand(true, tempIndex);
      }
    };
    $scope.switchPrimaryResult = function (option) {
      switch (option) {
      case 'init':
        //set first result as primary result
        if ($scope.searchResults.length > 0) {
          $scope.currSearchIndex = 0;
          $scope.searchResults[$scope.currSearchIndex][0].primarySearchResult = true;
        }
        break;
      case 'next':
        //next result button
        $scope.searchResults[$scope.currSearchIndex][0].primarySearchResult = false;
        $scope.toggleExpand(false, $scope.currSearchIndex);
        $scope.currSearchIndex = $scope.currSearchIndex >= 0 && $scope.currSearchIndex < $scope.searchResults.length - 1 ? $scope.currSearchIndex + 1 : 0;
        $scope.searchResults[$scope.currSearchIndex][0].primarySearchResult = true;
        break;
      case 'previous':
        //previous result button
        $scope.searchResults[$scope.currSearchIndex][0].primarySearchResult = false;
        $scope.toggleExpand(false, $scope.currSearchIndex);
        $scope.currSearchIndex = $scope.currSearchIndex > 0 ? $scope.currSearchIndex - 1 : $scope.searchResults.length - 1;
        $scope.searchResults[$scope.currSearchIndex][0].primarySearchResult = true;
        break;
      }
      $scope.toggleExpand(true, $scope.currSearchIndex);
    };
    $scope.toggleExpand = function (option, index) {
      //loop through a search results list of non-expanded parent nodes, and expand them
      if ($scope.searchResults.length > 0 && $scope.searchResults[index][1]) {
        for (var h = 0; h < $scope.searchResults[index][1].length; h++) {
          $scope.searchResults[index][1][h][$scope.config.expandedParam] = option;
        }
      }
    };
    $scope.clearSearchResults = function () {
      for (var k = 0; k < $scope.searchResults.length; k++) {
        $scope.searchResults[k][0].secondarySearchResult = false;
        $scope.searchResults[k][0].primarySearchResult = false;
        $scope.toggleExpand(false, k);
      }
      $scope.searchResults = [];
      $scope.collapseList = [];
      $scope.currSearchIndex = '';
    };
    $scope.searchKeyPress = function ($event) {
      //link up and down arrows to next and previous buttons
      if ($scope.searchResults.length) {
        if ($event.which === 40) {
          $scope.switchPrimaryResult('next');
          $event.preventDefault();
        } else if ($event.which === 38) {
          $scope.switchPrimaryResult('previous');
          $event.preventDefault();
        }
      }
    };
  }
]);
'use strict';
angular.module('ark-components').directive('arkNestedSearch', function () {
  return {
    restrict: 'E',
    scope: {
      config: '=searchOptions',
      model: '=treeModel',
      callback: '&'
    },
    templateUrl: 'ark-nested-search/ark-nested-search.html',
    controller: 'arkNestedSearchCtrl',
    link: function (scope) {
      //Setting Defaults
      scope.config.caseSensitive = scope.config.caseSensitive || false;
      scope.config.indexSensitive = scope.config.indexSensitive || false;
      scope.config.maxDepth = scope.config.maxDepth || Number.POSITIVE_INFINITY;
      scope.config.minDepth = scope.config.minDepth || 0;
      scope.config.expandResults = scope.config.expandResults || 'focus';
      // can be set to 'focus' or 'find'
      scope.config.searchParam = scope.config.searchParam || ['label'];
      scope.config.subTreeParam = scope.config.subTreeParam || 'items';
      scope.config.expandedParam = scope.config.expandedParam || 'expanded';
      // can be set to an array of node properties to search through aswell
      scope.config.delay = scope.config.delay || 0;
      scope.config.minChars = scope.config.minChars || 1;
      scope.search = { searchValue: '' };
    }
  };
});
'use strict';
angular.module('ark-components').directive('arkNestedTree', [
  '$rootScope',
  function ($rootScope) {
    return {
      restrict: 'AE',
      scope: {
        treeName: '@',
        model: '=treeModel',
        config: '=treeConfig',
        setSelection: '=',
        setCheckbox: '=',
        lazyLoading: '@useLazyLoading',
        restService: '=',
        setEdited: '=',
        startEditing: '=',
        preselectedNodeId: '=?preselectedNodeId'
      },
      templateUrl: 'ark-nested-tree/ark-nested-tree.html',
      controller: 'dropdownTreeCtrl',
      link: function (scope, element, attr) {
        $rootScope.templateIndex = 0;
        scope.checkbox = scope.$eval(attr.checkbox) || false;
        scope.editMode = scope.$eval(attr.editMode) || false;
        scope.lazyLoading = scope.$eval(attr.lazyLoading) || false;
        scope.showBorder = angular.isDefined(attr.showBorder) ? scope.$eval(attr.showBorder) : true;
        scope.dropdownArrow = angular.isDefined(attr.dropdownArrow) ? scope.$eval(attr.dropdownArrow) : true;
        scope.highlightNode = scope.$eval(attr.highlight);
        // If the user does not specify a 'highlight', then we fall back on whether checkbox is enabled or not.
        if (scope.highlightNode === undefined) {
          scope.highlightNode = !scope.checkbox;
        }
        // Object that keeps track of tree properties
        scope.treeInfo = { currentSelectedNode: null };
        scope.element = element;
        if (scope.useLeafsOnly) {
          scope.useLeafsOnly = true;
        } else {
          scope.useLeafsOnly = false;
        }
      }
    };
  }
]);
'use strict';
angular.module('ark-components').factory('ArkNestedTreeService', function () {
  var nestedTree = {};
  //Used for augmenting nodes before rendering the
  //tree for the first time. Called from the controller
  nestedTree.augmentNode = function (node, parentNode) {
    var parentId = parentNode.id || 0;
    node.isShow = node.isShow || true;
    node.expanded = node.expanded || false;
    node.parentId = parentId;
    node.isGroup = node.items ? true : false;
    var checkedCount = 0;
    var isMid = false;
    if (node.items) {
      for (var i = 0; i < node.items.length; i++) {
        nestedTree.augmentNode(node.items[i], node);
        if (node.items[i].isChecked && !node.items[i].isMid) {
          checkedCount++;
        }
        if (node.items[i].isMid) {
          isMid = true;
        }
      }
    }
    node.isMid = node.isMid || (isMid || checkedCount > 0) && checkedCount !== node.items.length || false;
    node.isChecked = parentNode.isChecked || node.isMid || node.isChecked || node.items && (node.items.length > 0 && checkedCount === node.items.length) || false;
  };
  nestedTree.addNode = function (node, parentNode) {
    var toSearch = null;
    if (parentNode.items && !parentNode.length) {
      toSearch = parentNode.items;
      nestedTree.augmentNode(node, parentNode);
    } else if (!parentNode.items && parentNode.length) {
      toSearch = parentNode;
      nestedTree.augmentNode(node, parentNode);
    }
    var notThere = false;
    for (var i = 0; i < toSearch.length; i++) {
      if (toSearch[i].id === node.id) {
        notThere = true;
        break;
      }
    }
    if (!notThere) {
      toSearch.push(node);
    }
  };
  nestedTree.deleteNode = function (nodeId, parentNode) {
    if (parentNode) {
      var toSearch = null;
      if (parentNode.items && !parentNode.length) {
        toSearch = parentNode.items;
      } else if (!parentNode.items && parentNode.length) {
        toSearch = parentNode;
      }
      for (var i = 0; i < toSearch.length; i++) {
        if (nodeId === toSearch[i].id) {
          toSearch.splice(i, 1);
          break;
        }
      }
    }
  };
  return nestedTree;
});
/*
  @license Angular Treeview version 0.1.6
  ⓒ 2013 AHN JAE-HA http://github.com/eu81273/angular.treeview
  License: MIT
*/
/*jshint funcscope:true*/
/*jshint shadow:true*/
'use strict';
angular.module('ark-components').directive('treeAutofocus', [
  '$timeout',
  function ($timeout) {
    return {
      link: function (scope, element, attrs) {
        var focusValue = attrs.treeAutofocus;
        if (focusValue) {
          $timeout(function () {
            element[0].focus();
          });
        }
      }
    };
  }
]).directive('treeEnter', function () {
  return function (scope, element, attrs) {
    element.bind('keydown keypress', function (event) {
      if (event.which === 13) {
        scope.$apply(function () {
          scope.$eval(attrs.treeEnter);
        });
        event.preventDefault();
      }
    });
  };
}).directive('treeModel', [
  '$compile',
  '$log',
  '$templateCache',
  '$rootScope',
  function ($compile, $log, $templateCache, $rootScope) {
    return {
      restrict: 'AE',
      link: function (scope, element, attrs) {
        var defaultTreeConfig = {
            'use-inline-controls': false,
            'enable-add-group-control': true,
            'add-group-icon': 'icon-folder-add',
            'add-group-callback': null,
            'enable-add-item-control': true,
            'add-item-icon': 'icon-add',
            'add-item-callback': null,
            'enable-delete-item-control': true,
            'delete-item-icon': 'icon-trash',
            'delete-item-callback': null,
            'allow-folder-edition': true,
            'max-group-depth': 3
          };
        scope.tempCheckedOptions = [];
        var treeId = attrs.treeId;
        //tree model
        var treeModel = attrs.treeModel || 'model';
        var nodeId = attrs.nodeId || 'id';
        var nodeLeafIds = attrs.nodeLeafIds || 'leafIds';
        var nodeLabel = attrs.nodeLabel || 'label';
        var nodeIcon = attrs.nodeIcon || 'icon';
        var nodeChildren = attrs.nodeChildren || 'items';
        var numOfChildren = attrs.numOfChildren || 'numberOfItems';
        var treeName = attrs.treeName || '';
        var selectorIndex = attrs.selectorIndex || '0';
        var nodeHtmlContent = attrs.nodeHtmlContent || 'htmlContent';
        var maxChildHeight = attrs.maxChildHeight || 'maxHeight';
        var levelDepth = parseInt(attrs.levelDepth) + 1;
        var treeConfig = angular.extend(defaultTreeConfig, scope.config || {});
        //var parentId = parseInt(attrs.parentId) || '0';
        var selectedShowCondition = '(node.isChecked || !selectedOnly) && node.isShow';
        var showExpandCollapseCondition = '(dropdownArrow && !node.unselectable && (node.' + numOfChildren + ' || node.' + nodeChildren + '.length))';
        var previousNodeEditingValue = {};
        var currentTargetAction;
        //tree template
        var template = '<ul ng-class="{\'default-cursor\': editMode, \'max-height-set\': node.' + maxChildHeight + ' && (node.' + numOfChildren + ' > node.' + maxChildHeight + ' || node.' + nodeChildren + '.length > node.' + maxChildHeight + ')}" style="max-height: {{ node.' + maxChildHeight + '*23.55 }}px">' + '<li ng-repeat="node in ' + treeModel + '" ng-class="{\'first-depth\' : ' + levelDepth + ' === 1}">' + '<div class="node-row-container" ng-init="initSelectedNode(node)" ng-class="{\'node-selected\': node.isSelected && highlightNode, \'highlight-node\': highlightNode, \'unselectable\' : node.unselectable}" ng-click="setSelectedNode()" >' + '<span class="blank" ng-show="(' + levelDepth + ' === 1 && !' + showExpandCollapseCondition + ' && ' + selectedShowCondition + ') || (' + levelDepth + '!== 1 && (!dropdownArrow || node.unselectable) && (node.' + numOfChildren + ' || node.' + nodeChildren + '.length))"><span class="blank fonticon icon-chevron-left"></span></span>' + '<span class="elbow" ng-show="' + levelDepth + ' !== 1 && !node.' + nodeChildren + '.length && !node.' + numOfChildren + ' && ' + selectedShowCondition + '"><span class="elbow fonticon icon-chevron-left"></span></span>' + '<span class="collapsed" ng-show="' + showExpandCollapseCondition + ' && !node.expanded && ' + selectedShowCondition + '" ng-click="' + treeId + '.selectNode(node)"><span class="collapsed fonticon icon-dropdown-arrow"></span></span>' + '<span class= "expanded" ng-show="' + showExpandCollapseCondition + ' && node.expanded  && ' + selectedShowCondition + '" ng-click="' + treeId + '.selectNode(node)"><span class="expanded fonticon icon-dropdown-arrow"></span></span>' + '<span ng-if="(checkbox) || (!checkbox && node.needCheckbox)">' + '<span ng-if="node.needCheckbox !== false">' + '<span class="triCheckbox" ng-show="' + selectedShowCondition + '" ng-class="{\'mid\' : node.isMid, \'checked\' : node.isChecked}" ng-click="(' + scope.useLeafsOnly + ' && node.' + numOfChildren + ') ||' + treeId + '.selectCheckbox(node);">' + '<span class="fonticon" ng-show="' + !scope.useLeafsOnly + ' || !node.' + numOfChildren + '" ng-class="{\'icon-checkbox\' : !node.isChecked && !node.isMid, \'icon-checkbox-tick\' : node.isChecked && !node.isMid, \'icon-select-yes\' : node.isChecked && node.isMid}"></span>' + '<span class="fonticon" ng-show="' + scope.useLeafsOnly + ' && node.' + numOfChildren + '" ng-class="{\'icon-folder\' : !node.expanded, \'icon-folder-open\' : node.expanded}" ng-click="' + treeId + '.selectNode(node)"></span></span>' + '</span>' + '</span>' + '<span ng-if="(checkbox && (node.needCheckbox === false))" class="need-checkbox-off-padding"></span>' + '<span ng-if="!node.' + nodeHtmlContent + '" class="node-label" ng-show="' + selectedShowCondition + ' && !editMode" ng-click="' + treeId + '.selectNode(node)"><span class="nodeLabel" ng-class="{primarySearchResult: node.primarySearchResult, secondarySearchResult: node.secondarySearchResult, \'unselectable\' : node.unselectable}"><span ng-if="hasIcons()" class="fonticon {{node.' + nodeIcon + '}}"></span>{{node.' + nodeLabel + '}}</span></span>' + '<span ng-if="node.' + nodeHtmlContent + '" class="node-label" ng-init="createLabelTemplate(node)" ng-show="' + selectedShowCondition + ' && !editMode" ng-click="' + treeId + '.selectNode(node)"><span class="nodeLabel" ng-class="{primarySearchResult: node.primarySearchResult, secondarySearchResult: node.secondarySearchResult, \'unselectable\' : node.unselectable}"><span ng-if="hasIcons()" class="fonticon {{node.' + nodeIcon + '}}"></span><span ng-include="node.templateUrl" ng-class="{\'unselectable\' : node.unselectable}"></span></span></span>' + '<span ng-if="editMode" class="edit-wrapper" ng-init="node.isEditing=((node.isNew) ? true:false)"><input class="form-control" type="text" ng-model="node.' + nodeLabel + '" tree-enter="setEditMode(node.isEditing)" ng-if="node.isEditing" ng-blur="setEditMode(node.isEditing)" tree-autofocus="true"/><span class="edit-label" ng-click="setEditMode(node.isEditing)" ng-if="!node.isEditing" ng-class="{primarySearchResult: node.primarySearchResult, secondarySearchResult: node.secondarySearchResult, \'unselectable\' : node.unselectable}"><span ng-if="hasIcons()" class="fonticon {{node.' + nodeIcon + '}}"></span>{{node.' + nodeLabel + '}}</span></span>' + '<span class="inline-controls" ng-show="' + treeConfig['use-inline-controls'] + '">' + '<a class="pull-right inline-control-icon" ng-show="' + treeConfig['enable-delete-item-control'] + '"><span class="fonticon ' + treeConfig['delete-item-icon'] + '" ng-click="deleteNode()"></span></a>' + '<a class="pull-right inline-control-icon" ng-show="{{' + (treeConfig['enable-add-group-control'] && levelDepth < treeConfig['max-group-depth']) + ' && node.isGroup }}"><span class="fonticon ' + treeConfig['add-group-icon'] + '" ng-click="addGroupToNode()"></span></a>' + '<a class="pull-right inline-control-icon" ng-show="{{' + (treeConfig['enable-add-item-control'] && levelDepth < treeConfig['max-group-depth']) + ' && node.isGroup }}"><span class="fonticon ' + treeConfig['add-item-icon'] + '" ng-click="addItemToNode()"></span></a>' + '</span>' + '</div>' + '<span ng-show="node.expanded && ' + selectedShowCondition + '" tree-id="' + treeId + '" tree-model="node.' + nodeChildren + '" node-id="' + nodeId + '" node-label="' + nodeLabel + '" node-children="' + nodeChildren + '" tree-name="' + treeName + '" level-depth="' + levelDepth + '" selector-index = "' + selectorIndex + '"></span>' + '</li>' + '</ul>';
        scope.createLabelTemplate = function (node) {
          var newUrl = 'label-template' + $rootScope.templateIndex++;
          $templateCache.put(newUrl, node.htmlContent);
          node.templateUrl = newUrl;
        };
        scope.addItemToNode = function () {
          scope.node.expanded = true;
          scope.node[nodeChildren].push({
            label: '',
            parentId: scope.node.id || 0,
            isShow: true,
            isEditing: true,
            isNew: true
          });
        };
        scope.addGroupToNode = function () {
          scope.node.expanded = true;
          scope.node[nodeChildren].push({
            label: '',
            parentId: scope.node.id || 0,
            isShow: true,
            isGroup: true,
            isEditing: true,
            isNew: true,
            items: []
          });
        };
        scope.deleteNode = function () {
          if (treeConfig['delete-item-callback']) {
            treeConfig['delete-item-callback'](scope.node);
          }
        };
        scope.setEditMode = function (oldValue) {
          if (scope.node[nodeChildren] && treeConfig['allow-folder-edition'] || !scope.node[nodeChildren]) {
            scope.node.isEditing = !oldValue;
            if (oldValue) {
              if (scope.node.isNew) {
                //Give users capability to provide callbacks for when new group/item is created and has been edited.
                scope.node.isNew = false;
                if (!scope.node.isGroup && typeof treeConfig['add-item-callback'] === 'function') {
                  treeConfig['add-item-callback'](scope.node);
                } else if (scope.node.isGroup && typeof treeConfig['add-group-callback'] === 'function') {
                  treeConfig['add-group-callback'](scope.node);
                }
              } else if (typeof scope.setEdited === 'function') {
                //Give users capability to provide a callback once a node value has changed providing previous and updated node values.
                scope.setEdited(previousNodeEditingValue, scope.node);
              }
              currentTargetAction = undefined;
              previousNodeEditingValue = {};
            } else {
              if (typeof scope.startEditing === 'function') {
                scope.startEditing(scope.node);
              }
              previousNodeEditingValue = angular.copy(scope.node);
            }
          }
        };
        scope.hasIcons = function () {
          var toReturn = scope.node[nodeIcon] ? true : false;
          return toReturn;
        };
        scope.setSelectedNode = function () {
          if (!scope.node.unselectable) {
            if (scope.treeInfo.currentSelectedNode) {
              scope.treeInfo.currentSelectedNode.isSelected = false;
            }
            scope.node.isSelected = true;
            scope.treeInfo.currentSelectedNode = scope.node;
          }
        };
        // initialize node as selected or unselected
        scope.initSelectedNode = function (node) {
          if (angular.isDefined(node.id) && node.id === scope.preselectedNodeId) {
            node.isSelected = true;
            scope.treeInfo.currentSelectedNode = node;
            var parentId = node.parentId;
            // expands all parents of selected node
            while (parentId !== 0) {
              parentId = expandParent(scope.model, parentId);
            }
          } else {
            node.isSelected = false;
          }
        };
        // expands parent of selected node
        var expandParent = function (object, nodeId) {
          // checks all surface level nodes for id
          for (var i = 0; i < object.length; i++) {
            if (object[i].id === nodeId) {
              object[i].expanded = true;
              return object[i].parentId;
            }
          }
          // checks items of surface level nodes for id
          for (var i = 0; i < object.length; i++) {
            if (object[i].items) {
              var returnedId = expandParent(object[i].items, nodeId);
              if (returnedId) {
                return returnedId;
              }
            }
          }
          // returns 0 if id is not found in branch
          return 0;
        };
        var expandCollapseNode = function (selectedNode) {
          if (selectedNode[nodeChildren] && selectedNode.expanded) {
            for (var i = 0; i < selectedNode[nodeChildren].length; i++) {
              selectedNode[nodeChildren][i].isShow = true;
              selectedNode[nodeChildren][i].expanded = false;
            }
          }
        };
        var addSelectedNodesToModel = function (nodesList) {
          if (!angular.isArray(nodesList)) {
            return;
          }
          angular.forEach(nodesList, function (node) {
            if (!scope.useLeafsOnly) {
              if (node.isChecked && !node.isMid) {
                if (scope.useLeafIds) {
                  angular.forEach(node[nodeLeafIds], function (id) {
                    scope.model.values.push(id);
                  });
                } else {
                  scope.model.values.push(node[nodeId]);
                }
                scope.model.names.push(node[nodeLabel]);
              } else if (node.isMid) {
                addSelectedNodesToModel(node[nodeChildren]);
              }  // useLeafsOnly: do not add ids of nodes that have children (leaf nodes only)
            } else {
              if (node.isChecked) {
                if (!node.numberOfItems) {
                  scope.model.values.push(node[nodeId]);
                  if (node.externalId) {
                    scope.model.names.push(node.externalId);
                  } else {
                    scope.model.names.push(node[nodeLabel]);
                  }
                } else {
                  addSelectedNodesToModel(node[nodeChildren]);
                }
              }
            }
          });
        };
        //check tree id, tree model
        if (treeId && treeModel) {
          //root node
          if (attrs.filterTreeview) {
            //create tree object if not exists
            scope[treeId] = scope[treeId] || {};
            //if node head clicks,
            scope[treeId].selectNode = scope[treeId].selectNode || function (selectedNode) {
              //remove in ark code
              if (angular.isDefined(scope.setSelection)) {
                scope.setSelection(selectedNode);
              }
              //Collapse or Expand
              if (!selectedNode.unselectable) {
                selectedNode.expanded = !selectedNode.expanded;
              }
              var hasChildrenToLoad = selectedNode[numOfChildren] > 0 && (!selectedNode[nodeChildren] || !selectedNode[nodeChildren].length);
              var useLazyLoading = scope.lazyLoading;
              if (useLazyLoading && selectedNode.expanded && hasChildrenToLoad) {
                // lazy load node children
                if (scope.restService) {
                  scope.restService.getNodeChildren(treeName, selectedNode[nodeId], function (nodeChildrenItems) {
                    angular.forEach(nodeChildrenItems, function (node) {
                      node.isChecked = node.isChecked || false;
                      node.isMid = node.isMid || false;
                      node.isShow = node.isShow || true;
                      node.expanded = node.expanded || false;
                      node.parentId = selectedNode[nodeId];
                      if (selectedNode.isChecked) {
                        node.isChecked = true;
                      }
                    });
                    selectedNode[nodeChildren] = nodeChildrenItems;
                    expandCollapseNode(selectedNode);
                  });
                } else {
                  $log.error('No service is provided for lazy loading');
                }
              }
            };
            //update data in service (excuted any time a checkbox state is toggled)
            scope[treeId].updateSelected = scope[treeId].updateSelected || function () {
              if (scope.model.values && scope.model.names) {
                // clear the data model:
                scope.model.values.splice(0, scope.model.values.length);
                scope.model.names.splice(0, scope.model.names.length);
                // add all the selected items back to the data model:
                addSelectedNodesToModel(scope[treeModel]);
              }
            };
            //checkbox helper functions
            scope[treeId].checkBox = scope[treeId].checkBox || function (selectedNode) {
              selectedNode.isChecked = true;
              selectedNode.isMid = false;
              scope[treeId].updateSelected();
              scope.tempCheckedOptions.push({
                node: selectedNode,
                checkType: 'checked'
              });
            };
            scope[treeId].uncheckBox = scope[treeId].uncheckBox || function (selectedNode) {
              selectedNode.isChecked = false;
              selectedNode.isMid = false;
              scope[treeId].updateSelected();
              scope.tempCheckedOptions.push({
                node: selectedNode,
                checkType: 'unchecked'
              });
            };
            scope[treeId].midcheckBox = scope[treeId].midcheckBox || function (selectedNode) {
              selectedNode.isChecked = true;
              selectedNode.isMid = true;
              scope[treeId].updateSelected();
              scope.tempCheckedOptions.push({
                node: selectedNode,
                checkType: 'midchecked'
              });
            };
            //recursive functions
            scope[treeId].checkAllChildren = function (node) {
              if (node[nodeChildren]) {
                for (var i = 0; i < node[nodeChildren].length; i++) {
                  scope[treeId].checkBox(node[nodeChildren][i]);
                  scope[treeId].checkAllChildren(node[nodeChildren][i]);
                }
              }
            };
            scope[treeId].uncheckAllChildren = function (node) {
              if (node[nodeChildren]) {
                for (var i = 0; i < node[nodeChildren].length; i++) {
                  scope[treeId].uncheckBox(node[nodeChildren][i]);
                  scope[treeId].uncheckAllChildren(node[nodeChildren][i]);
                }
              }
            };
            scope[treeId].selectCheckbox = scope[treeId].selectCheckbox || function (selectedNode) {
              //if box is unchecked or midchecked
              if (!selectedNode.isChecked || selectedNode.isMid) {
                scope[treeId].checkBox(selectedNode);
                //recursively check all children
                scope[treeId].checkAllChildren(selectedNode);
                //recursive function that updates parent checkboxes when a child is checked
                scope[treeId].checkParent = function (node, nodeChild) {
                  var isChild = false;
                  //go through every child and verify if nodeChild is one of them
                  if (node[nodeChildren]) {
                    for (var i = 0; i < node[nodeChildren].length; i++) {
                      if (node[nodeChildren][i] === nodeChild) {
                        isChild = true;
                        break;
                      }
                    }
                  }
                  //we're studying the children of the parent of the node
                  //we know that the nodeChild is checked, but his siblings might not be
                  //go through every child and verify if they are all checked
                  if (isChild) {
                    var allChecked = true;
                    if (node[nodeChildren]) {
                      for (var i = 0; i < node[nodeChildren].length; i++) {
                        if (!node[nodeChildren][i].isChecked || node[nodeChildren][i].isMid) {
                          allChecked = false;
                          break;
                        }
                      }
                    }
                    if (allChecked) {
                      scope[treeId].checkBox(node);
                      //if the checked node isn't at the root, repeat
                      var isRoot = false;
                      for (var i = 0; i < scope[treeModel].length; i++) {
                        if (node === scope[treeModel][i]) {
                          isRoot = true;
                          break;
                        }
                      }
                      if (!isRoot) {
                        for (var k = 0; k < scope[treeModel].length; k++) {
                          scope[treeId].checkParent(scope[treeModel][k], node);
                        }
                      }
                    } else {
                      scope[treeId].midcheckBox(node);
                      //if the checked node isn't at the root, repeat
                      isRoot = false;
                      for (var i = 0; i < scope[treeModel].length; i++) {
                        if (node === scope[treeModel][i]) {
                          isRoot = true;
                          break;
                        }
                      }
                      if (!isRoot) {
                        for (var k = 0; k < scope[treeModel].length; k++) {
                          scope[treeId].checkParent(scope[treeModel][k], node);
                        }
                      }
                    }  //if child isn't found then proceed a level deeper
                  } else {
                    if (node[nodeChildren]) {
                      for (var i = 0; i < node[nodeChildren].length; i++) {
                        scope[treeId].checkParent(node[nodeChildren][i], nodeChild);
                      }
                    }
                  }
                };
                //goes through each child of the root
                for (var j = 0; j < scope[treeModel].length; j++) {
                  scope[treeId].checkParent(scope[treeModel][j], selectedNode);
                }  //if box is checked
              } else if (!selectedNode.isMid) {
                scope[treeId].uncheckBox(selectedNode);
                //recursively uncheck all children
                scope[treeId].uncheckAllChildren(selectedNode);
                //recursive function that updates parent checkboxes when a child is checked
                scope[treeId].uncheckParent = function (node, nodeChild) {
                  var isChild = false;
                  //go through every child and check if nodeChild is one of them
                  if (node[nodeChildren]) {
                    for (var i = 0; i < node[nodeChildren].length; i++) {
                      if (node[nodeChildren][i] === nodeChild) {
                        isChild = true;
                        break;
                      }
                    }
                  }
                  //go through every child and check if they are all unchecked
                  if (isChild) {
                    var allUnchecked = true;
                    if (node[nodeChildren]) {
                      for (var i = 0; i < node[nodeChildren].length; i++) {
                        if (node[nodeChildren][i].isChecked) {
                          allUnchecked = false;
                          break;
                        }
                      }
                    }
                    if (allUnchecked) {
                      scope[treeId].uncheckBox(node);
                      //if the unchecked node isn't at the root, repeat
                      var isRoot = false;
                      for (var i = 0; i < scope[treeModel].length; i++) {
                        if (node === scope[treeModel][i]) {
                          isRoot = true;
                          break;
                        }
                      }
                      if (!isRoot) {
                        for (var k = 0; k < scope[treeModel].length; k++) {
                          scope[treeId].uncheckParent(scope[treeModel][k], node);
                        }
                      }
                    } else {
                      scope[treeId].midcheckBox(node);
                      //if the unchecked node isn't at the root, repeat
                      isRoot = false;
                      for (var i = 0; i < scope[treeModel].length; i++) {
                        if (node === scope[treeModel][i]) {
                          isRoot = true;
                          break;
                        }
                      }
                      if (!isRoot) {
                        for (var k = 0; k < scope[treeModel].length; k++) {
                          scope[treeId].uncheckParent(scope[treeModel][k], node);
                        }
                      }
                    }  //if child isn't found then proceed a level deeper
                  } else {
                    if (node[nodeChildren]) {
                      for (var i = 0; i < node[nodeChildren].length; i++) {
                        scope[treeId].uncheckParent(node[nodeChildren][i], nodeChild);
                      }
                    }
                  }
                };
                //goes through each child of the root
                for (var j = 0; j < scope[treeModel].length; j++) {
                  scope[treeId].uncheckParent(scope[treeModel][j], selectedNode);
                }
              }
              if (angular.isDefined(scope.setCheckbox)) {
                scope.setCheckbox(scope.tempCheckedOptions);
              }
              scope.tempCheckedOptions = [];
            };
          }
          //Rendering template.
          element.html('').append($compile(template)(scope));  //scope.nodeLabels = angular.element(element).find('.nodeLabel');
        }
      }
    };
  }
]);
/*jshint funcscope:false*/
/*jshint shadow:false*/
'use strict';
angular.module('ark-components').controller('dropdownTreeCtrl', [
  '$scope',
  '$log',
  'ArkNestedTreeService',
  function ($scope, $log, ArkNestedTreeService) {
    $scope.filterData = [];
    $scope.populateFilter = function (response) {
      if (response && response.items) {
        $scope.filterData = response.items;
      } else if (response && !response.items) {
        $scope.filterData = response;
      }
      for (var j = 0; j < $scope.filterData.length; j++) {
        ArkNestedTreeService.augmentNode($scope.filterData[j], $scope.filterData);
      }  // $scope.nodeList = tempList;
         // tempList = [];
    };
    $scope.$watch('model', function () {
      if ($scope.model) {
        $scope.populateFilter($scope.model);
      }
    });  // var tempList = [];
         // var parentId;
         // $scope.emptyList = [];
         // var arrayContains = function(arr, itemToFind) {
         //     var found = false;
         //     angular.forEach(arr, function(item) {
         //         if (item === itemToFind) {
         //             found = true;
         //         }
         //     });
         //     return found;
         // };
  }
]);
'use strict';
/*jshint expr:true */
angular.module('ark-components').provider('$selectTooltip', function () {
  var defaults = this.defaults = {
      animation: 'am-fade',
      prefixClass: 'tooltip',
      prefixEvent: 'tooltip',
      container: false,
      target: false,
      placement: 'top',
      template: 'ark-select/tooltip.tpl.html',
      contentTemplate: false,
      trigger: 'hover focus',
      keyboard: false,
      html: false,
      show: false,
      title: '',
      type: '',
      delay: 0
    };
  this.$get = [
    '$window',
    '$rootScope',
    '$compile',
    '$q',
    '$templateCache',
    '$http',
    '$animate',
    'dimensions',
    '$$rAF',
    function ($window, $rootScope, $compile, $q, $templateCache, $http, $animate, dimensions, $$rAF) {
      var trim = String.prototype.trim;
      var isTouch = 'createTouch' in $window.document;
      var htmlReplaceRegExp = /ng-bind="/gi;
      function TooltipFactory(element, config) {
        var $selectTooltip = {};
        // Common vars
        var nodeName = element[0].nodeName.toLowerCase();
        var options = $selectTooltip.$options = angular.extend({}, defaults, config);
        $selectTooltip.$promise = fetchTemplate(options.template);
        var scope = $selectTooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();
        if (options.delay && angular.isString(options.delay)) {
          options.delay = parseFloat(options.delay);
        }
        // Support scope as string options
        if (options.title) {
          $selectTooltip.$scope.title = options.title;
        }
        // Provide scope helpers
        scope.$hide = function () {
          scope.$$postDigest(function () {
            $selectTooltip.hide();
          });
        };
        scope.$show = function () {
          scope.$$postDigest(function () {
            $selectTooltip.show();
          });
        };
        scope.$toggle = function () {
          scope.$$postDigest(function () {
            $selectTooltip.toggle();
          });
        };
        $selectTooltip.$isShown = scope.$isShown = false;
        // Private vars
        var timeout, hoverState;
        // Support contentTemplate option
        if (options.contentTemplate) {
          $selectTooltip.$promise = $selectTooltip.$promise.then(function (template) {
            var templateEl = angular.element(template);
            return fetchTemplate(options.contentTemplate).then(function (contentTemplate) {
              var contentEl = findElement('[ng-bind="content"]', templateEl[0]);
              if (!contentEl.length) {
                contentEl = findElement('[ng-bind="title"]', templateEl[0]);
              }
              contentEl.removeAttr('ng-bind').html(contentTemplate);
              return templateEl[0].outerHTML;
            });
          });
        }
        // Fetch, compile then initialize tooltip
        var tipLinker, tipElement, tipTemplate, tipContainer;
        $selectTooltip.$promise.then(function (template) {
          if (angular.isObject(template)) {
            template = template.data;
          }
          if (options.html) {
            template = template.replace(htmlReplaceRegExp, 'ng-bind-html="');
          }
          template = trim.apply(template);
          tipTemplate = template;
          tipLinker = $compile(template);
          $selectTooltip.init();
        });
        $selectTooltip.init = function () {
          // Options: delay
          if (options.delay && angular.isNumber(options.delay)) {
            options.delay = {
              show: options.delay,
              hide: options.delay
            };
          }
          // Replace trigger on touch devices ?
          // if(isTouch && options.trigger === defaults.trigger) {
          //   options.trigger.replace(/hover/g, 'click');
          // }
          // Options : container
          if (options.container === 'self') {
            tipContainer = element;
          } else if (options.container) {
            tipContainer = findElement(options.container);
          }
          // Options: trigger
          var triggers = options.trigger.split(' ');
          angular.forEach(triggers, function (trigger) {
            if (trigger === 'click') {
              element.on('click', $selectTooltip.toggle);
            } else if (trigger !== 'manual') {
              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $selectTooltip.enter);
              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $selectTooltip.leave);
              nodeName === 'button' && trigger !== 'hover' && element.on(isTouch ? 'touchstart' : 'mousedown', $selectTooltip.$onFocusElementMouseDown);
            }
          });
          // Options: target
          if (options.target) {
            options.target = angular.isElement(options.target) ? options.target : findElement(options.target)[0];
          }
          // Options: show
          if (options.show) {
            scope.$$postDigest(function () {
              options.trigger === 'focus' ? element[0].focus() : $selectTooltip.show();
            });
          }
        };
        $selectTooltip.destroy = function () {
          // Unbind events
          var triggers = options.trigger.split(' ');
          for (var i = triggers.length; i--;) {
            var trigger = triggers[i];
            if (trigger === 'click') {
              element.off('click', $selectTooltip.toggle);
            } else if (trigger !== 'manual') {
              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $selectTooltip.enter);
              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $selectTooltip.leave);
              nodeName === 'button' && trigger !== 'hover' && element.off(isTouch ? 'touchstart' : 'mousedown', $selectTooltip.$onFocusElementMouseDown);
            }
          }
          // Remove element
          if (tipElement) {
            tipElement.remove();
            tipElement = null;
          }
          // Cancel pending callbacks
          clearTimeout(timeout);
          // Destroy scope
          scope.$destroy();
        };
        $selectTooltip.enter = function () {
          clearTimeout(timeout);
          hoverState = 'in';
          if (!options.delay || !options.delay.show) {
            return $selectTooltip.show();
          }
          timeout = setTimeout(function () {
            if (hoverState === 'in') {
              $selectTooltip.show();
            }
          }, options.delay.show);
        };
        $selectTooltip.show = function () {
          scope.$emit(options.prefixEvent + '.show.before', $selectTooltip);
          var parent = options.container ? tipContainer : null;
          var after = options.container ? null : element;
          // Hide any existing tipElement
          if (tipElement) {
            tipElement.remove();
          }
          // Fetch a cloned element linked from template
          tipElement = $selectTooltip.$element = tipLinker(scope, function (clonedElement, scope) {
          });
          // jshint ignore:line
          // Set the initial positioning.
          tipElement.css({
            top: '0px',
            left: '0px',
            display: 'block'
          }).addClass(options.placement);
          // Options: animation
          if (options.animation) {
            tipElement.addClass(options.animation);
          }
          // Options: type
          if (options.type) {
            tipElement.addClass(options.prefixClass + '-' + options.type);
          }
          $animate.enter(tipElement, parent, after, function () {
            scope.$emit(options.prefixEvent + '.show', $selectTooltip);
          });
          $selectTooltip.$isShown = scope.$isShown = true;
          scope.$$phase || scope.$root && scope.$root.$$phase || scope.$digest();
          $$rAF($selectTooltip.$applyPlacement);
          // var a = bodyEl.offsetWidth + 1; ?
          // Bind events
          if (options.keyboard) {
            if (options.trigger !== 'focus') {
              $selectTooltip.focus();
              tipElement.on('keyup', $selectTooltip.$onKeyUp);
            } else {
              element.on('keyup', $selectTooltip.$onFocusKeyUp);
            }
          }
        };
        $selectTooltip.leave = function () {
          clearTimeout(timeout);
          hoverState = 'out';
          if (!options.delay || !options.delay.hide) {
            return $selectTooltip.hide();
          }
          timeout = setTimeout(function () {
            if (hoverState === 'out') {
              $selectTooltip.hide();
            }
          }, options.delay.hide);
        };
        $selectTooltip.hide = function (blur) {
          if (!$selectTooltip.$isShown) {
            return;
          }
          scope.$emit(options.prefixEvent + '.hide.before', $selectTooltip);
          $animate.leave(tipElement, function () {
            scope.$emit(options.prefixEvent + '.hide', $selectTooltip);
          });
          $selectTooltip.$isShown = scope.$isShown = false;
          scope.$$phase || scope.$root && scope.$root.$$phase || scope.$digest();
          // Unbind events
          if (options.keyboard && tipElement !== null) {
            tipElement.off('keyup', $selectTooltip.$onKeyUp);
          }
          // Allow to blur the input when hidden, like when pressing enter key
          if (blur && options.trigger === 'focus') {
            return element[0].blur();
          }
        };
        $selectTooltip.toggle = function () {
          $selectTooltip.$isShown ? $selectTooltip.leave() : $selectTooltip.enter();
        };
        $selectTooltip.focus = function () {
          tipElement[0].focus();
        };
        // Protected methods
        $selectTooltip.$applyPlacement = function () {
          if (!tipElement) {
            return;
          }
          // Get the position of the tooltip element.
          var elementPosition = getPosition();
          // Get the height and width of the tooltip so we can center it.
          var tipWidth = tipElement.prop('offsetWidth'), tipHeight = tipElement.prop('offsetHeight');
          // Get the tooltip's top and left coordinates to center it with this directive.
          var tipPosition = getCalculatedOffset(options.placement, elementPosition, tipWidth, tipHeight);
          // Now set the calculated positioning.
          tipPosition.top += 'px';
          tipPosition.left += 'px';
          tipElement.css(tipPosition);
          tipElement.children().css(tipPosition);
        };
        $selectTooltip.$onKeyUp = function (evt) {
          evt.which === 27 && $selectTooltip.hide();
        };
        $selectTooltip.$onFocusKeyUp = function (evt) {
          evt.which === 27 && element[0].blur();
        };
        $selectTooltip.$onFocusElementMouseDown = function (evt) {
          evt.preventDefault();
          evt.stopPropagation();
          // Some browsers do not auto-focus buttons (eg. Safari)
          $selectTooltip.$isShown ? element[0].blur() : element[0].focus();
        };
        // Private methods
        function getPosition() {
          if (options.container === 'body') {
            return dimensions.offset(options.target || element[0]);
          } else {
            return dimensions.position(options.target || element[0]);
          }
        }
        function getCalculatedOffset(placement, position, actualWidth, actualHeight) {
          var offset;
          var split = placement.split('-');
          switch (split[0]) {
          case 'right':
            offset = {
              top: position.top + position.height / 2 - actualHeight / 2,
              left: position.left + position.width
            };
            break;
          case 'bottom':
            offset = {
              top: position.top + position.height,
              left: position.left + position.width / 2 - actualWidth / 2
            };
            break;
          case 'left':
            offset = {
              top: position.top + position.height / 2 - actualHeight / 2,
              left: position.left - actualWidth
            };
            break;
          default:
            offset = {
              top: position.top - actualHeight,
              left: position.left + position.width / 2 - actualWidth / 2
            };
            break;
          }
          if (!split[1]) {
            return offset;
          }
          // Add support for corners @todo css
          if (split[0] === 'top' || split[0] === 'bottom') {
            switch (split[1]) {
            case 'left':
              offset.left = position.left;
              break;
            case 'right':
              offset.left = position.left + position.width - actualWidth;
            }
          } else if (split[0] === 'left' || split[0] === 'right') {
            switch (split[1]) {
            case 'top':
              offset.top = position.top - actualHeight;
              break;
            case 'bottom':
              offset.top = position.top + position.height;
            }
          }
          return offset;
        }
        return $selectTooltip;
      }
      // Helper functions
      function findElement(query, element) {
        return angular.element((element || document).querySelectorAll(query));
      }
      function fetchTemplate(template) {
        return $q.when($templateCache.get(template) || $http.get(template)).then(function (res) {
          if (angular.isObject(res)) {
            $templateCache.put(template, res.data);
            return res.data;
          }
          return res;
        });
      }
      return TooltipFactory;
    }
  ];
}).directive('bsTooltip', [
  '$window',
  '$location',
  '$sce',
  '$selectTooltip',
  '$$rAF',
  function ($window, $location, $sce, $selectTooltip, $$rAF) {
    return {
      restrict: 'EAC',
      scope: true,
      link: function postLink(scope, element, attr) {
        // Directive options
        var options = { scope: scope };
        angular.forEach([
          'template',
          'contentTemplate',
          'placement',
          'container',
          'target',
          'delay',
          'trigger',
          'keyboard',
          'html',
          'animation',
          'type'
        ], function (key) {
          if (angular.isDefined(attr[key])) {
            options[key] = attr[key];
          }
        });
        // Observe scope attributes for change
        angular.forEach(['title'], function (key) {
          attr[key] && attr.$observe(key, function (newValue, oldValue) {
            scope[key] = $sce.trustAsHtml(newValue);
            angular.isDefined(oldValue) && $$rAF(function () {
              tooltip && tooltip.$applyPlacement();
            });
          });
        });
        // Support scope as an object
        attr.bsTooltip && scope.$watch(attr.bsTooltip, function (newValue, oldValue) {
          if (angular.isObject(newValue)) {
            angular.extend(scope, newValue);
          } else {
            scope.title = newValue;
          }
          angular.isDefined(oldValue) && $$rAF(function () {
            tooltip && tooltip.$applyPlacement();
          });
        }, true);
        // Initialize popover
        var tooltip = $selectTooltip(element, options);
        // Garbage collection
        scope.$on('$destroy', function () {
          tooltip.destroy();
          options = null;
          tooltip = null;
        });
      }
    };
  }
]).provider('$select', function () {
  var defaults = this.defaults = {
      animation: 'am-fade',
      prefixClass: 'select',
      placement: 'bottom-left',
      template: 'ark-select/ark-select.html',
      trigger: 'focus',
      container: false,
      keyboard: true,
      html: false,
      delay: 0,
      multiple: false,
      sort: false,
      caretHtml: '&nbsp;<span class="fonticon icon-dropdown-arrow"></span>',
      placeholder: 'Choose among the following...',
      maxLength: 2,
      maxLengthHtml: 'selected',
      iconCheckmark: 'fonticon fonticon-ok icon-tick check-mark',
      parentId: ''
    };
  this.$get = [
    '$window',
    '$document',
    '$rootScope',
    '$selectTooltip',
    function ($window, $document, $rootScope, $selectTooltip) {
      // var bodyEl = angular.element($window.document.body);
      var isTouch = 'createTouch' in $window.document;
      function SelectFactory(element, controller, config) {
        var $select = {};
        // Common vars
        var options = angular.extend({}, defaults, config);
        $select = $selectTooltip(element, options);
        var scope = $select.$scope;
        scope.$matches = [];
        scope.$activeIndex = 0;
        scope.$isMultiple = options.multiple;
        scope.$iconCheckmark = options.iconCheckmark;
        scope.$parentId = options.parentId;
        scope.$activate = function (index) {
          scope.$$postDigest(function () {
            $select.activate(index);
          });
        };
        scope.$select = function (index) {
          scope.$$postDigest(function () {
            $select.select(index);
          });
        };
        scope.$isVisible = function () {
          return $select.$isVisible();
        };
        scope.$isActive = function (index) {
          return $select.$isActive(index);
        };
        // Public methods
        $select.update = function (matches) {
          scope.$matches = matches;
          $select.$updateActiveIndex();
        };
        $select.activate = function (index) {
          if (options.multiple) {
            scope.$activeIndex.sort();
            $select.$isActive(index) ? scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1) : scope.$activeIndex.push(index);
            if (options.sort) {
              scope.$activeIndex.sort();
            }
          } else {
            scope.$activeIndex = index;
          }
          return scope.$activeIndex;
        };
        $select.select = function (index) {
          var value = scope.$matches[index].value;
          scope.$apply(function () {
            $select.activate(index);
            if (options.multiple) {
              controller.$setViewValue(scope.$activeIndex.map(function (index) {
                return scope.$matches[index].value;
              }));  /*element[0].getElementsByTagName('span')[0].innerHTML = (scope.$activeIndex.map(function(index) {
                return scope.$matches[index].value;
              }));*/
            } else {
              controller.$setViewValue(value);
              /*element[0].getElementsByTagName('span')[0].innerHTML = value;*/
              $select.hide();
            }
          });
          // Emit event
          scope.$emit('$select.select', value, index);
        };
        // Protected methods
        $select.$updateActiveIndex = function () {
          if (controller.$modelValue && scope.$matches.length) {
            if (options.multiple && angular.isArray(controller.$modelValue)) {
              var isWorking = true;
              for (var i = 0; i < controller.$modelValue.length; i++) {
                isWorking = typeof $select.$getIndex(controller.$modelValue[i]) !== 'undefined';
                if (!isWorking) {
                  break;
                }
              }
              scope.$activeIndex = isWorking ? controller.$modelValue.map(function (value) {
                return $select.$getIndex(value);
              }) : [];
            } else {
              scope.$activeIndex = $select.$getIndex(controller.$modelValue);
            }
          } else if (scope.$activeIndex >= scope.$matches.length) {
            scope.$activeIndex = options.multiple ? [] : 0;
          }
        };
        $select.$isVisible = function () {
          if (!options.minLength || !controller) {
            return scope.$matches.length;
          }
          // minLength support
          return scope.$matches.length && controller.$viewValue.length >= options.minLength;
        };
        $select.$isActive = function (index) {
          if (options.multiple) {
            return scope.$activeIndex.indexOf(index) !== -1;
          } else {
            return scope.$activeIndex === index;
          }
        };
        $select.$getIndex = function (value) {
          var l = scope.$matches.length, i = l;
          if (!l) {
            return;
          }
          for (i = l; i--;) {
            if (scope.$matches[i].value === value) {
              break;
            }
          }
          if (i < 0) {
            return;
          }
          return i;
        };
        $select.$onMouseDown = function (evt) {
          // Prevent blur on mousedown on .dropdown-menu
          evt.preventDefault();
          evt.stopPropagation();
          // Emulate click for mobile devices
          if (isTouch) {
            var targetEl = angular.element(evt.target);
            targetEl.triggerHandler('click');
          }
        };
        $select.$onKeyDown = function (evt) {
          if (!/(9|13|38|40)/.test(evt.keyCode)) {
            return;
          }
          evt.preventDefault();
          evt.stopPropagation();
          // Select with enter
          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {
            return $select.select(scope.$activeIndex);
          }
          // Navigate with keyboard
          if (evt.keyCode === 38 && scope.$activeIndex > 0) {
            scope.$activeIndex--;
          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {
            scope.$activeIndex++;
          } else if (angular.isUndefined(scope.$activeIndex)) {
            scope.$activeIndex = 0;
          }
          scope.$digest();
        };
        $select.$updateParentId = function (parentId) {
          scope.$parentId = parentId;
        };
        // Overrides
        var _show = $select.show;
        $select.show = function () {
          _show();
          if (options.multiple) {
            $select.$element.addClass('select-multiple');
          }
          setTimeout(function () {
            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);
            if (options.keyboard) {
              element.on('keydown', $select.$onKeyDown);
            }
          });
        };
        var _hide = $select.hide;
        $select.hide = function () {
          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);
          if (options.keyboard) {
            element.off('keydown', $select.$onKeyDown);
          }
          _hide(true);
        };
        return $select;
      }
      SelectFactory.defaults = defaults;
      return SelectFactory;
    }
  ];
}).directive('arkSelect', [
  '$window',
  '$parse',
  '$q',
  '$select',
  '$parseOptions',
  function ($window, $parse, $q, $select, $parseOptions) {
    var defaults = $select.defaults;
    return {
      restrict: 'EAC',
      require: 'ngModel',
      link: function postLink(scope, element, attr, controller) {
        // Directive options
        var options = { scope: scope };
        angular.forEach([
          'placement',
          'container',
          'delay',
          'trigger',
          'keyboard',
          'html',
          'animation',
          'template',
          'placeholder',
          'multiple',
          'maxLength',
          'maxLengthHtml'
        ], function (key) {
          if (angular.isDefined(attr[key])) {
            options[key] = attr[key];
          }
        });
        // Add support for select markup
        if (element[0].nodeName.toLowerCase() === 'select') {
          var inputEl = element;
          inputEl.css('display', 'none');
          //element = angular.element('<button type="button" class="btn btn-default"></button>');
          element = angular.element('<div class="btn-group bootstrap-select"><button type="button" class="btn btn-default dropdown-toggle selectpicker btn-default"></button></div>');
          inputEl.after(element);
        }
        scope.$watch('element.context.id', function () {
          select.$updateParentId(element.context.id);
        });
        // Build proper ngOptions
        var parsedOptions = $parseOptions(attr.ngOptions);
        // Initialize select
        var select = $select(element, controller, options);
        // Watch ngOptions values before filtering for changes
        var watchedOptions = parsedOptions.$match[7].trim();
        scope.$watch(watchedOptions, function () {
          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);
          parsedOptions.valuesFn(scope, controller).then(function (values) {
            select.update(values);
            controller.$render();
          });
        }, true);
        // Watch model for changes
        scope.$watch(attr.ngModel, function () {
          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);
          select.$updateActiveIndex();
          controller.$render();
        }, true);
        // Model rendering in view
        controller.$render = function () {
          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);
          var selected, index;
          if (options.multiple && angular.isArray(controller.$modelValue)) {
            selected = controller.$modelValue.map(function (value) {
              index = select.$getIndex(value);
              return angular.isDefined(index) ? select.$scope.$matches[index].label : options.placeholder;
            }).filter(angular.isDefined);
            if (selected.length > (options.maxLength || defaults.maxLength)) {
              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);
            } else {
              selected = selected.join(', ');
            }
          } else {
            index = select.$getIndex(controller.$modelValue);
            selected = angular.isDefined(index) ? select.$scope.$matches[index].label : false;
          }
          if (attr.multiple) {
            element.html('<span class="filter-option">' + (selected ? selected : attr.placeholder || defaults.placeholder) + '</span>' + '<span class="fonticon icon-pencil"></span>');
          } else {
            element.html('<span class="filter-option">' + (selected ? selected : attr.placeholder || defaults.placeholder) + '</span>' + defaults.caretHtml);
          }
        };
        // Garbage collection
        scope.$on('$destroy', function () {
          select.destroy();
          options = null;
          select = null;
        });
      }
    };
  }
]);
/*jshint expr:false */
'use strict';
/*jshint expr:true */
angular.version.minor < 3 && angular.version.dot < 14 && angular.module('ng').factory('$$rAF', [
  '$window',
  '$timeout',
  function ($window, $timeout) {
    var requestAnimationFrame = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
    var cancelAnimationFrame = $window.cancelAnimationFrame || $window.webkitCancelAnimationFrame || $window.mozCancelAnimationFrame || $window.webkitCancelRequestAnimationFrame;
    var rafSupported = !!requestAnimationFrame;
    var raf = rafSupported ? function (fn) {
        var id = requestAnimationFrame(fn);
        return function () {
          cancelAnimationFrame(id);
        };
      } : function (fn) {
        var timer = $timeout(fn, 16.66, false);
        // 1000 / 60 = 16.666
        return function () {
          $timeout.cancel(timer);
        };
      };
    raf.supported = rafSupported;
    return raf;
  }
]);
angular.module('ark-components').factory('dimensions', function () {
  // var jqLite = angular.element;
  var fn = {};
  /**
     * Test the element nodeName
     * @param element
     * @param name
     */
  var nodeName = fn.nodeName = function (element, name) {
      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();
    };
  /**
     * Returns the element computed style
     * @param element
     * @param prop
     * @param extra
     */
  fn.css = function (element, prop, extra) {
    var value;
    if (element.currentStyle) {
      //IE
      value = element.currentStyle[prop];
    } else if (window.getComputedStyle) {
      value = window.getComputedStyle(element)[prop];
    } else {
      value = element.style[prop];
    }
    return extra === true ? parseFloat(value) || 0 : value;
  };
  /**
     * Provides read-only equivalent of jQuery's offset function:
     * @required-by bootstrap-tooltip, bootstrap-affix
     * @url http://api.jquery.com/offset/
     * @param element
     */
  fn.offset = function (element) {
    var boxRect = element.getBoundingClientRect();
    var docElement = element.ownerDocument;
    return {
      width: boxRect.width || element.offsetWidth,
      height: boxRect.height || element.offsetHeight,
      top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),
      left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)
    };
  };
  /**
     * Provides read-only equivalent of jQuery's position function
     * @required-by bootstrap-tooltip, bootstrap-affix
     * @url http://api.jquery.com/offset/
     * @param element
     */
  fn.position = function (element) {
    var offsetParentRect = {
        top: 0,
        left: 0
      }, offsetParentElement, offset;
    // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent
    if (fn.css(element, 'position') === 'fixed') {
      // We assume that getBoundingClientRect is available when computed position is fixed
      offset = element.getBoundingClientRect();
    } else {
      // Get *real* offsetParentElement
      offsetParentElement = offsetParent(element);
      offset = fn.offset(element);
      // Get correct offsets
      offset = fn.offset(element);
      if (!nodeName(offsetParentElement, 'html')) {
        offsetParentRect = fn.offset(offsetParentElement);
      }
      // Add offsetParent borders
      offsetParentRect.top += fn.css(offsetParentElement, 'borderTopWidth', true);
      offsetParentRect.left += fn.css(offsetParentElement, 'borderLeftWidth', true);
    }
    // Subtract parent offsets and element margins
    return {
      width: element.offsetWidth,
      height: element.offsetHeight,
      top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),
      left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)
    };
  };
  /**
     * Returns the closest, non-statically positioned offsetParent of a given element
     * @required-by fn.position
     * @param element
     */
  var offsetParent = function offsetParentElement(element) {
    var docElement = element.ownerDocument;
    var offsetParent = element.offsetParent || docElement;
    if (nodeName(offsetParent, '#document')) {
      return docElement.documentElement;
    }
    while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {
      offsetParent = offsetParent.offsetParent;
    }
    return offsetParent || docElement.documentElement;
  };
  /**
     * Provides equivalent of jQuery's height function
     * @required-by bootstrap-affix
     * @url http://api.jquery.com/height/
     * @param element
     * @param outer
     */
  fn.height = function (element, outer) {
    var value = element.offsetHeight;
    if (outer) {
      value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);
    } else {
      value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);
    }
    return value;
  };
  /**
     * Provides equivalent of jQuery's width function
     * @required-by bootstrap-affix
     * @url http://api.jquery.com/width/
     * @param element
     * @param outer
     */
  fn.width = function (element, outer) {
    var value = element.offsetWidth;
    if (outer) {
      value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);
    } else {
      value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);
    }
    return value;
  };
  return fn;
}).provider('$parseOptions', function () {
  var defaults = this.defaults = { regexp: /^\s*(.*?)(?:\s+as\s+(.*?))?(?:\s+group\s+by\s+(.*))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+(.*?)(?:\s+track\s+by\s+(.*?))?$/ };
  this.$get = [
    '$parse',
    '$q',
    function ($parse, $q) {
      function ParseOptionsFactory(attr, config) {
        var $parseOptions = {};
        // Common vars
        var options = angular.extend({}, defaults, config);
        $parseOptions.$values = [];
        // Private vars
        var match, displayFn, valueName, keyName, groupByFn, valueFn, valuesFn;
        $parseOptions.init = function () {
          $parseOptions.$match = match = attr.match(options.regexp);
          displayFn = $parse(match[2] || match[1]), valueName = match[4] || match[6], keyName = match[5], groupByFn = $parse(match[3] || ''), valueFn = $parse(match[2] ? match[1] : valueName), valuesFn = $parse(match[7]);
        };
        $parseOptions.valuesFn = function (scope, controller) {
          return $q.when(valuesFn(scope, controller)).then(function (values) {
            $parseOptions.$values = values ? parseValues(values, scope) : {};
            return $parseOptions.$values;
          });
        };
        // Private functions
        function parseValues(values, scope) {
          return values.map(function (match, index) {
            var locals = {}, label, value;
            locals[valueName] = match;
            label = displayFn(scope, locals);
            value = valueFn(scope, locals) || index;
            return {
              label: label,
              value: value
            };
          });
        }
        $parseOptions.init();
        return $parseOptions;
      }
      return ParseOptionsFactory;
    }
  ];
});
/*jshint expr:false */
'use strict';
angular.module('ark-components').controller('arkSideTabsCtrl', [
  '$scope',
  function ($scope) {
    // sets initial selected template
    $scope.selectedItemIndex = $scope.activeTab && $scope.tabsList[$scope.activeTab] ? $scope.activeTab : 0;
    $scope.activeTab = $scope.selectedItemIndex;
    $scope.selectedTemplate = $scope.tabsList[$scope.selectedItemIndex].templateUrl;
    // watches for changes to activeTab and sets selectedTemplate
    $scope.$watch('activeTab', function () {
      $scope.selectedItemIndex = $scope.tabsList[$scope.activeTab] ? $scope.activeTab : $scope.selectedItemIndex;
      $scope.activeTab = $scope.selectedItemIndex;
      $scope.selectedTemplate = $scope.tabsList[$scope.selectedItemIndex].templateUrl;
    });
    $scope.setActive = function (indexNum) {
      $scope.selectedItemIndex = indexNum;
      $scope.activeTab = indexNum;
      $scope.selectedTemplate = $scope.tabsList[indexNum].templateUrl;
    };
  }
]);
'use strict';
angular.module('ark-components').directive('arkSideTabs', [
  '$timeout',
  '$templateCache',
  function ($timeout, $templateCache) {
    return {
      restrict: 'E',
      scope: {
        tabsList: '=',
        switchReload: '@',
        parentData: '=parentData',
        activeTab: '=?activeTab'
      },
      controller: 'arkSideTabsCtrl',
      templateUrl: 'ark-side-tabs/ark-side-tabs.html',
      link: function ($scope) {
        $scope.$watch('switchReload', function (newValue) {
          $scope.reload = !angular.isDefined(newValue) ? false : $scope.$eval($scope.switchReload);
        });
        $scope.$watch('tabsList', function (newValue) {
          var newTabs = [];
          var index = 0;
          newValue.forEach(function (n) {
            if (angular.isDefined(n.template)) {
              var newUrl = 'ark-side-tab-template' + index++;
              $templateCache.put(newUrl, n.template);
              newTabs.push({
                title: n.title,
                icon: n.icon,
                templateUrl: newUrl
              });
            } else {
              newTabs.push(n);
            }
          });
          $scope.tabs = newTabs;
          $scope.tabsList = newTabs;
        }, true);
      }
    };
  }
]);
'use strict';
angular.module('ark-components').directive('arkSidebar', function () {
  return {
    restrict: 'AE',
    scope: {
      showSidebar: '=?',
      showShadow: '=?',
      template: '='
    },
    templateUrl: 'ark-sidebar/ark-sidebar.html',
    link: function (scope) {
      if (scope.showShadow === undefined) {
        scope.showShadow = true;
      }
      if (scope.showSidebar === undefined) {
        scope.showSidebar = true;
      }
    }
  };
});
'use strict';
angular.module('ark-components').controller('arkSliderCtrl', [
  '$scope',
  function ($scope) {
    $scope.isActive = false;
    $scope.setActive = function () {
      $scope.isActive = !$scope.isActive;
    };
  }
]);
'use strict';
angular.module('ark-components').directive('arkSlider', function () {
  return {
    restrict: 'E',
    scope: {
      tooltip: '@',
      percentage: '@'
    },
    transclude: true,
    controller: 'arkSliderCtrl',
    templateUrl: 'ark-slider/ark-slider.html',
    link: function (scope, element) {
      var input = element.find('input');
      var ngModelCtrl = angular.element(input).controller('ngModel');
      scope.useTooltip = scope.$eval(scope.tooltip) || false;
      scope.showPercentage = scope.$eval(scope.percentage) || false;
      var inputWidth = scope.useTooltip ? 100 : 75;
      angular.element(input).css('width', inputWidth + '%');
      if (!input || !ngModelCtrl || input[0].type !== 'range') {
        return;
      }
      scope.$watch(function () {
        scope.inputValue = ngModelCtrl.$viewValue;
        return ngModelCtrl.$viewValue;
      }, function (newValue) {
        if (typeof newValue !== 'undefined') {
          var min = parseInt(input[0].min !== '' ? input[0].min : 0);
          var max = parseInt(input[0].max !== '' ? input[0].max : 100);
          var cur = parseInt(newValue);
          element.find('.slider-fill').css('width', (cur - min) / (max - min) * inputWidth + '%');
        }
      });
    }
  };
});
'use strict';
angular.module('ark-components').controller('arkTagsCtrl', [
  '$scope',
  '$timeout',
  function ($scope, $timeout) {
    var controller = this;
    this.restartAnimation = function (index) {
      var currTag = angular.element($scope.element).find('span.tag-label').eq(index).parent();
      //sanity check
      if (currTag.length) {
        currTag.removeClass('animated pulse');
        $timeout(function () {
          currTag.addClass('animated pulse');
        });
      }
    };
    $scope.addTag = function () {
      if ($scope.inputTag) {
        for (var i = 0; i < $scope.tagList.length; i++) {
          if ($scope.tagList[i] === $scope.inputTag) {
            $scope.inputTag = '';
            controller.restartAnimation(i);
            return;
          }
        }
        $scope.tagList.push($scope.inputTag);
        $scope.inputTag = '';
        if ($scope.sort) {
          $scope.tagList.sort(function (a, b) {
            if (a.toLowerCase() < b.toLowerCase()) {
              return -1;
            } else if (a.toLowerCase() > b.toLowerCase()) {
              return 1;
            }
            //sanity check
            return 0;
          });
        }
      } else {
        angular.element($scope.element).find('#tagsinput_tag').focus();
      }
    };
    $scope.removeTag = function (tag) {
      var index = $scope.tagList.indexOf(tag);
      $scope.tagList.splice(index, 1);
    };
  }
]);
'use strict';
angular.module('ark-components').directive('arkTags', function () {
  return {
    restrict: 'E',
    scope: { tagList: '=tags' },
    templateUrl: 'ark-tags/ark-tags.html',
    controller: 'arkTagsCtrl',
    link: function (scope, element, attr) {
      scope.element = element;
      scope.sort = attr.sort !== undefined ? true : false;
      scope.tagList = scope.tagList || [];
      if (scope.sort && scope.tagList.length) {
        scope.tagList.sort(function (a, b) {
          if (a.toLowerCase() < b.toLowerCase()) {
            return -1;
          } else if (a.toLowerCase() > b.toLowerCase()) {
            return 1;
          }
          //sanity check
          return 0;
        });
      }
      // TODO: Avoid using id (#tagsinput_tag), if multiple ark-tags directives
      // are on the same page, it could case problems
      element.find('#tagsinput_tag').bind('keydown keypress', function (event) {
        if (event.which === 13) {
          scope.$apply(function () {
            scope.addTag();
          });
          event.preventDefault();
        }
      });
    }
  };
});
'use strict';
angular.module('ark-components').controller('arkTimePickerCtrl', [
  '$scope',
  '_',
  function ($scope, _) {
    $scope.hourList = [
      '1',
      '2',
      '3',
      '4',
      '5',
      '6',
      '7',
      '8',
      '9',
      '10',
      '11',
      '12'
    ];
    $scope.minuteList = [
      '00',
      '05',
      '10',
      '15',
      '20',
      '25',
      '30',
      '35',
      '40',
      '45',
      '50',
      '55'
    ];
    $scope.timeZoneList = [
      'GMT-12:00',
      'GMT-11:00',
      'GMT-10:00',
      'GMT-09:00',
      'GMT-08:00',
      'GMT-07:00',
      'GMT-06:00',
      'GMT-05:00',
      'GMT-04:30',
      'GMT-04:00',
      'GMT-03:30',
      'GMT-03:00',
      'GMT-02:00',
      'GMT-01:00',
      'GMT+00:00',
      'GMT+01:00',
      'GMT+02:00',
      'GMT+03:00',
      'GMT+03:30',
      'GMT+04:00',
      'GMT+05:00',
      'GMT+05:30',
      'GMT+05:45',
      'GMT+06:00',
      'GMT+06:30',
      'GMT+07:00',
      'GMT+08:00',
      'GMT+09:00',
      'GMT+09:30',
      'GMT+10:00',
      'GMT+11:00',
      'GMT+12:00',
      'GMT+13:00'
    ];
    $scope.showHourList = false;
    $scope.showMinuteList = false;
    $scope.showTimeZoneList = false;
    var controller = this;
    //Hour Section
    $scope.isInvalidHour = function () {
      return controller.isInvalidHour($scope.hour, $scope.noon);
    };
    controller.isInvalidHour = function (hour, noon) {
      return !hour || isNaN(hour) || hour.indexOf('.') !== -1 || hour.length > 2 || noon === 'AM' && (parseInt(hour) > 12 || parseInt(hour) < 0) || noon === 'PM' && (parseInt(hour) > 12 || parseInt(hour) < 1);
    };
    $scope.validateHour = function () {
      if ($scope.isInvalidHour()) {
        $scope.hour = $scope.prevHour;
      } else {
        $scope.prevHour = $scope.hour;
      }
      $scope.showHourList = false;
    };
    $scope.addHour = function () {
      if ($scope.noon === 'AM') {
        if ($scope.hour === '11') {
          $scope.noon = 'PM';
          $scope.hour = '12';
        } else {
          $scope.hour = parseInt($scope.hour) % 12 + 1 + '';
        }
      } else {
        if ($scope.hour === '11') {
          $scope.noon = 'AM';
        }
        $scope.hour = parseInt($scope.hour) % 12 + 1 + '';
      }
      $scope.prevHour = $scope.hour;
      $scope.prevNoon = $scope.noon;
    };
    $scope.minusHour = function () {
      if ($scope.noon === 'AM') {
        if ($scope.hour === '00' || $scope.hour === '0' || $scope.hour === '12') {
          $scope.noon = 'PM';
          $scope.hour = '11';
        } else {
          $scope.hour = parseInt($scope.hour) - 1 + '';
        }
      } else {
        if ($scope.hour === '12') {
          $scope.noon = 'AM';
        }
        $scope.hour = $scope.hour === '01' || $scope.hour === '1' ? $scope.hour = '12' : parseInt($scope.hour) - 1 + '';
      }
      $scope.prevHour = $scope.hour;
      $scope.prevNoon = $scope.noon;
    };
    // Minute section
    $scope.isInvalidMinute = function () {
      return controller.isInvalidMinute($scope.minute);
    };
    controller.isInvalidMinute = function (minute) {
      return !minute || isNaN(minute) || minute.indexOf('.') !== -1 || minute.length > 2 || parseInt(minute) > 59 || parseInt(minute) < 0;
    };
    $scope.formatNumber = function (input) {
      if (input.length === 1) {
        input = '0' + input;
      }
      return input;
    };
    $scope.addMinute = function () {
      if ($scope.minute === '59') {
        $scope.addHour();
      }
      $scope.minute = $scope.formatNumber((parseInt($scope.minute) + 1) % 60 + '');
      $scope.prevMinute = $scope.minute;
    };
    $scope.minusMinute = function () {
      if ($scope.minute === '0' || $scope.minute === '00') {
        $scope.minusHour();
      }
      $scope.minute = $scope.formatNumber((parseInt($scope.minute) + 59) % 60 + '');
      $scope.prevMinute = $scope.minute;
    };
    $scope.validateMinute = function () {
      if ($scope.isInvalidMinute()) {
        $scope.minute = $scope.prevMinute;
      } else {
        $scope.minute = $scope.formatNumber($scope.minute);
        $scope.prevMinute = $scope.minute;
      }
      $scope.showMinuteList = false;
    };
    // AM/PM section
    $scope.changeNoon = function () {
      if ($scope.noon === 'AM') {
        if ($scope.hour === '0' || $scope.hour === '00') {
          $scope.hour = '12';
          $scope.prevHour = $scope.hour;
        }
        $scope.noon = 'PM';
      } else {
        $scope.noon = 'AM';
      }
      $scope.prevNoon = $scope.noon;
    };
    $scope.validateNoon = function () {
      if ($scope.noon.toLowerCase() === 'am' || $scope.noon.toLowerCase() === 'pm') {
        if ($scope.noon.toLowerCase() === 'pm' && $scope.hour === '0') {
          $scope.hour = '12';
          $scope.prevHour = $scope.hour;
        }
        $scope.noon = $scope.noon.toUpperCase();
        $scope.prevNoon = $scope.noon;
      } else {
        $scope.noon = $scope.prevNoon;
      }
    };
    // returns bool
    controller.isInvalidNoon = function (noon) {
      return noon.toUpperCase() !== 'AM' && noon.toUpperCase() !== 'PM';
    };
    // Time Zone Section
    $scope.isInvalidTimeZone = function () {
      return !_.contains($scope.timeZoneList, $scope.timeZone);
    };
    $scope.validateTimeZone = function () {
      if ($scope.isInvalidTimeZone()) {
        $scope.timeZone = $scope.prevTimeZone;
      } else {
        $scope.prevTimeZone = $scope.timeZone;
      }
      $scope.showTimeZoneList = false;
    };
    $scope.addTimeZone = function () {
      if ($scope.timeZoneIndex > 0) {
        $scope.timeZoneIndex--;
      }
      $scope.timeZone = $scope.timeZoneList[$scope.timeZoneIndex];
      $scope.prevTimeZone = $scope.timeZone;
    };
    $scope.minusTimeZone = function () {
      if ($scope.timeZoneIndex < $scope.timeZoneList.length - 1) {
        $scope.timeZoneIndex++;
      }
      $scope.timeZone = $scope.timeZoneList[$scope.timeZoneIndex];
      $scope.prevTimeZone = $scope.timeZone;
    };
    $scope.showHour = function () {
      $scope.showHourList = true;
    };
    $scope.showMinute = function () {
      $scope.showMinuteList = true;
    };
    $scope.showTimeZone = function () {
      $scope.showTimeZoneList = true;
    };
    $scope.selectHour = function (item) {
      $scope.hour = item;
      $scope.prevHour = item;
    };
    $scope.selectMinute = function (item) {
      $scope.minute = item;
      $scope.prevMinute = item;
    };
    $scope.selectTimeZone = function (item, index) {
      $scope.timeZone = item;
      $scope.prevTimeZone = item;
      $scope.timeZoneIndex = index;
    };
    // returns boolean
    controller.isInvalidFormat = function () {
      if ($scope.time.split('.').length === 3 || $scope.time.split(':').length === 3) {
        // if format is hh.mm.am
        var timeString = $scope.time.split('.');
        if (timeString.length === 1) {
          timeString = $scope.time.split(':');
        }
        if ($scope.timezoneMode) {
          var timezoneString;
          var times = timeString[2].split('-');
          var timezoneRange = '-';
          if (times.length === 1) {
            times = timeString[2].split('+');
            timezoneRange = '+';
          }
          timeString[2] = times[0];
          timezoneString = timezoneRange + times[1];
          $scope.timeZone = 'GMT' + timezoneString;
        }
        if (timeString[0].length === 1) {
          timeString[0] = '0' + timeString[0];
        }
        if (timeString[1].length === 1) {
          timeString[1] = '0' + timeString[1];
        }
        return controller.isInvalidNoon(timeString[2].toUpperCase()) || controller.isInvalidHour(timeString[0], timeString[2].toUpperCase()) || controller.isInvalidMinute(timeString[1]);
      } else {
        // if format does not contain hours, mins, noon
        return true;
      }
    };
    // void
    controller.setDefaultTime = function () {
      // set to default
      $scope.prevHour = '9';
      $scope.hour = '9';
      $scope.prevMinute = '00';
      $scope.minute = '00';
      $scope.prevNoon = 'AM';
      $scope.noon = 'AM';
      $scope.timeZoneIndex = 7;
      $scope.prevTimeZone = $scope.timeZoneList[$scope.timeZoneIndex];
      $scope.timeZone = $scope.timeZoneList[$scope.timeZoneIndex];
    };
    // void
    controller.displayNothing = function () {
      $scope.prevHour = '';
      $scope.hour = '';
      $scope.prevMinute = '';
      $scope.minute = '';
      $scope.prevNoon = '';
      $scope.noon = '';
      $scope.prevTimeZone = '';
      $scope.timeZone = '';
    };
    controller.removeLeadingZero = function (numString) {
      return numString.replace(/^0+/, '');
    };
    (function init() {
      if ($scope.time) {
        if (!controller.isInvalidFormat()) {
          var timezoneString, times;
          var timezoneRange = '-';
          if ($scope.time.split('.').length === 3) {
            var time_format_period = $scope.time.split('.');
            $scope.prevHour = controller.removeLeadingZero(time_format_period[0]);
            $scope.hour = controller.removeLeadingZero(time_format_period[0]);
            $scope.prevMinute = time_format_period[1];
            $scope.minute = time_format_period[1];
            if ($scope.timezoneMode) {
              times = time_format_period[2].split('-');
              if (times.length === 1) {
                times = time_format_period[2].split('+');
                timezoneRange = '+';
              }
              time_format_period[2] = times[0];
              timezoneString = timezoneRange + times[1];
              $scope.timeZoneIndex = _.indexOf($scope.timeZoneList, $scope.timeZone);
              $scope.timeZone = 'GMT' + timezoneString;
              $scope.prevTimeZone = 'GMT' + timezoneString;
            }
            $scope.prevNoon = time_format_period[2].toUpperCase();
            $scope.noon = time_format_period[2].toUpperCase();
          } else {
            var time_format_colon = $scope.time.split(':');
            $scope.prevHour = controller.removeLeadingZero(time_format_colon[0]);
            $scope.hour = controller.removeLeadingZero(time_format_colon[0]);
            $scope.prevMinute = time_format_colon[1];
            $scope.minute = time_format_colon[1];
            if ($scope.timezoneMode) {
              times = time_format_colon[2].split('-');
              if (times.length === 1) {
                times = time_format_colon[2].split('+');
                timezoneRange = '+';
              }
              time_format_colon[2] = times[0];
              timezoneString = timezoneRange + times[1];
              $scope.timeZoneIndex = _.indexOf($scope.timeZoneList, $scope.timeZone);
              $scope.timeZone = 'GMT' + timezoneString;
              $scope.prevTimeZone = 'GMT' + timezoneString;
            }
            $scope.prevNoon = time_format_colon[2].toUpperCase();
            $scope.noon = time_format_colon[2].toUpperCase();
          }
        } else {
          // not valid, so display nothing in the component ui
          controller.displayNothing();
        }
      } else {
        controller.setDefaultTime();
      }
    }());
  }
]);
/*jshint evil:true*/
'use strict';
angular.module('ark-components').directive('arkTimePicker', function () {
  return {
    restrict: 'E',
    scope: {
      time: '=ngModel',
      headerLabel: '@label',
      widgetMode: '@',
      timezoneMode: '@'
    },
    controller: 'arkTimePickerCtrl',
    templateUrl: 'ark-time-picker/ark-time-picker.html',
    link: function ($scope) {
      $scope.widgetMode = $scope.$eval($scope.widgetMode) || false;
      $scope.timezoneMode = $scope.$eval($scope.timezoneMode) || false;
      $scope.$watchCollection('[hour, minute, noon, timeZone]', function () {
        $scope.time = $scope.hour + '.' + $scope.minute + '.' + $scope.noon;
        if ($scope.timezoneMode) {
          $scope.time += $scope.timeZone;
          $scope.time = $scope.time.replace('GMT', '');
        }
      });
    }
  };
}).directive('whilePressed', [
  '$parse',
  '$interval',
  function ($parse, $interval) {
    return {
      restrict: 'A',
      link: function (scope, element, attrs) {
        var action = $parse(attrs.whilePressed), intervalPromise = null, TICK_LENGTH = 250;
        function tickAction() {
          action(scope);
        }
        function bindWhilePressed() {
          element.on('mousedown', beginAction);
        }
        function beginAction(e) {
          e.preventDefault();
          scope.$apply(action);
          intervalPromise = $interval(tickAction, TICK_LENGTH);
          element.on('mouseup', endAction);
          element.on('mouseleave', endAction);
        }
        function endAction() {
          $interval.cancel(intervalPromise);
          element.off('mouseup', endAction);
          element.off('mouseleave', endAction);
        }
        bindWhilePressed();
      }
    };
  }
]);
/*jshint evil:false*/
'use strict';
/*
 * AngularJS Toaster
 * Version: 0.4.7
 *
 * Copyright 2013 Jiri Kavulak.
 * All Rights Reserved.
 * Use, reproduction, distribution, and modification of this code is subject to the terms and
 * conditions of the MIT license, available at http://www.opensource.org/licenses/mit-license.php
 *
 * Author: Jiri Kavulak
 * Related to project of John Papa and Hans Fjällemark
 */
angular.module('ark-components').service('toaster', [
  '$rootScope',
  function ($rootScope) {
    this.pop = function (type, title, body, timeout, clickHandler) {
      this.toast = {
        type: type,
        title: title,
        body: body,
        timeout: timeout,
        bodyOutputType: '',
        clickHandler: clickHandler
      };
      $rootScope.$broadcast('toaster-newToast');
    };
    this.clear = function () {
      $rootScope.$broadcast('toaster-clearToasts');
    };
  }
]).constant('toasterConfig', {
  'limit': 0,
  'close-button': false,
  'time-out': 3000,
  'icon-classes': {
    error: 'icon-alert-circle',
    info: 'icon-alert-info',
    wait: 'icon-clock',
    success: 'icon-alert-checkmark',
    warning: 'icon-alert-triangle'
  },
  'body-output-type': '',
  'body-template': 'toasterBodyTmpl.html',
  'icon-class': 'icon-alert-info',
  'position-class': 'toast-bottom-right',
  'title-class': 'toast-title',
  'message-class': 'toast-message',
  'check-for-navbar': false,
  'width': 22.5
}).directive('arkToaster', [
  '$compile',
  '$timeout',
  '$sce',
  'toasterConfig',
  'toaster',
  function ($compile, $timeout, $sce, toasterConfig, toaster) {
    return {
      replace: true,
      restrict: 'EA',
      scope: true,
      link: function (scope, elm, attrs) {
        var id = 0, mergedConfig = {};
        function configure (options) {
          mergedConfig = angular.extend({}, toasterConfig, options);
          scope.config = {
            position: mergedConfig['position-class'],
            title: mergedConfig['title-class'],
            message: mergedConfig['message-class'],
            closeButton: mergedConfig['close-button'],
            width: mergedConfig.width
          };
        }
        configure();
        scope.$watch(attrs.toasterOptions, configure);

        scope.configureTimer = function configureTimer(toast) {
          var timeout = typeof toast.timeout === 'number' ? toast.timeout : mergedConfig['time-out'];
          if (timeout > 0 && !toast.timerId) {
            toast.timerId = $timeout(function () {
              scope.removeToast(toast.id);
            }, timeout);
          }
        };
        scope.setTop = function () {
          var boundClient = angular.element('nav.navbar.navbar-default')[0].getBoundingClientRect();
          var newVal = boundClient.top + boundClient.height;
          switch (true) {
          case newVal < 0:
            elm.css('bottom', 0);
            break;
          case newVal >= 0:
            elm.css('bottom', newVal);
            break;
          }
        };
        if (mergedConfig['check-for-navbar'] && angular.element('nav.navbar.navbar-default').length) {
          scope.$watch(function () {
            return scope.toasters.length;
          }, function (newVal) {
            if (newVal === 0) {
              window.removeEventListener('scroll', scope.setTop);
            }
          }, true);
        }
        function addToast(toast) {
          if (mergedConfig['check-for-navbar'] && angular.element('nav.navbar.navbar-default').length) {
            window.addEventListener('scroll', scope.setTop);
            scope.setTop();
          }
          toast.type = mergedConfig['icon-classes'][toast.type];
          if (!toast.type) {
            toast.type = mergedConfig['icon-class'];
          }
          id++;
          angular.extend(toast, { id: id });
          // // Set the toast.bodyOutputType to the default if it isn't set
          // toast.bodyOutputType = toast.bodyOutputType || mergedConfig['body-output-type'];
          // switch (toast.bodyOutputType) {
          //     case 'trustedHtml':
          //         toast.html = $sce.trustAsHtml(toast.body);
          //         break;
          //     case 'template':
          //         toast.bodyTemplate = toast.body || mergedConfig['body-template'];
          //         break;
          // }
          scope.configureTimer(toast);
          //if (mergedConfig['newest-on-top'] === true) {
          scope.toasters.unshift(toast);
          if (mergedConfig.limit > 0 && scope.toasters.length > mergedConfig.limit) {
            scope.toasters.pop();  // } else {
                                   //     scope.toasters.push(toast);
                                   //     if (mergedConfig.limit > 0 && scope.toasters.length > mergedConfig.limit) {
                                   //         scope.toasters.shift();
                                   //     }
          }
        }
        scope.toasters = [];
        scope.$on('toaster-newToast', function () {
          addToast(toaster.toast);
        });
        scope.$on('toaster-clearToasts', function () {
          scope.toasters.splice(0, scope.toasters.length);
        });
      },
      controller: [
        '$scope',
        function ($scope) {
          $scope.stopTimer = function (toast) {
            if (toast.timerId) {
              $timeout.cancel(toast.timerId);
              toast.timerId = null;
            }
          };
          $scope.restartTimer = function (toast) {
            if (!toast.timerId) {
              $scope.configureTimer(toast);
            }
          };
          $scope.removeToast = function (id) {
            var i = 0;
            for (i; i < $scope.toasters.length; i++) {
              if ($scope.toasters[i].id === id) {
                break;
              }
            }
            $scope.toasters.splice(i, 1);
          };
          $scope.click = function (toaster) {
            //if ($scope.config.tap === true) {
            if (toaster.clickHandler && angular.isFunction($scope.$parent.$eval(toaster.clickHandler))) {
              $scope.$parent.$eval(toaster.clickHandler)(toaster);
              // var result = $scope.$parent.$eval(toaster.clickHandler)(toaster);
              //if (result === true) {
              $scope.removeToast(toaster.id);  //}
            } else {
              if (angular.isString(toaster.clickHandler)) {
                console.log('TOAST-NOTE: Your click handler is not inside a parent scope of toaster-container.');
              }
              $scope.removeToast(toaster.id);
            }  //}
          };
        }
      ],
      template: '<div id="toast-container" ng-class="config.position" style="width: {{config.width}}%">' + '<div class="toaster-top-bar" ng-show="toasters.length > 4">{{toasters.length}} notifications<div class="toaster-hide-all" ng-click="clear()">Hide all</div></div>' + '<div ng-repeat="toaster in toasters" class="toast" ng-click="click(toaster)" ng-mouseover="stopTimer(toaster)" ng-mouseout="restartTimer(toaster)">' + '<button class="toast-close-button" ng-show="config.closeButton"><span class="icon-close close toaster-dialog-close ng-scope"></span></button>' + '<div class="toaster-message-container">' + '<span ng-class="toaster.type" class="toasterType"></span>' + '<h1><div ng-class="config.title">{{toaster.title}}</div></h1>' + '</div>' + '<div ng-class="config.message" ng-switch on="toaster.bodyOutputType">' + '<div ng-switch-when="trustedHtml" ng-bind-html="toaster.html"></div>' + '<div ng-switch-when="template"><div ng-include="toaster.bodyTemplate"></div></div>' + '<div ng-switch-default >{{toaster.body}}</div>' + '</div>' + '</div>' + '</div>'
    };
  }
]);
'use strict';
angular.module('ark-components').directive('arkToolbar', function () {
  return {
    restrict: 'E',
    transclude: false,
    replace: false,
    scope: true,
    templateUrl: 'ark-toolbar/ark-toolbar.html',
    link: function (scope, element, attributes) {
      var requestedToolbarType = attributes.config;
      scope.$watch(function () {
        return scope[requestedToolbarType];
      }, function () {
        scope.options = scope[requestedToolbarType];
      }, true);
    }  // controller: function($scope, $element, $attrs) {
       //   $scope.$watch(function() {
       //     return angular.element($element).find('input, button.selectpicker').length;
       //   }, function(newV, oldV) {
       //     // Do something every time an input or select tag is rendered in DOM
       //     // nothing implimented yet
       //   });
       // },
  };
});
/*jshint ignore:start*/
'use strict';
angular.module('ark-components').directive('parseHandlers', [
  '$compile',
  function ($compile) {
    return {
      restrict: 'A',
      scope: { handlerArray: '=' },
      link: function ($scope, element, attrs) {
        for (var i = 0; i < $scope.handlerArray.length; i++) {
          if ($scope.handlerArray[i].handler) {
            if (angular.isFunction($scope.handlerArray[i].handler)) {
              var name = $scope.handlerArray[i].handlerName;
              var handler = $scope.handlerArray[i].handler;
              element.bind(name, function (event) {
                handler(event);
              });
            } else {
              element.attr($scope.handlerArray[i].handlerName, $scope.handlerArray[i].handler);
            }
          } else {
            element.attr($scope.handlerArray[i].handlerName, '');
          }
        }
      }
    };
  }
]);  /*jshint ignore:start*/
'use strict';

angular.module('ark-dashboard', ['ark-ui-bootstrap', 'ui.sortable', 'nvd3']);

angular.module('ark-dashboard')
  .directive('dashboard', ['WidgetModel', 'ExpandToTabModel', 'WidgetDefCollection', '$modal', 'DashboardState', '$log', 'DashboardMenuObject', function (WidgetModel, ExpandToTabModel, WidgetDefCollection, $modal, DashboardState, $log, DashboardMenuObject) {
    return {
      restrict: 'A',
      templateUrl: function(element, attr) {
        return attr.templateUrl ? attr.templateUrl : 'src/dashboard/template/dashboard.html';
      },
      scope: true,

      controller: ['$scope', '$attrs', function (scope, attrs) {

        // default options
        var defaults = {
          stringifyStorage: true,
          hideWidgetSettings: false,
          hideWidgetClose: false,
          hideWidgetName: true,
          settingsModalOptions: {
            templateUrl: 'src/dashboard/template/rename-template.html',
            controller: 'renameModalCtrl'
          }
        };

        // from dashboard="options"
        scope.options = scope.$eval(attrs.dashboard);

        // Deep options
        scope.options.settingsModalOptions = scope.options.settingsModalOptions || {};
        _.each(['settingsModalOptions'], function(key) {
          // Ensure it exists on scope.options
          scope.options[key] = scope.options[key] || {};
          // Set defaults
          _.defaults(scope.options[key], defaults[key]);
        });

        // Shallow options
        _.defaults(scope.options, defaults);

        var sortableDefaults = {
          stop: function () {
            scope.saveDashboard();
          },
          handle: '.widget-header'
        };
        scope.sortableOptions = angular.extend({}, sortableDefaults, scope.options.sortableOptions || {});


      }],
      link: function (scope) {
        scope.widgetList = new DashboardMenuObject(scope.options.customWidgetDropdownMenu, scope.options.customWidgetDropdownActions);

        scope.defaultWidgetActions = [
            {
              'renameWidget' : function(widget) {
                scope.openWidgetSettings(widget);
              }
            },
            {
              'clone' : function(widget) {
                scope.clone(widget);
              }
            },
            {
              'removeWidget' : function(widget) {
                scope.removeWidget(widget);
              }
            }
          ];

        // Save default widget config for reset
        scope.defaultWidgets = scope.options.defaultWidgets;

        //scope.widgetDefs = scope.options.widgetDefinitions;
        scope.widgetDefs = new WidgetDefCollection(scope.options.widgetDefinitions);
        var count = 1;

        // Instantiate new instance of dashboard state
        scope.dashboardState = new DashboardState(
          scope.options.storage,
          scope.options.storageId,
          scope.options.storageHash,
          scope.widgetDefs,
          scope.options.stringifyStorage
        );

        scope.gridsterOpts = {
          columns: 6, // the width of the grid, in columns
          pushing: true, // whether to push other items out of the way on move or resize
          floating: true, // whether to automatically float items up so they stack (you can temporarily disable if you are adding unsorted items with ng-repeat)
          swapping: false, // whether or not to have items of the same size switch places instead of pushing down if they are the same size
          width: 'auto', // can be an integer or 'auto'. 'auto' scales gridster to be the full width of its containing element
          colWidth: 200, // can be an integer or 'auto'.  'auto' uses the pixel width of the element divided by 'columns'
          rowHeight: 200, // can be an integer or 'match'.  Match uses the colWidth, giving you square widgets.
          margins: [0, 0], // the pixel distance between each widget
          outerMargin: true, // whether margins apply to outer edges of the grid
          isMobile: true, // stacks the grid items if true
          mobileBreakPoint: 767, // if the screen is not wider that this, remove the grid layout and stack the items
          mobileModeEnabled: true, // whether or not to toggle mobile mode when screen width is less than mobileBreakPoint
          minColumns: 1, // the minimum columns the grid must have
          minRows: 1, // the minimum height of the grid, in rows
          maxRows: 100,
          defaultSizeX: 2, // the default width of a gridster item, if not specifed
          defaultSizeY: 2, // the default height of a gridster item, if not specified
          minSizeX: 1, // minimum column width of an item
          maxSizeX: null, // maximum column width of an item
          minSizeY: 1, // minumum row height of an item
          maxSizeY: null, // maximum row height of an item
          resizable: {
            enabled: true,
            handles: ['n', 'e', 's', 'w', 'ne', 'se', 'sw', 'nw'],
            stop: function (el, ui, widget) {
              scope.$emit('RESIZED', {
                resolution: {
                  width: $(ui[0].children[0].lastElementChild).width(),
                  height: $(ui[0].children[0].lastElementChild).height()
                },
                widget: widget
              });
              scope.resize();

              // Trigger 'resize' event of widget content manually
              var $elem = $(ui[0].children[0].lastElementChild).children();
              $elem.trigger($.Event('resize'));
            }
          },
          draggable: {
            enabled: true, // whether dragging items is supported
            handle: '.widget-anchor',
            stop: function () {
              scope.drag();
            }
          }
        };

        /**
         * Resize widget and save sizes
         * @param  {Object} widget The widget instance object (not a definition object)
         */
        scope.resize = function() {
          scope.saveDashboard(true);
        };

        /**
         * Grag widget and save sizes
         * @param  {Object} widget The widget instance object (not a definition object)
         */
        scope.drag = function() {
          scope.saveDashboard(true);
        };

        /**
         * Instantiates a new widget on the dashboard
         * @param {Object} widgetToInstantiate The definition object of the widget to be instantiated
         */
        scope.addWidget = function (widgetToInstantiate, doNotSave) {
          var defaultWidgetDefinition = scope.widgetDefs.getByName(widgetToInstantiate.name);
          if (!defaultWidgetDefinition) {
            throw 'Widget ' + widgetToInstantiate.name + ' is not found.';
          }
          // Determine the title for the new widget
          var title;
          if (widgetToInstantiate.title) {
            title = widgetToInstantiate.title;
          } else if (defaultWidgetDefinition.title) {
            title = defaultWidgetDefinition.title;
          } else {
            title = 'Widget ' + count++;
          }

         // Determine the sizes for the new widget
          var sizeX;
          var sizeY;
          if(widgetToInstantiate.sizeX) {
            sizeX = widgetToInstantiate.sizeX;
          }
          if(widgetToInstantiate.sizeY) {
            sizeY = widgetToInstantiate.sizeY;
          }

         // Determine the row and column positions for the new widget
          var row;
          var col;
          if(widgetToInstantiate.row !== undefined) {
            row = widgetToInstantiate.row;
          }
          if(widgetToInstantiate.col) {
            col = widgetToInstantiate.col;
          } else {
            col = 0;
          }

          // Deep extend a new object for instantiation
          widgetToInstantiate = angular.extend(widgetToInstantiate, defaultWidgetDefinition);

          var chartOptions = widgetToInstantiate.chartOptions;
          var chartData = widgetToInstantiate.chartData;

          // Instantiation
          var widget = new WidgetModel(widgetToInstantiate, {
            title: title,
            sizeX:sizeX,
            sizeY:sizeY,
            row: row,
            col: col,
            chartOptions: chartOptions,
            chartData: chartData
          });

          scope.widgets.push(widget);
          if (!doNotSave) {
            scope.saveDashboard();
          }

          return widget;
        };

        /**
         * Removes a widget instance from the dashboard
         * @param  {Object} widget The widget instance object (not a definition object)
         */
        scope.removeWidget = function (widget) {
          scope.deleteWidget(widget.attrs.id).then(function() {
            scope.widgets.splice(_.indexOf(scope.widgets, widget), 1);
            scope.saveDashboard(true);
          });
        };

        /**
         * Expands current widget to new tab full size
         * @param  {Object} widget The widget instance object (not a definition object)
         */
        scope.expandToTab = function (widget) {

          var newL = scope.$parent.$parent.createNewLayout(true);

          var title = widget.title;
          var data = widget.chartData;
          var options = widget.chartOptions;

          // // Instantiation
          var newWidget = new ExpandToTabModel(widget, {
            title:title,
            chartData: data,
            chartOptions: options,
            sizeX: 6,
            sizeY: 6
          });

          newL.dashboard.defaultWidgets = [newWidget];
          scope.saveDashboard();
        };

        /**
         * Opens a dialog for setting and changing widget properties
         * @param  {Object} widget The widget instance object
         */
        scope.openWidgetSettings = function (widget) {

          // Set up $modal options
          var options = _.defaults(
            { scope: scope },
            widget.settingsModalOptions,
            scope.options.settingsModalOptions);

          // Ensure widget is resolved
          options.resolve = {
            title: function () {
              return widget.title;
            },
            type: function () {
              return 'Widget';
            }
          };
          var oldtitle = widget.title;

          // Create the modal
          var modalInstance = $modal.open(options);

          // Set resolve and reject callbacks for the result promise
          modalInstance.result.then(
            function (result) {
              widget.title = result;
              //AW Persist title change from options editor
              scope.$emit('widgetChanged', widget);
              //Save dashboard
              scope.saveDashboard(true);

              scope.updateWidget(widget);
            },
            function () {
              widget.title = oldtitle;
            }
          );

        };

        /**
         * Remove all widget instances from dashboard
         */
        scope.clear = function (doNotSave) {
          scope.widgets = [];
          if (doNotSave === true) {
            return;
          }
          scope.saveDashboard(true);
        };

        /**
         * Clone current widget
         * @param  {Object} widget The widget instance object
         */
        scope.clone = function (widget) {

          var title = widget.title;
          var sizeX;
          var sizeY;

          if(widget.sizeX) {
            sizeX = widget.sizeX;
          }
          if(widget.sizeY) {
            sizeY = widget.sizeY;
          }

          // Instantiation
          var clonewidget = new WidgetModel(widget, {
            title:title,
            sizeX:sizeX,
            sizeY:sizeY
          });

          scope.widgets.push(clonewidget);
          scope.saveDashboard();

          return clonewidget;
        };

        /**
         * Used for preventing default on click event
         * @param {Object} event     A click event
         * @param {Object} widgetDef A widget definition object
         */
        scope.addWidgetInternal = function (event, widgetDef) {
          event.preventDefault();
          scope.addWidget(widgetDef);
        };

        /**
         * Uses dashboardState service to save state
         */
        scope.saveDashboard = function (force) {
          if (!scope.options.explicitSave) {
            scope.updateSizeAndPosition(scope.selectedLayout.id, scope.widgets);
            scope.dashboardState.save(scope.widgets);
          } else {
            if (!angular.isNumber(scope.options.unsavedChangeCount)) {
              scope.options.unsavedChangeCount = 0;
            }
            if (force) {
              scope.options.unsavedChangeCount = 0;
              scope.dashboardState.save(scope.widgets);

            } else {
              ++scope.options.unsavedChangeCount;
            }
          }
        };

        /**
         * Wraps saveDashboard for external use.
         */
        scope.externalSaveDashboard = function() {
          scope.saveDashboard(true);
        };

        /**
         * Clears current dash and instantiates widget definitions
         * @param  {Array} widgets Array of definition objects
         */
        scope.loadWidgets = function (widgets) {
          // AW dashboards are continuously saved today (no "save" button).
          //scope.defaultWidgets = widgets;
          scope.savedWidgetDefs = widgets;
          scope.clear(true);
          _.each(widgets, function (widgetDef) {
            scope.addWidget(widgetDef, true);
          });
        };

        /**
         * Resets widget instances to default config
         * @return {[type]} [description]
         */
        scope.resetWidgetsToDefault = function () {
          scope.loadWidgets(scope.defaultWidgets);
          scope.saveDashboard();
        };

        // Set default widgets array
        var savedWidgetDefs = scope.dashboardState.load();

        // Success handler
        function handleStateLoad(saved) {
          scope.options.unsavedChangeCount = 0;
          if (saved && saved.length) {
            scope.loadWidgets(saved);
          } else if (scope.defaultWidgets) {
            scope.loadWidgets(scope.defaultWidgets);
          } else {
            scope.clear(true);
          }
        }

        angular.element(document).on('click', 'a.nav-tabs-dropdown', function (event) {
          angular.element('.widget-container').removeClass('gridster-item-moving-dropdown-open');
          angular.element(this).closest('.widget-container').addClass('gridster-item-moving-dropdown-open');
          var width = angular.element(window).width();
          var leftOffset = event.pageX;
          if(width - leftOffset < 220 ) {
            angular.element('.nav-tabs-dropdown-menu').addClass('dropdown-menu-pull-right');
            angular.element('.nav-tabs-dropdown-menu').removeClass('dropdown-menu-pull-left');
          } else {
            angular.element('.nav-tabs-dropdown-menu').removeClass('dropdown-menu-pull-right');
            angular.element('.nav-tabs-dropdown-menu').addClass('dropdown-menu-pull-left');
          }
        });

        if (angular.isArray(savedWidgetDefs)) {
          handleStateLoad(savedWidgetDefs);
        } else if (savedWidgetDefs && angular.isObject(savedWidgetDefs) && angular.isFunction(savedWidgetDefs.then)) {
          savedWidgetDefs.then(handleStateLoad, handleStateLoad);
        } else {
          handleStateLoad();
        }

        // expose functionality externally
        // functions are appended to the provided dashboard options
        scope.options.addWidget = scope.addWidget;
        scope.options.loadWidgets = scope.loadWidgets;
        scope.options.saveDashboard = scope.externalSaveDashboard;
        scope.options.removeWidget = scope.removeWidget;
        scope.options.openWidgetSettings = scope.openWidgetSettings;

        // save state
        scope.$on('widgetChanged', function (event) {
          event.stopPropagation();
          scope.saveDashboard();
        });
      }
    };
  }]);

'use strict';

angular.module('ark-dashboard')
  .directive('dashboardLayouts', ['LayoutStorage', '$timeout', '$modal', 'LayoutMenuObject', '$http', 'WidgetDataModel',
    function(LayoutStorage, $timeout, $modal, LayoutMenuObject, $http, WidgetDataModel) {
      return {
        scope: true,
        templateUrl: function(element, attr) {
          return attr.templateUrl ? attr.templateUrl : 'src/dashboard/template/dashboard-layouts.html';
        },
        link: function(scope, element, attrs) {

          scope.widgetLayout = true;

          scope.getLayouts();

          scope.options = scope.$eval(attrs.dashboardLayouts);
          var layoutStorage = new LayoutStorage(scope.options);
          scope.layouts = layoutStorage.layouts;
          scope.layoutList = new LayoutMenuObject(scope.options.customLayoutDropdownMenu, scope.options.customLayoutDropdownActions);

          scope.$on('readyLayouts', function (event, layouts) {
            layouts.forEach(function (dashboard, index) {
              var newLayout = angular.extend(dashboard, {type: 'widget'});
              newLayout.defaultWidgets = dashboard.defaultWidgets || scope.options.defaultWidgets;

              layoutStorage.add(newLayout);
              if (index === 0) {
                scope._makeLayoutActive(newLayout);
              }
              layoutStorage.save();
            });
          });

          scope.defaultLayoutActions = [
            {
              'renameLayout' : function() {
                scope.renameLayout();
              }
            },
            {
              'resetWidgetsToDefault' : function() {
                scope.resetWidgetsToDefault();
              }
            },
            {
              'saveDashboard' : function() {
                scope.options.saveDashboard();
              }
            },
            {
              'removeLayout' : function() {
                scope.removeLayout();
              }
            },
            {
              'shareLayout' : function () {
                scope.shareLayout();
              }
            }
          ];

          scope.createNewLayout = function() {
            scope.buildDashboard();
          };

          scope.createNewWidget = function(layout) {
            scope.buildWidget(layout);
          };

          scope.$on('dashboardBuilt', function (event, dashboard) {
            var newLayout = {
              title: dashboard.title,
              type: 'widget',
              owner: dashboard.owner_name,
              author: dashboard.author_name,
              authorId: dashboard.author,
              ownerId: dashboard.owner,
              accountId: dashboard.account_id,
              type_id: dashboard.type_id,
              isTypeDefault: dashboard.type == 'blank',
              dashboardType: dashboard.type,
              id: dashboard.id,
              filters: dashboard.filters,
              defaultWidgets: dashboard.widgets || scope.options.defaultWidgets,
              shared_to: dashboard.shared_to
            };
            layoutStorage.add(newLayout);
            scope.addNewDashboard(newLayout);
            scope._makeLayoutActive(newLayout);
            layoutStorage.save();
            return newLayout;
          });

          scope.removeLayout = function(curlayout) {
            var layout = curlayout || layoutStorage.getActiveLayout();
            layoutStorage.remove(layout);

            scope.removeDashboard(layout);
            var activeLayout = layoutStorage.getActiveLayout();
            activeLayout && scope._makeLayoutActive(activeLayout);

            layoutStorage.save();
          };

          scope.makeLayoutActive = function(layout) {
            var current = layoutStorage.getActiveLayout();

            if (current && current.dashboard.unsavedChangeCount) {
              var modalInstance = $modal.open({
                templateUrl: 'src/dashboard/template/save-changes-modal.html',
                resolve: {
                  layout: function() {
                    return layout;
                  }
                },
                controller: 'SaveChangesModalCtrl'
              });

              // Set resolve and reject callbacks for the result promise
              modalInstance.result.then(
                function() {
                  scope.options.saveDashboard();
                  scope._makeLayoutActive(layout);
                },
                function() {
                  scope._makeLayoutActive(layout);
                }
              );
            } else {
              scope._makeLayoutActive(layout);
            }

          };

          scope._makeLayoutActive = function(layout) {
            scope.selectDashboard(layout);
            angular.forEach(scope.layouts, function(l) {
              if (l !== layout) {
                l.active = false;
              } else {
                l.active = true;
              }
            });
            layoutStorage.save();
          };

          scope.isActive = function(layout) {
            return !!layout.active;
          };

          scope.renameLayout = function(curlayout) {

            var layout = curlayout || layoutStorage.getActiveLayout();

            var modalInstance = $modal.open({
              templateUrl: 'src/dashboard/template/rename-template.html',
              resolve: {
                title: function() {
                  return layout.title;
                },
                type: function() {
                  return 'Dashboard';
                }
              },
              controller: 'renameModalCtrl'
            });

            var oldtitle = layout.title;

            // Set resolve and reject callbacks for the result promise
            modalInstance.result.then(
              function (result) {
                layout.title = result;

                scope.updateDashboard(layout);

                scope._makeLayoutActive(layout);
                scope.options.saveDashboard();
                scope.addTooptip();
              },
              function() {
                layout.title = oldtitle;
                scope._makeLayoutActive(layout);
              }
            );
          };

          scope.shareLayout = function (curlayout) {
            var layout = curlayout || layoutStorage.getActiveLayout();
            scope.shareDashboard(layout);
          };

          // saves whatever is in the title input as the new title
          scope.saveTitleEdit = function(layout) {
            layout.editingTitle = false;
            layoutStorage.save();
          };

          scope.options.saveLayouts = function() {
            layoutStorage.save(true);
          };
          scope.options.addWidget = function() {
            var layout = layoutStorage.getActiveLayout();
            if (layout) {
              layout.dashboard.addWidget.apply(layout.dashboard, arguments);
            }
          };
          scope.options.loadWidgets = function() {
            var layout = layoutStorage.getActiveLayout();
            if (layout) {
              layout.dashboard.loadWidgets.apply(layout.dashboard, arguments);
            }
          };
          scope.resetWidgetsToDefault = function () {
            var layout = layoutStorage.getActiveLayout();
            layout.dashboard.loadWidgets(layout.defaultWidgets);
            scope.options.saveDashboard();
          };
          scope.options.saveDashboard = function() {
            var layout = layoutStorage.getActiveLayout();
            if (layout) {
              layout.dashboard.saveDashboard.apply(layout.dashboard, arguments);
            }
          };

          scope.addTooptip = function () {
            $timeout(function(){
              var el = element.find('.tabs-title');
              for(var i = 0; i < el.length; i++) {
                if(el[i].offsetWidth < el[i].scrollWidth) {
                  scope.layouts[i].showTooltip = true;
                } else {
                  scope.layouts[i].showTooltip = false;
                }
              }
            });
          };

          var sortableDefaults = {
            stop: function() {
              scope.options.saveLayouts();
            },
            axis: 'x',
            placeholder: 'sortable-placeholder'
          };
          scope.sortableOptions = angular.extend({}, sortableDefaults, scope.options.sortableOptions || {});
        }
      };
    }
  ]);

'use strict';

angular.module('ark-dashboard');

angular.module('ark-dashboard')
  .directive('expandToTab', function () {
    return {
      restrict: 'A',
      templateUrl: function(element, attr) {
        return attr.templateUrl ? attr.templateUrl : 'src/dashboard/template/expand-to-tab.html';
      },
      scope: true,

      controller: ['$scope', '$attrs', function (scope, attrs) {

        // from dashboard="options"
        scope.options = scope.$eval(attrs.expandToTab);

        scope.expand = scope.options.defaultWidgets[0];

      }],
      link: function (scope) {

        scope.gridsterOpts = {
          columns: 6, // the width of the grid, in columns
          pushing: true, // whether to push other items out of the way on move or resize
          floating: true, // whether to automatically float items up so they stack (you can temporarily disable if you are adding unsorted items with ng-repeat)
          swapping: false, // whether or not to have items of the same size switch places instead of pushing down if they are the same size
          width: 'auto', // can be an integer or 'auto'. 'auto' scales gridster to be the full width of its containing element
          colWidth: 'auto', // can be an integer or 'auto'.  'auto' uses the pixel width of the element divided by 'columns'
          rowHeight: 'match', // can be an integer or 'match'.  Match uses the colWidth, giving you square widgets.
          margins: [0, 0], // the pixel distance between each widget
          outerMargin: true, // whether margins apply to outer edges of the grid
          isMobile: true, // stacks the grid items if true
          mobileBreakPoint: 767, // if the screen is not wider that this, remove the grid layout and stack the items
          mobileModeEnabled: false, // whether or not to toggle mobile mode when screen width is less than mobileBreakPoint
          minColumns: 1, // the minimum columns the grid must have
          minRows: 2, // the minimum height of the grid, in rows
          maxRows: 100,
          defaultSizeX: 6, // the default width of a gridster item, if not specifed
          defaultSizeY: 6, // the default height of a gridster item, if not specified
          minSizeX: 6, // minimum column width of an item
          maxSizeX: 6, // maximum column width of an item
          minSizeY: 6, // minumum row height of an item
          maxSizeY: 6, // maximum row height of an item
          resizable: {
            enabled: false
          },
          draggable: {
            enabled: false
          }
        };
      }
    };
  });

'use strict';

angular.module('ark-dashboard')
  .directive('widget', ['$injector', function ($injector) {

    return {

      controller: 'DashboardWidgetCtrl',

      link: function (scope) {

        var widget = scope.widget;
        if (_.isUndefined(widget)) return;
        var dataModelType = widget.dataModelType;

        scope.loading = true;
        if (widget.name == 'add-widget') scope.loading = false;

        // set up data source
        if (dataModelType) {
          var DataModelConstructor; // data model constructor function

          if (angular.isFunction(dataModelType)) {
            DataModelConstructor = dataModelType;
          } else if (angular.isString(dataModelType)) {
            $injector.invoke([dataModelType, function (DataModelType) {
              DataModelConstructor = DataModelType;
            }]);
          } else {
            throw new Error('widget dataModelType should be function or string');
          }

          var ds;
          if (widget.dataModelArgs) {
            ds = new DataModelConstructor(widget.dataModelArgs);
          } else {
            ds = new DataModelConstructor();
          }
          widget.dataModel = ds;
          ds.setup(widget, scope);
          ds.init(function dataLoaded() {scope.loading = false;});
          scope.$on('$destroy', _.bind(ds.destroy,ds));
        }

        // Compile the widget template, emit add event
        scope.compileTemplate();
        scope.$emit('widgetAdded', widget);

      }

    };
  }]);

'use strict';

angular.module('ark-dashboard')
  .factory('DashboardMenuObject', function () {
    function DashboardMenuObject(customList, customActions) {

      var defaultList;
      var defaultActions;
      var widgetList = {};
      widgetList.list = {};
      widgetList.actions = {};

      var menuList = {
        'customWidgetMenuList':[
          {
            'menuLocalizedTitle':'Rename',
            'menuIcon':'icon-24-graph-edit',
            'menuOptionKey':'renameWidget'
          },
          // {
            // 'menuLocalizedTitle':'Clone',
            // 'menuIcon':'icon-clone',
            // 'menuOptionKey':'clone'
          // },
          {
            'menuLocalizedTitle':'Delete',
            'menuIcon':'icon-trash',
            'menuOptionKey':'removeWidget',
            'requireConfirmPopup': true,
            'tooltip': 'Delete this widget',
            'confirmMessage': 'Are you sure to delete this widget?'
          }
        ],

        'customWidgetMenuActions':['renameWidget','clone', 'removeWidget']
      };

      defaultList = menuList.customWidgetMenuList;
      defaultActions = menuList.customWidgetMenuActions;

      var overrideList = customList || {};
      var overrideActions = customActions || {};

      widgetList.list = $.merge($.merge([], defaultList), overrideList);
      widgetList.actions = $.merge($.merge([], defaultActions), overrideActions);

      return widgetList;
    }
    return DashboardMenuObject;
  });

'use strict';

angular.module('ark-dashboard')
  .factory('DashboardState', ['$log', '$q', function ($log, $q) {
    function DashboardState(storage, id, hash, widgetDefinitions, stringify) {
      this.storage = storage;
      this.id = id;
      this.hash = hash;
      this.widgetDefinitions = widgetDefinitions;
      this.stringify = stringify;
    }

    DashboardState.prototype = {
      /**
       * Takes array of widget instance objects, serializes,
       * and saves state.
       *
       * @param  {Array} widgets  scope.widgets from dashboard directive
       * @return {Boolean}        true on success, false on failure
       */
      save: function (widgets) {

        if (!this.storage) {
          return true;
        }

        var serialized = _.map(widgets, function (widget) {
          var widgetObject = {
            title: widget.title,
            name: widget.name,
            style: widget.style,
            size: widget.size,
            sizeX: widget.sizeX,
            sizeY: widget.sizeY,
            col: widget.col,
            row: widget.row,
            dataModelOptions: widget.dataModelOptions,
            storageHash: widget.storageHash,
            attrs: widget.attrs
          };

          return widgetObject;
        });

        var item = { widgets: serialized, hash: this.hash };

        if (this.stringify) {
          item = JSON.stringify(item);
        }

        this.storage.setItem(this.id, item);
        return true;
      },

      /**
       * Loads dashboard state from the storage object.
       * Can handle a synchronous response or a promise.
       *
       * @return {Array|Promise} Array of widget definitions or a promise
       */
      load: function () {

        if (!this.storage) {
          return null;
        }

        var serialized;

        // try loading storage item
        serialized = this.storage.getItem( this.id );

        if (serialized) {
          // check for promise
          if (angular.isObject(serialized) && angular.isFunction(serialized.then)) {
            return this._handleAsyncLoad(serialized);
          }
          // otherwise handle synchronous load
          return this._handleSyncLoad(serialized);
        } else {
          return null;
        }
      },

      _handleSyncLoad: function(serialized) {

        var deserialized, result = [];

        if (!serialized) {
          return null;
        }

        if (this.stringify) {
          try { // to deserialize the string

            deserialized = JSON.parse(serialized);

          } catch (e) {

            // bad JSON, log a warning and return
            $log.warn('Serialized dashboard state was malformed and could not be parsed: ', serialized);
            return null;

          }
        }
        else {
          deserialized = serialized;
        }

        // check hash against current hash
        if (deserialized.hash !== this.hash) {

          $log.info('Serialized dashboard from storage was stale (old hash: ' + deserialized.hash + ', new hash: ' + this.hash + ')');
          this.storage.removeItem(this.id);
          return null;

        }

        // Cache widgets
        var savedWidgetDefs = deserialized.widgets;

        // instantiate widgets from stored data
        for (var i = 0; i < savedWidgetDefs.length; i++) {

          // deserialized object
          var savedWidgetDef = savedWidgetDefs[i];

          // widget definition to use
          var widgetDefinition = this.widgetDefinitions.getByName(savedWidgetDef.name);

          // check for no widget
          if (!widgetDefinition) {
            // no widget definition found, remove and return false
            $log.warn('Widget with name "' + savedWidgetDef.name + '" was not found in given widget definition objects');
            continue;
          }

          // check widget-specific storageHash
          if (widgetDefinition.hasOwnProperty('storageHash') && widgetDefinition.storageHash !== savedWidgetDef.storageHash) {
            // widget definition was found, but storageHash was stale, removing storage
            $log.info('Widget Definition Object with name "' + savedWidgetDef.name + '" was found ' +
              'but the storageHash property on the widget definition is different from that on the ' +
              'serialized widget loaded from storage. hash from storage: "' + savedWidgetDef.storageHash + '"' +
              ', hash from WDO: "' + widgetDefinition.storageHash + '"');
            continue;
          }

          // push instantiated widget to result array
          result.push(savedWidgetDef);
        }

        return result;
      },

      _handleAsyncLoad: function(promise) {
        var self = this;
        var deferred = $q.defer();
        promise.then(
          // success
          function(res) {
            var result = self._handleSyncLoad(res);
            if (result) {
              deferred.resolve(result);
            } else {
              deferred.reject(result);
            }
          },
          // failure
          function(res) {
            deferred.reject(res);
          }
        );

        return deferred.promise;
      }

    };
    return DashboardState;
  }]);
'use strict';

angular.module('ark-dashboard')
  .factory('ExpandToTabModel', function () {

    function ExpandToTabModel(Class, overrides) {
      var defaults = {
          title: 'Expanded Tab',
          name: Class.name,
          attrs: Class.attrs
       };

      overrides = overrides || {};
      angular.extend(this, angular.copy(defaults), overrides);
      this.containerStyle = { width: '100%' }; // default width
      this.contentStyle = {};
      this.updateContainerStyle(this.style);

      if (Class.templateUrl) {
        this.templateUrl = Class.templateUrl;
      } else if (Class.template) {
        this.template = Class.template;
      } else {
        var directive = Class.directive || Class.name;
        this.directive = directive;
      }
    }

    ExpandToTabModel.prototype = {
      updateContainerStyle: function (style) {
        angular.extend(this.containerStyle, style);
      }
    };

    return ExpandToTabModel;
  });
'use strict';

angular.module('ark-dashboard')
  .factory('LayoutMenuObject', function () {
    function LayoutMenuObject(customList, customActions) {

      var defaultList;
      var defaultActions;
      var layoutList = {};
      layoutList.list = {};
      layoutList.actions = {};

      var menuList = {
        'customLayoutMenuList':[
          {
            'menuLocalizedTitle':'Rename',
            'menuIcon':'icon-24-graph-edit',
            'menuOptionKey':'renameLayout'
          },
          //{
          //  'menuLocalizedTitle':'Reset To Default Dashboard',
          //  'menuIcon':'icon-reset',
          //  'menuOptionKey':'resetWidgetsToDefault'
          //},
          //{
          //  'menuLocalizedTitle':'Set as Default Dashboard',
          //  'menuIcon':'icon-agent-status-ready',
          //  'menuOptionKey':'saveDashboard'
          //},
          {
            'menuLocalizedTitle':'Share',
            'menuIcon':'icon-share',
            'menuOptionKey':'shareLayout'
          },
          {
            'menuLocalizedTitle':'Delete',
            'menuIcon':'icon-trash',
            'menuOptionKey':'removeLayout',
            'requireConfirmPopup': true,
            'tooltip': 'Delete this dashboard',
            'confirmMessage': 'Are you sure to delete this dashboard?'
          }

        ],

        'customLayoutMenuActions':['renameLayout','resetWidgetsToDefault','saveDashboard', 'removeLayout', 'shareLayout'],
      };

      defaultList = menuList.customLayoutMenuList;
      defaultActions = menuList.customLayoutMenuActions;

      var overrideList = customList || {};
      var overrideActions = customActions || {};

      layoutList.list = $.merge($.merge([], defaultList), overrideList);
      layoutList.actions = $.merge($.merge([], defaultActions), overrideActions);

      return layoutList;
    }
    return LayoutMenuObject;
  });

'use strict';

angular.module('ark-dashboard')
  .factory('LayoutStorage', function() {

    var noopStorage = {
      setItem: function() {

      },
      getItem: function() {

      },
      removeItem: function() {

      }
    };


    function LayoutStorage(options) {

      var defaults = {
        storage: noopStorage,
        storageHash: '',
        stringifyStorage: true
      };

      angular.extend(defaults, options);
      angular.extend(options, defaults);

      this.id = options.storageId;
      this.storage = options.storage;
      this.storageHash = options.storageHash;
      this.stringifyStorage = options.stringifyStorage;
      this.widgetDefinitions = options.widgetDefinitions;
      this.defaultLayouts = options.defaultLayouts;
      this.lockDefaultLayouts = options.lockDefaultLayouts;
      this.widgetButtons = options.widgetButtons;
      this.customWidgetDropdownMenu = options.customWidgetDropdownMenu;
      this.customWidgetDropdownActions = options.customWidgetDropdownActions;
      this.customLayoutDropdownMenu = options.customLayoutDropdownMenu;
      this.customLayoutDropdownActions = options.customLayoutDropdownActions;
      this.explicitSave = options.explicitSave;
      this.defaultWidgets = options.defaultWidgets;
      this.settingsModalOptions = options.settingsModalOptions;
      this.options = options;
      this.options.unsavedChangeCount = 0;

      this.layouts = [];
      this.states = {};
      this.load();
      this._ensureActiveLayout();
    }

    LayoutStorage.prototype = {

      add: function(layouts) {
        if (!angular.isArray(layouts)) {
          layouts = [layouts];
        }
        var self = this;
        angular.forEach(layouts, function(layout) {
          layout.dashboard = layout.dashboard || {};
          layout.dashboard.storage = self;
          layout.dashboard.storageId = layout.id = self._getLayoutId.call(self,layout);
          layout.dashboard.widgetDefinitions = self.widgetDefinitions;
          layout.dashboard.stringifyStorage = false;
          layout.dashboard.defaultWidgets = layout.defaultWidgets || self.defaultWidgets;
          layout.dashboard.widgetButtons = self.widgetButtons;
          layout.dashboard.explicitSave = self.explicitSave;
          layout.dashboard.settingsModalOptions = self.settingsModalOptions;
          layout.dashboard.customWidgetDropdownMenu = self.customWidgetDropdownMenu;
          layout.dashboard.customWidgetDropdownActions = self.customWidgetDropdownActions;
          self.layouts.push(layout);
        });
      },

      remove: function(layout) {
        var index = this.layouts.indexOf(layout);
        if (index >= 0) {
          this.layouts.splice(index, 1);
          delete this.states[layout.id];

          // check for active
          if (layout.active && this.layouts.length) {
            var nextActive = index > 0 ? index - 1 : 0;
            this.layouts[nextActive].active = true;
          }
        }
      },

      save: function() {

        var state = {
          layouts: this._serializeLayouts(),
          states: this.states,
          storageHash: this.storageHash
        };

        if (this.stringifyStorage) {
          state = JSON.stringify(state);
        }

        this.storage.setItem(this.id, state);
        this.options.unsavedChangeCount = 0;
      },

      load: function() {

        var serialized = this.storage.getItem(this.id);

        this.clear();

        if (serialized) {
          // check for promise
          if (angular.isObject(serialized) && angular.isFunction(serialized.then)) {
            this._handleAsyncLoad(serialized);
          } else {
            this._handleSyncLoad(serialized);
          }
        } else {
          this._addDefaultLayouts();
        }
      },

      clear: function() {
        this.layouts = [];
        this.states = {};
      },

      setItem: function(id, value) {
        this.states[id] = value;
        this.save();
      },

      getItem: function(id) {
        return this.states[id];
      },

      removeItem: function(id) {
        delete this.states[id];
        this.save();
      },

      getActiveLayout: function() {
        var len = this.layouts.length;
        for (var i = 0; i < len; i++) {
          var layout = this.layouts[i];
          if (layout.active) {
            return layout;
          }
        }
        return false;
      },

      _addDefaultLayouts: function() {
        var self = this;
        var defaults = this.lockDefaultLayouts ? { locked: true } : {};
        angular.forEach(this.defaultLayouts, function(layout) {
          self.add(angular.extend(_.clone(defaults), layout));
        });
      },

      _serializeLayouts: function() {
        var result = [];
        angular.forEach(this.layouts, function(l) {
          result.push({
            title: l.title,
            id: l.id,
            active: l.active,
            locked: l.locked,
            type: l.type,
            defaultWidgets: l.dashboard.defaultWidgets
          });
        });
        return result;
      },

      _handleSyncLoad: function(serialized) {

        var deserialized;

        if (this.stringifyStorage) {
          try {

            deserialized = JSON.parse(serialized);

          } catch (e) {
            this._addDefaultLayouts();
            return;
          }
        } else {

          deserialized = serialized;

        }

        if (this.storageHash !== deserialized.storageHash) {
          this._addDefaultLayouts();
          return;
        }
        this.states = deserialized.states;
        this.add(deserialized.layouts);
      },

      _handleAsyncLoad: function(promise) {
        var self = this;
        promise.then(
          angular.bind(self, this._handleSyncLoad),
          angular.bind(self, this._addDefaultLayouts)
        );
      },

      _ensureActiveLayout: function() {
        for (var i = 0; i < this.layouts.length; i++) {
          var layout = this.layouts[i];
          if (layout.active) {
            return;
          }
        }
        if (this.layouts[0]) {
          this.layouts[0].active = true;
        }
      },

      _getLayoutId: function(layout) {
        if (layout.id) {
          return layout.id;
        }
        var max = 0;
        for (var i = 0; i < this.layouts.length; i++) {
          var id = this.layouts[i].id;
          max = Math.max(max, id * 1);
        }
        return max + 1;
      }

    };
    return LayoutStorage;
  });

'use strict';

angular.module('ark-dashboard')
  .factory('WidgetDataModel', function () {
    function WidgetDataModel() {
    }

    WidgetDataModel.prototype = {
      setup: function (widget, scope) {
        this.dataAttrName = widget.dataAttrName;
        this.dataModelOptions = widget.dataModelOptions;
        this.widgetScope = scope;
      },

      updateScope: function (data) {
        this.widgetScope.widgetData = data;
      },

      init: function () {
        // to be overridden by subclasses
      },

      destroy: function () {
        // to be overridden by subclasses
      }
    };

    return WidgetDataModel;
  });
'use strict';

angular.module('ark-dashboard')
  .factory('WidgetDefCollection', function () {
    function WidgetDefCollection(widgetDefs) {
      this.push.apply(this, widgetDefs);

      // build (name -> widget definition) map for widget lookup by name
      var map = {};
      _.each(widgetDefs, function (widgetDef) {
        map[widgetDef.name] = widgetDef;
      });
      this.map = map;
    }

    WidgetDefCollection.prototype = Object.create(Array.prototype);

    WidgetDefCollection.prototype.getByName = function (name) {
      return this.map[name];
    };

    return WidgetDefCollection;
  });
'use strict';

angular.module('ark-dashboard')
  .factory('WidgetModel', ['$log', function ($log) {
    // constructor for widget model instances
    function WidgetModel(Class, overrides) {
      var defaults = {
          title: 'Widget',
          name: Class.name,
          attrs: Class.attrs,
          dataAttrName: Class.dataAttrName,
          dataModelType: Class.dataModelType,
          dataModelArgs: Class.dataModelArgs, // used in data model constructor, not serialized
          //AW Need deep copy of options to support widget options editing
          dataModelOptions: Class.dataModelOptions,
          settingsModalOptions: Class.settingsModalOptions,
          onSettingsClose: Class.onSettingsClose,
          onSettingsDismiss: Class.onSettingsDismiss,
          style: Class.style || {},
          size: Class.size || {},
          enableVerticalResize: (Class.enableVerticalResize === false) ? false : true
        };

      overrides = overrides || {};
      angular.extend(this, angular.copy(defaults), overrides);
      this.containerStyle = { width: '33%' }; // default width
      this.contentStyle = {};
      this.updateContainerStyle(this.style);

      if (Class.templateUrl) {
        this.templateUrl = Class.templateUrl;
      } else if (Class.template) {
        this.template = Class.template;
      } else {
        var directive = Class.directive || Class.name;
        this.directive = directive;
      }

      if (this.size && _.has(this.size, 'height')) {
        this.setHeight(this.size.height);
      }

      if (this.style && _.has(this.style, 'width')) { //TODO deprecate style attribute
        this.setWidth(this.style.width);
      }

      if (this.size && _.has(this.size, 'width')) {
        this.setWidth(this.size.width);
      }
    }

    WidgetModel.prototype = {
      // sets the width (and widthUnits)
      setWidth: function (width, units) {
        width = width.toString();
        units = units || width.replace(/^[-\.\d]+/, '') || '%';

        this.widthUnits = units;
        width = parseFloat(width);

        if (width < 0 || isNaN(width)) {
          $log.warn('malhar-angular-dashboard: setWidth was called when width was ' + width);
          return false;
        }

        if (units === '%') {
          width = Math.min(100, width);
          width = Math.max(0, width);
        }

        this.containerStyle.width = width + '' + units;

        this.updateSize(this.containerStyle);

        return true;
      },

      setHeight: function (height) {
        this.contentStyle.height = height;
        this.updateSize(this.contentStyle);
      },

      setStyle: function (style) {
        this.style = style;
        this.updateContainerStyle(style);
      },

      updateSize: function (size) {
        angular.extend(this.size, size);
      },

      getWidget: function () {
        return this;
      },

      updateContainerStyle: function (style) {
        angular.extend(this.containerStyle, style);
      }
    };

    return WidgetModel;
  }]);
'use strict';

angular.module('ark-dashboard')
  .controller('DashboardWidgetCtrl', ['$scope', '$element', '$compile', function($scope, $element, $compile) {

      $scope.status = {
        isopen: false
      };

      // Fills "container" with compiled view
      $scope.makeTemplateString = function() {

        var widget = $scope.widget;

        // First, build template string
        var templateString = '';

        if (widget.templateUrl) {

          // Use ng-include for templateUrl
          templateString = '<div ng-include="\'' + widget.templateUrl + '\'"></div>';

        } else if (widget.template) {

          // Direct string template
          templateString = widget.template;

        } else {

          // Assume attribute directive
          templateString = '<div ' + widget.directive;

          // Check if data attribute was specified
          if (widget.dataAttrName) {
            widget.attrs = widget.attrs || {};
            widget.attrs[widget.dataAttrName] = 'widgetData';
          }

          // Check for specified attributes
          if (widget.attrs) {

            // First check directive name attr
            if (widget.attrs[widget.directive]) {
              templateString += '="' + widget.attrs[widget.directive] + '"';
            }

            // Add attributes
            _.each(widget.attrs, function(value, attr) {

              // make sure we aren't reusing directive attr
              if (attr !== widget.directive) {
                templateString += ' ' + attr + '="' + value + '"';
              }

            });
          }
          templateString += '></div>';
        }
        return templateString;
      };

      // saves whatever is in the title input as the new title
      $scope.saveTitleEdit = function(widget) {
        widget.editingTitle = false;
        $scope.$emit('widgetChanged', widget);
      };

      $scope.compileTemplate = function() {
        //var container = $scope.findWidgetContainer($element);
        var container = $element; // Not sure why it finds '.widget-content' again. Use the element itself.
        if (!container.parents('.widget-content').length) { //Exclude not in case of '.widget-content' placeholder
          return;
        }
        var templateString = $scope.makeTemplateString();
        var widgetElement = angular.element(templateString);

        container.empty();
        container.append(widgetElement);
        $compile(widgetElement)($scope);
      };

      $scope.findWidgetContainer = function(element) {
        // widget placeholder is the first (and only) child of .widget-content
        return element.find('.widget-content');
      };
    }
  ]);
'use strict';

angular.module('ark-dashboard')
  .controller('renameModalCtrl', ['$scope', '$modalInstance', 'title', 'type', function ($scope, $modalInstance, title, type) {

    // set up result object
    $scope.title = title || {};
    if(type === 'Dashboard') {
      $scope.type = 'Dashboard';
    } else if (type  === 'Widget') {
      $scope.type = 'Widget';
    }

    $scope.ok = function () {
      $modalInstance.close($scope.title);
    };

    $scope.cancel = function () {
      $modalInstance.dismiss();
    };
  }]);

'use strict';

angular.module('ark-dashboard')
  .controller('SaveChangesModalCtrl', ['$scope', '$modalInstance', 'layout', function ($scope, $modalInstance, layout) {

    // add layout to scope
    $scope.layout = layout;

    $scope.ok = function () {
      $modalInstance.close();
    };

    $scope.cancel = function () {
      $modalInstance.dismiss();
    };
  }]);
(function(angular) {

  'use strict';

  angular.module('gridster', [])

  .constant('gridsterConfig', {
    columns: 6, // number of columns in the grid
    pushing: true, // whether to push other items out of the way
    floating: true, // whether to automatically float items up so they stack
    swapping: false, // whether or not to have items switch places instead of push down if they are the same size
    width: 'auto', // width of the grid. "auto" will expand the grid to its parent container
    colWidth: 'auto', // width of grid columns. "auto" will divide the width of the grid evenly among the columns
    rowHeight: 'match', // height of grid rows. 'match' will make it the same as the column width, a numeric value will be interpreted as pixels, '/2' is half the column width, '*5' is five times the column width, etc.
    margins: [10, 10], // margins in between grid items
    outerMargin: true,
    isMobile: false, // toggle mobile view
    mobileBreakPoint: 600, // width threshold to toggle mobile mode
    mobileModeEnabled: true, // whether or not to toggle mobile mode when screen width is less than mobileBreakPoint
    minColumns: 1, // minimum amount of columns the grid can scale down to
    minRows: 1, // minimum amount of rows to show if the grid is empty
    maxRows: 100, // maximum amount of rows in the grid
    defaultSizeX: 2, // default width of an item in columns
    defaultSizeY: 1, // default height of an item in rows
    minSizeX: 1, // minimum column width of an item
    maxSizeX: null, // maximum column width of an item
    minSizeY: 1, // minumum row height of an item
    maxSizeY: null, // maximum row height of an item
    saveGridItemCalculatedHeightInMobile: false, // grid item height in mobile display. true- to use the calculated height by sizeY given
    resizable: { // options to pass to resizable handler
      enabled: true,
      handles: ['s', 'e', 'n', 'w', 'se', 'ne', 'sw', 'nw']
    },
    draggable: { // options to pass to draggable handler
      enabled: true,
      scrollSensitivity: 20, // Distance in pixels from the edge of the viewport after which the viewport should scroll, relative to pointer
      scrollSpeed: 15 // Speed at which the window should scroll once the mouse pointer gets within scrollSensitivity distance
    }
  })

  .controller('GridsterCtrl', ['gridsterConfig', '$timeout',
    function(gridsterConfig, $timeout) {

      var gridster = this;

      /**
       * Create options from gridsterConfig constant
       */
      angular.extend(this, gridsterConfig);

      this.resizable = angular.extend({}, gridsterConfig.resizable || {});
      this.draggable = angular.extend({}, gridsterConfig.draggable || {});

      var flag = false;
      this.layoutChanged = function() {
        if (flag) {
          return;
        }
        flag = true;
        $timeout(function() {
          flag = false;
          if (gridster.loaded) {
            gridster.floatItemsUp();
          }
          gridster.updateHeight(gridster.movingItem ? gridster.movingItem.sizeY : 0);
        });
      };

      /**
       * A positional array of the items in the grid
       */
      this.grid = [];

      /**
       * Clean up after yourself
       */
      this.destroy = function() {
        if (this.grid) {
          this.grid.length = 0;
          this.grid = null;
        }
      };

      /**
       * Overrides default options
       *
       * @param {object} options The options to override
       */
      this.setOptions = function(options) {
        if (!options) {
          return;
        }

        options = angular.extend({}, options);

        // all this to avoid using jQuery...
        if (options.draggable) {
          angular.extend(this.draggable, options.draggable);
          delete(options.draggable);
        }
        if (options.resizable) {
          angular.extend(this.resizable, options.resizable);
          delete(options.resizable);
        }

        angular.extend(this, options);

        if (!this.margins || this.margins.length !== 2) {
          this.margins = [0, 0];
        } else {
          for (var x = 0, l = this.margins.length; x < l; ++x) {
            this.margins[x] = parseInt(this.margins[x], 10);
            if (isNaN(this.margins[x])) {
              this.margins[x] = 0;
            }
          }
        }
      };

      /**
       * Check if item can occupy a specified position in the grid
       *
       * @param {object} item The item in question
       * @param {number} row The row index
       * @param {number} column The column index
       * @returns {boolean} True if if item fits
       */
      this.canItemOccupy = function(item, row, column) {
        return row > -1 && column > -1 && item.sizeX + column <= this.columns && item.sizeY + row <= this.maxRows;
      };

      /**
       * Set the item in the first suitable position
       *
       * @param {object} item The item to insert
       */
      this.autoSetItemPosition = function(item) {
        // walk through each row and column looking for a place it will fit
        for (var rowIndex = 0; rowIndex < this.maxRows; ++rowIndex) {
          for (var colIndex = 0; colIndex < this.columns; ++colIndex) {
            // only insert if position is not already taken and it can fit
            var items = this.getItems(rowIndex, colIndex, item.sizeX, item.sizeY, item);
            if (items.length === 0 && this.canItemOccupy(item, rowIndex, colIndex)) {
              this.putItem(item, rowIndex, colIndex);
              return;
            }
          }
        }
        // throw new Error('Unable to place item!');
        console.log('Unable to place item!');
      };

      /**
       * Gets items at a specific coordinate
       *
       * @param {number} row
       * @param {number} column
       * @param {number} sizeX
       * @param {number} sizeY
       * @param {array} excludeItems An array of items to exclude from selection
       * @returns {array} Items that match the criteria
       */
      this.getItems = function(row, column, sizeX, sizeY, excludeItems) {
        var items = [];
        if (!sizeX || !sizeY) {
          sizeX = sizeY = 1;
        }
        if (excludeItems && !(excludeItems instanceof Array)) {
          excludeItems = [excludeItems];
        }
        for (var h = 0; h < sizeY; ++h) {
          for (var w = 0; w < sizeX; ++w) {
            var item = this.getItem(row + h, column + w, excludeItems);
            if (item && (!excludeItems || excludeItems.indexOf(item) === -1) && items.indexOf(item) === -1) {
              items.push(item);
            }
          }
        }
        return items;
      };

      this.getBoundingBox = function(items) {

        if (items.length === 0) {
          return null;
        }
        if (items.length === 1) {
          return {
            row: items[0].row,
            col: items[0].col,
            sizeY: items[0].sizeY,
            sizeX: items[0].sizeX
          };
        }

        var maxRow = 0;
        var maxCol = 0;
        var minRow = 9999;
        var minCol = 9999;

        for (var i = 0, l = items.length; i < l; ++i) {
          var item = items[i];
          minRow = Math.min(item.row, minRow);
          minCol = Math.min(item.col, minCol);
          maxRow = Math.max(item.row + item.sizeY, maxRow);
          maxCol = Math.max(item.col + item.sizeX, maxCol);
        }

        return {
          row: minRow,
          col: minCol,
          sizeY: maxRow - minRow,
          sizeX: maxCol - minCol
        };
      };


      /**
       * Removes an item from the grid
       *
       * @param {object} item
       */
      this.removeItem = function(item) {
        for (var rowIndex = 0, l = this.grid.length; rowIndex < l; ++rowIndex) {
          var columns = this.grid[rowIndex];
          if (!columns) {
            continue;
          }
          var index = columns.indexOf(item);
          if (index !== -1) {
            columns[index] = null;
            break;
          }
        }
        this.layoutChanged();
      };

      /**
       * Returns the item at a specified coordinate
       *
       * @param {number} row
       * @param {number} column
       * @param {array} excludeitems Items to exclude from selection
       * @returns {object} The matched item or null
       */
      this.getItem = function(row, column, excludeItems) {
        if (excludeItems && !(excludeItems instanceof Array)) {
          excludeItems = [excludeItems];
        }
        var sizeY = 1;
        while (row > -1) {
          var sizeX = 1,
            col = column;
          while (col > -1) {
            var items = this.grid[row];
            if (items) {
              var item = items[col];
              if (item && (!excludeItems || excludeItems.indexOf(item) === -1) && item.sizeX >= sizeX && item.sizeY >= sizeY) {
                return item;
              }
            }
            ++sizeX;
            --col;
          }
          --row;
          ++sizeY;
        }
        return null;
      };

      /**
       * Insert an array of items into the grid
       *
       * @param {array} items An array of items to insert
       */
      this.putItems = function(items) {
        for (var i = 0, l = items.length; i < l; ++i) {
          this.putItem(items[i]);
        }
      };

      /**
       * Insert a single item into the grid
       *
       * @param {object} item The item to insert
       * @param {number} row (Optional) Specifies the items row index
       * @param {number} column (Optional) Specifies the items column index
       * @param {array} ignoreItems
       */
      this.putItem = function(item, row, column, ignoreItems) {
        if (typeof row === 'undefined' || row === null) {
          row = item.row;
          column = item.col;
          if (typeof row === 'undefined' || row === null) {
            this.autoSetItemPosition(item);
            return;
          }
        }
        if (!this.canItemOccupy(item, row, column)) {
          column = Math.min(this.columns - item.sizeX, Math.max(0, column));
          row = Math.min(this.maxRows - item.sizeY, Math.max(0, row));
        }

        if (item.oldRow !== null && typeof item.oldRow !== 'undefined') {
          var samePosition = item.oldRow === row && item.oldColumn === column;
          var inGrid = this.grid[row] && this.grid[row][column] === item;
          if (samePosition && inGrid) {
            item.row = row;
            item.col = column;
            return;
          } else {
            // remove from old position
            var oldRow = this.grid[item.oldRow];
            if (oldRow && oldRow[item.oldColumn] === item) {
              delete oldRow[item.oldColumn];
            }
          }
        }

        item.oldRow = item.row = row;
        item.oldColumn = item.col = column;

        this.moveOverlappingItems(item, ignoreItems);

        if (!this.grid[row]) {
          this.grid[row] = [];
        }
        this.grid[row][column] = item;

        if (this.movingItem === item) {
          this.floatItemUp(item);
        }
        this.layoutChanged();
      };

      /**
       * Trade row and column if item1 with item2
       *
       * @param {object} item1
       * @param {object} item2
       */
      this.swapItems = function(item1, item2) {
        this.grid[item1.row][item1.col] = item2;
        this.grid[item2.row][item2.col] = item1;

        var item1Row = item1.row;
        var item1Col = item1.col;
        item1.row = item2.row;
        item1.col = item2.col;
        item2.row = item1Row;
        item2.col = item1Col;
      };

      /**
       * Prevents items from being overlapped
       *
       * @param {object} item The item that should remain
       * @param {array} ignoreItems
       */
      this.moveOverlappingItems = function(item, ignoreItems) {
        if (ignoreItems) {
          if (ignoreItems.indexOf(item) === -1) {
            ignoreItems = ignoreItems.slice(0);
            ignoreItems.push(item);
          }
        } else {
          ignoreItems = [item];
        }
        var overlappingItems = this.getItems(
          item.row,
          item.col,
          item.sizeX,
          item.sizeY,
          ignoreItems
        );
        this.moveItemsDown(overlappingItems, item.row + item.sizeY, ignoreItems);
      };

      /**
       * Moves an array of items to a specified row
       *
       * @param {array} items The items to move
       * @param {number} newRow The target row
       * @param {array} ignoreItems
       */
      this.moveItemsDown = function(items, newRow, ignoreItems) {
        if (!items || items.length === 0) {
          return;
        }
        items.sort(function(a, b) {
          return a.row - b.row;
        });
        ignoreItems = ignoreItems ? ignoreItems.slice(0) : [];
        var topRows = {},
          item, i, l;
        // calculate the top rows in each column
        for (i = 0, l = items.length; i < l; ++i) {
          item = items[i];
          var topRow = topRows[item.col];
          if (typeof topRow === 'undefined' || item.row < topRow) {
            topRows[item.col] = item.row;
          }
        }
        // move each item down from the top row in its column to the row
        for (i = 0, l = items.length; i < l; ++i) {
          item = items[i];
          var rowsToMove = newRow - topRows[item.col];
          this.moveItemDown(item, item.row + rowsToMove, ignoreItems);
          ignoreItems.push(item);
        }
      };

      this.moveItemDown = function(item, newRow, ignoreItems) {
        if (item.row >= newRow) {
          return;
        }
        while (item.row < newRow) {
          ++item.row;
          this.moveOverlappingItems(item, ignoreItems);
        }
        this.putItem(item, item.row, item.col, ignoreItems);
      };

      /**
       * Moves all items up as much as possible
       */
      this.floatItemsUp = function() {
        if (this.floating === false) {
          return;
        }
        if (this.grid) {
          for (var rowIndex = 0, l = this.grid.length; rowIndex < l; ++rowIndex) {
            var columns = this.grid[rowIndex];
            if (!columns) {
              continue;
            }
            for (var colIndex = 0, len = columns.length; colIndex < len; ++colIndex) {
              var item = columns[colIndex];
              if (item) {
                this.floatItemUp(item);
              }
            }
          }
        }
      };

      /**
       * Float an item up to the most suitable row
       *
       * @param {object} item The item to move
       */
      this.floatItemUp = function(item) {
        if (this.floating === false) {
          return;
        }
        var colIndex = item.col,
          sizeY = item.sizeY,
          sizeX = item.sizeX,
          bestRow = null,
          bestColumn = null,
          rowIndex = item.row - 1;

        while (rowIndex > -1) {
          var items = this.getItems(rowIndex, colIndex, sizeX, sizeY, item);
          if (items.length !== 0) {
            break;
          }
          bestRow = rowIndex;
          bestColumn = colIndex;
          --rowIndex;
        }
        if (bestRow !== null) {
          this.putItem(item, bestRow, bestColumn);
        }
      };

      /**
       * Update gridsters height
       *
       * @param {number} plus (Optional) Additional height to add
       */
      this.updateHeight = function(plus) {
        if (this.grid) {
          var maxHeight = this.minRows;
          plus = plus || 0;

          for (var rowIndex = this.grid.length; rowIndex >= 0; --rowIndex) {
            var columns = this.grid[rowIndex];
            if (!columns) {
              continue;
            }
            for (var colIndex = 0, len = columns.length; colIndex < len; ++colIndex) {
              if (columns[colIndex]) {
                maxHeight = Math.max(maxHeight, rowIndex + plus + columns[colIndex].sizeY);
              }
            }
          }
          this.gridHeight = this.maxRows - maxHeight > 0 ? Math.min(this.maxRows, maxHeight) : Math.max(this.maxRows, maxHeight);
        }
      };

      /**
       * Returns the number of rows that will fit in given amount of pixels
       *
       * @param {number} pixels
       * @param {boolean} ceilOrFloor (Optional) Determines rounding method
       */
      this.pixelsToRows = function(pixels, ceilOrFloor) {
        if (ceilOrFloor === true) {
          return Math.ceil(pixels / this.curRowHeight);
        } else if (ceilOrFloor === false) {
          return Math.floor(pixels / this.curRowHeight);
        }

        return Math.round(pixels / this.curRowHeight);
      };

      /**
       * Returns the number of columns that will fit in a given amount of pixels
       *
       * @param {number} pixels
       * @param {boolean} ceilOrFloor (Optional) Determines rounding method
       * @returns {number} The number of columns
       */
      this.pixelsToColumns = function(pixels, ceilOrFloor) {
        if (ceilOrFloor === true) {
          return Math.ceil(pixels / this.curColWidth);
        } else if (ceilOrFloor === false) {
          return Math.floor(pixels / this.curColWidth);
        }

        return Math.round(pixels / this.curColWidth);
      };

      // unified input handling
      // adopted from a msdn blogs sample
      this.unifiedInput = function(target, startEvent, moveEvent, endEvent) {
        var lastXYById = {};

        //  Opera doesn't have Object.keys so we use this wrapper
        var numberOfKeys = function(theObject) {
          if (Object.keys) {
            return Object.keys(theObject).length;
          }

          var n = 0,
            key;
          for (key in theObject) {
            ++n;
          }

          return n;
        };

        //  this calculates the delta needed to convert pageX/Y to offsetX/Y because offsetX/Y don't exist in the TouchEvent object or in Firefox's MouseEvent object
        var computeDocumentToElementDelta = function(theElement) {
          var elementLeft = 0;
          var elementTop = 0;
          var oldIEUserAgent = navigator.userAgent.match(/\bMSIE\b/);

          for (var offsetElement = theElement; offsetElement !== null; offsetElement = offsetElement.offsetParent) {
            //  the following is a major hack for versions of IE less than 8 to avoid an apparent problem on the IEBlog with double-counting the offsets
            //  this may not be a general solution to IE7's problem with offsetLeft/offsetParent
            if (oldIEUserAgent &&
              (!document.documentMode || document.documentMode < 8) &&
              offsetElement.currentStyle.position === 'relative' && offsetElement.offsetParent && offsetElement.offsetParent.currentStyle.position === 'relative' && offsetElement.offsetLeft === offsetElement.offsetParent.offsetLeft) {
              // add only the top
              elementTop += offsetElement.offsetTop;
            } else {
              elementLeft += offsetElement.offsetLeft;
              elementTop += offsetElement.offsetTop;
            }
          }

          return {
            x: elementLeft,
            y: elementTop
          };
        };

        //  cache the delta from the document to our event target (reinitialized each mousedown/MSPointerDown/touchstart)
        var documentToTargetDelta = computeDocumentToElementDelta(target);

        //  common event handler for the mouse/pointer/touch models and their down/start, move, up/end, and cancel events
        var doEvent = function(theEvtObj) {

          if (theEvtObj.type === 'mousemove' && numberOfKeys(lastXYById) === 0) {
            return;
          }

          var prevent = true;

          var pointerList = theEvtObj.changedTouches ? theEvtObj.changedTouches : [theEvtObj];
          for (var i = 0; i < pointerList.length; ++i) {
            var pointerObj = pointerList[i];
            var pointerId = (typeof pointerObj.identifier !== 'undefined') ? pointerObj.identifier : (typeof pointerObj.pointerId !== 'undefined') ? pointerObj.pointerId : 1;

            //  use the pageX/Y coordinates to compute target-relative coordinates when we have them (in ie < 9, we need to do a little work to put them there)
            if (typeof pointerObj.pageX === 'undefined') {
              //  initialize assuming our source element is our target
              pointerObj.pageX = pointerObj.offsetX + documentToTargetDelta.x;
              pointerObj.pageY = pointerObj.offsetY + documentToTargetDelta.y;

              if (pointerObj.srcElement.offsetParent === target && document.documentMode && document.documentMode === 8 && pointerObj.type === 'mousedown') {
                //  source element is a child piece of VML, we're in IE8, and we've not called setCapture yet - add the origin of the source element
                pointerObj.pageX += pointerObj.srcElement.offsetLeft;
                pointerObj.pageY += pointerObj.srcElement.offsetTop;
              } else if (pointerObj.srcElement !== target && !document.documentMode || document.documentMode < 8) {
                //  source element isn't the target (most likely it's a child piece of VML) and we're in a version of IE before IE8 -
                //  the offsetX/Y values are unpredictable so use the clientX/Y values and adjust by the scroll offsets of its parents
                //  to get the document-relative coordinates (the same as pageX/Y)
                var sx = -2,
                  sy = -2; // adjust for old IE's 2-pixel border
                for (var scrollElement = pointerObj.srcElement; scrollElement !== null; scrollElement = scrollElement.parentNode) {
                  sx += scrollElement.scrollLeft ? scrollElement.scrollLeft : 0;
                  sy += scrollElement.scrollTop ? scrollElement.scrollTop : 0;
                }

                pointerObj.pageX = pointerObj.clientX + sx;
                pointerObj.pageY = pointerObj.clientY + sy;
              }
            }


            var pageX = pointerObj.pageX;
            var pageY = pointerObj.pageY;

            if (theEvtObj.type.match(/(start|down)$/i)) {
              //  clause for processing MSPointerDown, touchstart, and mousedown

              //  refresh the document-to-target delta on start in case the target has moved relative to document
              documentToTargetDelta = computeDocumentToElementDelta(target);

              //  protect against failing to get an up or end on this pointerId
              if (lastXYById[pointerId]) {
                if (endEvent) {
                  endEvent({
                    target: theEvtObj.target,
                    which: theEvtObj.which,
                    pointerId: pointerId,
                    pageX: pageX,
                    pageY: pageY
                  });
                }

                delete lastXYById[pointerId];
              }

              if (startEvent) {
                if (prevent) {
                  prevent = startEvent({
                    target: theEvtObj.target,
                    which: theEvtObj.which,
                    pointerId: pointerId,
                    pageX: pageX,
                    pageY: pageY
                  });
                }
              }

              //  init last page positions for this pointer
              lastXYById[pointerId] = {
                x: pageX,
                y: pageY
              };

              // IE pointer model
              if (target.msSetPointerCapture) {
                target.msSetPointerCapture(pointerId);
              } else if (theEvtObj.type === 'mousedown' && numberOfKeys(lastXYById) === 1) {
                if (useSetReleaseCapture) {
                  target.setCapture(true);
                } else {
                  document.addEventListener('mousemove', doEvent, false);
                  document.addEventListener('mouseup', doEvent, false);
                }
              }
            } else if (theEvtObj.type.match(/move$/i)) {
              //  clause handles mousemove, MSPointerMove, and touchmove

              if (lastXYById[pointerId] && !(lastXYById[pointerId].x === pageX && lastXYById[pointerId].y === pageY)) {
                //  only extend if the pointer is down and it's not the same as the last point

                if (moveEvent && prevent) {
                  prevent = moveEvent({
                    target: theEvtObj.target,
                    which: theEvtObj.which,
                    pointerId: pointerId,
                    pageX: pageX,
                    pageY: pageY
                  });
                }

                //  update last page positions for this pointer
                lastXYById[pointerId].x = pageX;
                lastXYById[pointerId].y = pageY;
              }
            } else if (lastXYById[pointerId] && theEvtObj.type.match(/(up|end|cancel)$/i)) {
              //  clause handles up/end/cancel

              if (endEvent && prevent) {
                prevent = endEvent({
                  target: theEvtObj.target,
                  which: theEvtObj.which,
                  pointerId: pointerId,
                  pageX: pageX,
                  pageY: pageY
                });
              }

              //  delete last page positions for this pointer
              delete lastXYById[pointerId];

              //  in the Microsoft pointer model, release the capture for this pointer
              //  in the mouse model, release the capture or remove document-level event handlers if there are no down points
              //  nothing is required for the iOS touch model because capture is implied on touchstart
              if (target.msReleasePointerCapture) {
                target.msReleasePointerCapture(pointerId);
              } else if (theEvtObj.type === 'mouseup' && numberOfKeys(lastXYById) === 0) {
                if (useSetReleaseCapture) {
                  target.releaseCapture();
                } else {
                  document.removeEventListener('mousemove', doEvent, false);
                  document.removeEventListener('mouseup', doEvent, false);
                }
              }
            }
          }

          if (prevent) {
            if (theEvtObj.preventDefault) {
              theEvtObj.preventDefault();
            }

            if (theEvtObj.preventManipulation) {
              theEvtObj.preventManipulation();
            }

            if (theEvtObj.preventMouseEvent) {
              theEvtObj.preventMouseEvent();
            }
          }
        };

        var useSetReleaseCapture = false;
        // saving the settings for contentZooming and touchaction before activation
        var contentZooming, msTouchAction;

        this.enable = function() {

          if (window.navigator.msPointerEnabled) {
            //  Microsoft pointer model
            target.addEventListener('MSPointerDown', doEvent, false);
            target.addEventListener('MSPointerMove', doEvent, false);
            target.addEventListener('MSPointerUp', doEvent, false);
            target.addEventListener('MSPointerCancel', doEvent, false);

            //  css way to prevent panning in our target area
            if (typeof target.style.msContentZooming !== 'undefined') {
              contentZooming = target.style.msContentZooming;
              target.style.msContentZooming = 'none';
            }

            //  new in Windows Consumer Preview: css way to prevent all built-in touch actions on our target
            //  without this, you cannot touch draw on the element because IE will intercept the touch events
            if (typeof target.style.msTouchAction !== 'undefined') {
              msTouchAction = target.style.msTouchAction;
              target.style.msTouchAction = 'none';
            }
          } else if (target.addEventListener) {
            //  iOS touch model
            target.addEventListener('touchstart', doEvent, false);
            target.addEventListener('touchmove', doEvent, false);
            target.addEventListener('touchend', doEvent, false);
            target.addEventListener('touchcancel', doEvent, false);

            //  mouse model
            target.addEventListener('mousedown', doEvent, false);

            //  mouse model with capture
            //  rejecting gecko because, unlike ie, firefox does not send events to target when the mouse is outside target
            if (target.setCapture && !window.navigator.userAgent.match(/\bGecko\b/)) {
              useSetReleaseCapture = true;

              target.addEventListener('mousemove', doEvent, false);
              target.addEventListener('mouseup', doEvent, false);
            }
          } else if (target.attachEvent && target.setCapture) {
            //  legacy IE mode - mouse with capture
            useSetReleaseCapture = true;
            target.attachEvent('onmousedown', function() {
              doEvent(window.event);
              window.event.returnValue = false;
              return false;
            });
            target.attachEvent('onmousemove', function() {
              doEvent(window.event);
              window.event.returnValue = false;
              return false;
            });
            target.attachEvent('onmouseup', function() {
              doEvent(window.event);
              window.event.returnValue = false;
              return false;
            });
          }
        };

        this.disable = function() {
          if (window.navigator.msPointerEnabled) {
            //  Microsoft pointer model
            target.removeEventListener('MSPointerDown', doEvent, false);
            target.removeEventListener('MSPointerMove', doEvent, false);
            target.removeEventListener('MSPointerUp', doEvent, false);
            target.removeEventListener('MSPointerCancel', doEvent, false);

            //  reset zooming to saved value
            if (contentZooming) {
              target.style.msContentZooming = contentZooming;
            }

            // reset touch action setting
            if (msTouchAction) {
              target.style.msTouchAction = msTouchAction;
            }
          } else if (target.removeEventListener) {
            //  iOS touch model
            target.removeEventListener('touchstart', doEvent, false);
            target.removeEventListener('touchmove', doEvent, false);
            target.removeEventListener('touchend', doEvent, false);
            target.removeEventListener('touchcancel', doEvent, false);

            //  mouse model
            target.removeEventListener('mousedown', doEvent, false);

            //  mouse model with capture
            //  rejecting gecko because, unlike ie, firefox does not send events to target when the mouse is outside target
            if (target.setCapture && !window.navigator.userAgent.match(/\bGecko\b/)) {
              useSetReleaseCapture = true;

              target.removeEventListener('mousemove', doEvent, false);
              target.removeEventListener('mouseup', doEvent, false);
            }
          } else if (target.detachEvent && target.setCapture) {
            //  legacy IE mode - mouse with capture
            useSetReleaseCapture = true;
            target.detachEvent('onmousedown');
            target.detachEvent('onmousemove');
            target.detachEvent('onmouseup');
          }
        };

        return this;
      };

    }
  ])

  /**
   * The gridster directive
   *
   * @param {object} $parse
   * @param {object} $timeout
   */
  .directive('gridster', ['$timeout', '$rootScope', '$window',
    function($timeout, $rootScope, $window) {
      return {
        restrict: 'EAC',
        // without transclude, some child items may lose their parent scope
        transclude: true,
        replace: true,
        template: '<div ng-class="gridsterClass()"><div ng-style="previewStyle()" class="gridster-item gridster-preview-holder"></div><div class="gridster-content" ng-transclude></div></div>',
        controller: 'GridsterCtrl',
        controllerAs: 'gridster',
        scope: {
          config: '=?gridster'
        },
        compile: function() {

          return function(scope, $elem, attrs, gridster) {
            gridster.loaded = false;

            scope.gridsterClass = function() {
              return {
                gridster: true,
                'gridster-desktop': !gridster.isMobile,
                'gridster-mobile': gridster.isMobile,
                'gridster-loaded': gridster.loaded
              };
            };

            /**
             * @returns {Object} style object for preview element
             */
            scope.previewStyle = function() {
              if (!gridster.movingItem) {
                return {
                  display: 'none'
                };
              }

              return {
                display: 'block',
                height: (gridster.movingItem.sizeY * gridster.curRowHeight - gridster.margins[0]) + 'px',
                width: (gridster.movingItem.sizeX * gridster.curColWidth - gridster.margins[1]) + 'px',
                top: (gridster.movingItem.row * gridster.curRowHeight + (gridster.outerMargin ? gridster.margins[0] : 0)) + 'px',
                left: (gridster.movingItem.col * gridster.curColWidth + (gridster.outerMargin ? gridster.margins[1] : 0)) + 'px'
              };
            };

            var refresh = function() {
              gridster.setOptions(scope.config);

              // resolve "auto" & "match" values
              if (gridster.width === 'auto') {
                gridster.curWidth = $elem[0].offsetWidth || parseInt($elem.css('width'), 10);
              } else {
                gridster.curWidth = gridster.width;
              }

              if (gridster.colWidth === 'auto') {
                gridster.curColWidth = (gridster.curWidth + (gridster.outerMargin ? -gridster.margins[1] : gridster.margins[1])) / gridster.columns;
              } else {
                gridster.curColWidth = gridster.colWidth;
                // Calculate the number of columns based on the current gridster container width and custom-specified column width
                gridster.columns = parseInt(gridster.curWidth / gridster.colWidth, 10);
              }

              gridster.curRowHeight = gridster.rowHeight;
              if (typeof gridster.rowHeight === 'string') {
                if (gridster.rowHeight === 'match') {
                  gridster.curRowHeight = Math.round(gridster.curColWidth);
                } else if (gridster.rowHeight.indexOf('*') !== -1) {
                  gridster.curRowHeight = Math.round(gridster.curColWidth * gridster.rowHeight.replace('*', '').replace(' ', ''));
                } else if (gridster.rowHeight.indexOf('/') !== -1) {
                  gridster.curRowHeight = Math.round(gridster.curColWidth / gridster.rowHeight.replace('/', '').replace(' ', ''));
                }
              }

              gridster.isMobile = gridster.mobileModeEnabled && gridster.curWidth <= gridster.mobileBreakPoint;

              // loop through all items and reset their CSS
              for (var rowIndex = 0, l = gridster.grid.length; rowIndex < l; ++rowIndex) {
                var columns = gridster.grid[rowIndex];
                if (!columns) {
                  continue;
                }

                for (var colIndex = 0, len = columns.length; colIndex < len; ++colIndex) {
                  if (columns[colIndex]) {
                    var item = columns[colIndex];
                    gridster.autoSetItemPosition(item);
                    // item.setElementPosition();
                    // item.setElementSizeY();
                    // item.setElementSizeX();
                  }
                }
              }

              updateHeight();
            };

            // update grid items on config changes
            scope.$watch('config', refresh, true);

            scope.$watch('config.draggable', function() {
              $rootScope.$broadcast('gridster-draggable-changed');
            }, true);

            scope.$watch('config.resizable', function() {
              $rootScope.$broadcast('gridster-resizable-changed');
            }, true);

            var updateHeight = function() {
              $elem.css('height', (gridster.gridHeight * gridster.curRowHeight) + (gridster.outerMargin ? gridster.margins[0] : -gridster.margins[0]) + 'px');
            };

            scope.$watch('gridster.gridHeight', updateHeight);

            scope.$watch('gridster.movingItem', function() {
              gridster.updateHeight(gridster.movingItem ? gridster.movingItem.sizeY : 0);
            });

            var prevWidth = $elem[0].offsetWidth || parseInt($elem.css('width'), 10);

            function resize() {
              var width = $elem[0].offsetWidth || parseInt($elem.css('width'), 10);

              if (!width || width === prevWidth || gridster.movingItem) {
                return;
              }
              prevWidth = width;

              if (gridster.loaded) {
                $elem.removeClass('gridster-loaded');
              }

              refresh();

              if (gridster.loaded) {
                $elem.addClass('gridster-loaded');
              }

              scope.$parent.$broadcast('gridster-resized', [width, $elem.offsetHeight]);
            }

            // track element width changes any way we can
            function onResize() {
              resize();
              $timeout(function() {
                scope.$apply();
              });
            }
            if (typeof $elem.resize === 'function') {
              $elem.resize(onResize);
            }
            var $win = angular.element($window);
            $win.on('resize', onResize);

            scope.$watch(function() {
              return $elem[0].offsetWidth || parseInt($elem.css('width'), 10);
            }, resize);

            // be sure to cleanup
            scope.$on('$destroy', function() {
              gridster.destroy();
              $win.off('resize', onResize);
            });

            // allow a little time to place items before floating up
            $timeout(function() {
              scope.$watch('gridster.floating', function() {
                gridster.floatItemsUp();
              });
              gridster.loaded = true;
            }, 100);
          };
        }
      };
    }
  ])

  .controller('GridsterItemCtrl', function() {
    this.$element = null;
    this.gridster = null;
    this.row = null;
    this.col = null;
    this.sizeX = null;
    this.sizeY = null;
    this.minSizeX = 0;
    this.minSizeY = 0;
    this.maxSizeX = null;
    this.maxSizeY = null;

    this.init = function($element, gridster) {
      this.$element = $element;
      this.gridster = gridster;
      this.sizeX = gridster.defaultSizeX;
      this.sizeY = gridster.defaultSizeY;
    };

    this.destroy = function() {
      this.gridster = null;
      this.$element = null;
    };

    /**
     * Returns the items most important attributes
     */
    this.toJSON = function() {
      return {
        row: this.row,
        col: this.col,
        sizeY: this.sizeY,
        sizeX: this.sizeX
      };
    };

    this.isMoving = function() {
      return this.gridster.movingItem === this;
    };

    /**
     * Set the items position
     *
     * @param {number} row
     * @param {number} column
     */
    this.setPosition = function(row, column) {
      this.gridster.putItem(this, row, column);

      if (!this.isMoving()) {
        this.setElementPosition();
      }
    };

    /**
     * Sets a specified size property
     *
     * @param {string} key Can be either "x" or "y"
     * @param {number} value The size amount
     */
    this.setSize = function(key, value, preventMove) {
      key = key.toUpperCase();
      var camelCase = 'size' + key,
        titleCase = 'Size' + key;
      if (value === '') {
        return;
      }
      value = parseInt(value, 10);
      if (isNaN(value) || value === 0) {
        value = this.gridster['default' + titleCase];
      }
      var max = key === 'X' ? this.gridster.columns : this.gridster.maxRows;
      if (this['max' + titleCase]) {
        max = Math.min(this['max' + titleCase], max);
      }
      if (this.gridster['max' + titleCase]) {
        max = Math.min(this.gridster['max' + titleCase], max);
      }
      if (key === 'X' && this.cols) {
        max -= this.cols;
      } else if (key === 'Y' && this.rows) {
        max -= this.rows;
      }

      var min = 0;
      if (this['min' + titleCase]) {
        min = Math.max(this['min' + titleCase], min);
      }
      if (this.gridster['min' + titleCase]) {
        min = Math.max(this.gridster['min' + titleCase], min);
      }

      value = Math.max(Math.min(value, max), min);

      var changed = (this[camelCase] !== value || (this['old' + titleCase] && this['old' + titleCase] !== value));
      this['old' + titleCase] = this[camelCase] = value;

      if (!this.isMoving()) {
        this['setElement' + titleCase]();
      }
      if (!preventMove && changed) {
        this.gridster.moveOverlappingItems(this);
        this.gridster.layoutChanged();
      }

      return changed;
    };

    /**
     * Sets the items sizeY property
     *
     * @param {number} rows
     */
    this.setSizeY = function(rows, preventMove) {
      return this.setSize('Y', rows, preventMove);
    };

    /**
     * Sets the items sizeX property
     *
     * @param {number} rows
     */
    this.setSizeX = function(columns, preventMove) {
      return this.setSize('X', columns, preventMove);
    };

    /**
     * Sets an elements position on the page
     *
     * @param {number} row
     * @param {number} column
     */
    this.setElementPosition = function() {
      if (this.gridster.isMobile) {
        this.$element.css({
          marginLeft: this.gridster.margins[0] + 'px',
          marginRight: this.gridster.margins[0] + 'px',
          marginTop: this.gridster.margins[1] + 'px',
          marginBottom: this.gridster.margins[1] + 'px',
          top: '',
          left: ''
        });
      } else {
        this.$element.css({
          margin: 0,
          top: (this.row * this.gridster.curRowHeight + (this.gridster.outerMargin ? this.gridster.margins[0] : 0)) + 'px',
          left: (this.col * this.gridster.curColWidth + (this.gridster.outerMargin ? this.gridster.margins[1] : 0)) + 'px'
        });
      }
    };

    /**
     * Sets an elements height
     */
    this.setElementSizeY = function() {
      if (this.gridster.isMobile && !this.gridster.saveGridItemCalculatedHeightInMobile) {
        this.$element.css('height', '');
      } else {
        this.$element.css('height', (this.sizeY * this.gridster.curRowHeight - this.gridster.margins[0]) + 'px');
      }
    };

    /**
     * Sets an elements width
     */
    this.setElementSizeX = function() {
      if (this.gridster.isMobile) {
        this.$element.css('width', '');
      } else {
        this.$element.css('width', (this.sizeX * this.gridster.curColWidth - this.gridster.margins[1]) + 'px');
      }
    };

    /**
     * Gets an element's width
     */
    this.getElementSizeX = function() {
      return (this.sizeX * this.gridster.curColWidth - this.gridster.margins[1]);
    };

    /**
     * Gets an element's height
     */
    this.getElementSizeY = function() {
      return (this.sizeY * this.gridster.curRowHeight - this.gridster.margins[0]);
    };

  })

  .factory('GridsterDraggable', ['$document', '$timeout', '$window',
    function($document, $timeout, $window) {
      function GridsterDraggable($el, scope, gridster, item, itemOptions) {

        var elmX, elmY, elmW, elmH,

          mouseX = 0,
          mouseY = 0,
          lastMouseX = 0,
          lastMouseY = 0,
          mOffX = 0,
          mOffY = 0,

          minTop = 0,
          maxTop = 9999,
          minLeft = 0,
          realdocument = $document[0];

        var originalCol, originalRow;
        var inputTags = ['select', 'input', 'textarea', 'button'];

        function mouseDown(e) {
          if (inputTags.indexOf(e.target.nodeName.toLowerCase()) !== -1) {
            return false;
          }

          // exit, if a resize handle was hit
          if (angular.element(e.target).hasClass('gridster-item-resizable-handler')) {
            return false;
          }

          // exit, if the target has it's own click event
          if (angular.element(e.target).attr('onclick') || angular.element(e.target).attr('ng-click')) {
            return false;
          }

          switch (e.which) {
          case 1:
            // left mouse button
            break;
          case 2:
          case 3:
            // right or middle mouse button
            return;
          }

          lastMouseX = e.pageX;
          lastMouseY = e.pageY;

          elmX = parseInt($el.css('left'), 10);
          elmY = parseInt($el.css('top'), 10);
          elmW = $el[0].offsetWidth;
          elmH = $el[0].offsetHeight;

          originalCol = item.col;
          originalRow = item.row;

          dragStart(e);

          return true;
        }

        function mouseMove(e) {
          if (!$el.hasClass('gridster-item-moving') || $el.hasClass('gridster-item-resizing')) {
            return false;
          }

          var maxLeft = gridster.curWidth - 1;

          // Get the current mouse position.
          mouseX = e.pageX;
          mouseY = e.pageY;

          // Get the deltas
          var diffX = mouseX - lastMouseX + mOffX;
          var diffY = mouseY - lastMouseY + mOffY;
          mOffX = mOffY = 0;

          // Update last processed mouse positions.
          lastMouseX = mouseX;
          lastMouseY = mouseY;

          var dX = diffX,
            dY = diffY;
          if (elmX + dX < minLeft) {
            diffX = minLeft - elmX;
            mOffX = dX - diffX;
          } else if (elmX + elmW + dX > maxLeft) {
            diffX = maxLeft - elmX - elmW;
            mOffX = dX - diffX;
          }

          if (elmY + dY < minTop) {
            diffY = minTop - elmY;
            mOffY = dY - diffY;
          } else if (elmY + elmH + dY > maxTop) {
            diffY = maxTop - elmY - elmH;
            mOffY = dY - diffY;
          }
          elmX += diffX;
          elmY += diffY;

          // set new position
          $el.css({
            'top': elmY + 'px',
            'left': elmX + 'px'
          });

          drag(e);

          return true;
        }

        function mouseUp(e) {
          if (!$el.hasClass('gridster-item-moving') || $el.hasClass('gridster-item-resizing')) {
            return false;
          }

          mOffX = mOffY = 0;

          dragStop(e);

          return true;
        }

        function dragStart(event) {
          $el.addClass('gridster-item-moving');
          gridster.movingItem = item;

          gridster.updateHeight(item.sizeY);
          scope.$apply(function() {
            if (gridster.draggable && gridster.draggable.start) {
              gridster.draggable.start(event, $el, itemOptions);
            }
          });
        }

        function drag(event) {
          var oldRow = item.row,
            oldCol = item.col,
            hasCallback = gridster.draggable && gridster.draggable.drag,
            scrollSensitivity = gridster.draggable.scrollSensitivity,
            scrollSpeed = gridster.draggable.scrollSpeed;

          var row = gridster.pixelsToRows(elmY);
          var col = gridster.pixelsToColumns(elmX);

          var itemsInTheWay = gridster.getItems(row, col, item.sizeX, item.sizeY, item);
          var hasItemsInTheWay = itemsInTheWay.length !== 0;

          if (gridster.swapping === true && hasItemsInTheWay) {
            var boundingBoxItem = gridster.getBoundingBox(itemsInTheWay);
            var sameSize = boundingBoxItem.sizeX === item.sizeX && boundingBoxItem.sizeY === item.sizeY;
            var sameRow = boundingBoxItem.row === row;
            var sameCol = boundingBoxItem.col === col;
            var samePosition = sameRow && sameCol;
            var inline = sameRow || sameCol;

            if (sameSize && itemsInTheWay.length === 1) {
              if (samePosition) {
                gridster.swapItems(item, itemsInTheWay[0]);
              } else if (inline) {
                return;
              }
            } else if (boundingBoxItem.sizeX <= item.sizeX && boundingBoxItem.sizeY <= item.sizeY && inline) {
              var emptyRow = item.row <= row ? item.row : row + item.sizeY;
              var emptyCol = item.col <= col ? item.col : col + item.sizeX;
              var rowOffset = emptyRow - boundingBoxItem.row;
              var colOffset = emptyCol - boundingBoxItem.col;

              for (var i = 0, l = itemsInTheWay.length; i < l; ++i) {
                var itemInTheWay = itemsInTheWay[i];

                var itemsInFreeSpace = gridster.getItems(
                  itemInTheWay.row + rowOffset,
                  itemInTheWay.col + colOffset,
                  itemInTheWay.sizeX,
                  itemInTheWay.sizeY,
                  item
                );

                if (itemsInFreeSpace.length === 0) {
                  gridster.putItem(itemInTheWay, itemInTheWay.row + rowOffset, itemInTheWay.col + colOffset);
                }
              }
            }
          }

          if (gridster.pushing !== false || !hasItemsInTheWay) {
            item.row = row;
            item.col = col;
          }

          if (event.pageY - realdocument.body.scrollTop < scrollSensitivity) {
            realdocument.body.scrollTop = realdocument.body.scrollTop - scrollSpeed;
          } else if ($window.innerHeight - (event.pageY - realdocument.body.scrollTop) < scrollSensitivity) {
            realdocument.body.scrollTop = realdocument.body.scrollTop + scrollSpeed;
          }

          if (event.pageX - realdocument.body.scrollLeft < scrollSensitivity) {
            realdocument.body.scrollLeft = realdocument.body.scrollLeft - scrollSpeed;
          } else if ($window.innerWidth - (event.pageX - realdocument.body.scrollLeft) < scrollSensitivity) {
            realdocument.body.scrollLeft = realdocument.body.scrollLeft + scrollSpeed;
          }

          if (hasCallback || oldRow !== item.row || oldCol !== item.col) {
            scope.$apply(function() {
              if (hasCallback) {
                gridster.draggable.drag(event, $el, itemOptions);
              }
            });
          }
        }

        function dragStop(event) {
          $el.removeClass('gridster-item-moving');
          var row = gridster.pixelsToRows(elmY);
          var col = gridster.pixelsToColumns(elmX);
          if (gridster.pushing !== false || gridster.getItems(row, col, item.sizeX, item.sizeY, item).length === 0) {
            item.row = row;
            item.col = col;
          }
          gridster.movingItem = null;
          item.setPosition(item.row, item.col);

          scope.$apply(function() {
            if (gridster.draggable && gridster.draggable.stop) {
              gridster.draggable.stop(event, $el, itemOptions);
            }
          });
        }

        var enabled = false;
        var $dragHandle = null;
        var unifiedInput;

        this.enable = function() {
          var self = this;
          // disable and timeout required for some template rendering
          $timeout(function() {
            self.disable();

            if (gridster.draggable && gridster.draggable.handle) {
              $dragHandle = angular.element($el[0].querySelector(gridster.draggable.handle));
              if ($dragHandle.length === 0) {
                // fall back to element if handle not found...
                $dragHandle = $el;
              }
            } else {
              $dragHandle = $el;
            }

            unifiedInput = new gridster.unifiedInput($dragHandle[0], mouseDown, mouseMove, mouseUp);
            unifiedInput.enable();

            enabled = true;
          });
        };

        this.disable = function() {
          if (!enabled) {
            return;
          }

          unifiedInput.disable();
          unifiedInput = undefined;
          enabled = false;
        };

        this.toggle = function(enabled) {
          if (enabled) {
            this.enable();
          } else {
            this.disable();
          }
        };

        this.destroy = function() {
          this.disable();
        };
      }

      return GridsterDraggable;
    }
  ])

  .factory('GridsterResizable', [
    function() {
      function GridsterResizable($el, scope, gridster, item, itemOptions) {

        function ResizeHandle(handleClass) {

          var hClass = handleClass;

          var elmX, elmY, elmW, elmH,

            mouseX = 0,
            mouseY = 0,
            lastMouseX = 0,
            lastMouseY = 0,
            mOffX = 0,
            mOffY = 0,

            minTop = 0,
            maxTop = 9999,
            minLeft = 0;

          var getMinHeight = function() {
            return gridster.curRowHeight - gridster.margins[0];
          };
          var getMinWidth = function() {
            return gridster.curColWidth - gridster.margins[1];
          };

          var originalWidth, originalHeight;
          var savedDraggable;

          function mouseDown(e) {
            switch (e.which) {
            case 1:
              // left mouse button
              break;
            case 2:
            case 3:
              // right or middle mouse button
              return;
            }

            // save the draggable setting to restore after resize
            savedDraggable = gridster.draggable.enabled;
            if (savedDraggable) {
              gridster.draggable.enabled = false;
              scope.$broadcast('gridster-draggable-changed');
            }

            // Get the current mouse position.
            lastMouseX = e.pageX;
            lastMouseY = e.pageY;

            // Record current widget dimensions
            elmX = parseInt($el.css('left'), 10);
            elmY = parseInt($el.css('top'), 10);
            elmW = $el[0].offsetWidth;
            elmH = $el[0].offsetHeight;

            originalWidth = item.sizeX;
            originalHeight = item.sizeY;

            resizeStart(e);

            return true;
          }

          function resizeStart(e) {
            $el.addClass('gridster-item-moving');
            $el.addClass('gridster-item-resizing');

            gridster.movingItem = item;

            item.setElementSizeX();
            item.setElementSizeY();
            item.setElementPosition();
            gridster.updateHeight(1);

            scope.$apply(function() {
              // callback
              if (gridster.resizable && gridster.resizable.start) {
                gridster.resizable.start(e, $el, itemOptions); // options is the item model
              }
            });
          }

          function mouseMove(e) {
            scope.$broadcast('gridster-draggable-item-resizing');
            var maxLeft = gridster.curWidth - 1;

            // Get the current mouse position.
            mouseX = e.pageX;
            mouseY = e.pageY;

            // Get the deltas
            var diffX = mouseX - lastMouseX + mOffX;
            var diffY = mouseY - lastMouseY + mOffY;
            mOffX = mOffY = 0;

            // Update last processed mouse positions.
            lastMouseX = mouseX;
            lastMouseY = mouseY;

            var dY = diffY,
              dX = diffX;

            if (hClass.indexOf('n') >= 0) {
              if (elmH - dY < getMinHeight()) {
                diffY = elmH - getMinHeight();
                mOffY = dY - diffY;
              } else if (elmY + dY < minTop) {
                diffY = minTop - elmY;
                mOffY = dY - diffY;
              }
              elmY += diffY;
              elmH -= diffY;
            }
            if (hClass.indexOf('s') >= 0) {
              if (elmH + dY < getMinHeight()) {
                diffY = getMinHeight() - elmH;
                mOffY = dY - diffY;
              } else if (elmY + elmH + dY > maxTop) {
                diffY = maxTop - elmY - elmH;
                mOffY = dY - diffY;
              }
              elmH += diffY;
            }
            if (hClass.indexOf('w') >= 0) {
              if (elmW - dX < getMinWidth()) {
                diffX = elmW - getMinWidth();
                mOffX = dX - diffX;
              } else if (elmX + dX < minLeft) {
                diffX = minLeft - elmX;
                mOffX = dX - diffX;
              }
              elmX += diffX;
              elmW -= diffX;
            }
            if (hClass.indexOf('e') >= 0) {
              if (elmW + dX < getMinWidth()) {
                diffX = getMinWidth() - elmW;
                mOffX = dX - diffX;
              } else if (elmX + elmW + dX > maxLeft) {
                diffX = maxLeft - elmX - elmW;
                mOffX = dX - diffX;
              }
              elmW += diffX;
            }

            // set new position
            $el.css({
              'top': elmY + 'px',
              'left': elmX + 'px',
              'width': elmW + 'px',
              'height': elmH + 'px'
            });

            resize(e);

            return true;
          }

          function mouseUp(e) {
            // restore draggable setting to its original state
            if (gridster.draggable.enabled !== savedDraggable) {
              gridster.draggable.enabled = savedDraggable;
              scope.$broadcast('gridster-draggable-changed');
            }

            mOffX = mOffY = 0;

            resizeStop(e);

            return true;
          }

          function resize(e) {
            var oldRow = item.row,
              oldCol = item.col,
              oldSizeX = item.sizeX,
              oldSizeY = item.sizeY,
              hasCallback = gridster.resizable && gridster.resizable.resize;

            var col = item.col;
            // only change column if grabbing left edge
            if (['w', 'nw', 'sw'].indexOf(handleClass) !== -1) {
              col = gridster.pixelsToColumns(elmX, false);
            }

            var row = item.row;
            // only change row if grabbing top edge
            if (['n', 'ne', 'nw'].indexOf(handleClass) !== -1) {
              row = gridster.pixelsToRows(elmY, false);
            }

            var sizeX = item.sizeX;
            // only change row if grabbing left or right edge
            if (['n', 's'].indexOf(handleClass) === -1) {
              sizeX = gridster.pixelsToColumns(elmW, true);
            }

            var sizeY = item.sizeY;
            // only change row if grabbing top or bottom edge
            if (['e', 'w'].indexOf(handleClass) === -1) {
              sizeY = gridster.pixelsToRows(elmH, true);
            }

            if (gridster.pushing !== false || gridster.getItems(row, col, sizeX, sizeY, item).length === 0) {
              item.row = row;
              item.col = col;
              item.sizeX = sizeX;
              item.sizeY = sizeY;
            }
            var isChanged = item.row !== oldRow || item.col !== oldCol || item.sizeX !== oldSizeX || item.sizeY !== oldSizeY;

            if (hasCallback || isChanged) {
              scope.$apply(function() {
                if (hasCallback) {
                  gridster.resizable.resize(e, $el, itemOptions); // options is the item model
                }
              });
            }
          }

          function resizeStop(e) {
            $el.removeClass('gridster-item-moving');
            $el.removeClass('gridster-item-resizing');

            gridster.movingItem = null;

            item.setPosition(item.row, item.col);
            item.setSizeY(item.sizeY);
            item.setSizeX(item.sizeX);

            scope.$apply(function() {
              if (gridster.resizable && gridster.resizable.stop) {
                gridster.resizable.stop(e, $el, itemOptions); // options is the item model
              }
            });
          }

          var $dragHandle = null;
          var unifiedInput;

          this.enable = function() {
            if (!$dragHandle) {
              $dragHandle = angular.element('<div class="gridster-item-resizable-handler handle-' + hClass + '"></div>');
              $el.append($dragHandle);
            }

            unifiedInput = new gridster.unifiedInput($dragHandle[0], mouseDown, mouseMove, mouseUp);
            unifiedInput.enable();
          };

          this.disable = function() {
            if ($dragHandle) {
              $dragHandle.remove();
              $dragHandle = null;
            }

            unifiedInput.disable();
            unifiedInput = undefined;
          };

          this.destroy = function() {
            this.disable();
          };
        }

        var handles = [];
        var handlesOpts = gridster.resizable.handles;
        if (typeof handlesOpts === 'string') {
          handlesOpts = gridster.resizable.handles.split(',');
        }
        var enabled = false;

        for (var c = 0, l = handlesOpts.length; c < l; c++) {
          handles.push(new ResizeHandle(handlesOpts[c]));
        }

        this.enable = function() {
          if (enabled) {
            return;
          }
          for (var c = 0, l = handles.length; c < l; c++) {
            handles[c].enable();
          }
          enabled = true;
        };

        this.disable = function() {
          if (!enabled) {
            return;
          }
          for (var c = 0, l = handles.length; c < l; c++) {
            handles[c].disable();
          }
          enabled = false;
        };

        this.toggle = function(enabled) {
          if (enabled) {
            this.enable();
          } else {
            this.disable();
          }
        };

        this.destroy = function() {
          for (var c = 0, l = handles.length; c < l; c++) {
            handles[c].destroy();
          }
        };
      }
      return GridsterResizable;
    }
  ])

  /**
   * GridsterItem directive
   */
  .directive('gridsterItem', ['$parse', 'GridsterDraggable', 'GridsterResizable',
    function($parse, GridsterDraggable, GridsterResizable) {
      return {
        restrict: 'EA',
        controller: 'GridsterItemCtrl',
        require: ['^gridster', 'gridsterItem'],
        link: function(scope, $el, attrs, controllers) {
          var optionsKey = attrs.gridsterItem,
            options;

          var gridster = controllers[0],
            item = controllers[1];

          // bind the item's position properties
          if (optionsKey) {
            var $optionsGetter = $parse(optionsKey);
            options = $optionsGetter(scope) || {};
            if (!options && $optionsGetter.assign) {
              options = {
                row: item.row,
                col: item.col,
                sizeX: item.sizeX,
                sizeY: item.sizeY,
                minSizeX: 0,
                minSizeY: 0,
                maxSizeX: null,
                maxSizeY: null
              };
              $optionsGetter.assign(scope, options);
            }
          } else {
            options = attrs;
          }

          item.init($el, gridster);

          $el.addClass('gridster-item');

          var aspects = ['minSizeX', 'maxSizeX', 'minSizeY', 'maxSizeY', 'sizeX', 'sizeY', 'row', 'col'],
            $getters = {};

          var aspectFn = function(aspect) {
            var key;
            if (typeof options[aspect] === 'string') {
              key = options[aspect];
            } else if (typeof options[aspect.toLowerCase()] === 'string') {
              key = options[aspect.toLowerCase()];
            } else if (optionsKey) {
              key = $parse(optionsKey + '.' + aspect);
            } else {
              return;
            }
            $getters[aspect] = $parse(key);

            // when the value changes externally, update the internal item object
            scope.$watch(key, function(newVal) {
              newVal = parseInt(newVal, 10);
              if (!isNaN(newVal)) {
                item[aspect] = newVal;
              }
            });

            // initial set
            var val = $getters[aspect](scope);
            if (typeof val === 'number') {
              item[aspect] = val;
            }
          };

          for (var i = 0, l = aspects.length; i < l; ++i) {
            aspectFn(aspects[i]);
          }

          scope.$broadcast('gridster-item-initialized', [item.sizeY, item.sizeX, item.getElementSizeY(), item.getElementSizeX()]);

          function positionChanged() {
            // call setPosition so the element and gridster controller are updated
            item.setPosition(item.row, item.col);

            // when internal item position changes, update externally bound values
            if ($getters.row && $getters.row.assign) {
              $getters.row.assign(scope, item.row);
            }
            if ($getters.col && $getters.col.assign) {
              $getters.col.assign(scope, item.col);
            }
          }
          scope.$watch(function() {
            return item.row + ',' + item.col;
          }, positionChanged);

          function sizeChanged() {
            var changedX = item.setSizeX(item.sizeX, true);
            if (changedX && $getters.sizeX && $getters.sizeX.assign) {
              $getters.sizeX.assign(scope, item.sizeX);
            }
            var changedY = item.setSizeY(item.sizeY, true);
            if (changedY && $getters.sizeY && $getters.sizeY.assign) {
              $getters.sizeY.assign(scope, item.sizeY);
            }

            if (changedX || changedY) {
              item.gridster.moveOverlappingItems(item);
              gridster.layoutChanged();
            }
          }
          scope.$watch(function() {
            return item.sizeY + ',' + item.sizeX + '|' + item.minSizeX + ',' + item.maxSizeX + ',' + item.minSizeY + ',' + item.maxSizeY;
          }, sizeChanged);

          var draggable = new GridsterDraggable($el, scope, gridster, item, options);
          var resizable = new GridsterResizable($el, scope, gridster, item, options);

          scope.$on('gridster-draggable-changed', function() {
            draggable.toggle(!gridster.isMobile && gridster.draggable && gridster.draggable.enabled);
          });
          scope.$on('gridster-resizable-changed', function() {
            resizable.toggle(!gridster.isMobile && gridster.resizable && gridster.resizable.enabled);
          });
          scope.$on('gridster-resized', function() {
            resizable.toggle(!gridster.isMobile && gridster.resizable && gridster.resizable.enabled);
          });
          scope.$watch(function() {
            return gridster.isMobile;
          }, function() {
            resizable.toggle(!gridster.isMobile && gridster.resizable && gridster.resizable.enabled);
            draggable.toggle(!gridster.isMobile && gridster.draggable && gridster.draggable.enabled);
          });

          function whichTransitionEvent() {
            var el = document.createElement('div');
            var transitions = {
              'transition': 'transitionend',
              'OTransition': 'oTransitionEnd',
              'MozTransition': 'transitionend',
              'WebkitTransition': 'webkitTransitionEnd'
            };
            for (var t in transitions) {
              if (el.style[t] !== undefined) {
                return transitions[t];
              }
            }
          }

          $el.on(whichTransitionEvent(), function() {
            scope.$apply(function() {
              scope.$broadcast('gridster-item-transition-end');
            });
          });

          return scope.$on('$destroy', function() {
            try {
              resizable.destroy();
              draggable.destroy();
            } catch (e) {}

            try {
              gridster.removeItem(item);
            } catch (e) {}

            try {
              item.destroy();
            } catch (e) {}
          });
        }
      };
    }
  ])

  ;

})(angular);

'use strict';

angular.module('ark-dashboard')
   .directive('dropdownMenu', function () {
    return {
      restrict: 'A',
      templateUrl: function() {
        return 'src/dashboard/components/dropdown-menu/dropdown-menu.html';
      },
      scope: {
        menu: '=',
        layoutActions: '=',
        defaultLayoutActions: '=',
        widgetActions: '=',
        defaultWidgetActions: '=',
        widgetData: '='
      }
    };
  })
  .controller('dropdownMenuController', ['$scope', function ($scope) {
    $scope.handleMenuOption = function (action) {

      if($scope.layoutActions) {
        for(var i = 0; i < $scope.layoutActions.length; i++) {
          var layoutItem = $scope.layoutActions[i];
          for (var layoutFunc in layoutItem) {
            if(action === layoutFunc) {
              var callLayoutFunc = layoutItem[layoutFunc];
              if(typeof callLayoutFunc === 'function') {
                callLayoutFunc();
              }
            }
          }
          if(typeof layoutItem === 'string' && action === layoutItem) {
            var defaultLayoutItem = $scope.defaultLayoutActions[i];
            var callLayoutFuncDefault = defaultLayoutItem[layoutItem];
            callLayoutFuncDefault();
          }
        }
      }
      if($scope.widgetActions) {
        for(var j = 0; j < $scope.widgetActions.length; j++) {
          var widgetItem = $scope.widgetActions[j];
          for (var widgetFunc in widgetItem) {
            if(action === widgetFunc) {
              var callWidgetFunc = widgetItem[widgetFunc];
              if(typeof callWidgetFunc === 'function') {
                callWidgetFunc($scope.widgetData);
              }
            }
          }
          if(typeof widgetItem === 'string' && action === widgetItem) {
            var defaultWidgetItem = $scope.defaultWidgetActions[j];
            var callWidgetFuncDefault = defaultWidgetItem[widgetItem];
            callWidgetFuncDefault($scope.widgetData);
          }
        }
      }
    };
  }])
  .directive('selectText', ['$timeout', function ($timeout) {
    return {
      scope: {
        trigger: '@focus'
      },
      link: function(scope, element) {
        scope.$watch('trigger', function() {
          $timeout(function() {
            element.select();
          });
        });
      }
    };
  }]);

(function() {
  'use strict';

  var CONSTANTS = {
      CONTINUOUS_SCROLLING_TIMEOUT_INTERVAL: 50, // timeout interval for repeatedly moving the tabs container
      // by one increment while the mouse is held down--decrease to
      // make mousedown continous scrolling faster
      SCROLL_OFFSET_FRACTION: 6, // each click moves the container this fraction of the fixed container--decrease
      // to make the tabs scroll farther per click
      DATA_KEY_IS_MOUSEDOWN: 'ismousedown'
    },

    /* *************************************************************
     * scrolling-tabs element directive template
     * *************************************************************/
    // plunk: http://plnkr.co/edit/YhKiIhuAPkpAyacu6tuk
    scrollingTabsTemplate = [
      '<div class="scrtabs-tab-container">',
      ' <div class="scrtabs-tab-scroll-arrow scrtabs-js-tab-scroll-arrow-left"><span class="fonticon  icon-chevron-small-left scr-arrow-left"></span></div>',
      '   <div class="scrtabs-tabs-fixed-container">',
      '     <div class="scrtabs-tabs-movable-container">',
      '       <ul class="nav nav-tabs" role="tablist">',
      '         <li ng-class="{ \'active\': tab[propActive || \'active\'], ',
      '                         \'disabled\': tab[propDisabled || \'disabled\'] }" ',
      '             data-tab="{{tab}}" data-index="{{$index}}" ng-repeat="tab in tabsArr">',
      '           <a ng-href="{{\'#\' + tab[propPaneId || \'paneId\']}}" role="tab"',
      '                data-toggle="{{tab[propDisabled || \'disabled\'] ? \'\' : \'tab\'}}" ',
      '                ng-bind-html="sanitize(tab[propTitle || \'title\']);">',
      '           </a>',
      '         </li>',
      '       </ul>',
      '     </div>',
      ' </div>',
      ' <div class="scrtabs-tab-scroll-arrow scrtabs-js-tab-scroll-arrow-right"><span class="fonticon icon-chevron-small-right scr-arrow-right"></span></div>',
      '</div>'
    ].join(''),


    /* *************************************************************
     * scrolling-tabs-wrapper element directive template
     * *************************************************************/
    // plunk: http://plnkr.co/edit/lWeQxxecKPudK7xlQxS3
    scrollingTabsWrapperTemplate = [
      '<div class="scrtabs-tab-container">',
      ' <div class="scrtabs-tab-scroll-arrow scrtabs-js-tab-scroll-arrow-left"><span class="fonticon icon-chevron-small-left scr-arrow-left"></span></div>',
      '   <div class="scrtabs-tabs-fixed-container">',
      '     <div class="scrtabs-tabs-movable-container" ng-transclude></div>',
      '   </div>',
      ' <div class="scrtabs-tab-scroll-arrow scrtabs-js-tab-scroll-arrow-right"><span class="fonticon icon-chevron-small-right scr-arrow-right"></span></div>',
      '</div>'
    ].join('');


  // smartresize from Paul Irish (debounced window resize)
  (function($, sr) {
    var debounce = function(func, threshold, execAsap) {
      var timeout;

      return function debounced() {
        var obj = this,
          args = arguments;

        function delayed() {
          if (!execAsap) {
            func.apply(obj, args);
          }
          timeout = null;
        }

        if (timeout) {
          clearTimeout(timeout);
        }
        else if (execAsap) {
          func.apply(obj, args);
        }

        timeout = setTimeout(delayed, threshold || 100);
      };
    };
    jQuery.fn[sr] = function(fn) {
      return fn ? this.bind('resize.scrtabs', debounce(fn)) : this.trigger(sr);
    };

  })(jQuery, 'smartresize');



  /* ***********************************************************************************
   * EventHandlers - Class that each instance of ScrollingTabsControl will instantiate
   * **********************************************************************************/
  function EventHandlers(scrollingTabsControl) {
    var evh = this;

    evh.stc = scrollingTabsControl;
  }

  // prototype methods
  (function(p) {
    p.handleClickOnLeftScrollArrow = function() {
      var evh = this,
        stc = evh.stc;

      stc.scrollMovement.incrementScrollLeft();
    };

    p.handleClickOnRightScrollArrow = function() {
      var evh = this,
        stc = evh.stc,
        scrollMovement = stc.scrollMovement;

      scrollMovement.incrementScrollRight(scrollMovement.getMinPos());
    };

    p.handleMousedownOnLeftScrollArrow = function() {
      var evh = this,
        stc = evh.stc;

      stc.scrollMovement.startScrollLeft();
    };

    p.handleMousedownOnRightScrollArrow = function() {
      var evh = this,
        stc = evh.stc;

      stc.scrollMovement.startScrollRight();
    };

    p.handleMouseupOnLeftScrollArrow = function() {
      var evh = this,
        stc = evh.stc;

      stc.scrollMovement.stopScrollLeft();
    };

    p.handleMouseupOnRightScrollArrow = function() {
      var evh = this,
        stc = evh.stc;

      stc.scrollMovement.stopScrollRight();
    };

    p.handleWindowResize = function() {
      var evh = this,
        stc = evh.stc,
        newWinWidth = stc.$win.width();

      if (newWinWidth === stc.winWidth) {
        return false; // false alarm
      }

      stc.winWidth = newWinWidth;
      stc.elementsHandler.refreshAllElementSizes(true); // true -> check for scroll arrows not being necessary anymore
    };

    p.addtab = function() {
      var evh = this,
        stc = evh.stc;
      stc.elementsHandler.setMovableContainerWidth();
      stc.elementsHandler.setScrollArrowVisibility();
      stc.scrollMovement.startScrollRight();
    };

    p.removetab = function() {
      var evh = this,
        stc = evh.stc;
      stc.elementsHandler.setMovableContainerWidth();
      stc.elementsHandler.setScrollArrowVisibility();
      stc.scrollMovement.incrementScrollLeft();
    };

  }(EventHandlers.prototype));



  /* ***********************************************************************************
   * ElementsHandler - Class that each instance of ScrollingTabsControl will instantiate
   * **********************************************************************************/
  function ElementsHandler(scrollingTabsControl) {
    var ehd = this;

    ehd.stc = scrollingTabsControl;
  }

  // prototype methods
  (function(p) {
    p.initElements = function(isWrapperDirective) {
      var ehd = this;

      ehd.setElementReferences();

      if (isWrapperDirective) {
        ehd.moveTabContentOutsideScrollContainer();
      }

      ehd.setEventListeners();
    };

    p.moveTabContentOutsideScrollContainer = function() {
      var ehd = this,
        stc = ehd.stc,
        $tabsContainer = stc.$tabsContainer;

      $tabsContainer.find('.tab-content').appendTo($tabsContainer);
    };

    p.refreshAllElementSizes = function(isPossibleArrowVisibilityChange) {
      var ehd = this,
        stc = ehd.stc,
        smv = stc.scrollMovement,
        scrollArrowsWereVisible = stc.scrollArrowsVisible,
        minPos;

      ehd.setElementWidths();
      ehd.setScrollArrowVisibility();

      if (stc.scrollArrowsVisible) {
        ehd.setFixedContainerWidthForJustVisibleScrollArrows();
      }

      // if this was a window resize, make sure the movable container is positioned
      // correctly because, if it is far to the left and we increased the window width, it's
      // possible that the tabs will be too far left, beyond the min pos.
      if (isPossibleArrowVisibilityChange && (stc.scrollArrowsVisible || scrollArrowsWereVisible)) {
        if (stc.scrollArrowsVisible) {
          // make sure container not too far left
          minPos = smv.getMinPos();
          if (stc.movableContainerLeftPos < minPos) {
            smv.incrementScrollRight(minPos);
          } else {
            smv.scrollToActiveTab(true); // true -> isOnWindowResize
          }
        } else {
          // scroll arrows went away after resize, so position movable container at 0
          stc.movableContainerLeftPos = 0;
          smv.slideMovableContainerToLeftPos();
        }
      }
    };

    p.setElementReferences = function() {
      var ehd = this,
        stc = ehd.stc,
        $tabsContainer = stc.$tabsContainer;

      stc.$fixedContainer = $tabsContainer.find('.scrtabs-tabs-fixed-container');
      stc.$movableContainer = $tabsContainer.find('.scrtabs-tabs-movable-container');
      stc.$tabsUl = $tabsContainer.find('.tabs-item');
      stc.$tabsUlActive = $tabsContainer.find('.nav-tabs');
      stc.$leftScrollArrow = $tabsContainer.find('.scrtabs-js-tab-scroll-arrow-left');
      stc.$rightScrollArrow = $tabsContainer.find('.scrtabs-js-tab-scroll-arrow-right');
      stc.$scrollArrows = stc.$leftScrollArrow.add(stc.$rightScrollArrow);

      stc.$win = jQuery(window);
    };

    p.setElementWidths = function() {
      var ehd = this,
        stc = ehd.stc;

      stc.containerWidth = stc.$tabsContainer.outerWidth();
      stc.winWidth = stc.$win.width();

      stc.scrollArrowsCombinedWidth = stc.$leftScrollArrow.outerWidth() + stc.$rightScrollArrow.outerWidth();

      ehd.setFixedContainerWidth();
      ehd.setMovableContainerWidth();
    };

    p.setEventListeners = function() {
      var ehd = this,
        stc = ehd.stc,
        evh = stc.eventHandlers; // eventHandlers

      stc.$leftScrollArrow.on({
        'mousedown.scrtabs': function(e) {
          evh.handleMousedownOnLeftScrollArrow.call(evh, e);
        },
        'mouseup.scrtabs': function(e) {
          evh.handleMouseupOnLeftScrollArrow.call(evh, e);
        },
        'click.scrtabs': function(e) {
          evh.handleClickOnLeftScrollArrow.call(evh, e);
        }
      });

      stc.$rightScrollArrow.on({
        'mousedown.scrtabs': function(e) {
          evh.handleMousedownOnRightScrollArrow.call(evh, e);
        },
        'mouseup.scrtabs': function(e) {
          evh.handleMouseupOnRightScrollArrow.call(evh, e);
        },
        'click.scrtabs': function(e) {
          evh.handleClickOnRightScrollArrow.call(evh, e);
        }
      });

      stc.$win.smartresize(function(e) {
        evh.handleWindowResize.call(evh, e);
      });

      stc.scope.$watch(
        function () {return angular.element('.tabs-item').length; },
        function (newValue, oldValue) {
          if(newValue > oldValue) {
            evh.addtab.call(evh);
          } else if (oldValue > newValue) {
            evh.removetab.call(evh);
          }
        });

    };

    p.setFixedContainerWidth = function() {
      var ehd = this,
        stc = ehd.stc;

      stc.$fixedContainer.width(stc.fixedContainerWidth = stc.$tabsContainer.outerWidth());
    };

    p.setFixedContainerWidthForJustHiddenScrollArrows = function() {
      var ehd = this,
        stc = ehd.stc;

      stc.$fixedContainer.width(stc.fixedContainerWidth);
    };

    p.setFixedContainerWidthForJustVisibleScrollArrows = function() {
      var ehd = this,
        stc = ehd.stc;

      stc.$fixedContainer.width(stc.fixedContainerWidth - stc.scrollArrowsCombinedWidth);
    };

    p.setMovableContainerWidth = function() {
      var ehd = this,
        stc = ehd.stc;

      stc.movableContainerWidth = 50;

      angular.element('.tabs-item').each(function __getLiWidth() {
        var $li = jQuery(this);

        stc.movableContainerWidth += $li.outerWidth();
      });

      stc.$movableContainer.width(stc.movableContainerWidth += 1);
    };

    p.setScrollArrowVisibility = function() {
      var ehd = this,
        stc = ehd.stc,
        shouldBeVisible = stc.movableContainerWidth > stc.fixedContainerWidth;

      if(shouldBeVisible) {
        angular.element('.tabs-add-button').addClass('fixed-add-button');
      }
      if (shouldBeVisible && !stc.scrollArrowsVisible) {
        stc.$scrollArrows.show();
        stc.scrollArrowsVisible = true;
        ehd.setFixedContainerWidthForJustVisibleScrollArrows();
      } else if (!shouldBeVisible && stc.scrollArrowsVisible) {
        angular.element('.tabs-add-button').removeClass('fixed-add-button');
        stc.scrollMovement.incrementScrollLeft();
        stc.$scrollArrows.hide();
        stc.scrollArrowsVisible = false;
        ehd.setFixedContainerWidthForJustHiddenScrollArrows();
      }
    };

  }(ElementsHandler.prototype));



  /* ***********************************************************************************
   * ScrollMovement - Class that each instance of ScrollingTabsControl will instantiate
   * **********************************************************************************/
  function ScrollMovement(scrollingTabsControl) {
    var smv = this;

    smv.stc = scrollingTabsControl;
  }

  // prototype methods
  (function(p) {

    p.continueScrollLeft = function() {
      var smv = this,
        stc = smv.stc;

      stc.$timeout(function() {
        if (stc.$leftScrollArrow.data(CONSTANTS.DATA_KEY_IS_MOUSEDOWN) && (stc.movableContainerLeftPos < 0)) {
          if (!smv.incrementScrollLeft()) { // scroll limit not reached, so keep scrolling
            smv.continueScrollLeft();
          }
        }
      }, CONSTANTS.CONTINUOUS_SCROLLING_TIMEOUT_INTERVAL);
    };

    p.continueScrollRight = function(minPos) {
      var smv = this,
        stc = smv.stc;

      stc.$timeout(function() {
        if (stc.$rightScrollArrow.data(CONSTANTS.DATA_KEY_IS_MOUSEDOWN) && (stc.movableContainerLeftPos > minPos)) {
          // slide tabs LEFT -> decrease movable container's left position
          // min value is (movableContainerWidth - $tabHeader width)
          if (!smv.incrementScrollRight(minPos)) {
            smv.continueScrollRight(minPos);
          }
        }
      }, CONSTANTS.CONTINUOUS_SCROLLING_TIMEOUT_INTERVAL);
    };

    p.decrementMovableContainerLeftPos = function(minPos) {
      var smv = this,
        stc = smv.stc;

      stc.movableContainerLeftPos -= (stc.fixedContainerWidth / CONSTANTS.SCROLL_OFFSET_FRACTION);
      if (stc.movableContainerLeftPos < minPos) {
        stc.movableContainerLeftPos = minPos;
      }
    };

    p.getMinPos = function() {
      var smv = this,
        stc = smv.stc;

      return stc.scrollArrowsVisible ? (stc.fixedContainerWidth - stc.movableContainerWidth - stc.scrollArrowsCombinedWidth) : 0;
    };

    p.getMovableContainerCssLeftVal = function() {
      var smv = this,
        stc = smv.stc;

      return (stc.movableContainerLeftPos === 0) ? '0' : stc.movableContainerLeftPos + 'px';
    };

    p.incrementScrollLeft = function() {
      var smv = this,
        stc = smv.stc;

      stc.movableContainerLeftPos += (stc.fixedContainerWidth / CONSTANTS.SCROLL_OFFSET_FRACTION);
      if (stc.movableContainerLeftPos > 0) {
        stc.movableContainerLeftPos = 0;
      }

      smv.slideMovableContainerToLeftPos();

      return (stc.movableContainerLeftPos === 0); // indicates scroll limit reached
    };

    p.incrementScrollRight = function(minPos) {
      var smv = this,
        stc = smv.stc;

      smv.decrementMovableContainerLeftPos(minPos);
      smv.slideMovableContainerToLeftPos();

      return (stc.movableContainerLeftPos === minPos);
    };

    p.scrollToActiveTab = function(isOnWindowResize) {
      var smv = this,
        stc = smv.stc,
        $activeTab,
        activeTabWidth,
        activeTabLeftPos,
        rightArrowLeftPos,
        overlap;

      // if the active tab is not fully visible, scroll till it is
      if (!stc.scrollArrowsVisible) {
        return;
      }

      $activeTab = stc.$tabsUlActive.find('li.active');

      if (!$activeTab.length) {
        return;
      }

      activeTabWidth = $activeTab.outerWidth();
      activeTabLeftPos = $activeTab.offset().left;

      rightArrowLeftPos = stc.$rightScrollArrow.offset().left;
      overlap = activeTabLeftPos + activeTabWidth - rightArrowLeftPos;

      if (overlap > 0) {
        stc.movableContainerLeftPos = isOnWindowResize ? (stc.movableContainerLeftPos - overlap) : -overlap;
        smv.slideMovableContainerToLeftPos();
      }
    };

    p.slideMovableContainerToLeftPos = function() {
      var smv = this,
        stc = smv.stc,
        leftVal;

      stc.movableContainerLeftPos = stc.movableContainerLeftPos / 1;
      leftVal = smv.getMovableContainerCssLeftVal();

      stc.$movableContainer.stop().animate({
        left: leftVal
      }, 'slow', function __slideAnimComplete() {
        var newMinPos = smv.getMinPos();

        // if we slid past the min pos--which can happen if you resize the window
        // quickly--move back into position
        if (stc.movableContainerLeftPos < newMinPos) {
          smv.decrementMovableContainerLeftPos(newMinPos);
          stc.$movableContainer.stop().animate({
            left: smv.getMovableContainerCssLeftVal()
          }, 'fast');
        }
      });
    };

    p.startScrollLeft = function() {
      var smv = this,
        stc = smv.stc;

      stc.$leftScrollArrow.data(CONSTANTS.DATA_KEY_IS_MOUSEDOWN, true);
      smv.continueScrollLeft();
    };

    p.startScrollRight = function() {
      var smv = this,
        stc = smv.stc;

      stc.$rightScrollArrow.data(CONSTANTS.DATA_KEY_IS_MOUSEDOWN, true);
      smv.continueScrollRight(smv.getMinPos());
    };

    p.stopScrollLeft = function() {
      var smv = this,
        stc = smv.stc;

      stc.$leftScrollArrow.data(CONSTANTS.DATA_KEY_IS_MOUSEDOWN, false);
    };

    p.stopScrollRight = function() {
      var smv = this,
        stc = smv.stc;

      stc.$rightScrollArrow.data(CONSTANTS.DATA_KEY_IS_MOUSEDOWN, false);
    };

  }(ScrollMovement.prototype));



  /* **********************************************************************
   * ScrollingTabsControl - Class that each directive will instantiate
   * **********************************************************************/
  function ScrollingTabsControl(scope, $tabsContainer, $timeout) {
    var stc = this;

    stc.$tabsContainer = $tabsContainer;
    stc.$timeout = $timeout;
    stc.scope = scope;
    stc.movableContainerLeftPos = 0;
    stc.scrollArrowsVisible = true;

    stc.scrollMovement = new ScrollMovement(stc);
    stc.eventHandlers = new EventHandlers(stc);
    stc.elementsHandler = new ElementsHandler(stc);
  }

  // prototype methods
  (function(p) {
    p.initTabs = function(isWrapperDirective) {
      var stc = this,
        elementsHandler = stc.elementsHandler,
        scrollMovement = stc.scrollMovement;

      stc.$timeout(function __initTabsAfterTimeout() {
        elementsHandler.initElements(isWrapperDirective);
        elementsHandler.refreshAllElementSizes();
        elementsHandler.setScrollArrowVisibility();
        scrollMovement.scrollToActiveTab();
      }, 100);
    };


  }(ScrollingTabsControl.prototype));



  /* ********************************************************
   * scrolling-tabs Directive
   * ********************************************************/

  function scrollingTabsDirective($timeout, $sce) {

    function sanitize(html) {
      return $sce.trustAsHtml(html);
    }


    // ------------ Directive Object ---------------------------
    return {
      restrict: 'E',
      template: scrollingTabsTemplate,
      transclude: false,
      replace: true,
      scope: {
        tabs: '@',
        propPaneId: '@',
        propTitle: '@',
        propActive: '@',
        propDisabled: '@',
        localTabClick: '&tabClick'
      },
      link: function(scope, element) {
        var scrollingTabsControl = new ScrollingTabsControl(scope, element, $timeout);

        scope.tabsArr = scope.$eval(scope.tabs);
        scope.propPaneId = scope.propPaneId || 'paneId';
        scope.propTitle = scope.propTitle || 'title';
        scope.propActive = scope.propActive || 'active';
        scope.propDisabled = scope.propDisabled || 'disabled';
        scope.sanitize = sanitize;

        element.on('click.scrollingTabs', '.nav-tabs > li', function __handleClickOnTab(e) {
          var clickedTabElData = jQuery(this).data();

          scope.localTabClick({
            $event: e,
            $index: clickedTabElData.index,
            tab: clickedTabElData.tab
          });
        });

        scrollingTabsControl.initTabs(false); // false -> not the wrapper directive
      }

    };
  }

  /* ********************************************************
   * scrolling-tabs-wrapper Directive
   * ********************************************************/
  function scrollingTabsWrapperDirective($timeout) {
    // ------------ Directive Object ---------------------------
    return {
      restrict: 'A',
      template: scrollingTabsWrapperTemplate,
      transclude: true,
      replace: true,
      link: function(scope, element) {
        var scrollingTabsControl = new ScrollingTabsControl(scope, element, $timeout);

        scrollingTabsControl.initTabs(true); // true -> wrapper directive
      }
    };

  }

  scrollingTabsDirective.$inject = ['$timeout', '$sce'];
  scrollingTabsWrapperDirective.$inject = ['$timeout'];

  angular.module('ark-dashboard').directive('scrollingTabs', scrollingTabsDirective);
  angular.module('ark-dashboard').directive('scrollingTabsWrapper', scrollingTabsWrapperDirective);

}());

'use strict';

//angular.module('ark-dashboard')
//  .controller('widgetChart', function ($scope) {
//
//    $scope.$on('gridster-draggable-item-resizing', function () {
//      $scope.$$childTail.api.update();
//    });
//
//  });

/* jshint curly:false */
/* jshint sub:true */
/*jshint -W030 */

(function() {

    'use strict';

    angular.module('nvd3', [])

    .directive('nvd3', ['utils', function(utils) {
        return {
            restrict: 'AE',
            scope: {
                data: '=', //chart data, [required]
                options: '=', //chart options, according to nvd3 core api, [required]
                api: '=?', //directive global api, [optional]
                events: '=?', //global events that directive would subscribe to, [optional]
                config: '=?', //global directive configuration, [optional]
                chartType: '='
            },
            link: function(scope, element) {
                var defaultConfig = {
                    extended: false,
                    visible: true,
                    disabled: false,
                    autorefresh: true,
                    refreshDataOnly: false,
                    deepWatchData: true,
                    debounce: 10 // default 10ms, time silence to prevent refresh while multiple options changes at a time
                };

                //basic directive configuration
                scope._config = angular.extend(defaultConfig, scope.config);

                //directive global api
                scope.api = {
                    // Fully refresh directive
                    refresh: function() {
                        scope.api.updateWithOptions(scope.options);
                    },

                    // Update chart layout (for example if container is resized)
                    update: function() {
                        scope.chart.update();
                    },

                    // Update chart with new options
                    updateWithOptions: function(options) {
                        // Clearing
                        scope.api.clearElement();

                        // Exit if options are not yet bound
                        if (angular.isDefined(options) === false) return;

                        // Exit if chart is hidden
                        if (!scope._config.visible) return;

                        // Initialize chart with specific type
                        scope.chart = nv.models[options.chart.type]();

                        // Generate random chart ID
                        scope.chart.id = Math.random().toString(36).substr(2, 15);

                        angular.forEach(scope.chart, function(value, key) {
                            if ([
                                    'options',
                                    '_options',
                                    '_inherited',
                                    '_d3options',
                                    'state',
                                    'id',
                                    'resizeHandler'
                                ].indexOf(key) >= 0);

                            else if (key === 'dispatch') {
                                if (options.chart[key] === undefined || options.chart[key] === null) {
                                    if (scope._config.extended) options.chart[key] = {};
                                }
                                configureEvents(scope.chart[key], options.chart[key]);
                            } else if ([
                                    'lines',
                                    'lines1',
                                    'lines2',
                                    'bars',
                                    'bars1',
                                    'bars2',
                                    'stack1',
                                    'stack2',
                                    'stacked',
                                    'multibar',
                                    'discretebar',
                                    'pie',
                                    'scatter',
                                    'bullet',
                                    'sparkline',
                                    'legend',
                                    'distX',
                                    'distY',
                                    'xAxis',
                                    'x2Axis',
                                    'yAxis',
                                    'yAxis1',
                                    'yAxis2',
                                    'y1Axis',
                                    'y2Axis',
                                    'y3Axis',
                                    'y4Axis',
                                    'interactiveLayer',
                                    'controls'
                                ].indexOf(key) >= 0) {
                                if (options.chart[key] === undefined || options.chart[key] === null) {
                                    if (scope._config.extended) options.chart[key] = {};
                                }
                                configure(scope.chart[key], options.chart[key], options.chart.type);
                            }

                            //TODO: need to fix bug in nvd3
                            else if ((key === 'xTickFormat' || key === 'yTickFormat') && options.chart.type === 'lineWithFocusChart');

                            else if (options.chart[key] === undefined || options.chart[key] === null) {
                                if (scope._config.extended) options.chart[key] = value();
                            } else scope.chart[key](options.chart[key]);
                        });

                        // Update with data
                        scope.api.updateWithData(scope.data);

                        // Configure wrappers
                        if (options['title'] || scope._config.extended) configureWrapper('title');
                        if (options['subtitle'] || scope._config.extended) configureWrapper('subtitle');
                        if (options['caption'] || scope._config.extended) configureWrapper('caption');


                        // Configure styles
                        if (options['styles'] || scope._config.extended) configureStyles();

                        nv.addGraph(function() {
                            // Update the chart when window resizes
                            scope.chart.resizeHandler = nv.utils.windowResize(function() {
                                scope.chart.update();
                            });
                            return scope.chart;
                        }, options.chart['callback']);
                    },

                    // Update chart with new data
                    updateWithData: function(data) {
                        if (data) {
                            scope.options.chart['transitionDuration'] = +scope.options.chart['transitionDuration'] || 250;
                            // remove whole svg element with old data
                            d3.select(element[0]).select('svg').remove();

                            // Select the current element to add <svg> element and to render the chart in
                            d3.select(element[0]).append('svg')
                                .attr('height', scope.options.chart.height)
                                .attr('width', scope.options.chart.width || '100%')
                                .datum(data)
                                .transition().duration(scope.options.chart['transitionDuration'])
                                .call(scope.chart);
                        }
                    },

                    // Fully clear directive element
                    clearElement: function() {
                        element.find('.title').remove();
                        element.find('.subtitle').remove();
                        element.find('.caption').remove();
                        element.empty();
                        if (scope.chart) {
                            // clear window resize event handler
                            if (scope.chart.resizeHandler) scope.chart.resizeHandler.clear();

                            // remove chart from nv.graph list
                            for (var i = 0; i < nv.graphs.length; i++)
                                if (nv.graphs[i].id === scope.chart.id) {
                                    nv.graphs.splice(i, 1);
                                }
                        }
                        scope.chart = null;
                        nv.tooltip.cleanup();
                    },

                    // Get full directive scope
                    getScope: function() {
                        return scope;
                    }
                };

                // Configure the chart model with the passed options
                function configure(chart, options) {
                    if (chart && options) {
                        angular.forEach(chart, function(value, key) {
                            if (key === 'dispatch') {
                                if (options[key] === undefined || options[key] === null) {
                                    if (scope._config.extended) options[key] = {};
                                }
                                configureEvents(value, options[key]);
                            } else if ([
                                    'scatter',
                                    'defined',
                                    'options',
                                    'axis',
                                    'rangeBand',
                                    'rangeBands',
                                    '_options',
                                    '_inherited',
                                    '_d3options',
                                    '_calls'
                                ].indexOf(key) < 0) {
                                if (options[key] === undefined || options[key] === null) {
                                    if (scope._config.extended) options[key] = value();
                                } else chart[key](options[key]);
                            }
                        });
                    }
                }

                // Subscribe to the chart events (contained in 'dispatch')
                // and pass eventHandler functions in the 'options' parameter
                function configureEvents(dispatch, options) {
                    if (dispatch && options) {
                        angular.forEach(dispatch, function(value, key) {
                            if (options[key] === undefined || options[key] === null) {
                                if (scope._config.extended) options[key] = value.on;
                            } else dispatch.on(key + '._', options[key]);
                        });
                    }
                }

                // Configure 'title', 'subtitle', 'caption'.
                // nvd3 has no sufficient models for it yet.
                function configureWrapper(name) {
                    var _ = utils.deepExtend(defaultWrapper(name), scope.options[name] || {});

                    if (scope._config.extended) scope.options[name] = _;

                    var wrapElement = angular.element('<div></div>').html(_['html'] || '')
                        .addClass(name).addClass(_.class)
                        .removeAttr('style')
                        .css(_.css);

                    if (!_['html']) wrapElement.text(_.text);

                    if (_.enable) {
                        if (name === 'title') element.prepend(wrapElement);
                        else if (name === 'subtitle') element.find('.title').after(wrapElement);
                        else if (name === 'caption') element.append(wrapElement);
                    }
                }

                // Add some styles to the whole directive element
                function configureStyles() {
                    var _ = utils.deepExtend(defaultStyles(), scope.options['styles'] || {});

                    if (scope._config.extended) scope.options['styles'] = _;

                    angular.forEach(_.classes, function(value, key) {
                        value ? element.addClass(key) : element.removeClass(key);
                    });

                    element.removeAttr('style').css(_.css);
                }

                // Default values for 'title', 'subtitle', 'caption'
                function defaultWrapper(_) {
                    switch (_) {
                        case 'title':
                            return {
                                enable: false,
                                text: 'Write Your Title',
                                class: 'h4',
                                css: {
                                    width: scope.options.chart.width + 'px',
                                    textAlign: 'center'
                                }
                            };
                        case 'subtitle':
                            return {
                                enable: false,
                                text: 'Write Your Subtitle',
                                css: {
                                    width: scope.options.chart.width + 'px',
                                    textAlign: 'center'
                                }
                            };
                        case 'caption':
                            return {
                                enable: false,
                                text: 'Figure 1. Write Your Caption text.',
                                css: {
                                    width: scope.options.chart.width + 'px',
                                    textAlign: 'center'
                                }
                            };
                    }
                }

                // Default values for styles
                function defaultStyles() {
                    return {
                        classes: {
                            'with-3d-shadow': true,
                            'with-transitions': true,
                            'gallery': false
                        },
                        css: {}
                    };
                }

                /* Event Handling */
                // Watching on options changing
                scope.$watch('options', utils.debounce(function() {
                    if (!scope._config.disabled && scope._config.autorefresh) scope.api.refresh();
                }, scope._config.debounce, true), true);

                // Watching on data changing
                scope.$watch('data', function(newData, oldData) {
                    if (newData !== oldData && scope.chart) {
                        if (!scope._config.disabled && scope._config.autorefresh) {
                            scope._config.refreshDataOnly ? scope.chart.update() : scope.api.refresh(); // if wanted to refresh data only, use chart.update method, otherwise use full refresh.
                        }
                    }
                }, scope._config.deepWatchData);

                // Watching on config changing
                scope.$watch('config', function(newConfig, oldConfig) {
                    if (newConfig !== oldConfig) {
                        scope._config = angular.extend(defaultConfig, newConfig);
                        scope.api.refresh();
                    }
                }, true);

                //subscribe on global events
                angular.forEach(scope.events, function(eventHandler, event) {
                    scope.$on(event, function(e) {
                        return eventHandler(e, scope);
                    });
                });

                // remove completely when directive is destroyed
                element.on('$destroy', function() {
                    scope.api.clearElement();
                });
            }
        };
    }])

    .factory('utils', function() {
        return {
            debounce: function(func, wait, immediate) {
                var timeout;
                return function() {
                    var context = this,
                        args = arguments;
                    var later = function() {
                        timeout = null;
                        if (!immediate) func.apply(context, args);
                    };
                    var callNow = immediate && !timeout;
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                    if (callNow) func.apply(context, args);
                };
            },
            deepExtend: function(dst) {
                var me = this;
                angular.forEach(arguments, function(obj) {
                    if (obj !== dst) {
                        angular.forEach(obj, function(value, key) {
                            if (dst[key] && dst[key].constructor && dst[key].constructor === Object) {
                                me.deepExtend(dst[key], value);
                            } else {
                                dst[key] = value;
                            }
                        });
                    }
                });
                return dst;
            }
        };
    });
})();

'use strict';

/*angular.module('ark-dashboard')
  .directive('widgetChart', function ($compile, $timeout) {
    return {
      restrict: 'E',
      scope: {
        widget: '='
      },
      link: function (scope, element) {
        // !! We don't need this directive !!
        element.html('<div ' + scope.widget.directive + '></div>'); //Current widget directives are attributes
        scope.loading = true;
        var el = $compile(element.contents())(scope);
        if (el) {
          scope.loading = false;
        }
      }
    };
  });*/

angular.module('ark-dashboard').run(['$templateCache', function($templateCache) {
  'use strict';

$templateCache.put('src/dashboard/template/dashboard-layouts.html',
    "<div scrolling-tabs-wrapper>\n" +
    "  <ul ui-sortable=\"sortableOptions\" ng-model=\"layouts\" class=\"nav nav-tabs layout-tabs\">\n" +
    "    <li ng-repeat=\"layout in layouts\" ng-click=\"makeLayoutActive(layout)\" ng-class=\"{ active: layout.active }\" class=\"tabs-item nav-tabs-layout\">\n" +
    "      <a ng-init=\"addTooptip()\">\n" +
    "          <span ng-if=\"layout.locked\" class=\"tabs-icon fonticon icon-secure\"></span>\n" +
    "          <span ng-if=\"layout.type === 'widget'\" class=\"tabs-icon fonticon icon-dashtab-dash\"></span>\n" +
    "          <span ng-if=\"layout.type === 'expand'\" class=\"tabs-icon fonticon icon-dashtab-xwidget\"></span>\n" +
    "          <span class=\"tabs-title\" ng-if=\"layout.showTooltip\" tooltip-placement=\"bottom\" tooltip=\"{{layout.title}}\" tooltip-popup-delay=\"500\">{{layout.title}}</span>\n" +
    "          <span class=\"tabs-title\" ng-if=\"!layout.showTooltip\">{{layout.title}}</span>\n" +
    "      </a>\n" +
    "      <div class=\"nav-tabs-collapse\">\n" +
    "          <ul class=\"nav\">\n" +
    "              <li class=\"ark-dropdown dropdown\">\n" +
    "                  <a ng-if=\"!layout.active\" ng-click=\"makeLayoutActive(layout)\" class=\"ark-dropdown-toggle nav-tabs-dropdown\"><i class=\"icon-more\"></i></a>\n" +
    "                  <a ng-if=\"layout.active\" href=\"#\" role=\"button\" class=\"ark-dropdown-toggle nav-tabs-dropdown\"><i class=\"icon-more\"></i></a>\n" +
    "                  <ul ng-if=\"layout.active\" class=\"dropdown-menu nav-tabs-dropdown-menu dropdown-menu-pull-left\" role=\"menu\" dropdown-menu menu=\"layoutList.list\" layout-actions=\"layoutList.actions\" default-layout-actions=\"defaultLayoutActions\"></ul>\n" +
    "              </li>\n" +
    "          </ul>\n" +
    "      </div>\n" +
    "    </li>\n" +
    "    <li>\n" +
    "        <a ng-click=\"createNewLayout()\" class=\"tabs-add-button\">\n" +
    "            <span class=\"fonticon icon-add\"></span>\n" +
    "        </a>\n" +
    "    </li>\n" +
    "  </ul>\n" +
    "</div>\n" +
    "<div  ng-repeat=\"layout in layouts | filter:isActive\" >\n" +
    "  <div ng-if=\"layout.type === 'widget'\" dashboard=\"layout.dashboard\" template-url=\"src/dashboard/template/dashboard.html\"></div>\n" +
    "  <div ng-if=\"layout.type === 'expand'\"expand-to-tab=\"layout.dashboard\" template-url=\"src/dashboard/template/expand-to-tab.html\"></div>\n" +
    "</div>\n"
);


$templateCache.put('src/dashboard/template/dashboard.html',
    "<div>\n" +
    "  <!--  gridster layout START -->\n" +
    "  <div gridster=\"gridsterOpts\" class=\"dashboard-widget-area\">\n" +
    "    <ul>\n" +
    "      <li gridster-item=\"widget\" ng-repeat=\"widget in widgets\" ng-style=\"widget.containerStyle\" class=\"widget-container\">\n" +
    "\n" +
    "        <!-- START: Widget Container -->\n" +
    "\n" +
    "        <div class=\"widget\">\n" +
    "          <div class=\"widget-controls\">\n" +
    "            <div class=\"widget-drag-button\">\n" +
    "              <span class=\"fonticon icon-grab widget-anchor\"></span>\n" +
    "            </div>\n" +
    "            <div class=\"nav-tabs-collapse\">\n" +
    "              <ul class=\"nav\">\n" +
    "                <li class=\"ark-dropdown dropdown\">\n" +
    "                  <a role=\"button\" class=\"ark-dropdown-toggle nav-tabs-dropdown\"><i class=\"icon-more\"></i></a>\n" +
    "                  <ul class=\"dropdown-menu nav-tabs-dropdown-menu dropdown-menu-pull-left\"  role=\"menu\" dropdown-menu menu=\"widgetList.list\" widget-actions=\"widgetList.actions\" widget=\"widget\" default-widget-actions=\"defaultWidgetActions\"></ul>\n" +
    "                </li>\n" +
    "              </ul>\n" +
    "            </div>\n" +
    "          </div>\n" +
    "          <div class=\"widget-title\">\n" +
    "              <div class=\"widget-name-text\">{{widget.attrs.description}}</div>\n" +
    "              <div class=\"widget-title-text\" ng-div=\"widget.editingTitle\">{{widget.title}}</label>\n" +
    "              </div>\n" +
    "          </div>\n" +
    "\n" +
    "          <div class=\"widget-content\">\n" +
    "              <div ng-controller=\"widgetChart\" style='height:calc(100% - 40px)' slimscroll=\"{height: \'100%\', width: \'185\'}\">\n" +
    "                  <widget-chart widget='widget' ng-hide=\"loading\"></widget-chart>\n" +
    "                     <div class=\"spinner-container fast-spinner widget-spinner\" ng-show=\"loading\">\n" +
    "                       <div class=\"spin-circle\"></div>\n" +
    "                       <div class=\"spin-inner-circle\"></div>\n" +
    "                     </div>\n" +
    "              </div>\n" +
    "          </div>\n" +
    "        <!-- END: Widget Container -->\n" +
    "      </li>\n" +
    "    </ul>\n" +
    "  </div>\n" +
    "</div>\n"
);


  $templateCache.put('src/dashboard/template/expand-to-tab.html',
    "<div>\r" +
    "\n" +
    "  <!--  gridster layout START -->\r" +
    "\n" +
    "  <div gridster=\"gridsterOpts\" class=\"dashboard-widget-area\">\r" +
    "\n" +
    "    <ul>\r" +
    "\n" +
    "      <li gridster-item=\"expand\" class=\"widget-container\">\r" +
    "\n" +
    "\r" +
    "\n" +
    "        <!-- START: Widget Container -->\r" +
    "\n" +
    "\r" +
    "\n" +
    "        <div class=\"expand\">\r" +
    "\n" +
    "          <div class=\"expand-title\">\r" +
    "\n" +
    "              <div class=\"expand-title-text\">{{expand.title}}</label>\r" +
    "\n" +
    "              </div>\r" +
    "\n" +
    "              <div class=\"expand-icons\">\r" +
    "\n" +
    "                <i class=\"active fonticon icon-24-graph-bar\"></i>\r" +
    "\n" +
    "                <i class=\"fonticon icon-24-graph-line\"></i>\r" +
    "\n" +
    "                <i class=\"fonticon icon-24-graph-stack\"></i>\r" +
    "\n" +
    "                <i class=\"fonticon icon-24-graph-grid\"></i>\r" +
    "\n" +
    "              </div>\r" +
    "\n" +
    "          </div>\r" +
    "\n" +
    "          <div class=\"exapnd-content\">\r" +
    "\n" +
    "            <div class=\"expand-graph\">\r" +
    "\n" +
    "              <nvd3 options=\"expand.chartOptions\" data=\"expand.chartData\"></nvd3>\r" +
    "\n" +
    "            </div>\r" +
    "\n" +
    "            <div class=\"expand-info\">\r" +
    "\n" +
    "              <json-tree json=\"expand.chartOptions\" edit-level=\"high\" collapsed-level=\"2\" ></json-tree>\r" +
    "\n" +
    "            </div>\r" +
    "\n" +
    "          </div>\r" +
    "\n" +
    "\r" +
    "\n" +
    "        <!-- END: Widget Container -->\r" +
    "\n" +
    "\r" +
    "\n" +
    "      </li>\r" +
    "\n" +
    "    </ul>\r" +
    "\n" +
    "  </div>\r" +
    "\n" +
    "</div>\r" +
    "\n"
  );


  $templateCache.put('src/dashboard/template/rename-template.html',
    "<div class=\"modal-header\">\r" +
    "\n" +
    "    <span ng-click=\"cancel()\" class=\"icon-close close modal-dialog-close\"></span>\r" +
    "\n" +
    "  <h1 class=\"modal-header\">Rename {{type}}</h1>\r" +
    "\n" +
    "</div>\r" +
    "\n" +
    "\r" +
    "\n" +
    "<div class=\"modal-body\">\r" +
    "\n" +
    "  <form name=\"form\" role=\"form\" class=\"form-horizontal\">\r" +
    "\n" +
    "    <div class=\"form-group\" ng-class=\"{ 'has-error': !form.title.$valid }\">\r" +
    "\n" +
    "      <div class=\"col-sm-10\">\r" +
    "\n" +
    "        <input type=\"text\" class=\"form-control\" name=\"title\" ui-validate=\"{empty:'$value'}\" ng-model=\"title\" select-text>\r" +
    "        <span class=\"help-block red\" ng-if=\"form.title.$error.empty\">Please enter a name</span>\r" +
    "\n" +
    "      </div>\r" +
    "\n" +
    "    </div>\r" +
    "\n" +
    "  </form>\r" +
    "\n" +
    "</div>\r" +
    "\n" +
    "\r" +
    "\n" +
    "<div class=\"modal-footer\">\r" +
    "\n" +
    "  <button type=\"button\" class=\"btn btn-default\" ng-click=\"cancel()\">Cancel</button>\r" +
    "\n" +
    "  <button type=\"button\" class=\"btn btn-primary\" ng-disabled=\"!form.$valid || title === ''\" ng-click=\"ok()\">Rename</button>\r" +
    "\n" +
    "</div>"
  );


  $templateCache.put('src/dashboard/template/save-changes-modal.html',
    "<div class=\"modal-header\">\n" +
    "\t<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"cancel()\">&times;</button>\n" +
    "  <h3>Unsaved Changes to \"{{layout.title}}\"</h3>\n" +
    "</div>\n" +
    "\n" +
    "<div class=\"modal-body\">\n" +
    "  <p>You have {{layout.dashboard.unsavedChangeCount}} unsaved changes on this dashboard. Would you like to save them?</p>\n" +
    "</div>\n" +
    "\n" +
    "<div class=\"modal-footer\">\n" +
    "  <button type=\"button\" class=\"btn btn-default\" ng-click=\"cancel()\">Don't Save</button>\n" +
    "  <button type=\"button\" class=\"btn btn-primary\" ng-click=\"ok()\">Save</button>\n" +
    "</div>"
  );


  $templateCache.put('src/dashboard/template/widget-default-content.html',
    ""
  );


  $templateCache.put('src/dashboard/components/dropdown-menu/dropdown-menu.html',
    "<li ng-repeat=\"item in menu\" style=\"cursor:pointer;\" role=\"presentation\" ng-controller=\"dropdownMenuController\">\r" +
    "\n" +
    " <a role=\"menuitem\" tabindex=\"-1\" ng-if=\"item.requireConfirmPopup\" tooltip-placement=\"top\" tooltip=\"{{item.tooltip}}\" ng-click=\"handleMenuOption(item.menuOptionKey)\">\r" +
    "\n" +
    "    <i class=\"icon {{item.menuIcon}}\"></i> {{item.menuLocalizedTitle}}\r" +
    "\n" +
    "  </a>\r" +
    "  <a role=\"menuitem\" tabindex=\"-1\" ng-if=\"!item.requireConfirmPopup\" ng-click=\"handleMenuOption(item.menuOptionKey)\">\r" +
    "\n" +
    "    <i class=\"icon {{item.menuIcon}}\"></i> {{item.menuLocalizedTitle}}\r" +
    "\n" +
    "  </a>\r" +
    "\n" +
    "</li>\r" +
    "\n"
  );

}]);

/*
 * ark-ui-bootstrap
 * http://angular-ui.github.io/bootstrap/

 * Version: 0.12.0 - 2015-06-02
 * License: MIT
 */
angular.module("ark-ui-bootstrap", ["ark-ui-bootstrap.tpls", "ark-ui-bootstrap.transition","ark-ui-bootstrap.collapse","ark-ui-bootstrap.accordion","ark-ui-bootstrap.bindHtml","ark-ui-bootstrap.buttons","ark-ui-bootstrap.dropdown","ark-ui-bootstrap.modal","ark-ui-bootstrap.position","ark-ui-bootstrap.tooltip","ark-ui-bootstrap.popover","ark-ui-bootstrap.tabs"]);
angular.module("ark-ui-bootstrap.tpls", ["template/accordion/accordion-group.html","template/accordion/accordion.html","template/modal/backdrop.html","template/modal/window-new.html","template/modal/window.html","template/tooltip/tooltip-html-unsafe-popup.html","template/tooltip/tooltip-popup.html","template/popover/popover-html-unsafe-popup.html","template/popover/popover.html","template/tabs/tab.html","template/tabs/tabset.html"]);
angular.module('ark-ui-bootstrap.transition', [])

/**
 * $transition service provides a consistent interface to trigger CSS 3 transitions and to be informed when they complete.
 * @param  {DOMElement} element  The DOMElement that will be animated.
 * @param  {string|object|function} trigger  The thing that will cause the transition to start:
 *   - As a string, it represents the css class to be added to the element.
 *   - As an object, it represents a hash of style attributes to be applied to the element.
 *   - As a function, it represents a function to be called that will cause the transition to occur.
 * @return {Promise}  A promise that is resolved when the transition finishes.
 */
.factory('$transition', ['$q', '$timeout', '$rootScope', function($q, $timeout, $rootScope) {

  var $transition = function(element, trigger, options) {
    options = options || {};
    var deferred = $q.defer();
    var endEventName = $transition[options.animation ? 'animationEndEventName' : 'transitionEndEventName'];

    var transitionEndHandler = function(event) {
      $rootScope.$apply(function() {
        element.unbind(endEventName, transitionEndHandler);
        deferred.resolve(element);
      });
    };

    if (endEventName) {
      element.bind(endEventName, transitionEndHandler);
    }

    // Wrap in a timeout to allow the browser time to update the DOM before the transition is to occur
    $timeout(function() {
      if ( angular.isString(trigger) ) {
        element.addClass(trigger);
      } else if ( angular.isFunction(trigger) ) {
        trigger(element);
      } else if ( angular.isObject(trigger) ) {
        element.css(trigger);
      }
      //If browser does not support transitions, instantly resolve
      if ( !endEventName ) {
        deferred.resolve(element);
      }
    });

    // Add our custom cancel function to the promise that is returned
    // We can call this if we are about to run a new transition, which we know will prevent this transition from ending,
    // i.e. it will therefore never raise a transitionEnd event for that transition
    deferred.promise.cancel = function() {
      if ( endEventName ) {
        element.unbind(endEventName, transitionEndHandler);
      }
      deferred.reject('Transition cancelled');
    };

    return deferred.promise;
  };

  // Work out the name of the transitionEnd event
  var transElement = document.createElement('trans');
  var transitionEndEventNames = {
    'WebkitTransition': 'webkitTransitionEnd',
    'MozTransition': 'transitionend',
    'OTransition': 'oTransitionEnd',
    'transition': 'transitionend'
  };
  var animationEndEventNames = {
    'WebkitTransition': 'webkitAnimationEnd',
    'MozTransition': 'animationend',
    'OTransition': 'oAnimationEnd',
    'transition': 'animationend'
  };
  function findEndEventName(endEventNames) {
    for (var name in endEventNames){
      if (transElement.style[name] !== undefined) {
        return endEventNames[name];
      }
    }
  }
  $transition.transitionEndEventName = findEndEventName(transitionEndEventNames);
  $transition.animationEndEventName = findEndEventName(animationEndEventNames);
  return $transition;
}]);

angular.module('ark-ui-bootstrap.collapse', ['ark-ui-bootstrap.transition'])

  .directive('collapse', ['$transition', function ($transition) {

    return {
      link: function (scope, element, attrs) {

        var initialAnimSkip = true;
        var currentTransition;

        function doTransition(change) {
          var newTransition = $transition(element, change);
          if (currentTransition) {
            currentTransition.cancel();
          }
          currentTransition = newTransition;
          newTransition.then(newTransitionDone, newTransitionDone);
          return newTransition;

          function newTransitionDone() {
            // Make sure it's this transition, otherwise, leave it alone.
            if (currentTransition === newTransition) {
              currentTransition = undefined;
            }
          }
        }

        function expand() {
          if (initialAnimSkip) {
            initialAnimSkip = false;
            expandDone();
          } else {
            element.removeClass('collapse').addClass('collapsing');
            doTransition({ height: element[0].scrollHeight + 'px' }).then(expandDone);
          }
        }

        function expandDone() {
          element.removeClass('collapsing');
          element.addClass('collapse in');
          element.css({height: 'auto'});
        }

        function collapse() {
          if (initialAnimSkip) {
            initialAnimSkip = false;
            collapseDone();
            element.css({height: 0});
          } else {
            // CSS transitions don't work with height: auto, so we have to manually change the height to a specific value
            element.css({ height: element[0].scrollHeight + 'px' });
            //trigger reflow so a browser realizes that height was updated from auto to a specific value
            var x = element[0].offsetWidth;

            element.removeClass('collapse in').addClass('collapsing');

            doTransition({ height: 0 }).then(collapseDone);
          }
        }

        function collapseDone() {
          element.removeClass('collapsing');
          element.addClass('collapse');
        }

        scope.$watch(attrs.collapse, function (shouldCollapse) {
          if (shouldCollapse) {
            collapse();
          } else {
            expand();
          }
        });
      }
    };
  }]);

angular.module('ark-ui-bootstrap.accordion', ['ark-ui-bootstrap.collapse'])

.constant('accordionConfig', {
  closeOthers: true
})

.controller('AccordionController', ['$scope', '$attrs', 'accordionConfig', function ($scope, $attrs, accordionConfig) {

  // This array keeps track of the accordion groups
  this.groups = [];

  // Ensure that all the groups in this accordion are closed, unless close-others explicitly says not to
  this.closeOthers = function(openGroup) {
    var closeOthers = angular.isDefined($attrs.closeOthers) ? $scope.$eval($attrs.closeOthers) : accordionConfig.closeOthers;
    if ( closeOthers ) {
      angular.forEach(this.groups, function (group) {
        if ( group !== openGroup ) {
          group.isOpen = false;
        }
      });
    }
  };

  // This is called from the accordion-group directive to add itself to the accordion
  this.addGroup = function(groupScope) {
    var that = this;
    this.groups.push(groupScope);

    groupScope.$on('$destroy', function (event) {
      that.removeGroup(groupScope);
    });
  };

  // This is called from the accordion-group directive when to remove itself
  this.removeGroup = function(group) {
    var index = this.groups.indexOf(group);
    if ( index !== -1 ) {
      this.groups.splice(index, 1);
    }
  };

}])

// The accordion directive simply sets up the directive controller
// and adds an accordion CSS class to itself element.
.directive('accordion', function () {
  return {
    restrict:'EA',
    controller:'AccordionController',
    transclude: true,
    replace: false,
    templateUrl: 'template/accordion/accordion.html'
  };
})

// The accordion-group directive indicates a block of html that will expand and collapse in an accordion
.directive('accordionGroup', function() {
  return {
    require:'^accordion',         // We need this directive to be inside an accordion
    restrict:'EA',
    transclude:true,              // It transcludes the contents of the directive into the template
    replace: true,                // The element containing the directive will be replaced with the template
    templateUrl:'template/accordion/accordion-group.html',
    scope: {
      heading: '@',               // Interpolate the heading attribute onto this scope
      isOpen: '=?',
      isDisabled: '=?'
    },
    controller: function() {
      this.setHeading = function(element) {
        this.heading = element;
      };
    },
    link: function(scope, element, attrs, accordionCtrl) {
      accordionCtrl.addGroup(scope);

      scope.$watch('isOpen', function(value) {
        if ( value ) {
          accordionCtrl.closeOthers(scope);
        }
      });

      scope.toggleOpen = function() {
        if ( !scope.isDisabled ) {
          scope.isOpen = !scope.isOpen;
        }
      };
    }
  };
})

// Use accordion-heading below an accordion-group to provide a heading containing HTML
// <accordion-group>
//   <accordion-heading>Heading containing HTML - <img src="..."></accordion-heading>
// </accordion-group>
.directive('accordionHeading', function() {
  return {
    restrict: 'EA',
    transclude: true,   // Grab the contents to be used as the heading
    template: '',       // In effect remove this element!
    replace: true,
    require: '^accordionGroup',
    link: function(scope, element, attr, accordionGroupCtrl, transclude) {
      // Pass the heading to the accordion-group controller
      // so that it can be transcluded into the right place in the template
      // [The second parameter to transclude causes the elements to be cloned so that they work in ng-repeat]
      accordionGroupCtrl.setHeading(transclude(scope, function() {}));
    }
  };
})

// Use in the accordion-group template to indicate where you want the heading to be transcluded
// You must provide the property on the accordion-group controller that will hold the transcluded element
// <div class="accordion-group">
//   <div class="accordion-heading" ><a ... accordion-transclude="heading">...</a></div>
//   ...
// </div>
.directive('accordionTransclude', function() {
  return {
    require: '^accordionGroup',
    link: function(scope, element, attr, controller) {
      scope.$watch(function() { return controller[attr.accordionTransclude]; }, function(heading) {
        if ( heading ) {
          element.html('');
          element.append(heading);
        }
      });
    }
  };
});

angular.module('ark-ui-bootstrap.bindHtml', [])

  .directive('bindHtmlUnsafe', function () {
    return function (scope, element, attr) {
      element.addClass('ng-binding').data('$binding', attr.bindHtmlUnsafe);
      scope.$watch(attr.bindHtmlUnsafe, function bindHtmlUnsafeWatchAction(value) {
        element.html(value || '');
      });
    };
  });
angular.module('ark-ui-bootstrap.buttons', [])

.constant('buttonConfig', {
  activeClass: 'active',
  toggleEvent: 'click'
})

.controller('ButtonsController', ['buttonConfig', function(buttonConfig) {
  this.activeClass = buttonConfig.activeClass || 'active';
  this.toggleEvent = buttonConfig.toggleEvent || 'click';
}])

.directive('btnRadio', function () {
  return {
    require: ['btnRadio', 'ngModel'],
    controller: 'ButtonsController',
    link: function (scope, element, attrs, ctrls) {
      var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      //model -> UI
      ngModelCtrl.$render = function () {
        element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, scope.$eval(attrs.btnRadio)));
      };

      //ui->model
      element.bind(buttonsCtrl.toggleEvent, function () {
        var isActive = element.hasClass(buttonsCtrl.activeClass);

        if (!isActive || angular.isDefined(attrs.uncheckable)) {
          scope.$apply(function () {
            ngModelCtrl.$setViewValue(isActive ? null : scope.$eval(attrs.btnRadio));
            ngModelCtrl.$render();
          });
        }
      });
    }
  };
})

.directive('btnCheckbox', function () {
  return {
    require: ['btnCheckbox', 'ngModel'],
    controller: 'ButtonsController',
    link: function (scope, element, attrs, ctrls) {
      var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      function getTrueValue() {
        return getCheckboxValue(attrs.btnCheckboxTrue, true);
      }

      function getFalseValue() {
        return getCheckboxValue(attrs.btnCheckboxFalse, false);
      }

      function getCheckboxValue(attributeValue, defaultValue) {
        var val = scope.$eval(attributeValue);
        return angular.isDefined(val) ? val : defaultValue;
      }

      //model -> UI
      ngModelCtrl.$render = function () {
        element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, getTrueValue()));
      };

      //ui->model
      element.bind(buttonsCtrl.toggleEvent, function () {
        scope.$apply(function () {
          ngModelCtrl.$setViewValue(element.hasClass(buttonsCtrl.activeClass) ? getFalseValue() : getTrueValue());
          ngModelCtrl.$render();
        });
      });
    }
  };
});

angular.module('ark-ui-bootstrap.dropdown', [])

.constant('dropdownConfig', {
  openClass: 'open active'
})

.service('dropdownService', ['$document', function($document) {
  var openScope = null;

  this.open = function(dropdownScope) {
    if (!openScope) {
      $document.bind('click', closeDropdown);
      $document.bind('keydown', escapeKeyBind);
    }

    if (openScope && openScope !== dropdownScope) {
      openScope.isOpen = false;
    }

    openScope = dropdownScope;
  };

  this.close = function(dropdownScope) {
    if (openScope === dropdownScope) {
      openScope = null;
      $document.unbind('click', closeDropdown);
      $document.unbind('keydown', escapeKeyBind);
    }
  };

  var closeDropdown = function(evt) {
    var toggleElement = openScope.getToggleElement();
    if (evt && toggleElement && toggleElement[0].contains(evt.target)) {
      return;
    }

    openScope.$apply(function() {
      openScope.isOpen = false;
    });
  };

  var escapeKeyBind = function(evt) {
    if (evt.which === 27) {
      openScope.focusToggleElement();
      closeDropdown();
    }
  };
}])

.controller('DropdownController', ['$scope', '$attrs', '$parse', 'dropdownConfig', 'dropdownService', '$animate', '$window',
  function($scope, $attrs, $parse, dropdownConfig, dropdownService, $animate, $window) {
    var self = this,
      scope = $scope.$new(), // create a child scope so we are not polluting original one
      openClass = dropdownConfig.openClass,
      getIsOpen,
      setIsOpen = angular.noop,
      toggleInvoker = $attrs.onToggle ? $parse($attrs.onToggle) : angular.noop;

    this.init = function(element) {
      var windowElement = angular.element($window),
        elementHeight = element.height(),
        elementMenuHeight = element.find('.dropdown-menu').height(),
        elementTotalHeight = elementHeight + elementMenuHeight + 20,
        toggleDropdownUp = _.debounce(function() {
          if (!(element.hasClass('ark-no-dropup'))) {
            element.toggleClass('dropup', $window.pageYOffset <=
              element.offset().top - $window.innerHeight + elementTotalHeight);
          }
          $scope.$apply();
        }, 600);

      self.$element = element;

      if ($attrs.isOpen) {
        getIsOpen = $parse($attrs.isOpen);
        setIsOpen = getIsOpen.assign;

        $scope.$watch(getIsOpen, function(value) {
          scope.isOpen = !!value;
        });
      }

      windowElement.bind('scroll', toggleDropdownUp);

      $scope.$on('$destroy', function() {
        windowElement.unbind('scroll', toggleDropdownUp);
      });
    };

    this.toggle = function(open) {
      return scope.isOpen = arguments.length ? !!open : !scope.isOpen;
    };

    // Allow other directives to watch status
    this.isOpen = function() {
      return scope.isOpen;
    };

    scope.getToggleElement = function() {
      return self.toggleElement;
    };

    scope.focusToggleElement = function() {
      if (self.toggleElement) {
        self.toggleElement[0].focus();
      }
    };

    scope.$watch('isOpen', function(isOpen, wasOpen) {
      $animate[isOpen ? 'addClass' : 'removeClass'](self.$element, openClass);

      if (isOpen) {
        scope.focusToggleElement();
        dropdownService.open(scope);
      } else {
        dropdownService.close(scope);
      }

      setIsOpen($scope, isOpen);
      if (angular.isDefined(isOpen) && isOpen !== wasOpen) {
        toggleInvoker($scope, {
          open: !!isOpen
        });
      }
    });

    $scope.$on('$locationChangeSuccess', function() {
      scope.isOpen = false;
    });

    $scope.$on('$destroy', function() {
      scope.$destroy();
    });
  }
])

.directive('arkDropdown', function() {
  return {
    restrict: 'CA',
    controller: 'DropdownController',
    link: function(scope, element, attrs, dropdownCtrl) {
      dropdownCtrl.init(element);
    }
  };
})

.directive('arkDropdownToggle', function() {
  return {
    restrict: 'CA',
    require: '?^arkDropdown',
    link: function(scope, element, attrs, dropdownCtrl) {
      if (!dropdownCtrl) {
        return;
      }

      dropdownCtrl.toggleElement = element;

      var toggleDropdown = function(event) {
        event.preventDefault();

        if (!element.hasClass('disabled') && !attrs.disabled) {
          scope.$apply(function() {
            dropdownCtrl.toggle();
          });
        }
      };

      element.bind('click', toggleDropdown);

      // WAI-ARIA
      element.attr({
        'aria-haspopup': true,
        'aria-expanded': false
      });
      scope.$watch(dropdownCtrl.isOpen, function(isOpen) {
        element.attr('aria-expanded', !!isOpen);
      });

      scope.$on('$destroy', function() {
        element.unbind('click', toggleDropdown);
      });
    }
  };
});

angular.module('ark-ui-bootstrap.modal', ['ark-ui-bootstrap.transition'])

/**
 * A helper, internal data structure that acts as a map but also allows getting / removing
 * elements in the LIFO order
 */
  .factory('$$stackedMap', function () {
    return {
      createNew: function () {
        var stack = [];

        return {
          add: function (key, value) {
            stack.push({
              key: key,
              value: value
            });
          },
          get: function (key) {
            for (var i = 0; i < stack.length; i++) {
              if (key == stack[i].key) {
                return stack[i];
              }
            }
          },
          keys: function() {
            var keys = [];
            for (var i = 0; i < stack.length; i++) {
              keys.push(stack[i].key);
            }
            return keys;
          },
          top: function () {
            return stack[stack.length - 1];
          },
          remove: function (key) {
            var idx = -1;
            for (var i = 0; i < stack.length; i++) {
              if (key == stack[i].key) {
                idx = i;
                break;
              }
            }
            return stack.splice(idx, 1)[0];
          },
          removeTop: function () {
            return stack.splice(stack.length - 1, 1)[0];
          },
          length: function () {
            return stack.length;
          }
        };
      }
    };
  })

/**
 * A helper directive for the $modal service. It creates a backdrop element.
 */
  .directive('modalBackdrop', ['$timeout', function ($timeout) {
    return {
      restrict: 'EA',
      replace: true,
      templateUrl: 'template/modal/backdrop.html',
      link: function (scope, element, attrs) {
        scope.backdropClass = attrs.backdropClass || '';

        scope.animate = false;

        //trigger CSS transitions
        $timeout(function () {
          scope.animate = true;
        });
      }
    };
  }])

  .directive('modalWindow', ['$modalStack', '$timeout', function ($modalStack, $timeout) {
    return {
      restrict: 'EA',
      scope: {
        index: '@',
        animate: '='
      },
      replace: true,
      transclude: true,
      templateUrl: function(tElement, tAttrs) {
        if (tAttrs.newStyle === 'true') {
          return tAttrs.templateUrl || 'template/modal/window-new.html';
        }
        else {
          return tAttrs.templateUrl || 'template/modal/window.html';
        }
      },
      link: function (scope, element, attrs) {
        element.addClass(attrs.windowClass || '');
        scope.size = attrs.size;

        $timeout(function () {
          // trigger CSS transitions
          scope.animate = true;
          // focus a freshly-opened modal
          element[0].focus();
        });

        scope.close = function (evt) {
          var modal = $modalStack.getTop();
          if (modal && modal.value.backdrop && modal.value.backdrop != 'static' && (evt.target === evt.currentTarget)) {
            evt.preventDefault();
            evt.stopPropagation();
            $modalStack.dismiss(modal.key, 'backdrop click');
          }
        };
      }
    };
  }])

  .directive('modalTransclude', function () {
    return {
      link: function($scope, $element, $attrs, controller, $transclude) {
        $transclude($scope.$parent, function(clone) {
          $element.empty();
          $element.append(clone);
        });
      }
    };
  })

  .factory('$modalStack', ['$transition', '$timeout', '$document', '$compile', '$rootScope', '$$stackedMap',
    function ($transition, $timeout, $document, $compile, $rootScope, $$stackedMap) {

      var OPENED_MODAL_CLASS = 'modal-open';

      var backdropDomEl, backdropScope;
      var openedWindows = $$stackedMap.createNew();
      var $modalStack = {};

      function backdropIndex() {
        var topBackdropIndex = -1;
        var opened = openedWindows.keys();
        for (var i = 0; i < opened.length; i++) {
          if (openedWindows.get(opened[i]).value.backdrop) {
            topBackdropIndex = i;
          }
        }
        return topBackdropIndex;
      }

      $rootScope.$watch(backdropIndex, function(newBackdropIndex){
        if (backdropScope) {
          backdropScope.index = newBackdropIndex;
        }
      });

      function removeModalWindow(modalInstance) {

        var body = $document.find('body').eq(0);
        var modalWindow = openedWindows.get(modalInstance).value;

        //clean up the stack
        openedWindows.remove(modalInstance);

        //remove window DOM element
        removeAfterAnimate(modalWindow.modalDomEl, modalWindow.modalScope, 300, function() {
          modalWindow.modalScope.$destroy();
          body.toggleClass(OPENED_MODAL_CLASS, openedWindows.length() > 0);
          checkRemoveBackdrop();
        });
      }

      function checkRemoveBackdrop() {
          //remove backdrop if no longer needed
          if (backdropDomEl && backdropIndex() == -1) {
            var backdropScopeRef = backdropScope;
            removeAfterAnimate(backdropDomEl, backdropScope, 150, function () {
              backdropScopeRef.$destroy();
              backdropScopeRef = null;
            });
            backdropDomEl = undefined;
            backdropScope = undefined;
          }
      }

      function removeAfterAnimate(domEl, scope, emulateTime, done) {
        // Closing animation
        scope.animate = false;

        var transitionEndEventName = $transition.transitionEndEventName;
        if (transitionEndEventName) {
          // transition out
          var timeout = $timeout(afterAnimating, emulateTime);

          domEl.bind(transitionEndEventName, function () {
            $timeout.cancel(timeout);
            afterAnimating();
            scope.$apply();
          });
        } else {
          // Ensure this call is async
          $timeout(afterAnimating);
        }

        function afterAnimating() {
          if (afterAnimating.done) {
            return;
          }
          afterAnimating.done = true;

          domEl.remove();
          if (done) {
            done();
          }
        }
      }

      $document.bind('keydown', function (evt) {
        var modal;

        if (evt.which === 27) {
          modal = openedWindows.top();
          if (modal && modal.value.keyboard) {
            evt.preventDefault();
            $rootScope.$apply(function () {
              $modalStack.dismiss(modal.key, 'escape key press');
            });
          }
        }
      });

      $modalStack.open = function (modalInstance, modal) {

        openedWindows.add(modalInstance, {
          deferred: modal.deferred,
          modalScope: modal.scope,
          backdrop: modal.backdrop,
          keyboard: modal.keyboard
        });

        var body = $document.find('body').eq(0),
            currBackdropIndex = backdropIndex();

        if (currBackdropIndex >= 0 && !backdropDomEl) {
          backdropScope = $rootScope.$new(true);
          backdropScope.index = currBackdropIndex;
          var angularBackgroundDomEl = angular.element('<div modal-backdrop></div>');
          angularBackgroundDomEl.attr('backdrop-class', modal.backdropClass);
          backdropDomEl = $compile(angularBackgroundDomEl)(backdropScope);
          body.append(backdropDomEl);
        }

        var angularDomEl = angular.element('<div modal-window></div>');
        angularDomEl.attr({
          'template-url': modal.windowTemplateUrl,
          'window-class': modal.windowClass,
          'size': modal.size,
          'index': openedWindows.length() - 1,
          'animate': 'animate',
          'new-style': modal.newStyle
        }).html(modal.content);

        var modalDomEl = $compile(angularDomEl)(modal.scope);
        openedWindows.top().value.modalDomEl = modalDomEl;
        body.append(modalDomEl);
        body.addClass(OPENED_MODAL_CLASS);
      };

      $modalStack.close = function (modalInstance, result) {
        var modalWindow = openedWindows.get(modalInstance);
        if (modalWindow) {
          modalWindow.value.deferred.resolve(result);
          removeModalWindow(modalInstance);
        }
      };

      $modalStack.dismiss = function (modalInstance, reason) {
        var modalWindow = openedWindows.get(modalInstance);
        if (modalWindow) {
          modalWindow.value.deferred.reject(reason);
          removeModalWindow(modalInstance);
        }
      };

      $modalStack.dismissAll = function (reason) {
        var topModal = this.getTop();
        while (topModal) {
          this.dismiss(topModal.key, reason);
          topModal = this.getTop();
        }
      };

      $modalStack.getTop = function () {
        return openedWindows.top();
      };

      return $modalStack;
    }])

  .provider('$modal', function () {

    var $modalProvider = {
      options: {
        backdrop: true, //can be also false or 'static'
        keyboard: true
      },
      $get: ['$injector', '$rootScope', '$q', '$http', '$templateCache', '$controller', '$modalStack',
        function ($injector, $rootScope, $q, $http, $templateCache, $controller, $modalStack) {

          var $modal = {};

          function getTemplatePromise(options) {
            return options.template ? $q.when(options.template) :
              $http.get(angular.isFunction(options.templateUrl) ? (options.templateUrl)() : options.templateUrl,
                {cache: $templateCache}).then(function (result) {
                  return result.data;
              });
          }

          function getResolvePromises(resolves) {
            var promisesArr = [];
            angular.forEach(resolves, function (value) {
              if (angular.isFunction(value) || angular.isArray(value)) {
                promisesArr.push($q.when($injector.invoke(value)));
              }
            });
            return promisesArr;
          }

          $modal.open = function (modalOptions) {

            var modalResultDeferred = $q.defer();
            var modalOpenedDeferred = $q.defer();

            //prepare an instance of a modal to be injected into controllers and returned to a caller
            var modalInstance = {
              result: modalResultDeferred.promise,
              opened: modalOpenedDeferred.promise,
              close: function (result) {
                $modalStack.close(modalInstance, result);
              },
              dismiss: function (reason) {
                $modalStack.dismiss(modalInstance, reason);
              }
            };

            //merge and clean up options
            modalOptions = angular.extend({}, $modalProvider.options, modalOptions);
            modalOptions.resolve = modalOptions.resolve || {};

            //verify options
            if (!modalOptions.template && !modalOptions.templateUrl) {
              throw new Error('One of template or templateUrl options is required.');
            }

            var templateAndResolvePromise =
              $q.all([getTemplatePromise(modalOptions)].concat(getResolvePromises(modalOptions.resolve)));


            templateAndResolvePromise.then(function resolveSuccess(tplAndVars) {

              var modalScope = (modalOptions.scope || $rootScope).$new();
              modalScope.$close = modalInstance.close;
              modalScope.$dismiss = modalInstance.dismiss;

              var ctrlInstance, ctrlLocals = {};
              var resolveIter = 1;

              //controllers
              if (modalOptions.controller) {
                ctrlLocals.$scope = modalScope;
                ctrlLocals.$modalInstance = modalInstance;
                angular.forEach(modalOptions.resolve, function (value, key) {
                  ctrlLocals[key] = tplAndVars[resolveIter++];
                });

                ctrlInstance = $controller(modalOptions.controller, ctrlLocals);
                if (modalOptions.controller) {
                  modalScope[modalOptions.controllerAs] = ctrlInstance;
                }
              }

              $modalStack.open(modalInstance, {
                scope: modalScope,
                deferred: modalResultDeferred,
                content: tplAndVars[0],
                backdrop: modalOptions.backdrop,
                keyboard: modalOptions.keyboard,
                backdropClass: modalOptions.backdropClass,
                windowClass: modalOptions.windowClass,
                windowTemplateUrl: modalOptions.windowTemplateUrl,
                newStyle: modalOptions.newStyle,
                size: modalOptions.size
              });

            }, function resolveError(reason) {
              modalResultDeferred.reject(reason);
            });

            templateAndResolvePromise.then(function () {
              modalOpenedDeferred.resolve(true);
            }, function () {
              modalOpenedDeferred.reject(false);
            });

            return modalInstance;
          };

          return $modal;
        }]
    };

    return $modalProvider;
  });

angular.module('ark-ui-bootstrap.position', [])

/**
 * A set of utility methods that can be use to retrieve position of DOM elements.
 * It is meant to be used where we need to absolute-position DOM elements in
 * relation to other, existing elements (this is the case for tooltips, popovers,
 * typeahead suggestions etc.).
 */
  .factory('$position', ['$document', '$window', function ($document, $window) {

    function getStyle(el, cssprop) {
      if (el.currentStyle) { //IE
        return el.currentStyle[cssprop];
      } else if ($window.getComputedStyle) {
        return $window.getComputedStyle(el)[cssprop];
      }
      // finally try and get inline style
      return el.style[cssprop];
    }

    /**
     * Checks if a given element is statically positioned
     * @param element - raw DOM element
     */
    function isStaticPositioned(element) {
      return (getStyle(element, 'position') || 'static' ) === 'static';
    }

    /**
     * returns the closest, non-statically positioned parentOffset of a given element
     * @param element
     */
    var parentOffsetEl = function (element) {
      var docDomEl = $document[0];
      var offsetParent = element.offsetParent || docDomEl;
      while (offsetParent && offsetParent !== docDomEl && isStaticPositioned(offsetParent) ) {
        offsetParent = offsetParent.offsetParent;
      }
      return offsetParent || docDomEl;
    };

    return {
      /**
       * Provides read-only equivalent of jQuery's position function:
       * http://api.jquery.com/position/
       */
      position: function (element) {
        var elBCR = this.offset(element);
        var offsetParentBCR = { top: 0, left: 0 };
        var offsetParentEl = parentOffsetEl(element[0]);
        if (offsetParentEl != $document[0]) {
          offsetParentBCR = this.offset(angular.element(offsetParentEl));
          offsetParentBCR.top += offsetParentEl.clientTop - offsetParentEl.scrollTop;
          offsetParentBCR.left += offsetParentEl.clientLeft - offsetParentEl.scrollLeft;
        }

        var boundingClientRect = element[0].getBoundingClientRect();
        return {
          width: boundingClientRect.width || element.prop('offsetWidth'),
          height: boundingClientRect.height || element.prop('offsetHeight'),
          top: elBCR.top - offsetParentBCR.top,
          left: elBCR.left - offsetParentBCR.left
        };
      },

      /**
       * Provides read-only equivalent of jQuery's offset function:
       * http://api.jquery.com/offset/
       */
      offset: function (element) {
        var boundingClientRect = element[0].getBoundingClientRect();
        return {
          width: boundingClientRect.width || element.prop('offsetWidth'),
          height: boundingClientRect.height || element.prop('offsetHeight'),
          top: boundingClientRect.top + ($window.pageYOffset || $document[0].documentElement.scrollTop),
          left: boundingClientRect.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft)
        };
      },

      /**
       * Returns parts 1 and 2 of the position string, fixing discrepancies if
       * necessary.
       * This assumes if the string has two parts, and the first and second
       * parts have discrpencies, the first part takes precedence and the
       * second part is treated as center regardless of original value.
       */
      getPositions: function (positionStr) {
        var positionStrParts = positionStr.split('-');
        var pos0 = positionStrParts[0], pos1 = positionStrParts[1] || 'center';
        var dirX = 'pos1', dirY = 'pos0';
        var x = 'center', y = 'top';
        if (pos1 !== 'top' && pos1 !== 'bottom' && pos1 !== 'center' && pos1 !== 'left' && pos1 !== 'right') {
          pos1 = 'center';
        }

        if (pos0 !== 'top' && pos0 !== 'bottom' && pos0 !== 'center' && pos0 !== 'left' && pos0 !== 'right') {
          pos0 = 'top';
          pos1 = 'center';
        } else if (pos0 === 'top' || pos0 === 'bottom') {
          if (pos1 === 'top' || pos1 === 'bottom') {
            pos1 = 'center';
          }
          y = pos0;
          x = pos1;
        } else if (pos0 === 'left' || pos0 === 'right') {
          dirX = 'pos0';
          dirY = 'pos1';
          if (pos1 === 'left' || pos1 === 'right') {
            pos1 = 'center';
          }
          x = pos0;
          y = pos1;
        }
        return { 'pos0': pos0, 'pos1': pos1, 'dirX': dirX, 'dirY': dirY, 'x':  x, 'y': y};
      },

      /**
       * Provides coordinates for the targetEl in relation to hostEl
       */
      positionElements: function (hostEl, targetEl, positionStr, appendToBody, hostEvent, keepInsideViewport) {

        var positions = this.getPositions(positionStr);
        var pos0 = positions.pos0, pos1 = positions.pos1;

        var hostElPos,
          targetElWidth,
          targetElHeight,
          targetElPos;

        hostElPos = appendToBody ? this.offset(hostEl) : this.position(hostEl);

        targetElWidth = targetEl.prop('offsetWidth');
        targetElHeight = targetEl.prop('offsetHeight');

        var reposition = function (pos) {
          var offsetX = appendToBody ?  window.pageXOffset : 0;
          var offsetY = appendToBody ? window.pageYOffset : 0;
          var maxLeft = offsetX + window.innerWidth - 10 - targetElWidth;
          var minLeft = offsetX + 10;
          var maxTop = offsetY + window.innerHeight - 10 - targetElHeight;
          var minTop = offsetY + 10;
          if (keepInsideViewport) {
            if (pos.top < minTop) {
              positions.y = 'bottom';
              pos.shiftedTop = true;
            } else if (pos.top > maxTop) {
              positions.y = 'top';
              pos.shiftedTop = true;
            }

            if (pos.left < minLeft) {
              positions.x = 'right';
              pos.shiftedLeft = true;
            } else if (pos.left > maxLeft) {
              positions.x = 'left';
              pos.shiftedLeft = true;
            }
            if (pos.shiftedTop || pos.shiftedLeft) {
              if (positions.dirX === 'pos0') {
                pos.pos0 = positions.x;
                pos.pos1 = positions.y;
              } else {
                pos.pos0 = positions.y;
                pos.pos1 = positions.x;
              }
            }
          }
          return pos;
        };

        var shiftWidth = {
          center: function () {
            return hostElPos.left + hostElPos.width / 2 - targetElWidth / 2;
          },
          left: function () {
            return hostElPos.left;
          },
          right: function () {
            return hostElPos.left + hostElPos.width;
          }
        };

        var shiftHeight = {
          center: function () {
            return hostElPos.top + hostElPos.height / 2 - targetElHeight / 2;
          },
          top: function () {
            return hostElPos.top;
          },
          bottom: function () {
            return hostElPos.top + hostElPos.height;
          }
        };

        switch (pos0) {
          case 'right':
            targetElPos = reposition({
              top: shiftHeight[pos1](),
              left: shiftWidth[pos0]()
            });
            break;
          case 'left':
            targetElPos = reposition({
              top: shiftHeight[pos1](),
              left: hostElPos.left - targetElWidth
            });
            break;
          case 'bottom':
            targetElPos = reposition({
              top: shiftHeight[pos0](),
              left: shiftWidth[pos1]()
            });
            break;
          case 'top':
            targetElPos = reposition({
              top: hostElPos.top - targetElHeight,
              left: shiftWidth[pos1]()
            });
            break;
          default:
            if (hostEvent && appendToBody && hostEvent.pageY && hostEvent.pageX){
              targetEl.css({'position' : 'absolute',
                            'margin-top' : '15px',
                            'margin-left' : '15px'});

              targetElPos = reposition({
                top: hostEvent.pageY,
                left: hostEvent.pageX
              });
            } else {
              targetElPos = reposition({
                top: hostElPos.top - targetElHeight,
                left: shiftWidth[pos1]()
              });
            }
        }

        return targetElPos;
      }
    };
  }]);

/**
 * The following features are still outstanding: animation as a
 * function, placement as a function, inside, support for more triggers than
 * just mouse enter/leave, html tooltips, and selector delegation.
 */
angular.module('ark-ui-bootstrap.tooltip', ['ark-ui-bootstrap.position', 'ark-ui-bootstrap.bindHtml'])

/**
 * The $tooltip service creates tooltip- and popover-like directives as well as
 * houses global options for them.
 */
.provider('$tooltip', function() {
    // The default options tooltip and popover.
    var defaultOptions = {
        placement: 'default',
        animation: true,
        popupDelay: 0,
        appendToBody : true,
        keepInsideViewport : true
    };

    // Default hide triggers for each show trigger
    var triggerMap = {
        'mouseenter': 'mouseleave',
        'mousemove' : 'mouseleave',
        'click': 'click',
        'focus': 'blur'
    };

    // The options specified to the provider globally.
    var globalOptions = {};

    /**
     * `options({})` allows global configuration of all tooltips in the
     * application.
     *
     *   var app = angular.module( 'App', ['ark-ui-bootstrap.tooltip'], function( $tooltipProvider ) {
     *     // place tooltips left instead of top by default
     *     $tooltipProvider.options( { placement: 'left' } );
     *   });
     */
    this.options = function(value) {
        angular.extend(globalOptions, value);
    };

    /**
     * This allows you to extend the set of trigger mappings available. E.g.:
     *
     *   $tooltipProvider.setTriggers( 'openTrigger': 'closeTrigger' );
     */
    this.setTriggers = function setTriggers(triggers) {
        angular.extend(triggerMap, triggers);
    };

    /**
     * This is a helper function for translating camel-case to snake-case.
     */
    function snake_case(name) {
        var regexp = /[A-Z]/g;
        var separator = '-';
        return name.replace(regexp, function(letter, pos) {
            return (pos ? separator : '') + letter.toLowerCase();
        });
    }

    /**
     * Returns the actual instance of the $tooltip service.
     * TODO support multiple triggers
     */
    this.$get = ['$window', '$compile', '$timeout', '$parse', '$document', '$position', '$interpolate',
        function($window, $compile, $timeout, $parse, $document, $position, $interpolate) {
            return function $tooltip(type, prefix, defaultTriggerShow, customOptions) {
                var options = angular.extend({}, defaultOptions, globalOptions, customOptions);

                /**
                 * Returns an object of show and hide triggers.
                 *
                 * If a trigger is supplied,
                 * it is used to show the tooltip; otherwise, it will use the `trigger`
                 * option passed to the `$tooltipProvider.options` method; else it will
                 * default to the trigger supplied to this directive factory.
                 *
                 * The hide trigger is based on the show trigger. If the `trigger` option
                 * was passed to the `$tooltipProvider.options` method, it will use the
                 * mapped trigger from `triggerMap` or the passed trigger if the map is
                 * undefined; otherwise, it uses the `triggerMap` value of the show
                 * trigger; else it will just use the show trigger.
                 */
                function getTriggers(trigger) {
                    var show = trigger || options.trigger || defaultTriggerShow;
                    var hide = triggerMap[show] || show;
                    return {
                        show: show,
                        hide: hide
                    };
                }

                var directiveName = snake_case(type);

                var startSym = $interpolate.startSymbol();
                var endSym = $interpolate.endSymbol();
                var template =
                    '<div ' + directiveName + '-popup ' +
                    'title="' + startSym + 'tt_title' + endSym + '" ' +
                    'content="' + startSym + 'tt_content' + endSym + '" ' +
                    'placement="' + startSym + 'tt_placement' + endSym + '" ' +
                    'animation="tt_animation" ' +
                    'is-open="tt_isOpen"' +
                    '>' +
                    '</div>';

                return {
                    restrict: 'EA',
                    scope: true,
                    compile: function(tElem, tAttrs) {
                        var tooltipLinker = $compile(template);

                        return function link(scope, element, attrs) {
                            var tooltip;
                            var transitionTimeout;
                            var popupTimeout;
                            var appendToBody = angular.isDefined(options.appendToBody) ? options.appendToBody : false;
                            var keepInsideViewport = angular.isDefined(options.keepInsideViewport) ? options.keepInsideViewport : true;
                            var triggers = getTriggers(undefined);
                            var hasEnableExp = angular.isDefined(attrs[prefix + 'Enable']);

                            var calculatePopoverPlacements = function() {
                                var popoverPos = attrs.popoverPlacement;
                                var arrowPos = attrs.arrowPlacement;

                                switch (popoverPos) {
                                    case 'right':
                                        arrowPos = (arrowPos === 'bottom') ? arrowPos : 'top';
                                        break;
                                    case 'bottom':
                                        arrowPos = (arrowPos === 'right') ? arrowPos : 'left';
                                        break;
                                    case 'left':
                                        arrowPos = (arrowPos === 'bottom') ? arrowPos : 'top';
                                        break;
                                    default:
                                        popoverPos = 'top';
                                        arrowPos = (arrowPos === 'right') ? arrowPos : 'left';
                                        break;
                                }

                                attrs.popoverPlacement = popoverPos;
                                attrs.arrowPlacement = arrowPos;
                                return { popover: popoverPos, arrow: arrowPos };
                            };

                            var popoverPlacements = calculatePopoverPlacements();

                            var popoverPositioning = function(ttPosition) {

                                var button = element;
                                var popover = tooltip;
                                var arrow = tooltip.find('.arrow');

                                var popoverPos = popoverPlacements.popover;
                                var arrowPos = popoverPlacements.arrow;

                                //default case is top popover, left arrow
                                switch (popoverPos) {

                                    case 'right':
                                        if (arrowPos === 'top') {
                                            arrow.addClass('top');
                                            ttPosition.top += (popover[0].offsetHeight / 2 - 30);
                                        } else  {
                                            arrow.addClass('bottom');
                                            ttPosition.top -= (popover[0].offsetHeight / 2 - 30);
                                        }
                                        break;
                                    case 'bottom':
                                        if (arrowPos === 'left') {
                                            arrow.addClass('left');
                                            ttPosition.left += (popover[0].offsetWidth / 2 - 30);
                                        } else  {
                                            arrow.addClass('right');
                                            ttPosition.left -= (popover[0].offsetWidth / 2 - 30);
                                        }
                                        break;

                                    case 'left':
                                        if (arrowPos === 'top') {
                                            arrow.addClass('top');
                                            ttPosition.top += (popover[0].offsetHeight / 2 - 30);
                                        } else  {
                                            arrow.addClass('bottom');
                                            ttPosition.top -= (popover[0].offsetHeight / 2 - 30);
                                        }
                                        break;

                                    default: //'top'
                                        if (arrowPos === 'right') {
                                            arrow.addClass('right');
                                            ttPosition.left -= (popover[0].offsetWidth / 2 - 30);
                                        } else {
                                            arrow.addClass('left');
                                            ttPosition.left += (popover[0].offsetWidth / 2 - 30);
                                        }
                                        break;
                                }

                                return ttPosition;
                            };

                            var positionTooltip = function(event) {
                                var isPopover = tooltip.hasClass('popover');
                                var ttPosition;

                                // For a popover, position the tooltip according to the arrow placement
                                // Center the arrow on the correct side
                                if (isPopover) {
                                    ttPosition = $position.positionElements(element, tooltip, scope.tt_placement, appendToBody, event, keepInsideViewport);

                                    // reposition arrows
                                    if (ttPosition.shiftedLeft) {
                                        if (popoverPlacements.popover === 'left') {
                                            popoverPlacements.popover = 'right';
                                        } else if (popoverPlacements.popover === 'right') {
                                            popoverPlacements.popover = 'left';
                                        }
                                    }

                                    if (ttPosition.shiftedTop) {
                                        if (popoverPlacements.popover === 'top') {
                                            popoverPlacements.popover = 'bottom';
                                        } else if (popoverPlacements.popover === 'bottom') {
                                            popoverPlacements.popover = 'top';
                                        }
                                    }

                                    // recalculate position
                                    if (ttPosition.shiftedTop || ttPosition.shiftedLeft) {
                                        scope.tt_placement = ttPosition.pos0;
                                        ttPosition = $position.positionElements(element, tooltip, scope.tt_placement, appendToBody, event, keepInsideViewport);
                                    }

                                    ttPosition = popoverPositioning(ttPosition);
                                } else {
                                    ttPosition = $position.positionElements(element, tooltip, scope.tt_placement, appendToBody, event, !isPopover && keepInsideViewport);
                                }

                                ttPosition.top += 'px';
                                ttPosition.left += 'px';

                                tooltip.css(ttPosition);
                            };

                            // By default, the tooltip is not open.
                            // TODO add ability to start tooltip opened
                            scope.tt_isOpen = false;

                            function toggleTooltipBind() {
                                if (!scope.tt_isOpen) {
                                    showTooltipBind();
                                } else {
                                    hideTooltipBind();
                                }
                            }
                            scope.toggleTooltipBind = function() {
                                toggleTooltipBind();
                            };

                            scope.getButtonElement = function() {
                                return element;
                            };
                            scope.getButtonAttributes = function() {
                                return attrs;
                            };

                            // Show the tooltip with delay if specified, otherwise show it immediately
                            function showTooltipBind(event) {
                                if (event) {
                                  scope.showEvent = event;
                                }
                                if (hasEnableExp && !scope.$eval(attrs[prefix + 'Enable'])) {
                                    return;
                                }
                                if (scope.tt_popupDelay) {
                                    // Do nothing if the tooltip was already scheduled to pop-up.
                                    // This happens if show is triggered multiple times before any hide is triggered.
                                    if (!popupTimeout) {
                                        popupTimeout = $timeout(show, scope.tt_popupDelay, false);
                                        popupTimeout.then(function(reposition) {
                                            reposition(scope.showEvent);
                                        });
                                    }
                                } else {
                                    show()(scope.showEvent);
                                }
                            }

                            function hideTooltipBind() {
                                scope.$apply(function() {
                                    hide();
                                });
                            }

                            // Show the tooltip popup element.
                            function show() {

                                popupTimeout = null;

                                // If there is a pending remove transition, we must cancel it, lest the
                                // tooltip be mysteriously removed.
                                if (transitionTimeout) {
                                    $timeout.cancel(transitionTimeout);
                                    transitionTimeout = null;
                                }

                                // Don't show empty tooltips.
                                if (!scope.tt_content) {
                                    return angular.noop;
                                }

                                createTooltip();

                                // Set the initial positioning.
                                tooltip.css({
                                    top: 0,
                                    left: 0,
                                    display: 'block',
                                    border: '1px solid #DAE1E8',
                                    background: '#FDFDFD',
                                    boxShadow: '0px 0px 2px rgba(34,37,41,.24)',
                                    borderRadius: '2px'
                                });

                                // Now we add it to the DOM because need some info about it. But it's not
                                // visible yet anyway.
                                if (appendToBody) {
                                    $document.find('body').append(tooltip);
                                } else {
                                    element.after(tooltip);
                                }

                                positionTooltip(scope.showEvent);

                                // And show the tooltip.
                                scope.tt_isOpen = true;
                                scope.$digest(); // digest required as $apply is not called

                                // Return positioning function as promise callback for correct
                                // positioning after draw.
                                return positionTooltip;
                            }

                            // Hide the tooltip popup element.
                            function hide() {
                                // First things first: we don't show it anymore.
                                scope.tt_isOpen = false;

                                //if tooltip is going to be shown after delay, we must cancel this
                                $timeout.cancel(popupTimeout);
                                popupTimeout = null;

                                // And now we remove it from the DOM. However, if we have animation, we
                                // need to wait for it to expire beforehand.
                                // FIXME: this is a placeholder for a port of the transitions library.
                                if (scope.tt_animation) {
                                    if (!transitionTimeout) {
                                        transitionTimeout = $timeout(removeTooltip, 500);
                                    }
                                } else {
                                    removeTooltip();
                                }
                            }

                            function createTooltip() {
                                // There can only be one tooltip element per directive shown at once.
                                if (tooltip) {
                                    removeTooltip();
                                }
                                tooltip = tooltipLinker(scope, function() {});

                                // Get contents rendered into the tooltip
                                scope.$digest();
                            }

                            function removeTooltip() {
                                transitionTimeout = null;
                                if (tooltip) {
                                    tooltip.remove();
                                    tooltip = null;
                                }
                            }


                            function updatePosition(event) {
                                scope.showEvent = event;
                            }

                            /**
                             * Observe the relevant attributes.
                             */
                            attrs.$observe(type, function(val) {
                                scope.tt_content = val;

                                if (!val && scope.tt_isOpen) {
                                    hide();
                                }
                            });

                            attrs.$observe(prefix + 'Title', function(val) {
                                scope.tt_title = val;
                            });

                            attrs.$observe(prefix + 'Placement', function(val) {
                                scope.tt_placement = angular.isDefined(val) ? val : options.placement;
                            });

                            attrs.$observe(prefix + 'PopupDelay', function(val) {
                                var delay = parseInt(val, 10);
                                scope.tt_popupDelay = !isNaN(delay) ? delay : options.popupDelay;
                            });

                            var unregisterTriggers = function() {
                                element.unbind(triggers.show, showTooltipBind);
                                element.unbind(triggers.hide, hideTooltipBind);
                            };

                            attrs.$observe(prefix + 'Trigger', function(val) {
                                unregisterTriggers();

                                triggers = getTriggers(val);

                                if (triggers.show === triggers.hide) {
                                    element.bind(triggers.show, toggleTooltipBind);
                                } else {
                                    element.bind(triggers.show, showTooltipBind);
                                    if (triggers.show === 'mouseenter'){
                                        element.bind('mousemove', updatePosition);
                                    }
                                    element.bind(triggers.hide, hideTooltipBind);
                                }
                            });

                            var animation = scope.$eval(attrs[prefix + 'Animation']);
                            scope.tt_animation = angular.isDefined(animation) ? !! animation : options.animation;

                            attrs.$observe(prefix + 'AppendToBody', function(val) {
                                appendToBody = angular.isDefined(val) ? $parse(val)(scope) : appendToBody;
                            });

                            // if a tooltip is attached to <body> we need to remove it on
                            // location change as its parent scope will probably not be destroyed
                            // by the change.
                            if (appendToBody) {
                                scope.$on('$locationChangeSuccess', function closeTooltipOnLocationChangeSuccess() {
                                    if (scope.tt_isOpen) {
                                        hide();
                                    }
                                });
                            }

                            // Make sure tooltip is destroyed and removed.
                            scope.$on('$destroy', function onDestroyTooltip() {
                                $timeout.cancel(transitionTimeout);
                                $timeout.cancel(popupTimeout);
                                unregisterTriggers();
                                removeTooltip();
                            });
                        };
                    }
                };
            };
        }
    ];
})

.directive('tooltipPopup', function() {
    return {
        restrict: 'EA',
        replace: true,
        scope: {
            content: '@',
            placement: '@',
            animation: '&',
            isOpen: '&'
        },
        templateUrl: 'template/tooltip/tooltip-popup.html'
    };
})

.directive('tooltip', ['$tooltip',
    function($tooltip) {
        return $tooltip('tooltip', 'tooltip', 'mouseenter');
    }
])

.directive('tooltipHtmlUnsafePopup', function() {
    return {
        restrict: 'EA',
        replace: true,
        scope: {
            content: '@',
            placement: '@',
            animation: '&',
            isOpen: '&'
        },
        templateUrl: 'template/tooltip/tooltip-html-unsafe-popup.html'
    };
})

.directive('tooltipHtmlUnsafe', ['$tooltip',
    function($tooltip) {
        return $tooltip('tooltipHtmlUnsafe', 'tooltip', 'mouseenter');
    }
]);

/**
 * The following features are still outstanding: popup delay, animation as a
 * function, placement as a function, inside, support for more triggers than
 * just mouse enter/leave, html popovers, and selector delegatation.
 */
angular.module('ark-ui-bootstrap.popover', ['ark-ui-bootstrap.tooltip'])

.directive('popoverPopup', function() {
    return {
        restrict: 'EA',
        replace: true,
        scope: {
            title: '@',
            content: '@',
            placement: '@',
            animation: '&',
            isOpen: '&'
        },
        templateUrl: 'template/popover/popover.html',
        link: function(scope, element, attrs) {
            angular.element(element).find('.popover-close-btn').on('click', function() {
                scope.$parent.toggleTooltipBind();
            });
        }
    };
})

.directive('popover', ['$tooltip',
    function($tooltip) {
        return $tooltip('popover', 'popover', 'click', {appendToBody : false, placement : 'top'});
    }
])

.directive('popoverHtmlUnsafePopup', function() {
    return {
        restrict: 'EA',
        replace: true,
        scope: {
            title: '@',
            content: '@',
            placement: '@',
            animation: '&',
            isOpen: '&'
        },
        templateUrl: 'template/popover/popover-html-unsafe-popup.html',
        link: function(scope, element, attrs) {
            angular.element(element).find('.popover-close-btn').on('click', function() {
                scope.$parent.toggleTooltipBind();
            });
        }
    };
})

.directive('popoverHtmlUnsafe', ['$tooltip',
    function($tooltip) {
        return $tooltip('popoverHtmlUnsafe', 'popover', 'click', {appendToBody : false, placement: 'top'});
    }
]);

/**
 * @ngdoc overview
 * @name ark-ui-bootstrap.tabs
 *
 * @description
 * AngularJS version of the tabs directive.
 */

angular.module('ark-ui-bootstrap.tabs', [])

.controller('TabsetController', ['$scope', function TabsetCtrl($scope) {
  var ctrl = this,
      tabs = ctrl.tabs = $scope.tabs = [];

  ctrl.select = function(selectedTab) {
    angular.forEach(tabs, function(tab) {
      if (tab.active && tab !== selectedTab) {
        tab.active = false;
        tab.onDeselect();
      }
    });
    selectedTab.active = true;
    selectedTab.onSelect();
  };

  ctrl.addTab = function addTab(tab) {
    tabs.push(tab);
    // we can't run the select function on the first tab
    // since that would select it twice
    if (tabs.length === 1) {
      tab.active = true;
    } else if (tab.active) {
      ctrl.select(tab);
    }
  };

  ctrl.removeTab = function removeTab(tab) {
    var index = tabs.indexOf(tab);
    //Select a new tab if the tab to be removed is selected
    if (tab.active && tabs.length > 1) {
      //If this is the last tab, select the previous tab. else, the next tab.
      var newActiveIndex = index == tabs.length - 1 ? index - 1 : index + 1;
      ctrl.select(tabs[newActiveIndex]);
    }
    tabs.splice(index, 1);
  };
}])

/**
 * @ngdoc directive
 * @name ark-ui-bootstrap.tabs.directive:tabset
 * @restrict EA
 *
 * @description
 * Tabset is the outer container for the tabs directive
 *
 * @param {boolean=} vertical Whether or not to use vertical styling for the tabs.
 * @param {boolean=} justified Whether or not to use justified styling for the tabs.
 *
 * @example
<example module="ui.bootstrap">
  <file name="index.html">
    <tabset>
      <tab heading="Tab 1"><b>First</b> Content!</tab>
      <tab heading="Tab 2"><i>Second</i> Content!</tab>
    </tabset>
    <hr />
    <tabset vertical="true">
      <tab heading="Vertical Tab 1"><b>First</b> Vertical Content!</tab>
      <tab heading="Vertical Tab 2"><i>Second</i> Vertical Content!</tab>
    </tabset>
    <tabset justified="true">
      <tab heading="Justified Tab 1"><b>First</b> Justified Content!</tab>
      <tab heading="Justified Tab 2"><i>Second</i> Justified Content!</tab>
    </tabset>
  </file>
</example>
 */
.directive('tabset', function() {
  return {
    restrict: 'EA',
    transclude: true,
    replace: true,
    scope: {
      type: '@'
    },
    controller: 'TabsetController',
    templateUrl: 'template/tabs/tabset.html',
    link: function(scope, element, attrs) {
      scope.vertical = angular.isDefined(attrs.vertical) ? scope.$parent.$eval(attrs.vertical) : false;
      scope.justified = angular.isDefined(attrs.justified) ? scope.$parent.$eval(attrs.justified) : false;
    }
  };
})

/**
 * @ngdoc directive
 * @name ark-ui-bootstrap.tabs.directive:tab
 * @restrict EA
 *
 * @param {string=} heading The visible heading, or title, of the tab. Set HTML headings with {@link ark-ui-bootstrap.tabs.directive:tabHeading tabHeading}.
 * @param {string=} select An expression to evaluate when the tab is selected.
 * @param {boolean=} active A binding, telling whether or not this tab is selected.
 * @param {boolean=} disabled A binding, telling whether or not this tab is disabled.
 *
 * @description
 * Creates a tab with a heading and content. Must be placed within a {@link ark-ui-bootstrap.tabs.directive:tabset tabset}.
 *
 * @example
<example module="ui.bootstrap">
  <file name="index.html">
    <div ng-controller="TabsDemoCtrl">
      <button class="btn btn-small" ng-click="items[0].active = true">
        Select item 1, using active binding
      </button>
      <button class="btn btn-small" ng-click="items[1].disabled = !items[1].disabled">
        Enable/disable item 2, using disabled binding
      </button>
      <br />
      <tabset>
        <tab heading="Tab 1">First Tab</tab>
        <tab select="alertMe()">
          <tab-heading><i class="icon-bell"></i> Alert me!</tab-heading>
          Second Tab, with alert callback and html heading!
        </tab>
        <tab ng-repeat="item in items"
          heading="{{item.title}}"
          disabled="item.disabled"
          active="item.active">
          {{item.content}}
        </tab>
      </tabset>
    </div>
  </file>
  <file name="script.js">
    function TabsDemoCtrl($scope) {
      $scope.items = [
        { title:"Dynamic Title 1", content:"Dynamic Item 0" },
        { title:"Dynamic Title 2", content:"Dynamic Item 1", disabled: true }
      ];

      $scope.alertMe = function() {
        setTimeout(function() {
          alert("You've selected the alert tab!");
        });
      };
    };
  </file>
</example>
 */

/**
 * @ngdoc directive
 * @name ark-ui-bootstrap.tabs.directive:tabHeading
 * @restrict EA
 *
 * @description
 * Creates an HTML heading for a {@link ark-ui-bootstrap.tabs.directive:tab tab}. Must be placed as a child of a tab element.
 *
 * @example
<example module="ui.bootstrap">
  <file name="index.html">
    <tabset>
      <tab>
        <tab-heading><b>HTML</b> in my titles?!</tab-heading>
        And some content, too!
      </tab>
      <tab>
        <tab-heading><i class="icon-heart"></i> Icon heading?!?</tab-heading>
        That's right.
      </tab>
    </tabset>
  </file>
</example>
 */
.directive('tab', ['$parse', function($parse) {
  return {
    require: '^tabset',
    restrict: 'EA',
    replace: true,
    templateUrl: 'template/tabs/tab.html',
    transclude: true,
    scope: {
      active: '=?',
      heading: '@',
      onSelect: '&select', //This callback is called in contentHeadingTransclude
                          //once it inserts the tab's content into the dom
      onDeselect: '&deselect'
    },
    controller: function() {
      //Empty controller so other directives can require being 'under' a tab
    },
    compile: function(elm, attrs, transclude) {
      return function postLink(scope, elm, attrs, tabsetCtrl) {
        scope.$watch('active', function(active) {
          if (active) {
            tabsetCtrl.select(scope);
          }
        });

        scope.disabled = false;
        if ( attrs.disabled ) {
          scope.$parent.$watch($parse(attrs.disabled), function(value) {
            scope.disabled = !! value;
          });
        }

        scope.select = function() {
          if ( !scope.disabled ) {
            scope.active = true;
          }
        };

        tabsetCtrl.addTab(scope);
        scope.$on('$destroy', function() {
          tabsetCtrl.removeTab(scope);
        });

        //We need to transclude later, once the content container is ready.
        //when this link happens, we're inside a tab heading.
        scope.$transcludeFn = transclude;
      };
    }
  };
}])

.directive('tabHeadingTransclude', [function() {
  return {
    restrict: 'A',
    require: '^tab',
    link: function(scope, elm, attrs, tabCtrl) {
      scope.$watch('headingElement', function updateHeadingElement(heading) {
        if (heading) {
          elm.html('');
          elm.append(heading);
        }
      });
    }
  };
}])

.directive('tabContentTransclude', function() {
  return {
    restrict: 'A',
    require: '^tabset',
    link: function(scope, elm, attrs) {
      var tab = scope.$eval(attrs.tabContentTransclude);

      //Now our tab is ready to be transcluded: both the tab heading area
      //and the tab content area are loaded.  Transclude 'em both.
      tab.$transcludeFn(tab.$parent, function(contents) {
        angular.forEach(contents, function(node) {
          if (isTabHeading(node)) {
            //Let tabHeadingTransclude know.
            tab.headingElement = node;
          } else {
            elm.append(node);
          }
        });
      });
    }
  };
  function isTabHeading(node) {
    return node.tagName &&  (
      node.hasAttribute('tab-heading') ||
      node.hasAttribute('data-tab-heading') ||
      node.tagName.toLowerCase() === 'tab-heading' ||
      node.tagName.toLowerCase() === 'data-tab-heading'
    );
  }
})

;

angular.module("template/accordion/accordion-group.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/accordion/accordion-group.html",
    "<div class=\"accordion-group\">\n" +
    "  <div class=\"panel accordion-heading\" >\n" +
    "    <h4 class=\"accordion-title \">\n" +
    "      <a class=\"accordion-toggle\" ng-click=\"toggleOpen()\" accordion-transclude=\"heading\"><span ng-class=\"{'text-muted': isDisabled}\">{{heading}}</span></a>\n" +
    "    </h4>\n" +
    "    <span class=\"pull-right accordion-fonticon\" ng-click=\"toggleOpen()\" ng-class=\"{'icon-iw-circle-no-chevron-down': !isOpen, 'icon-iw-circle-no-chevron-up': isOpen}\"></span>\n" +
    "  </div>\n" +
    "  <div class=\"panel-collapse accordion-collapse\" collapse=\"!isOpen\">\n" +
    "	  <div class=\"panel-body\" ng-transclude></div>\n" +
    "  </div>\n" +
    "</div>");
}]);

angular.module("template/accordion/accordion.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/accordion/accordion.html",
    "<div class=\"panel-group\" ng-transclude></div>");
}]);

angular.module("template/modal/backdrop.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/modal/backdrop.html",
    "<div class=\"modal-backdrop fade {{ backdropClass }}\"\n" +
    "     ng-class=\"{in: animate}\"\n" +
    "     ng-style=\"{'z-index': 1040 + (index && 1 || 0) + index*10}\"\n" +
    "></div>\n" +
    "");
}]);

angular.module("template/modal/window-new.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/modal/window-new.html",
    "<div tabindex=\"-1\" role=\"dialog\" class=\"modal fade\" ng-class=\"{in: animate}\" ng-style=\"{'z-index': 1050 + index*10, display: 'block'}\" ng-click=\"close($event)\">\n" +
    "    <div class=\"modal-dialog\" ng-class=\"{'modal-sm': size == 'sm', 'modal-lg': size == 'lg'}\"><div class=\"modal-content-new\" modal-transclude></div></div>\n" +
    "</div>");
}]);

angular.module("template/modal/window.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/modal/window.html",
    "<div tabindex=\"-1\" role=\"dialog\" class=\"modal fade\" ng-class=\"{in: animate}\" ng-style=\"{'z-index': 1050 + index*10, display: 'block'}\" ng-click=\"close($event)\">\n" +
    "    <div class=\"modal-dialog\" ng-class=\"{'modal-sm': size == 'sm', 'modal-lg': size == 'lg'}\"><div class=\"modal-content\" modal-transclude></div></div>\n" +
    "</div>");
}]);

angular.module("template/tooltip/tooltip-html-unsafe-popup.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/tooltip/tooltip-html-unsafe-popup.html",
    "<div class=\"tooltip {{placement}}\" ng-class=\"{ in: isOpen(), fade: animation() }\">\n" +
    "  <div class=\"tooltip-arrow\"></div>\n" +
    "  <div class=\"tooltip-inner\" bind-html-unsafe=\"content\"></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/tooltip/tooltip-popup.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/tooltip/tooltip-popup.html",
    "<div class=\"tooltip {{placement}}\" ng-class=\"{ in: isOpen(), fade: animation() }\">\n" +
    "  <div class=\"tooltip-arrow\"></div>\n" +
    "  <div class=\"tooltip-inner\" ng-bind=\"content\"></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/popover/popover-html-unsafe-popup.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/popover/popover-html-unsafe-popup.html",
    "<div class=\"popover {{placement}}\" ng-class=\"{ in: isOpen(), fade: animation() }\">\n" +
    "	<div class=\"arrow\"></div>\n" +
    "\n" +
    "	<div class=\"popover-inner popover-container\">\n" +
    "		<span class=\"popover-close-btn fonticon icon-close\"></span>\n" +
    "		<div class=\"popover-body\">\n" +
    "			<h3 class=\"popover-title\" ng-bind=\"title\" ng-show=\"title\">{{title}}</h3>\n" +
    "			<div class=\"popover-content\" bind-html-unsafe=\"content\"></div>\n" +
    "		</div>\n" +
    "	</div>\n" +
    "</div>");
}]);

angular.module("template/popover/popover.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/popover/popover.html",
    "<div class=\"popover {{placement}}\" ng-class=\"{ in: isOpen(), fade: animation() }\">\n" +
    "	<div class=\"arrow\"></div>\n" +
    "\n" +
    "	<div class='popover-inner popover-container'>\n" +
    "		<span class=\"popover-close-btn fonticon icon-close\"></span>\n" +
    "		<div class=\"popover-body\">\n" +
    "			<h3 class=\"popover-title\" ng-bind=\"title\" ng-show=\"title\"></h3>\n" +
    "			<div class=\"popover-content\" ng-bind=\"content\"></div>\n" +
    "		</div>\n" +
    "	</div>	\n" +
    "</div>\n" +
    "\n" +
    "");
}]);

angular.module("template/tabs/tab.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/tabs/tab.html",
    "<li ng-class=\"{active: active, disabled: disabled}\">\n" +
    "  <a ng-click=\"select()\" tab-heading-transclude>{{heading}}</a>\n" +
    "</li>\n" +
    "");
}]);

angular.module("template/tabs/tabset.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/tabs/tabset.html",
    "<div>\n" +
    "  <ul class=\"nav nav-{{type || 'tabs'}}\" ng-class=\"{'nav-stacked': vertical, 'nav-justified': justified}\" ng-transclude></ul>\n" +
    "  <div class=\"tab-content\">\n" +
    "    <div class=\"tab-pane\" \n" +
    "         ng-repeat=\"tab in tabs\" \n" +
    "         ng-class=\"{active: tab.active}\"\n" +
    "         tab-content-transclude=\"tab\">\n" +
    "    </div>\n" +
    "  </div>\n" +
    "</div>\n" +
    "");
}]);

/*!
 * Ark Graphs v1.0.0-0 (2015-08-27)
 * http://ark.genesys.com
 * Copyright (c) 2015 Ark Team at Genesys; License: MIT
 */

// d3.tip
// Copyright (c) 2013 Justin Palmer
//
// Tooltips for d3.js SVG visualizations

// Modified by Christophe Marchadour
// Remove direction in favor of coordinate
// for smoother and more precise tooltip location/move

// Public - contructs a new tooltip
//
// Returns a tip
d3.tip = function(item) {
  var coordinate = d3_tip_coordinate,
    offset = d3_tip_offset,
    html = d3_tip_html,
    node = initNode(),
    svg = null,
    point = null,
    target = null

  function tip(vis) {
    svg = getSVGNode(vis)
    point = svg.createSVGPoint()
    if (typeof item !== 'undefined' && document.getElementById(item) !== null) {
      document.getElementById(item).appendChild(node)
    } else {
      document.body.appendChild(node)
    }
  }

  // Public - show the tooltip on the screen
  //
  // Returns a tip
  tip.show = function() {
    var args = Array.prototype.slice.call(arguments)
    if (args[args.length - 1] instanceof SVGElement) target = args.pop()
    var content = html.apply(this, args),
      poffset = offset.apply(this, args),
      nodel = d3.select(node)

    nodel.html(content)
      .style({
        opacity: 0.9,
        'pointer-events': 'all'
      }) // changed for some transparency

    nodel.style({
      top: (coordinate().y + poffset[0]) + 'px',
      left: (coordinate().x + poffset[1]) + 'px'
    })

    return tip
  }

  // Public - hide the tooltip
  //
  // Returns a tip
  tip.hide = function() {
    nodel = d3.select(node)
    nodel.style({
      opacity: 0,
      'pointer-events': 'none'
    })
    return tip
  }

  // Public: Proxy attr calls to the d3 tip container.  Sets or gets attribute value.
  //
  // n - name of the attribute
  // v - value of the attribute
  //
  // Returns tip or attribute value
  tip.attr = function(n, v) {
    if (arguments.length < 2 && typeof n === 'string') {
      return d3.select(node).attr(n)
    } else {
      var args = Array.prototype.slice.call(arguments)
      d3.selection.prototype.attr.apply(d3.select(node), args)
    }
    return tip
  }

  // Public: Proxy style calls to the d3 tip container.  Sets or gets a style value.
  //
  // n - name of the property
  // v - value of the property
  //
  // Returns tip or style property value
  tip.style = function(n, v) {
    if (arguments.length < 2 && typeof n === 'string') {
      return d3.select(node).style(n)
    } else {
      var args = Array.prototype.slice.call(arguments)
      d3.selection.prototype.style.apply(d3.select(node), args)
    }

    return tip
  }

  // Public: Set or get the coordinate of the tooltip
  //
  // v - {x:"",y:""}
  //
  // Returns tip or coordinate
  tip.coordinate = function(v) {
    if (!arguments.length) return coordinate;
    coordinate = v == null ? v : d3.functor(v)

    return tip
  }

  // Public: Sets or gets the offset of the tip
  //
  // v - Array of [x, y] offset
  //
  // Returns offset or
  tip.offset = function(v) {
    if (!arguments.length) return offset
    offset = v == null ? v : d3.functor(v)

    return tip
  }

  // Public: sets or gets the html value of the tooltip
  //
  // v - String value of the tip
  //
  // Returns html value or tip
  tip.html = function(v) {
    if (!arguments.length) return html
    html = v == null ? v : d3.functor(v)

    return tip
  }

  function d3_tip_offset() {
    return [0, 0]
  }

  function d3_tip_html() {
    return ' '
  }

  function d3_tip_coordinate() {
    return {
      x: 0,
      y: 0
    }
  }

  function initNode() {
    var node = d3.select(document.createElement('div'))
    node.style({
      position: 'absolute',
      opacity: 0,
      pointerEvents: 'none',
      boxSizing: 'border-box'
    })

    return node.node()
  }

  function getSVGNode(el) {
    el = el.node()
    if (el.tagName.toLowerCase() == 'svg')
      return el

    return el.ownerSVGElement
  }

  return tip
};

/*!
 * Ark Graphs v1.0.0-0 (2015-08-27)
 * http://ark.genesys.com
 * Copyright (c) 2015 Ark Team at Genesys; License: MIT
 */

'use strict';

// TODO: This Angular module should be use from external package
// Probably included into underscore.js Nexus package
angular.module('underscore', []).factory('_', function() {
  return window._;
});

angular.module('ark.graphs', [
    'underscore',
    'ark.graphs.common',
    'ark.graphs.bar',
    'ark.graphs.spark-line',
    'ark.graphs.line-graph',
    'ark.graphs.gauge',
    'ark.graphs.donut',
    // 'ark.graphs.pie',
    // 'ark.graphs.multi-widget',
    'ark.graphs.multi-line-graph'
  ])
  .run(['$rootScope', function($rootScope) {
    $rootScope.safeApply = function(fn) {
      var phase = this.$root.$$phase;
      if (phase === '$apply' || phase === '$digest') {
        if (fn && (typeof(fn) === 'function')) {
          fn();
        }
      } else {
        this.$apply(fn);
      }
    };
    angular.element(window).on('resize', function() {
      $rootScope.safeApply();
    });
  }]);


'use strict';

angular.module('ark.graphs.common', []);

'use strict';

angular.module('ark.graphs.bar', ['ark.graphs.common']);

'use strict';

angular.module('ark.graphs.donut', ['ark.graphs.common']);

'use strict';

angular.module('ark.graphs.gauge', ['ark.graphs.common']);

'use strict';

angular.module('ark.graphs.line-graph', ['ark.graphs.common']);

'use strict';

angular.module('ark.graphs.multi-line-graph', ['ark.graphs.common']);

'use strict';

angular.module('ark.graphs.spark-line', ['ark.graphs.common']);

'use strict';

angular.module('ark.graphs.common')
  .service('ark.graphs.arc-service', ['ark.graphs.d3',
    function(d3) {
      var ArcService = function() {};

      ArcService.prototype.polarToCartesian = function(centerX, centerY, radius, angleInDegrees) {
        var angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;
        return {
          x: centerX + (radius * Math.cos(angleInRadians)),
          y: centerY + (radius * Math.sin(angleInRadians))
        };
      };

      ArcService.prototype.toRadians = function(degrees) {
        return (degrees / 180) * Math.PI;
      };

      ArcService.prototype.toDegrees = function(radians) {
        return (radians * 180) / Math.PI;
      };

      ArcService.prototype.describeArc = function(x, y, radius, startAngle, endAngle) {
        var start = this.polarToCartesian(x, y, radius, endAngle);
        var end = this.polarToCartesian(x, y, radius, startAngle);
        var arcSweep = ((endAngle - startAngle) <= 180) ? 0 : 1;
        return [
          'M', start.x, start.y,
          'A', radius, radius, 0, arcSweep, 0, end.x, end.y
        ].join(' ');
      };

      ArcService.prototype.computeArc = function(startAngle, endAngle, value, max, width, height, radius) {
        return this.describeArc(
          width / 2,
          height / 2,
          radius,
          startAngle,
          endAngle * (value / max)
        );
      };

      ArcService.prototype.computeRotation = function(angle, width, height) {
        return 'rotate(' + angle + ',' + width / 2 + ',' + height / 2 + ')';
      };

      ArcService.prototype.translate = function(width, height) {
        return 'translate(' + width / 2 + ',' + height / 2 + ')';
      };

      ArcService.prototype.d3Arc = function(radius, strokeWidth) {
        return d3.svg.arc()
          .outerRadius(radius)
          .innerRadius(radius - strokeWidth);
      };

      ArcService.prototype.d3Pie = function(amplitude, padAngle, sorting) {
        var sort = null;
        if (sorting === 'ascending') {
          sort = d3.ascending;
        } else if (sorting === 'descending') {
          sort = d3.descending;
        }
        return d3.layout.pie()
          .sort(sort)
          .padAngle(this.toRadians(padAngle))
          .startAngle(0)
          .endAngle(this.toRadians(amplitude))
          .value(function(d) {
            return d + Math.random() / 100000;
          });
      };

      return new ArcService();
    }
  ]);

'use strict';

angular.module('ark.graphs.common')
  .service('ark.graphs.color-service', function() {
    var RED = '#EA4F6B';
    var YELLOW = '#F8A740';
    var BLUE = '#203B73';
    var GREEN = '#4AC764';

    var THRESHOLDS_4 = [RED, YELLOW, BLUE, GREEN];
    var THRESHOLDS_3 = [RED, YELLOW, GREEN];
    var THRESHOLDS_2 = [RED, GREEN];
    var THRESHOLDS_1 = [GREEN];

    var PALETTE = ['#203B73', '#2E69DB', '#5E99FF', '#9BBCE0', '#5A6B8C', '#75A8FF', '#0F6A51', '#569180', '#14819C', '#7EC0C2', '#AFD6D2', '#584FB3', '#7272E0', '#B9B9F0', '#575746', '#827C75', '#C9C4B7', '#8C6542', '#8A4D67', '#C48C88', '#EBC8BE', '#724787', '#B07EC2', '#D1B4D9'];

    var ColorService = function() {};

    ColorService.prototype.getStatusColors = function(n) { // supports for up to four status colors
      switch (n) {
        case 4:
          return THRESHOLDS_4;
        case 3:
          return THRESHOLDS_3;
        case 2:
          return THRESHOLDS_2;
        default: // n == 1
          return THRESHOLDS_1;
      }
    };

    ColorService.prototype.arkPalette = function() {
      return PALETTE;
    };

    ColorService.prototype.arkBlueColors = function() {
      return this.arkPalette().slice(0, 5); //return the first 5 items of the palette which are blue colors
    };

    ColorService.prototype.arkThresholdIcon = function() {
      return RED;
    };

    return new ColorService();
  });

'use strict';

angular.module('ark.graphs.common')
  .service('ark.graphs.config-service', ['ark.graphs.color-service',
    function(ColorService) {
      var ConfigService = function() {};

      ConfigService.prototype.getData = function(index, arr) {
        return (arr[index]) ? arr[index] : arr[0];
      };

      ConfigService.prototype.getStatusColors = function(obj) {
        if ((obj.data.thresholds.values.length + 1) !== obj.data.thresholds.statusColors.length) {
          obj.data.thresholds.statusColors = ColorService.getStatusColors(obj.data.thresholds.values.length + 1);
        }
      };

      ConfigService.prototype.updateColors = function(obj) {
        var colors = obj.data.thresholds ? obj.data.thresholds.statusColors : obj.data.colors;
        if (colors.length !== obj.numberOfData) {
          colors = ColorService.arkPalette().slice(obj.numberOfData - 1);
        }
      };

      ConfigService.prototype.updateInitialValues = function(obj) {
        if (obj.initialValues.length === 0) {
          obj.initialValues = Array.apply(null, new Array(obj.numberOfData)).map(function() {
            return 0;
          });
        }
      };

      ConfigService.prototype.updateLegendLabels = function(obj) {
        if (obj.numberOfData !== obj.legend.title.length) {
          obj.legend.title = Array.apply(null, new Array(obj.numberOfData)).map(function(x, i) {
            return 'Label ' + String.fromCharCode(i + 65);
          });
        }
      };

      ConfigService.prototype.updateTooltipLabels = function(obj) {
        if (obj.numberOfData !== obj.data.labels.length) {
          obj.data.labels = Array.apply(null, new Array(obj.numberOfData)).map(function(x, i) {
            return 'data ' + i.toString();
          });
        }
      };

      return new ConfigService();
    }
  ]);

'use strict';

angular.module('ark.graphs.common')
  .service('ark.graphs.d3', function() {
    return d3;
  });

'use strict';

angular.module('ark.graphs.common')
  .service('ark.graphs.line-service', ['ark.graphs.d3',
    function(d3) {
      var LineService = function() {};

      LineService.prototype.createLine = function(rangeX, rangeY, fieldX, fieldY) {
        return d3.svg.area()
          .x(function(d) {
            return rangeX(d[fieldX] || 0);
          })
          .y(function(d) {
            return rangeY(d[fieldY] || 0);
          });
      };

      LineService.prototype.createRange = function(start, end) {
        return d3.time.scale().range([start, end]);
      };

      LineService.prototype.createLinearRange = function(start, end) {
        return d3.scale.linear().range([start, end]);
      };

      LineService.prototype.createAxis = function(d3range, ticks, orient) {
        return d3.svg.axis().scale(d3range).orient(orient ? orient : 'left').ticks(ticks);
      };

      LineService.prototype.scaleFromDomain = function(axis, domain) {
        return axis.domain(domain);
      };

      LineService.prototype.scaleFromData = function(axis, data, field, offset) {
        var min = d3.min(data, function(d) {
          return (d[field] !== undefined) ? d[field] : d3.min(d, function(c) {
            return c[field] || 0;
          });
        });
        var max = d3.max(data, function(d) {
          return (d[field] !== undefined) ? d[field] : d3.max(d, function(c) {
            return c[field] || min + 1;
          });
        });

        if (offset !== undefined) {
          max += offset * (max - min);
        }
        return axis.domain([min, max]);
      };

      LineService.prototype.scaleFrom0ToMax = function(axis, data, field) {
        return axis.domain([
          0,
          d3.max(data, function(d) {
            return (d.constructor !== Array) ? d[field] : d3.max(d, function(c) {
              return c[field];
            });
          })
        ]);
      };

      LineService.prototype.scale = function(axis, range) {
        return axis.domain(range);
      };

      LineService.prototype.computeLine = function(x1, y1, x2, y2) {
        return ['M', x1, y1, 'L', x2, y2, 'Z'].join(' ');
      };

      return new LineService();
    }
  ]);

'use strict';

angular.module('ark.graphs.common')
  .service('ark.graphs.pie-service', ['ark.graphs.arc-service',
    function(ArcService) {
      var PieService = function() {};
      var that = new PieService();

      PieService.prototype.getLabelTranslation = function(d, config) {
        var size;
        if (config.slice.label.position === 'out') {
          size = config.radius + config.slice.hover.growBy + config.slice.label.line.size;
        } else if (config.slice.label.position === 'in') {
          //If it is a pie chart

          if (config.radius === config.strokeWidth) {
            size = config.radius - config.slice.label.value.fontsize * 3;
          } else {
            size = config.radius - config.strokeWidth / 2 - config.slice.label.value.fontsize;
          }
        }
        return 'translate(' +
          Math.cos(((d.startAngle + d.endAngle + d.padAngle * 2 - Math.PI) / 2)) * (size) + ',' +
          Math.sin((d.startAngle + d.endAngle + d.padAngle * 2 - Math.PI) / 2) * (size) + ')';
      };

      PieService.prototype.getTextAnchor = function(d) {
        return (that.getMiddle(d) < Math.PI) ? 'beginning' : 'end';
      };

      PieService.prototype.getMiddle = function(d) {
        return (d.startAngle + d.endAngle) / 2 + d.padAngle * 4;
      };

      PieService.prototype.getLabelValueDY = function(d) {
        var middle = that.getMiddle(d);
        if (middle <= Math.PI / 2) {
          return 0;
        } else if (middle > Math.PI / 2 && middle <= Math.PI * 1.5) {
          return 10;
        } else {
          return 0;
        }
      };

      PieService.prototype.getLabelNameDY = function(d) {
        var middle = that.getMiddle(d);
        if (middle <= Math.PI / 2) {
          return 0;
        } else if (middle > Math.PI / 2 && middle <= Math.PI * 1.5) {
          return 10;
        } else {
          return 0;
        }
      };

      PieService.prototype.getLabelRotation = function(d) {
        return ArcService.computeRotation(
          ArcService.toDegrees(that.getMiddle(d)),
          0,
          0
        );
      };

      PieService.prototype.drawLabels = function(widget, pieData, config) {
        if (config.slice.label.position === 'out' && config.slice.label.line.display) {
          var lines = widget.select('.ark-graphs-label-group').selectAll('line');

          lines.data(pieData)
            .enter()
            .append('line')
            .attr('class', config.slice.label.line.class)
            .attr('x1', 0)
            .attr('x2', 0)
            .attr('y1', -config.radius - config.slice.hover.growBy)
            .attr('y2', -config.radius - config.slice.hover.growBy - config.slice.label.line.size)
            .attr('stroke', config.slice.label.line.color)
            .attr('transform', function(d) {
              return that.getLabelRotation(d);
            });

          lines = widget.select('.ark-graphs-label-group').selectAll('line');
          lines.transition()
            .duration(config.transitions.arc)
            .attr('transform', function(d) {
              return that.getLabelRotation(d);
            });
        }

        if (config.slice.label.value.display) {
          var valueLabels = widget.select('.ark-graphs-label-group').selectAll('text.' + config.slice.label.value.class);
          valueLabels.data(pieData)
            .enter()
            .append('text')
            .attr('fill', config.slice.label.value.color)
            .attr('font-size', config.slice.label.value.fontsize + 'px')
            .attr('class', config.slice.label.value.class + ' ' + config.slice.label.position)
            .attr('transform', function(d) {
              return that.getLabelTranslation(d, config);
            })
            .attr('dy', that.getLabelValueDY)
            .attr('text-anchor', that.getTextAnchor);

          valueLabels = widget.select('.ark-graphs-label-group').selectAll('text.' + config.slice.label.value.class);
          valueLabels.transition()
            .duration(config.transitions.arc)
            .text(config.slice.label.value.format)
            .attr('dy', that.getLabelValueDY)
            .attr('text-anchor', that.getTextAnchor)
            .attr('transform', function(d) {
              return that.getLabelTranslation(d, config);
            });
        }

        var nameLabels = widget.select('.ark-graphs-label-group').selectAll('text.' + config.slice.label.name.class);

        nameLabels.data(pieData)
          .enter()
          .append('text')
          .attr('fill', config.slice.label.name.color)
          .attr('font-size', config.slice.label.name.fontsize + 'px')
          .attr('class', config.slice.label.name.class + ' ' + config.slice.label.position)
          .attr('transform', function(d) {
            return that.getLabelTranslation(d, config);
          })
          .attr('dy', that.getLabelNameDY)
          .attr('text-anchor', that.getTextAnchor)
          .text(function(d, i) {
            return config.slice.label.name.format(d, i);
          });

        nameLabels = widget.select('.ark-graphs-label-group').selectAll('text.' + config.slice.label.name.class);
        nameLabels
          .transition()
          .duration(config.transitions.arc)
          .attr('dy', that.getLabelNameDY)
          .attr('text-anchor', that.getTextAnchor)
          .text(function(d, i) {
            return config.slice.label.name.format(d, i);
          })
          .attr('transform', function(d) {
            return that.getLabelTranslation(d, config);
          });
      };
      return that;
    }
  ]);

'use strict';

angular.module('ark.graphs.common')
  .service('ark.graphs.text-service', ['ark.graphs.color-service', 'ark.graphs.threshold-service',
    function(ColorService, ThresholdService) {
      var TextService = function() {};

      TextService.prototype.showText = function(configuration, widget, data) {
        if (!configuration.legend.display) {
          return;
        }

        var legend = widget.select('.ark-graphs-' + configuration.type + '-div')
          .append('div')
          .attr('class', 'ark-graphs-' + configuration.type + '-legend')
          .style('width', configuration.legend.width.toString() + 'px');

        if (configuration.legend.padding.top) {
          legend
            .style('padding-top', configuration.legend.padding.top + 'px');
        }

        legend.selectAll('div').data(data)
          .enter()
          .append('div')
          .attr('class', function(d, i) {
            return 'ark-graphs-' + configuration.type + '-legend-text ark-graphs-' + configuration.type + '-legend-text-' + i;
          });

        var legendLines = legend.selectAll('div');
        legendLines
          .append('span')
          .attr('class', 'metric-name')
          .style('left', function() {
            if (typeof configuration.legend.letters !== 'undefined' && configuration.legend.letters.display) {
              return '20px';
            }
            return '0px';
          })
          .append('text')
          .text(function(d, i) {
            return configuration.legend.title[i];
          })
          .style('font-size', configuration.legend.fontsize + 'px');

        if (typeof configuration.legend.letters !== 'undefined' && configuration.legend.letters.display) {
          legendLines
            .append('span')
            .attr('class', 'letters')
            .text(function(d, i) {
              return String.fromCharCode(i + 65);
            })
            .style('font-size', configuration.legend.fontsize + 'px');
        }

        legendLines
          .append('span')
          .attr('class', 'data')
          .text(function(d, i) {
            return configuration.legend.format(data[i], i);
          })
          .style('font-size', configuration.legend.fontsize + 'px');

        legendLines
          .append('span')
          .attr('class', function(d) {
            var icon = 'font-icon ';
            if (typeof configuration.data.thresholds !== 'undefined' && configuration.data.thresholds.display === true) {
              icon += configuration.legend.icon.display ? ThresholdService.getFontIcon(d, configuration) : '';
            } else {
              if (configuration.legend.icon.display && d < configuration.legend.icon.minValue) {
                icon += 'icon-alert-circle';
              }
            }
            return icon;
          })
          .style('color', function(d) {
            if (typeof configuration.data.thresholds !== 'undefined' && configuration.data.thresholds.display === true) {
              return ThresholdService.getDataColor(d, configuration);
            } else {
              return ColorService.arkThresholdIcon();
            }
          });
      };

      TextService.prototype.showTextUpdate = function(configuration, widget, data) {
        var legend = widget.select('.ark-graphs-' + configuration.type + '-legend');
        var legendLines = legend.selectAll('div');
        legendLines.select('.font-icon').data(data)
          .attr('class', function(d) {
            var icon = 'font-icon ';
            if (typeof configuration.data.thresholds !== 'undefined' && configuration.data.thresholds.display === true) {
              icon += configuration.legend.icon.display ? ThresholdService.getFontIcon(d, configuration) : '';
            } else {
              if (configuration.legend.icon.display && d < configuration.legend.icon.minValue) {
                icon += 'icon-alert-circle';
              }
            }
            return icon;
          })
          .style('font-size', '16px')
          .style('top', function() {
            var base = 16;
            var current = configuration.legend.fontsize;
            var top = (current / base * 4);

            return configuration.type === 'spark-line' ? -top / 2 + 'px' : -top + 'px';
          })
          .style('color', function(d) {
            if (typeof configuration.data.thresholds !== 'undefined' && configuration.data.thresholds.display === true) {
              return ThresholdService.getDataColor(d, configuration);
            } else {
              return ColorService.arkThresholdIcon();
            }
          });
        legendLines.select('.data')
          .text(function(d, i) {
            return configuration.legend.format(data[i], i);
          });
      };

      TextService.prototype.showTextChart = function(configuration, widget, data) {
        if (!configuration.legend.display) {
          return;
        }

        var legend = widget.select('.ark-graphs-' + configuration.type + '-div')
          .append('div')
          .attr('class', 'ark-graphs-' + configuration.type + '-legend')
          .style('width', configuration.legend.width.toString() + 'px');

        legend.selectAll('div').data(data)
          .enter()
          .append('div')
          .attr('class', function(d, i) {
            return 'ark-graphs-' + configuration.type + '-legend-text ark-graphs-' + configuration.type + '-legend-text-' + i;
          })
          .style('display', 'inline-block');

        var legendLines = legend.selectAll('div');
        legendLines
          .append('div')
          .attr('class', 'color')
          .style('background-color', function(d, i) {
            return configuration.data.colors[i];
          });

        legendLines
          .append('text')
          .style('padding-left', '8px')
          .style('padding-right', '8px')
          .text(function(d, i) {
            return configuration.legend.title[i];
          });

      };

      return new TextService();
    }
  ]);

'use strict';

angular.module('ark.graphs.common')
  .service('ark.graphs.threshold-service', ['ark.graphs.d3',
    function(d3) {
      var ThresholdService = function() {};

      ThresholdService.prototype.isBelowThreshold = function(data, configuration) {
        var i = this.findRegion(data, configuration);
        if (i === configuration.data.thresholds.values.length) {
          return false;
        }
        return true;
      };

      ThresholdService.prototype.findRegion = function(data, configuration) {
        var comparator = configuration.data.thresholds.comparator;
        var i = 0;
        for (i = 0; i < configuration.data.thresholds.values.length; i++) {
          if (comparator(data, configuration.data.thresholds.values[i])) {
            return i;
          }
        }
        return i;
      };

      ThresholdService.prototype.getDataColor = function(data, configuration) {
        var i = this.findRegion(data, configuration);
        return configuration.data.thresholds.statusColors[i];
      };

      ThresholdService.prototype.getFontIcon = function(data, configuration) {
        var i = this.findRegion(data, configuration);
        return configuration.fontIcons[i];
      };

      ThresholdService.prototype.getMiddleIcon = function(configuration, data) {
        d3.select('#' + configuration.id).select('.ark-graphs-' + configuration.type + '-span')
          .attr('class', (this.getFontIcon(data, configuration) === '') ? 'ark-graphs-' + configuration.type + '-span icon-alert-circle' : 'ark-graphs-' + configuration.type + '-span ' + this.getFontIcon(data, configuration))
          .style('opacity', (this.getFontIcon(data, configuration) === '') ? '0' : '1')
          .style('color', this.getDataColor(data, configuration));
      };

      ThresholdService.prototype.drawThresholds = function(configuration, arrangedData) {
        angular.forEach(arrangedData, function(value, key) {
          var thresholds = d3.select('#' + configuration.id).select('.ark-graphs-' + configuration.type + '-threshold').selectAll('.path-' + key.toString());
          thresholds.data(configuration.data.thresholds.values, function(d) {
              return d + Math.random() / 1000;
            })
            .enter()
            .append('path')
            .attr('class', 'path-' + key.toString() + ' ark-graphs-' + configuration.type + '-threshold-path-' + key.toString())
            .attr('opacity', configuration.data.thresholds.opacity)
            .attr('stroke-width', configuration.data.thresholds.strokeWidth)
            .transition()
            .attrTween('stroke', function(d, i) {
              var color;
              if (d < arrangedData[key]) {
                color = configuration.data.thresholds.barColorOver;
              } else {
                color = configuration.data.thresholds.barColor;
              }
              var interpolate = d3.interpolate(configuration.currentThresholdColors[key][i], color);
              configuration.currentThresholdColors[key][i] = color;
              return function(t) {
                return interpolate(t);
              };
            })
            .duration(configuration.transitions.thresholds);
          thresholds.remove();
        });
      };

      ThresholdService.prototype.initThresholdValues = function(configuration) {
        configuration.fontIcons = ['icon-alert-circle', 'icon-alert-triangle', '', 'icon-alert-checkmark'];
        configuration.fontIcons = configuration.fontIcons.slice(0, configuration.data.thresholds.values.length);
        configuration.fontIcons.push('icon-alert-checkmark');
        configuration.currentThresholdColors = [];

        var length = configuration.numberOfData ? configuration.numberOfData : 1;

        for (var i = 0; i < length; i++) {
          var tmp = [];
          for (var j = 0; j < configuration.data.thresholds.values.length; j++) {
            tmp.push(configuration.data.thresholds.color);
          }
          configuration.currentThresholdColors.push(tmp);
        }
      };

      return new ThresholdService();

    }
  ]);

'use strict';

angular.module('ark.graphs.common')
  .service('ark.graphs.tooltip-service', ['ark.graphs.d3',
    function(d3) {
      var TooltipService = function() {};

      TooltipService.prototype.initTooltip = function(scope, type) {
        if (scope.tooltip) {
          d3.select('#tooltip-' + scope.internalConfiguration.id)
            .remove();
        }
        scope.tooltip = d3.tip(scope.internalConfiguration.id)
          .attr('id', 'tooltip-' + scope.internalConfiguration.id)
          .attr('class', 'ark-graphs-' + type + '-tooltip ark-graphs-tooltip')
          .offset([10, 10])
          .html(scope.internalConfiguration.tooltip.format);
        scope.widget.select('.ark-graphs-' + type + '-svg').call(scope.tooltip);

      };

      TooltipService.prototype.showTooltip = function(tooltip) {
        tooltip.show.apply(this, Array.prototype.slice.call(arguments, 1));
      };

      TooltipService.prototype.setCoordinates = function(tooltip, pageX, pageY) {
        tooltip.coordinate({
          x: pageX,
          y: pageY
        });
      };

      TooltipService.prototype.hideTooltip = function(tooltip) {
        tooltip.hide();
      };

      return new TooltipService();
    }
  ]);

'use strict';

angular.module('ark.graphs.common')
  .service('ark.graphs.utils', function() {
    var Utils = function() {};

    Utils.prototype.prepareData = function(data, previousData, configuration) {
      var tmp;
      if (previousData.length > configuration.numberOfData) {
        previousData = previousData.slice(0, configuration.numberOfData);
      }
      if (typeof data === 'object') {
        if (data.length === configuration.numberOfData) {
          return data;
        } else {
          tmp = angular.copy(previousData);
          for (var i = 0; i < data.length; i++) {
            tmp.unshift(data);
          }
          tmp = tmp.slice(0, configuration.numberOfData);
          return tmp;
        }
      } else {
        tmp = angular.copy(previousData);
        tmp.unshift(data);
        tmp = tmp.slice(0, configuration.numberOfData);
        return tmp;
      }
    };

    Utils.prototype.generateID = function(type) {
      var id = '';
      var possible = 'abcdef0123456789';

      for (var i = 0; i < 16; i++) {
        id += possible.charAt(Math.floor(Math.random() * possible.length));
      }

      return type + '-' + id;
    };

    Utils.prototype.mergeRecursive = function(obj1, obj2) {
      for (var p in obj2) {
        try {
          obj1[p] = (obj2[p].constructor === Object) ? this.mergeRecursive(obj1[p], obj2[p]) : obj2[p];
        } catch (e) {
          obj1[p] = obj2[p];
        }
      }
      return obj1;
    };

    Utils.prototype.getTrueWidth = function(element) {
      var computedStyles = getComputedStyle(element);
      var width = parseInt(computedStyles.width, 10);
      var paddingLeft = parseInt(computedStyles.paddingLeft, 10);
      var paddingRight = parseInt(computedStyles.paddingRight, 10);

      return width - paddingLeft - paddingRight;
    };

    Utils.prototype.resize = function(configuration, element) {
      var e = angular.element(element[0].parentElement);
      var trueWidth = this.getTrueWidth(e[0]);

      if (configuration.autosnap.enabled) {
        var tmpConfiguration;
        if (trueWidth < configuration.autosnap.threshold) {
          tmpConfiguration = configuration.autosnap.smallConfig;
        } else {
          tmpConfiguration = configuration.autosnap.largeConfig;
        }
        configuration = this.mergeRecursive(configuration, tmpConfiguration);
      } else {
        if (configuration.type !== 'spark-line') {
          configuration.svg.width = trueWidth;
        } else {
          configuration.div.width = trueWidth;
        }
      }
      configuration.update(configuration);
    };

    return new Utils();
  });

'use strict';

angular.module('ark.graphs.bar')
  .directive('arkBar', ['ark.graphs.bar-config', 'ark.graphs.line-service',
    'ark.graphs.text-service', 'ark.graphs.d3', 'ark.graphs.utils', 'ark.graphs.tooltip-service',
    'ark.graphs.threshold-service', 'ark.graphs.config-service',
    function(BarConfiguration, LineService, TextService, d3, Utils, TooltipService, ThresholdService, ConfigService) {
      return {
        restrict: 'E',
        scope: {
          configuration: '=',
          data: '='
        },
        link: function($scope, element) {
          $scope.internalConfiguration = new BarConfiguration($scope.configuration);
          $scope.previousData = $scope.internalConfiguration.initialValues;

          $scope.draw = function(data) {
            //Prepare data, adds in previous values of data if required
            $scope.arrangedData = Utils.prepareData(angular.copy(data), $scope.previousData, $scope.internalConfiguration);

            //Draw bars
            var paths = $scope.widget.select('.ark-graphs-bar-container').selectAll('path');
            paths.data($scope.arrangedData, function(d) {
                return d + Math.random() / 1000;
              })
              .enter()
              .append('path')
              .attr('class', 'path')
              .attr('stroke', function(d) {
                return ThresholdService.getDataColor(d, $scope.internalConfiguration);
              })
              .attr('transform', function(d, i) {
                return ['translate(', 0, $scope.internalConfiguration.svg.height * i, ')'].join(' ');
              })
              .attr('stroke-width', $scope.internalConfiguration.strokeWidth)
              .attr('height', $scope.internalConfiguration.strokeWidth / 2)
              .attr('width', $scope.internalConfiguration.svg.width)
              .attr('opacity', 1)
              .transition()
              .attrTween('d', function(d, i) {
                var interpolate = d3.interpolate($scope.previousData[i], $scope.arrangedData[i]);
                if ($scope.internalConfiguration.tooltip.display) {
                  TooltipService.hideTooltip($scope.tooltip);
                }
                return function(t) {
                  var y = (0 + $scope.internalConfiguration.strokeWidth) / 2;
                  var x = (interpolate(t) / $scope.internalConfiguration.max) * $scope.internalConfiguration.svg.width;
                  return LineService.computeLine(0, y, x, y);
                };
              })
              .duration($scope.internalConfiguration.transitions.bar)
              .each('end', function() {
                $scope.allowUpdate($scope.arrangedData);
              });
            paths.remove();

            //Draw thesholds and gauge fonticon
            if ($scope.internalConfiguration.data.thresholds.display) {
              ThresholdService.drawThresholds($scope.internalConfiguration, $scope.arrangedData);
              angular.forEach($scope.arrangedData, function(value, key) {
                var thresholds = $scope.widget.select('.ark-graphs-bar-threshold').selectAll('.path-' + key.toString());
                thresholds.attr('d', function(d) {
                    var x = (d / $scope.internalConfiguration.max) * $scope.internalConfiguration.svg.width;
                    return LineService.computeLine(x, 0, x, $scope.internalConfiguration.strokeWidth);
                  })
                  .attr('transform', ['translate(', 0, $scope.internalConfiguration.svg.height * key, ')'].join(' '));
              });
            }

            //Draw legend
            if ($scope.internalConfiguration.legend.display) {
              TextService.showTextUpdate($scope.internalConfiguration, $scope.widget, $scope.arrangedData);
            }
          };

          //When bar stops transitioning, allow mouse events
          $scope.allowUpdate = function(data) {
            var selection = $scope.widget.select('.ark-graphs-bar-container').selectAll('path');
            selection
              .on('mousemove', function(d, i) {
                $scope.coordinate = d3.mouse($scope.widget.select('.ark-graphs-bar-container')[0][0]);
                $scope.mousemovePath(d, i, this);
              })
              .on('mouseout', function(d, i) {
                $scope.mouseoutPath(i, this);
              });
            $scope.previousData = angular.copy(data);
          };

          $scope.mousemovePath = function(d, i, elem) {
            if ($scope.internalConfiguration.hover.apply) {
              d3.select(elem).transition()
                .duration(200)
                .attr('stroke-width', $scope.internalConfiguration.hover.growBy + $scope.internalConfiguration.strokeWidth);
              if ($scope.internalConfiguration.data.thresholds.display) {
                $scope.widget.select('.ark-graphs-bar-threshold').selectAll('.ark-graphs-bar-threshold-path-' + i.toString())
                  .attr('d', function(d) {
                    var x = (d / $scope.internalConfiguration.max) * $scope.internalConfiguration.svg.width;
                    return LineService.computeLine(x, -($scope.internalConfiguration.hover.growBy / 2), x, $scope.internalConfiguration.strokeWidth + $scope.internalConfiguration.hover.growBy / 2);
                  });
              }
            }
            if ($scope.internalConfiguration.tooltip.display) {
              TooltipService.setCoordinates($scope.tooltip, $scope.coordinate[0], $scope.coordinate[1]);
              TooltipService.showTooltip($scope.tooltip, d, i, ThresholdService.getDataColor(d, $scope.internalConfiguration), ConfigService.getData(i, $scope.internalConfiguration.data.labels));
            }
          };

          $scope.mouseoutPath = function(i, elem) {
            if ($scope.internalConfiguration.hover.apply) {
              d3.select(elem).transition()
                .duration(200)
                .attr('stroke-width', $scope.internalConfiguration.strokeWidth);
              if ($scope.internalConfiguration.data.thresholds.display) {
                $scope.widget.select('.ark-graphs-bar-threshold').selectAll('.ark-graphs-bar-threshold-path-' + i.toString())
                  .attr('d', function(d) {
                    var x = (d / $scope.internalConfiguration.max) * $scope.internalConfiguration.svg.width;
                    return LineService.computeLine(x, 0, x, $scope.internalConfiguration.strokeWidth);
                  });
              }
            }
            if ($scope.internalConfiguration.tooltip.display) {
              TooltipService.hideTooltip($scope.tooltip);
            }
          };

          $scope.init = function() {
            $scope.widget = d3.select(element[0]);
            $scope.widget.selectAll('*').remove();

            //Prepare data, adds in previous values of data if required
            $scope.arrangedData = Utils.prepareData(angular.copy($scope.data), $scope.previousData, $scope.internalConfiguration);

            //Main bar widget container
            $scope.widget.append('div')
              .attr('class', 'ark-graphs-bar-div')
              .attr('id', $scope.internalConfiguration.id)
              .style('position', 'relative')
              .style('white-space', 'nowrap')
              .style('width', $scope.internalConfiguration.div.width.toString() + 'px')
              .style('height', ($scope.internalConfiguration.div.height.toString()) + 'px');

            //SVG portion of widget
            $scope.widget.select('.ark-graphs-bar-div')
              .append('svg')
              .attr('class', 'ark-graphs-bar-svg')
              .attr('width', $scope.internalConfiguration.svg.width)
              .attr('height', $scope.internalConfiguration.svg.height * $scope.internalConfiguration.numberOfData);

            $scope.widget.select('.ark-graphs-bar-svg')
              .append('g')
              .attr('class', 'ark-graphs-bar-svg-inner')
              .attr('transform', ['translate(', 0, ',', $scope.internalConfiguration.div.padding.top, ')'].join(' '));

            //Draw background bar/line
            if ($scope.internalConfiguration.background.display) {
              var y = ($scope.internalConfiguration.strokeWidth) / 2;
              angular.forEach($scope.arrangedData, function(value, key) {
                $scope.widget.select('.ark-graphs-bar-svg-inner')
                  .append('g')
                  .attr('class', 'ark-graphs-bar-line')
                  .append('path')
                  .attr('stroke', $scope.internalConfiguration.background.color.toString())
                  .attr('transform', ['translate(', 0, $scope.internalConfiguration.svg.height * key, ')'].join(' '))
                  .attr('stroke-width', $scope.internalConfiguration.background.strokeWidth.toString())
                  .attr('d', LineService.computeLine(0, y, $scope.internalConfiguration.svg.width, y));
              });
            }

            //Bar container for drawing/updating bars
            $scope.widget.select('.ark-graphs-bar-svg-inner')
              .append('g')
              .attr('class', 'ark-graphs-bar-container');

            //Threshold container for drawing/updating thresholds
            if ($scope.internalConfiguration.data.thresholds.display) {
              $scope.widget.select('.ark-graphs-bar-svg-inner')
                .append('g')
                .attr('class', 'ark-graphs-bar-threshold');
              ThresholdService.initThresholdValues($scope.internalConfiguration);
            }

            //Draw initial legend
            if ($scope.internalConfiguration.legend.display) {
              //TextService.showText($scope.internalConfiguration, $scope.widget, $scope.arrangedData);
            }

            if ($scope.internalConfiguration.legend.display) {
              TextService.showText($scope.internalConfiguration, $scope.widget, $scope.arrangedData);
            }

            //Initalizes tooltip
            if ($scope.internalConfiguration.tooltip.display) {
              TooltipService.initTooltip($scope, 'bar');
            }
          };

          if ($scope.internalConfiguration.autoresize) {
            Utils.resize($scope.internalConfiguration, element);
          }

          $scope.init();

          //Check for resizing
          $scope.$watch(function() {
            var e = angular.element(element[0].parentElement);
            return Utils.getTrueWidth(e[0]);
          }, function() {
            if ($scope.internalConfiguration.autoresize) {
              Utils.resize($scope.internalConfiguration, element);
              $scope.init();
              $scope.draw($scope.data);
            }
          }, true);

          //Check for changes in internalConfiguration
          $scope.$watch('configuration', function() {
            $scope.internalConfiguration.update($scope.configuration);
            $scope.init();
            $scope.draw($scope.data);
          }, true);

          //Check for changes in data
          $scope.$watch('data', function(newVals) {
            if (newVals !== undefined) {
              return $scope.draw(newVals);
            }
          });
        }
      };
    }
  ]);

'use strict';

angular.module('ark.graphs.bar')
  .factory('ark.graphs.bar-config', ['ark.graphs.color-service', 'ark.graphs.utils', 'ark.graphs.config-service',
    function(ColorService, Utils, ConfigService) {
      var BarConfiguration = function(configuration) {
        this.type = 'bar';
        this.id = Utils.generateID(this.type);
        this.initialValues = [];
        this.max = 100;
        this.strokeWidth = 7;
        this.numberOfDataSet = 1;
        this.numberOfData = this.numberOfDataSet;
        this.autoresize = false; //If set to true, given divWidth will not be taken into account

        this.svg = {
          height: 14,
          width: 208,
          padding: {
            top: 2
          },
          dataGap: 5
        };

        this.legend = {
          display: true,
          fontsize: 12,
          height: 26,
          width: this.svg.width,
          title: ['Metric name'],
          format: function(d, i) {
            return d;
          },
          letters: {
            display: true
          },
          padding: {
            top: -6,
            left: 0,
            right: 20
          },
          icon: {
            display: true,
            minValue: 40
          }
        };

        this.data = {
          labels: ['data 0'],
          thresholds: {
            display: true,
            values: [75],
            strokeWidth: 1,
            opacity: 1,
            statusColors: ColorService.getStatusColors(2),
            barColorOver: '#FFFFFF',
            barColor: '#C4CDD6',
            comparator: function(value, threshold) {
              return value < threshold;
            }
          }
        };

        this.tooltip = {
          display: true,
          format: function(value, index, color, name) {
            return '<table class="ark-graphs-bar-tooltip"><tbody><tr class="ark-graphs-bar-tooltip-name-data"><td class="name"><span class="ark-graphs-bar-tooltip-square" style="background-color: ' + color + ';"></span><text class="name-container">' + name + '</text></td><td class="value">' + value + '</td></tr></tbody></table>';
          }
        };

        this.background = {
          display: true,
          color: '#E3E9EF',
          strokeWidth: 1
        };

        this.hover = {
          apply: true,
          growBy: 2
        };

        this.transitions = {
          bar: 1000,
          thresholds: 1000
        };

        this.autosnap = {
          enabled: false,
          threshold: 516,
          smallConfig: {
            svg: {
              width: 208
            }
          },
          largeConfig: {
            svg: {
              width: 516
            }
          }
        };

        this.update(configuration);
      };

      BarConfiguration.prototype.update = function(configuration) {
        Utils.mergeRecursive(this, configuration);

        this.legend.width = this.svg.width;
        this.div = {
          width: this.svg.width,
          height: (this.svg.height + (this.legend.display ? this.legend.height : 0)) * this.numberOfData,
          padding: {
            top: this.svg.padding.top
          }
        };
        this.dataGap = (this.svg.height - this.strokeWidth * this.numberOfData) / this.numberOfData;

        ConfigService.getStatusColors(this);
        ConfigService.updateInitialValues(this);
        ConfigService.updateLegendLabels(this);
        ConfigService.updateTooltipLabels(this);
      };

      return BarConfiguration;
    }
  ]);

'use strict';

angular.module('ark.graphs.donut')
  .directive('arkDonut', ['ark.graphs.donut-chart-config', 'ark.graphs.arc-service',
    'ark.graphs.pie-service', 'ark.graphs.text-service', 'ark.graphs.d3', 'ark.graphs.utils',
    'ark.graphs.tooltip-service', 'ark.graphs.config-service',
    function(DonutConfiguration, ArcService, PieService, TextService, d3, Utils, TooltipService, ConfigService) {
      return {
        restrict: 'E',
        scope: {
          configuration: '=',
          data: '='
        },
        link: function($scope, element) {
          $scope.internalConfiguration = new DonutConfiguration($scope.configuration, $scope.data);
          $scope.previousData = $scope.internalConfiguration.initialValues;

          angular.forEach($scope.data, function() {
            $scope.previousData.push(0);
          });
          $scope.draw = function(data) {
            var paths = $scope.widget.select('.ark-graphs-donut-container').selectAll('path');

            var arc = ArcService.d3Arc($scope.internalConfiguration.radius, $scope.internalConfiguration.strokeWidth);
            var arcOver = ArcService.d3Arc($scope.internalConfiguration.radius + $scope.internalConfiguration.slice.hover.growBy, $scope.internalConfiguration.strokeWidth + $scope.internalConfiguration.slice.hover.growBy);

            var pie = ArcService.d3Pie($scope.internalConfiguration.amplitude, $scope.internalConfiguration.padAngle, $scope.internalConfiguration.sort);

            var previousPie = pie($scope.previousData);

            if ($scope.internalConfiguration.slice.label.display) {
              PieService.drawLabels($scope.widget, pie(data), $scope.internalConfiguration);
            }

            paths.data(pie(data), function(d) {
                return d + Math.random() / 10000;
              })
              .enter()
              .append('path')
              .attr('class', 'path')
              .attr('fill', function(d, i) {
                return $scope.internalConfiguration.data.colors[i];
              })
              .attr('stroke', $scope.internalConfiguration.slice.border.color)
              .attr('stroke-width', ($scope.internalConfiguration.slice.border.display ? $scope.internalConfiguration.slice.border.width : 0))
              .attr('opacity', $scope.internalConfiguration.opacity)
              .attr('transform',
                ArcService.computeRotation(
                  $scope.internalConfiguration.startAngle,
                  $scope.internalConfiguration.svg.width,
                  $scope.internalConfiguration.svg.height
                ) + ' ' +
                ArcService.translate(
                  $scope.internalConfiguration.svg.width,
                  $scope.internalConfiguration.svg.height
                ))
              .on('click', $scope.internalConfiguration.slice.click)
              .transition()
              .attrTween('d', function(d, i) {
                TooltipService.hideTooltip($scope.tooltip);
                var previous = previousPie[i] || {
                  startAngle: 0,
                  endAngle: 0
                };
                var interpolate = d3.interpolate(previous, d);
                return function(t) {
                  return arc(interpolate(t));
                };
              })
              .duration($scope.internalConfiguration.transitions.arc)
              .each('end', function() {
                $scope.allowUpdate(data, arc, arcOver);
              });
            paths.remove();
            $scope._updateLabels(data);
            TextService.showTextUpdate($scope.internalConfiguration, $scope.widget, $scope.data);
          };

          $scope.allowUpdate = function(data, arc, arcOver) {
            var selection = $scope.widget.select('.ark-graphs-donut-container').selectAll('path');
            selection
              .on('mousemove', function(d, i) {
                $scope.coordinate = d3.mouse($scope.widget.select('.ark-graphs-donut-container')[0][0]);
                $scope.mousemovePath(d, i, this, arcOver);
              })
              .on('mouseout', function() {
                $scope.mouseoutPath(this, arc);
              });
            $scope.previousData = angular.copy(data);
          };

          $scope.setMiddleLabelFont = function(fontsize) {
            $scope.internalConfiguration.label.fontsize = fontsize;
          };

          $scope.setMiddleLabel = function() {
            //Middle label
            $scope.widget.select('.ark-graphs-donut-svg').select('g').select('text')
              .attr('font-size', $scope.internalConfiguration.label.fontsize + 'px');
          };

          $scope._updateLabels = function(data) {
            if ($scope.internalConfiguration.label.display) {
              $scope.widget.select('.ark-graphs-donut-middle-label').select('text')
                .attr('opacity', 0.2)
                .transition()
                .duration($scope.internalConfiguration.transitions.label)
                .attr('opacity', 1)
                .text($scope.internalConfiguration.label.format(data));
              if ($scope.internalConfiguration.label.symbol.display) {
                $scope.widget.select('.ark-graphs-donut-middle-label-symbol').select('text')
                  .attr('opacity', 0.2)
                  .transition()
                  .duration($scope.internalConfiguration.transitions.label)
                  .attr('opacity', 1)
                  .text($scope.internalConfiguration.label.symbol.format(data));
              }
            }
          };

          $scope.mousemovePath = function(d, i, elem, arcOver) {
            if ($scope.internalConfiguration.slice.hover.apply) {
              d3.select(elem).transition()
                .duration(50)
                .attr('d', arcOver);
            }
            if ($scope.internalConfiguration.tooltip.display) {
              TooltipService.setCoordinates($scope.tooltip, $scope.coordinate[0], $scope.coordinate[1]);
              TooltipService.showTooltip($scope.tooltip, d, i, ConfigService.getData(i, $scope.internalConfiguration.data.colors), ConfigService.getData(i, $scope.internalConfiguration.data.labels));
            }
          };

          $scope.mouseoutPath = function(elem, arc) {
            if ($scope.internalConfiguration.slice.hover.apply) {
              d3.select(elem).transition()
                .duration(50)
                .attr('d', arc);
            }
            if ($scope.internalConfiguration.tooltip.display) {
              TooltipService.hideTooltip($scope.tooltip);
            }
          };

          $scope.init = function() {
            $scope.widget = d3.select(element[0]);
            $scope.widget.selectAll('*').remove();

            $scope.widget.append('div')
              .attr('class', 'ark-graphs-donut-div')
              .attr('id', $scope.internalConfiguration.id)
              .style('position', 'relative')
              .style('white-space', 'nowrap')
              .style('width', $scope.internalConfiguration.div.width.toString() + 'px')
              .style('height', $scope.internalConfiguration.div.height.toString() + 'px')
              .style('padding-top', $scope.internalConfiguration.div.padding.top.toString() + 'px');

            $scope.widget.select('.ark-graphs-donut-div').append('svg')
              .attr('class', 'ark-graphs-donut-svg')
              .attr('width', $scope.internalConfiguration.svg.width)
              .attr('height', $scope.internalConfiguration.svg.height);

            if ($scope.internalConfiguration.label.display) {
              //Middle label
              $scope.widget.select('.ark-graphs-donut-svg').append('g')
                .attr('class', 'ark-graphs-donut-middle-label')
                .append('text')
                .text($scope.internalConfiguration.label.format(0))
                .attr('x', $scope.internalConfiguration.svg.width / 2)
                .attr('y', $scope.internalConfiguration.svg.height / 2)
                .attr('opacity', $scope.internalConfiguration.label.opacity)
                .attr('font-size', $scope.internalConfiguration.label.fontsize + 'px')
                .attr('fill', $scope.internalConfiguration.label.color)
                .style('dominant-baseline', 'middle')
                .style('text-anchor', 'middle');
              if ($scope.internalConfiguration.label.symbol.display) {
                $scope.widget.select('.ark-graphs-donut-svg').append('g')
                  .attr('class', 'ark-graphs-donut-middle-label-symbol')
                  .append('text')
                  .text($scope.internalConfiguration.label.symbol.format(0))
                  .attr('x', $scope.internalConfiguration.svg.width / 2)
                  .attr('y', $scope.internalConfiguration.svg.height / 2 + $scope.internalConfiguration.label.fontsize)
                  .attr('opacity', $scope.internalConfiguration.label.symbol.opacity)
                  .attr('font-size', $scope.internalConfiguration.label.symbol.fontsize + 'px')
                  .attr('fill', $scope.internalConfiguration.label.symbol.color)
                  .style('text-anchor', 'middle');
              }
            }

            //Main widget content
            $scope.widget.select('.ark-graphs-donut-svg').append('g')
              .attr('class', 'ark-graphs-donut-container');

            $scope.widget.select('.ark-graphs-donut-svg').append('g')
              .attr('class', 'ark-graphs-label-group')
              .attr('transform', ArcService.translate(
                $scope.internalConfiguration.svg.width,
                $scope.internalConfiguration.svg.height
              ));

            TextService.showText($scope.internalConfiguration, $scope.widget, $scope.data);

            TooltipService.initTooltip($scope, 'donut');
          };

          $scope.resize = function() {
            Utils.resize($scope.internalConfiguration, element);
            $scope.init();
            $scope.draw($scope.data);
          };

          if ($scope.internalConfiguration.autoresize) {
            Utils.resize($scope.internalConfiguration, element);
          }

          $scope.init();

          //Check for resizing
          $scope.$watch(function() {
            var e = angular.element(element[0].parentElement);
            return Utils.getTrueWidth(e[0]);
          }, function() {
            if ($scope.internalConfiguration.autoresize) {
              Utils.resize($scope.internalConfiguration, element);
              $scope.init();
              $scope.previousData = angular.copy($scope.data);
              $scope.draw($scope.data);
            }
          }, true);

          //Check for text overflow
          $scope.$watch(function() {
            var a = element[0].querySelector('.ark-graphs-donut-middle-label text');
            if (a === null) {
              return $scope.internalConfiguration.radius * 2;
            }
            return a.getBoundingClientRect().width;
          }, function(newVal) {
            if (newVal > $scope.internalConfiguration.radius * 2 * 0.7) { // text is greater than 0.7 of donut diameter
              $scope.setMiddleLabelFont($scope.internalConfiguration.label.fontsize / 2);
              $scope.setMiddleLabel();
            }

            if ($scope.internalConfiguration.label.maxFontsize > $scope.internalConfiguration.label.fontsize) {
              if (newVal < $scope.internalConfiguration.radius * 2 * 0.6) { // text is less than 0.6 of donut diameter
                $scope.setMiddleLabelFont($scope.internalConfiguration.label.fontsize * 1.5);
                $scope.setMiddleLabel();
              }
            }
          });

          //Check for changes in internalConfiguration
          $scope.$watch('configuration', function() {
            $scope.internalConfiguration.update($scope.configuration);
            $scope.init();
            $scope.draw($scope.data);
          }, true);

          $scope.$watch('data', function(newVals) {
            return $scope.draw(newVals);
          });
        }
      };
    }
  ]);

'use strict';

angular.module('ark.graphs.donut')
  .factory('ark.graphs.donut-chart-config', ['ark.graphs.d3', 'ark.graphs.color-service',
    'ark.graphs.utils', 'ark.graphs.config-service',
    function(d3, ColorService, Utils, ConfigService) {
      var DonutConfiguration = function(configuration, data) {
        this.type = 'donut';
        this.id = Utils.generateID(this.type);
        this.startAngle = 0;
        this.strokeWidth = 8;
        this.amplitude = 360;
        this.padAngle = 0.75;
        this.radius = 69;
        this.opacity = 1;
        this.initialValues = [];
        this.sort = null;
        this.autoresize = false;
        this.numberOfDataSet = data.length;
        this.numberOfData = this.numberOfDataSet;

        this.svg = {
          height: this.radius * 2 + this.strokeWidth / 2 + 26,
          width: 208,
          padding: {
            top: 0
          }
        };

        this.legend = {
          display: true,
          fontsize: 12,
          height: 72,
          width: this.svg.width,
          title: ['Metric name'],
          format: function(d, i) {
            return d;
          },
          letters: {
            display: true
          },
          padding: {
            top: 0,
            left: 20,
            right: 20
          },
          icon: {
            display: true,
            minValue: 3
          }
        };

        this.data = {
          colors: ColorService.arkBlueColors(),
          labels: ['data 0']
        };

        this.tooltip = {
          display: true,
          format: function(value, index, color, name) {
            return '<table class="ark-graphs-donut-tooltip"><tbody><tr class="ark-graphs-donut-tooltip-name-data"><td class="name"><span class="ark-graphs-donut-tooltip-square" style="background-color: ' + color + ';"></span><text class="name-container">' + name + '</text></td><td class="value">' + value.data + '</td></tr></tbody></table>';
          }
        };

        this.slice = {
          border: {
            display: true,
            color: '#FFFFFF',
            width: 1
          },
          label: {
            position: 'out',
            display: true,
            line: {
              display: false,
              size: 0,
              color: 'gray',
              class: 'ark-graphs-donut-label-line'
            },
            value: {
              display: false,
              fontsize: 12,
              color: 'gray',
              class: 'ark-graphs-donut-label-value',
              format: function(value) {

                return value.data;
              }
            },
            name: {
              topOffset: 2,
              fontsize: 11,
              color: '#444A52',
              class: 'ark-graphs-donut-label-name',
              format: function(d, i) {
                var chr = String.fromCharCode(i + 65);
                return chr;
              }
            }
          },
          hover: {
            apply: false,
            callback: function() {},
            growBy: 4
          },
          click: function() {}
        };
        this.label = {
          display: true,
          fontsize: 32,
          maxFontsize: 32,
          color: 'black',
          format: function(values) {
            return d3.sum(values);
          },
          opacity: 1,
          symbol: {
            display: true,
            fontsize: 20,
            color: 'black',
            format: function() {
              return '';
            },
            opacity: 1
          }
        };
        this.transitions = {
          arc: 1000,
          label: 500
        };

        this.autosnap = {
          enabled: false,
          threshold: 516,
          smallConfig: {
            radius: 69,
            svg: {
              width: 208
            },
            strokeWidth: 8,
            slice: {
              label: {
                name: {
                  fontsize: 12
                }
              }
            },
            label: {
              fontsize: 32,
              maxFontsize: 32
            },
            legend: {
              fontsize: 12,
              height: 72,
              width: 208,
              padding: {
                top: 0,
                left: 20,
                right: 20
              }
            }
          },
          largeConfig: {
            radius: 124,
            svg: {
              width: 516
            },
            strokeWidth: 12,
            slice: {
              label: {
                name: {
                  fontsize: 14
                }
              }
            },
            label: {
              fontsize: 48,
              maxFontsize: 48
            },
            legend: {
              fontsize: 14,
              height: 160,
              width: 260,
              padding: {
                top: 20,
                left: 24,
                right: 24
              }
            }
          }
        };

        this.update(configuration);
      };

      DonutConfiguration.prototype.update = function(configuration) {
        Utils.mergeRecursive(this, configuration);

        this.svg.height = this.radius * 2 + this.strokeWidth / 2 + 26;
        this.div = {
          width: this.svg.width,
          height: this.svg.height + (this.legend.display ? this.legend.height : 0),
          padding: {
            top: this.svg.padding.top
          }
        };

        ConfigService.updateColors(this);
        ConfigService.updateInitialValues(this);
        ConfigService.updateLegendLabels(this);
        ConfigService.updateTooltipLabels(this);
      };

      return DonutConfiguration;
    }
  ]);

'use strict';

angular.module('ark.graphs.gauge')
  .directive('arkCircularGauge', ['ark.graphs.gauge-config', 'ark.graphs.arc-service',
    'ark.graphs.text-service', 'ark.graphs.d3', 'ark.graphs.utils',
    'ark.graphs.tooltip-service', 'ark.graphs.threshold-service', 'ark.graphs.config-service',
    function(GaugeConfiguration, ArcService, TextService, d3, Utils, TooltipService, ThresholdService, ConfigService) {
      return {
        restrict: 'E',
        scope: {
          configuration: '=',
          data: '='
        },
        link: function($scope, element) {
          $scope.internalConfiguration = new GaugeConfiguration($scope.configuration);
          $scope.previousData = $scope.internalConfiguration.initialValues;

          var toggle = false;
          $scope.draw = function(data) {
            toggle = false;
            $scope.arrangedData = Utils.prepareData(angular.copy(data), $scope.previousData, $scope.internalConfiguration);
            var paths = $scope.widget.select('.ark-graphs-gauge-container').selectAll('path');
            paths.data($scope.arrangedData, function(d) {
                return d + Math.random() / 1000;
              })
              .enter()
              .append('path')
              .attr('class', 'path')
              .attr('fill', 'none')
              .attr('transform', ArcService.computeRotation(
                $scope.internalConfiguration.startAngle,
                $scope.internalConfiguration.svg.width,
                $scope.internalConfiguration.svg.height
              ))
              .attr('stroke', function(d) {
                return ThresholdService.getDataColor(d, $scope.internalConfiguration);
              })
              .attr('stroke-width', $scope.internalConfiguration.strokeWidth)
              .attr('opacity', 1)
              .transition()
              .attrTween('d', function(d, i) {
                toggle = true;
                TooltipService.hideTooltip($scope.tooltip);
                var interpolate = d3.interpolate($scope.previousData[i], $scope.arrangedData[i]);
                return function(t) {
                  return ArcService.computeArc(
                    0,
                    $scope.internalConfiguration.amplitude,
                    interpolate(t),
                    $scope.internalConfiguration.max,
                    $scope.internalConfiguration.svg.width,
                    $scope.internalConfiguration.svg.height, $scope.internalConfiguration.computeGaugeWidth(d, i)
                  );
                };
              })
              .duration($scope.internalConfiguration.transitions.arc)
              .each('end', function() {
                $scope.allowUpdate($scope.arrangedData);
              });
            paths.remove();

            // display thesholds and middle fonticon
            if ($scope.internalConfiguration.data.thresholds.display) {
              ThresholdService.getMiddleIcon($scope.internalConfiguration, data);
              ThresholdService.drawThresholds($scope.internalConfiguration, $scope.arrangedData);
              angular.forEach($scope.arrangedData, function(value, key) {
                var thresholds = $scope.widget.select('.ark-graphs-gauge-threshold').selectAll('.path-' + key.toString());
                thresholds.attr('d', function(d) {
                    return ArcService.computeArc(
                      ($scope.internalConfiguration.amplitude * (d / $scope.internalConfiguration.max)) - $scope.internalConfiguration.data.thresholds.amplitude / 2, ($scope.internalConfiguration.amplitude * (d / $scope.internalConfiguration.max)) + $scope.internalConfiguration.data.thresholds.amplitude / 2,
                      $scope.internalConfiguration.max,
                      $scope.internalConfiguration.max,
                      $scope.internalConfiguration.svg.width,
                      $scope.internalConfiguration.svg.height, $scope.internalConfiguration.computeGaugeWidth(d, key)
                    );
                  })
                  .attr('transform', ArcService.computeRotation(
                    $scope.internalConfiguration.startAngle,
                    $scope.internalConfiguration.svg.width,
                    $scope.internalConfiguration.svg.height
                  ));
              });
            }

            $scope._updateLabels($scope.arrangedData[0]);
            TextService.showTextUpdate($scope.internalConfiguration, $scope.widget, $scope.arrangedData);
          };

          $scope.allowUpdate = function(data) {

            var selection = $scope.widget.select('.ark-graphs-gauge-container').selectAll('path').data(data);
            toggle = false;
            selection
              .on('mousemove', function(d, i) {
                if (!toggle) {
                  toggle = true;
                  $scope.mouseoverPath(this, $scope.internalConfiguration.computeGaugeWidth(d, i), d, i);
                }
                $scope.coordinate = d3.mouse($scope.widget.select('.ark-graphs-gauge-container')[0][0]);
                $scope.mousemovePath(d, i);
              })
              .on('mouseout', function(d, i) {
                toggle = false;
                $scope.mouseoutPath(this, $scope.internalConfiguration.computeGaugeWidth(d, i), d, i);
              });
            $scope.previousData = angular.copy(data);
          };

          $scope.setMiddleLabelFont = function(fontsize) {
            $scope.internalConfiguration.label.fontsize = fontsize;
          };

          $scope.setMiddleLabel = function() {
            //Middle label
            $scope.widget.select('.ark-graphs-gauge-middle-label').select('text')
              .attr('font-size', $scope.internalConfiguration.label.fontsize + 'px');
          };

          $scope._updateLabels = function(data) {
            if ($scope.internalConfiguration.label.display) {
              $scope.widget.select('.ark-graphs-gauge-middle-label').select('text')
                .attr('opacity', 0.2)
                .transition()
                .duration($scope.internalConfiguration.transitions.label)
                .attr('opacity', 1)
                .text($scope.internalConfiguration.label.format(data));

              if ($scope.internalConfiguration.label.symbol.display) {
                $scope.widget.select('.ark-graphs-gauge-middle-label-symbol')
                  .text(data);
              }
              if ($scope.internalConfiguration.svg.icon.display) {
                $scope.widget.select('.ark-graphs-gauge-span')
                  .style('top', ($scope.internalConfiguration.svg.height / 1.55).toString() + 'px')
                  .style('font-size', ($scope.internalConfiguration.label.fontsize / 2).toString() + 'px')
                  .style('display', 'inline-block');
              }
            }
          };

          $scope.mouseoverPath = function(elem, gaugeWidth, d, i) {
            if ($scope.internalConfiguration.hover.apply) {
              var interpolateGaugeMiddle = d3.interpolate(gaugeWidth, gaugeWidth + $scope.internalConfiguration.hover.growBy / 2);
              var interpolateGaugeWidth = d3.interpolate($scope.internalConfiguration.strokeWidth, $scope.internalConfiguration.strokeWidth + $scope.internalConfiguration.hover.growBy);
              d3.select(elem).transition()
                .duration(200)
                .attrTween('d', function() {
                  return function(t) {
                    return ArcService.computeArc(
                      0,
                      $scope.internalConfiguration.amplitude,
                      d,
                      $scope.internalConfiguration.max,
                      $scope.internalConfiguration.svg.width,
                      $scope.internalConfiguration.svg.height,
                      interpolateGaugeMiddle(t)
                    );
                  };
                })
                .duration(200)
                .attrTween('stroke-width', function() {
                  return function(t) {
                    return interpolateGaugeWidth(t);
                  };
                });

              if ($scope.internalConfiguration.data.thresholds.display) {
                var thresholds = $scope.widget.select('.ark-graphs-gauge-threshold').selectAll('.ark-graphs-gauge-threshold-path-' + i.toString());
                thresholds
                  .transition()
                  .duration(200)
                  .attr('d', function(d) {
                    return ArcService.computeArc(
                      $scope.internalConfiguration.amplitude * (d / $scope.internalConfiguration.max) - $scope.internalConfiguration.data.thresholds.amplitude / 2,
                      $scope.internalConfiguration.amplitude * (d / $scope.internalConfiguration.max) + $scope.internalConfiguration.data.thresholds.amplitude / 2,
                      $scope.internalConfiguration.max,
                      $scope.internalConfiguration.max,
                      $scope.internalConfiguration.svg.width,
                      $scope.internalConfiguration.svg.height,
                      gaugeWidth + (($scope.arrangedData[i] > d) ? $scope.internalConfiguration.hover.growBy / 2 : 0)
                    );
                  })
                  .attrTween('stroke-width', function(d) {
                    var interpolateStrokeWidth = d3.interpolate($scope.internalConfiguration.strokeWidth, $scope.internalConfiguration.strokeWidth + $scope.internalConfiguration.hover.growBy);
                    return function(t) {
                      return ($scope.arrangedData[i] > d ? interpolateStrokeWidth(t) : $scope.internalConfiguration.strokeWidth);
                    };
                  });
              }
            }
          };

          $scope.mousemovePath = function(d, i) {
            if ($scope.internalConfiguration.tooltip.display) {
              TooltipService.setCoordinates($scope.tooltip, $scope.coordinate[0], $scope.coordinate[1]);
              TooltipService.showTooltip($scope.tooltip, d, i, ThresholdService.getDataColor(d, $scope.internalConfiguration), ConfigService.getData(i, $scope.internalConfiguration.data.labels));
            }
          };

          $scope.mouseoutPath = function(elem, gaugeWidth, d, i) {
            var interpolateGaugeMiddle = d3.interpolate(gaugeWidth + $scope.internalConfiguration.hover.growBy / 2, gaugeWidth);
            var interpolateGaugeWidth = d3.interpolate($scope.internalConfiguration.strokeWidth + $scope.internalConfiguration.hover.growBy, $scope.internalConfiguration.strokeWidth);
            if ($scope.internalConfiguration.hover.apply) {
              d3.select(elem).transition()
                .duration(200)
                .attrTween('d', function() {
                  return function(t) {
                    return ArcService.computeArc(
                      0,
                      $scope.internalConfiguration.amplitude,
                      d,
                      $scope.internalConfiguration.max,
                      $scope.internalConfiguration.svg.width,
                      $scope.internalConfiguration.svg.height,
                      interpolateGaugeMiddle(t)
                    );
                  };
                })
                .attrTween('stroke-width', function() {
                  return function(t) {
                    return interpolateGaugeWidth(t);
                  };
                });

              if ($scope.internalConfiguration.data.thresholds.display) {
                var thresholds = $scope.widget.select('.ark-graphs-gauge-threshold').selectAll('.ark-graphs-gauge-threshold-path-' + i.toString());
                thresholds
                  .transition()
                  .duration(200)
                  .attr('d', function(d) {
                    return ArcService.computeArc(
                      ($scope.internalConfiguration.amplitude * (d / $scope.internalConfiguration.max)) - $scope.internalConfiguration.data.thresholds.amplitude / 2, ($scope.internalConfiguration.amplitude * (d / $scope.internalConfiguration.max)) + $scope.internalConfiguration.data.thresholds.amplitude / 2,
                      $scope.internalConfiguration.max,
                      $scope.internalConfiguration.max,
                      $scope.internalConfiguration.svg.width,
                      $scope.internalConfiguration.svg.height,
                      gaugeWidth
                    );
                  })
                  .attr('stroke-width', $scope.internalConfiguration.strokeWidth);
              }

            }
            if ($scope.internalConfiguration.tooltip.display) {
              TooltipService.hideTooltip($scope.tooltip);
            }
          };

          $scope.init = function() {
            $scope.widget = d3.select(element[0]);
            $scope.widget.selectAll('*').remove();

            $scope.widget.append('div')
              .attr('class', 'ark-graphs-gauge-div')
              .attr('id', $scope.internalConfiguration.id)
              .style('width', $scope.internalConfiguration.div.width.toString() + 'px')
              .style('height', $scope.internalConfiguration.div.height.toString() + 'px')
              .style('padding-top', $scope.internalConfiguration.div.padding.top.toString() + 'px')
              .style('white-space', 'nowrap')
              .style('position', 'relative');

            if ($scope.internalConfiguration.svg.icon.display) {
              $scope.widget.select('.ark-graphs-gauge-div')
                .append('span')
                .attr('class', 'ark-graphs-gauge-span')
                .style('position', 'absolute')
                .style('text-align', 'center')
                .style('width', '100%');
            }

            $scope.widget.select('.ark-graphs-gauge-div')
              .append('svg')
              .attr('class', 'ark-graphs-gauge-svg')
              .attr('width', $scope.internalConfiguration.div.width)
              .attr('height', $scope.internalConfiguration.svg.height);

            if ($scope.internalConfiguration.background.display) {
              //Setting background
              $scope.widget.select('.ark-graphs-gauge-svg')
                .append('g')
                .attr('class', 'ark-graphs-gauge-background').selectAll('path').data($scope.internalConfiguration.maxData)
                .enter()
                .append('path')
                .attr('d', function(d, i) {
                  return ArcService.computeArc(
                    0,
                    $scope.internalConfiguration.amplitude,
                    $scope.internalConfiguration.max,
                    $scope.internalConfiguration.max,
                    $scope.internalConfiguration.svg.width,
                    $scope.internalConfiguration.svg.height, $scope.internalConfiguration.computeGaugeWidth(d, i) + $scope.internalConfiguration.background.offset
                  );
                })
                .attr('opacity', $scope.internalConfiguration.background.opacity)
                .attr('fill', 'none')
                .attr('transform', ArcService.computeRotation(
                  $scope.internalConfiguration.startAngle,
                  $scope.internalConfiguration.svg.width,
                  $scope.internalConfiguration.svg.height
                ))
                .attr('stroke', $scope.internalConfiguration.background.color)
                .attr('stroke-width', $scope.internalConfiguration.background.strokeWidth);
            }

            if ($scope.internalConfiguration.label.display) {
              //Middle label
              $scope.widget.select('.ark-graphs-gauge-svg')
                .append('g')
                .attr('class', 'ark-graphs-gauge-middle-label')
                .append('text')
                .text($scope.internalConfiguration.label.format(0))
                .attr('x', $scope.internalConfiguration.svg.width / 2)
                .attr('y', $scope.internalConfiguration.svg.height / 2)
                .attr('opacity', $scope.internalConfiguration.label.opacity)
                .attr('font-size', $scope.internalConfiguration.label.fontsize + 'px')
                .attr('fill', $scope.internalConfiguration.label.color)
                .style('dominant-baseline', 'middle')
                .style('text-anchor', 'middle');
              if ($scope.internalConfiguration.label.symbol.display) {
                $scope.widget.select('.ark-graphs-gauge-svg')
                  .append('g')
                  .attr('class', 'ark-graphs-gauge-middle-label-symbol')
                  .append('text')
                  .text($scope.internalConfiguration.label.symbol.format(0))
                  .attr('x', $scope.internalConfiguration.svg.width / 2)
                  .attr('y', $scope.internalConfiguration.svg.height / 2 + $scope.internalConfiguration.label.fontsize)
                  .attr('opacity', $scope.internalConfiguration.label.symbol.opacity)
                  .attr('font-size', $scope.internalConfiguration.label.symbol.fontsize + 'px')
                  .attr('fill', $scope.internalConfiguration.label.symbol.color)
                  .style('text-anchor', 'middle');
              }
            }

            //Main widget content
            $scope.widget.select('.ark-graphs-gauge-svg')
              .append('g')
              .attr('class', 'ark-graphs-gauge-container');

            if ($scope.internalConfiguration.data.thresholds.display) {
              //Display thresholds
              $scope.widget.select('.ark-graphs-gauge-svg')
                .append('g')
                .attr('class', 'ark-graphs-gauge-threshold');
              ThresholdService.initThresholdValues($scope.internalConfiguration);
            }

            TextService.showText($scope.internalConfiguration, $scope.widget, $scope.previousData);

            TooltipService.initTooltip($scope, 'gauge');
          };

          if ($scope.internalConfiguration.autoresize) {
            Utils.resize($scope.internalConfiguration, element);
          }

          $scope.init();

          //Check for resizing
          $scope.$watch(function() {
            var e = angular.element(element[0].parentElement);
            return Utils.getTrueWidth(e[0]);
          }, function() {
            if ($scope.internalConfiguration.autoresize) {
              Utils.resize($scope.internalConfiguration, element);
              $scope.init();
              $scope.draw($scope.data);
            }
          }, true);

          //Check for text overflow
          $scope.$watch(function() {
            var a = element[0].querySelector('.ark-graphs-gauge-middle-label text');
            if (a === null) {
              return $scope.internalConfiguration.radius * 2;
            }
            return a.getBoundingClientRect().width;
          }, function(newVal) {
            if (newVal > $scope.internalConfiguration.radius * 2 * (0.9 - 0.1 * $scope.internalConfiguration.numberOfData)) {
              $scope.setMiddleLabelFont($scope.internalConfiguration.label.fontsize / 2);
              $scope.setMiddleLabel();
            }

            if ($scope.internalConfiguration.label.maxFontsize > $scope.internalConfiguration.label.fontsize) {
              if (newVal < $scope.internalConfiguration.radius * 2 * (0.7 - 0.1 * $scope.internalConfiguration.numberOfData)) {
                $scope.setMiddleLabelFont($scope.internalConfiguration.label.fontsize * 1.5);
                $scope.setMiddleLabel();
              }
            }
          });

          //Check for changes in internalConfiguration
          $scope.$watch('configuration', function() {
            $scope.internalConfiguration.update($scope.configuration);
            $scope.init();
            $scope.draw($scope.data);
          }, true);

          $scope.$watch('data', function(newVals) {
            if (newVals !== undefined) {
              return $scope.draw(newVals);
            }
          });
        }
      };
    }
  ]);

'use strict';

angular.module('ark.graphs.gauge')
  .factory('ark.graphs.gauge-config', ['ark.graphs.color-service', 'ark.graphs.utils',
    'ark.graphs.config-service',
    function(ColorService, Utils, ConfigService) {
      var GaugeConfiguration = function(configuration) {
        this.type = 'gauge';
        this.id = Utils.generateID(this.type);
        this.initialValues = [];
        this.max = 100;
        this.startAngle = -150;
        this.amplitude = 300;
        this.strokeWidth = 8;
        this.radius = 69;
        this.numberOfDataSet = 1;
        this.numberOfData = this.numberOfDataSet;
        this.autoresize = false;

        this.radiusRule = {
          apply: true,
          rule: function(value, index, initialRadius, initialWidth) {
            return initialRadius - index * initialWidth * 1.5;
          }
        };

        this.svg = {
          height: this.radius * 2 + this.strokeWidth / 2 + 26,
          width: 208,
          padding: {
            top: 9
          },
          icon: {
            display: true
          }
        };

        this.legend = {
          display: true,
          fontsize: 12,
          height: 72,
          width: this.svg.width,
          title: ['Metric name'],
          format: function(d, i) {
            return d;
          },
          letters: {
            display: false
          },
          padding: {
            top: 10,
            left: 20,
            right: 20
          },
          icon: {
            display: true,
            minValue: 50
          }
        };

        this.data = {
          labels: ['data 0'],
          thresholds: {
            display: true,
            values: [75],
            strokeWidth: 8,
            amplitude: 1,
            opacity: 1,
            statusColors: ColorService.getStatusColors(2),
            barColor: '#C4CDD6',
            barColorOver: '#FFF',
            aboveGauge: false,
            comparator: function(value, threshold) {
              return value < threshold;
            }
          }
        };

        this.tooltip = {
          display: true,
          format: function(value, index, color, name) {
            return '<table class="ark-graphs-gauge-tooltip"><tbody><tr class="ark-graphs-gauge-tooltip-name-data"><td class="name"><span class="ark-graphs-gauge-tooltip-square" style="background-color: ' + color + ';"></span><text class="name-container">' + name + '</text></td><td class="value">' + value + '</td></tr></tbody></table>';
          }
        };

        this.hover = {
          apply: true,
          growBy: 2
        };

        this.background = {
          display: true,
          color: '#E3E9EF',
          strokeWidth: 2,
          opacity: 1,
          offset: this.strokeWidth / 2
        };

        this.label = {
          display: true,
          fontsize: 32,
          maxFontsize: 32,
          color: 'black',
          format: function(value) {
            return value + '%';
          },
          opacity: 1,
          symbol: {
            display: true,
            fontsize: 20,
            color: 'black',
            format: function() {
              return '';
            },
            opacity: 1
          }
        };

        this.transitions = {
          arc: 1000,
          label: 500,
          thresholds: 1000
        };

        this.autosnap = {
          enabled: false,
          threshold: 516,
          smallConfig: {
            radius: 69,
            svg: {
              width: 208
            },
            strokeWidth: 8,
            label: {
              fontsize: 32,
              maxFontsize: 32
            },
            legend: {
              fontsize: 12,
              height: 72,
              width: 208,
              padding: {
                top: 10,
                left: 20,
                right: 20
              }
            },
            data: {
              thresholds: {
                strokeWidth: 8
              }
            }
          },
          largeConfig: {
            radius: 124,
            svg: {
              width: 516
            },
            strokeWidth: 12,
            label: {
              fontsize: 48,
              maxFontsize: 48
            },
            thresholds: {
              strokeWidth: 12
            },
            legend: {
              fontsize: 14,
              height: 160,
              width: 260,
              padding: {
                top: 20,
                left: 24,
                right: 24
              }
            },
            data: {
              thresholds: {
                strokeWidth: 12
              }
            }
          }
        };

        this.update(configuration);
      };

      GaugeConfiguration.prototype.update = function(configuration) {
        Utils.mergeRecursive(this, configuration);

        this.maxData = [];
        this.multiThreshold = [];
        this.svg.height = this.radius * 2 + this.strokeWidth / 2 + 26;
        this.div = {
          width: this.svg.width,
          height: this.svg.height + (this.legend.display ? this.legend.height : 0),
          padding: {
            top: this.svg.padding.top
          }
        };

        var i = 0;
        for (i = 0; i < this.numberOfData; i++) {
          this.maxData.push(this.max);
        }

        ConfigService.getStatusColors(this);
        ConfigService.updateInitialValues(this);
        ConfigService.updateLegendLabels(this);
        ConfigService.updateTooltipLabels(this);
      };

      GaugeConfiguration.prototype.computeGaugeWidth = function(d, i) {
        if (this.radiusRule.apply) {
          return this.radiusRule.rule(d, i, this.radius - this.strokeWidth / 2, this.strokeWidth);
        } else {
          return (this.radius - this.strokeWidth / 2);
        }
      };

      return GaugeConfiguration;
    }
  ]);

'use strict';

angular.module('ark.graphs.line-graph')
  .directive('arkLineGraph', ['ark.graphs.line-graph-config', 'ark.graphs.text-service',
    'ark.graphs.line-service', 'ark.graphs.d3', 'ark.graphs.utils', 'ark.graphs.tooltip-service',
    function(LineGraphConfiguration, TextService, LineService, d3, Utils, TooltipService) {
      return {
        restrict: 'E',
        scope: {
          configuration: '=',
          data: '='
        },
        link: function($scope, element) {
          $scope.internalConfiguration = new LineGraphConfiguration($scope.configuration, $scope.data);

          $scope.init = function() {

            $scope.widget = d3.select(element[0]);
            $scope.widget.selectAll('*').remove();

            $scope.widget.append('div')
              .attr('class', 'ark-graphs-line-graph-div')
              .attr('id', $scope.internalConfiguration.id)
              .style('width', $scope.internalConfiguration.div.width.toString() + 'px')
              .style('height', $scope.internalConfiguration.div.height.toString() + 'px')
              .style('position', 'relative')
              .style('white-space', 'nowrap');

            $scope.widget.select('.ark-graphs-line-graph-div')
              .append('svg')
              .attr('class', 'ark-graphs-line-graph-svg')
              .attr('width', $scope.internalConfiguration.svg.width)
              .attr('height', $scope.internalConfiguration.svg.height);

            $scope.widget.select('.ark-graphs-line-graph-svg')
              .append('g')
              .attr('class', 'ark-graphs-line-graph-svg-inner')
              .attr('transform', ['translate(', 0, ',', $scope.internalConfiguration.padding.top, ')'].join(' '));

            // clip path to crops graph
            $scope.widget.select('.ark-graphs-line-graph-svg-inner')
              .append('defs')
              .append('clipPath')
              .attr('id', 'ark-graphs-line-graph-clipPath-' + $scope.internalConfiguration.id)
              .append('rect')
              .attr('x', 0)
              .attr('y', -$scope.internalConfiguration.padding.top)
              .attr('width', $scope.internalConfiguration.graphWidth)
              .attr('height', $scope.internalConfiguration.graphHeight + $scope.internalConfiguration.padding.top + $scope.internalConfiguration.svg.xAxis.tickUnitHeight + $scope.internalConfiguration.svg.xAxis.labelUnitHeight);

            if ($scope.internalConfiguration.brush.activated) {
              $scope.widget.select('.ark-graphs-line-graph-svg-inner')
                .append('g')
                .attr('transform', ['translate(', $scope.internalConfiguration.marginLeft, 0, ')'].join(' '))
                .attr('id', 'ark-graphs-line-graph-brush-' + $scope.internalConfiguration.id)
                .attr('class', 'ark-graphs-line-graph-brush');
            }

            $scope.widget.select('.ark-graphs-line-graph-svg-inner')
              .append('g')
              .attr('class', 'ark-graphs-line-graph-container')
              .attr('transform', ['translate(', $scope.internalConfiguration.marginLeft, 0, ')'].join(' '));

            $scope.container = $scope.widget.select('.ark-graphs-line-graph-svg-inner').select('.ark-graphs-line-graph-container');

            if ($scope.internalConfiguration.svg.yAxis.guidelines.display) {
              $scope.container
                .append('g')
                .attr('class', 'ark-graphs-line-graph-y-axis-guidelines');
            }

            if ($scope.internalConfiguration.svg.xAxis.guidelines.display) {
              $scope.container
                .append('g')
                .attr('class', 'ark-graphs-line-graph-x-axis-guidelines')
                .style('clip-path', 'url(#ark-graphs-line-graph-clipPath-' + $scope.internalConfiguration.id + ')');
            }

            $scope.container
              .append('g')
              .attr('class', 'ark-graphs-line-graph-y-axis');

            $scope.container
              .append('g')
              .attr('class', 'ark-graphs-line-graph-x-axis')
              .style('clip-path', 'url(#ark-graphs-line-graph-clipPath-' + $scope.internalConfiguration.id + ')');

            $scope.container
              .append('g')
              .attr('class', 'ark-graphs-line-graph-data')
              .style('clip-path', 'url(#ark-graphs-line-graph-clipPath-' + $scope.internalConfiguration.id + ')')
              .append('g')
              .attr('class', 'ark-graphs-line-graph-dataLines');

            $scope.container.select('.ark-graphs-line-graph-data')
              .append('g')
              .attr('class', 'ark-graphs-line-graph-circles');

            $scope.container.select('.ark-graphs-line-graph-data')
              .append('g')
              .attr('class', 'ark-graphs-line-graph-text');

            // START generating stuff

            // display guidelines on y axis
            if ($scope.internalConfiguration.svg.yAxis.guidelines.display) {
              $scope.container.select('.ark-graphs-line-graph-y-axis-guidelines').selectAll('path').data($scope.internalConfiguration.graphYLocation)
                .enter()
                .append('path')
                .attr('d', function(d) {
                  return LineService.computeLine(0, d, $scope.internalConfiguration.graphWidth, d);
                })
                .attr('stroke', $scope.internalConfiguration.svg.yAxis.guidelines.color)
                .attr('opacity', $scope.internalConfiguration.svg.yAxis.guidelines.opacity)
                .attr('stroke-width', $scope.internalConfiguration.svg.yAxis.guidelines.strokeWidth);
            }

            // display y axis
            $scope.container.select('.ark-graphs-line-graph-y-axis').selectAll('path').data($scope.internalConfiguration.graphYLocation)
              .enter()
              .append('path')
              .attr('class', 'ark-graphs-line-graph-y-guidelines-all')
              .attr('d', function(d) {
                return LineService.computeLine(0, d, -$scope.internalConfiguration.svg.yAxis.axisLine.tickLineSize, d);
              })
              .attr('stroke', $scope.internalConfiguration.svg.yAxis.axisLine.color)
              .attr('stroke-width', $scope.internalConfiguration.svg.yAxis.axisLine.strokeWidth);

            $scope.container.select('.ark-graphs-line-graph-y-axis')
              .append('path')
              .attr('class', 'ark-graphs-line-graph-y-guidelines-all')
              .attr('d', LineService.computeLine(0, 0, 0, $scope.internalConfiguration.graphHeight))
              .attr('stroke', $scope.internalConfiguration.svg.yAxis.axisLine.color)
              .attr('stroke-width', $scope.internalConfiguration.svg.yAxis.axisLine.strokeWidth);

            // display y axis ticks
            if ($scope.internalConfiguration.svg.yAxis.tick.show) {
              $scope.widget.select('.ark-graphs-line-graph-svg-inner')
                .append('g')
                .attr('class', 'ark-graphs-line-graph-y-tick-group').selectAll('g').data($scope.internalConfiguration.graphYLocation)
                .enter()
                .append('g')
                .attr('class', 'ark-graphs-line-graph-y-tick')
                .attr('transform', ['translate(', $scope.internalConfiguration.svg.yAxis.tick.fontsize - $scope.internalConfiguration.svg.yAxis.axisLine.tickLineSize, -$scope.internalConfiguration.svg.yAxis.tick.fontsize / 6, ')'].join(' '))
                .append('text')
                .attr('text-anchor', 'end')
                .text(function(d, i) {
                  return $scope.internalConfiguration.svg.yAxis.tick.ticks[i];
                })
                .attr('x', $scope.internalConfiguration.svg.yAxis.labelUnitHeight + $scope.internalConfiguration.svg.yAxis.tickUnitHeight / 2)
                .attr('y', function(d) {
                  return d + $scope.internalConfiguration.svg.yAxis.tick.fontsize / 2;
                });
            }

            // display guidelines on x axis
            if ($scope.internalConfiguration.svg.xAxis.guidelines.display) {
              $scope.widget.select('.ark-graphs-line-graph-x-axis-guidelines').selectAll('path').data($scope.internalConfiguration.graphXLocation)
                .enter()
                .append('path')
                .attr('id', function(d, i) {
                  return 'ark-graphs-line-graph-x-guidelines-' + i.toString();
                })
                .attr('class', 'ark-graphs-line-graph-x-guidelines-all')
                .attr('d', function(d) {
                  return LineService.computeLine(d, 0, d, $scope.internalConfiguration.graphHeight);
                })
                .attr('stroke', $scope.internalConfiguration.svg.xAxis.guidelines.unselectedColor)
                .attr('opacity', $scope.internalConfiguration.svg.xAxis.guidelines.opacity)
                .attr('stroke-width', $scope.internalConfiguration.svg.xAxis.guidelines.strokeWidth);
            }

            // display x axis
            $scope.container.select('.ark-graphs-line-graph-x-axis').selectAll('path').data($scope.internalConfiguration.graphXLocation)
              .enter()
              .append('path')
              .attr('id', function(d, i) {
                return 'ark-graphs-line-graph-x-lines-' + i.toString();
              })
              .attr('class', 'ark-graphs-line-graph-x-lines')
              .attr('d', function(d) {
                return LineService.computeLine(d, $scope.internalConfiguration.graphHeight, d, $scope.internalConfiguration.graphHeight + $scope.internalConfiguration.svg.xAxis.axisLine.tickLineSize);
              })
              .attr('stroke', $scope.internalConfiguration.svg.xAxis.axisLine.color)
              .attr('stroke-width', $scope.internalConfiguration.svg.xAxis.axisLine.strokeWidth);

            $scope.container.select('.ark-graphs-line-graph-x-axis')
              .append('path')
              .attr('d', LineService.computeLine(0, $scope.internalConfiguration.graphHeight, $scope.internalConfiguration.graphWidth, $scope.internalConfiguration.graphHeight))
              .attr('stroke', $scope.internalConfiguration.svg.xAxis.axisLine.color)
              .attr('stroke-width', $scope.internalConfiguration.svg.xAxis.axisLine.strokeWidth);

            // display x axis ticks
            if ($scope.internalConfiguration.svg.xAxis.tick.show) {
              $scope.widget.select('.ark-graphs-line-graph-svg-inner')
                .append('g')
                .attr('class', 'ark-graphs-line-graph-x-tick-group')
                .attr('transform', ['translate(', $scope.internalConfiguration.marginLeft, 0, ')'].join(' '))
                .style('clip-path', 'url(#ark-graphs-line-graph-clipPath-' + $scope.internalConfiguration.id + ')')
                .selectAll('g').data($scope.internalConfiguration.graphXLocation)
                .enter()
                .append('g')
                .attr('class', 'ark-graphs-line-graph-x-tick')
                .append('text')
                .attr('text-anchor', 'middle')
                .text(function(d, i) {
                  return $scope.internalConfiguration.svg.xAxis.tick.ticks[i];
                })
                .attr('x', function(d) {
                  return d;
                })
                .attr('y', $scope.internalConfiguration.graphHeight + $scope.internalConfiguration.svg.xAxis.axisLine.tickLineSize + $scope.internalConfiguration.svg.xAxis.tickUnitHeight / 2);
            }

            // generate data
            angular.forEach($scope.data, function(value, key) {

              //generate CIRCLES
              $scope.container.select('.ark-graphs-line-graph-circles').selectAll('.ark-graphs-line-graph-node-dataset-' + key.toString()).data($scope.internalConfiguration.graphXLocation)
                .enter()
                .append('circle')
                .attr('class', function(d, i) {
                  return 'ark-graphs-line-graph-nodes ark-graphs-line-graph-node-dataset-' + key.toString() + ' ark-graphs-line-graph-node-' + i.toString();
                })
                .attr('id', function(d, i) {
                  return 'ark-graphs-line-graph-node-' + key.toString() + '-' + i.toString();
                })
                .attr('fill', $scope.internalConfiguration.data.colors[key])
                .attr('r', $scope.internalConfiguration.data.circles.rUnselected)
                .attr('cx', function(d) {
                  return d;
                })
                .attr('cy', function(d, i) {
                  return $scope.internalConfiguration.getY($scope.data[key][i]);
                });

              //generate TEXT
              if ($scope.internalConfiguration.data.showValue) {
                $scope.container.select('.ark-graphs-line-graph-text').selectAll('#ark-graphs-line-graph-text-' + key.toString()).data($scope.internalConfiguration.graphXLocation)
                  .enter()
                  .append('g')
                  .attr('class', function(d, i) {
                    return 'ark-graphs-line-graph-text-dataset-' + key.toString() + ' ark-graphs-line-graph-text-' + i.toString();
                  })
                  .attr('id', function(d, i) {
                    return 'ark-graphs-line-graph-text-' + key.toString() + '-' + i.toString();
                  })
                  .append('text')
                  .text(function(d, i) {
                    return $scope.data[key][i];
                  })
                  .attr('text-anchor', $scope.internalConfiguration.data.text.textAnchor)
                  .attr('x', function(d) {
                    return d;
                  })
                  .attr('y', function(d, i) {
                    return $scope.internalConfiguration.getY($scope.data[key][i]) - $scope.internalConfiguration.svg.fontsize / 2;
                  });
              }

              //generate LINES
              $scope.widget.select('.ark-graphs-line-graph-dataLines').selectAll('.ark-graphs-line-graph-node-dataLine-' + key.toString()).data($scope.internalConfiguration.graphXLocationSlice)
                .enter()
                .append('path')
                .attr('class', function(d, i) {
                  return 'ark-graphs-line-graph-node-dataLine-dataset-' + key.toString() + ' ark-graphs-line-graph-node-dataLine-' + i.toString() + '-' + (i + 1).toString();
                })
                .attr('id', function(d, i) {
                  return 'ark-graphs-line-graph-node-dataLine' + key.toString() + '-' + i.toString() + '-' + (i + 1).toString();
                })
                .attr('stroke', $scope.internalConfiguration.data.colors[key])
                .attr('stroke-width', $scope.internalConfiguration.data.lines.strokeWidth)
                .attr('d', function(d, i) {
                  var yPrev = $scope.internalConfiguration.getY($scope.data[key][i]);
                  var y = $scope.internalConfiguration.getY($scope.data[key][i + 1]);
                  if (i === 0) {
                    return LineService.computeLine($scope.internalConfiguration.graphXLocation[0], yPrev, d, y);
                  } else {
                    return LineService.computeLine($scope.internalConfiguration.graphXLocation[i], yPrev, d, y);
                  }
                });
            });

            // show y axis label
            $scope.widget.select('.ark-graphs-line-graph-svg-inner')
              .append('g')
              .attr('class', '.ark-graphs-line-graph-y-label')
              .append('text')
              .attr('text-anchor', 'middle')
              .attr('transform', ['translate(', $scope.internalConfiguration.svg.fontsize, 0, ')', 'rotate(', -90, 0, $scope.internalConfiguration.graphHeight / 2, ')'].join(' '))
              .attr('x', 0)
              .attr('y', $scope.internalConfiguration.graphHeight / 2)
              .text($scope.internalConfiguration.svg.yAxis.label)
              .style('font-weight', 'bold');

            // show x axis label
            $scope.widget.select('.ark-graphs-line-graph-svg-inner')
              .append('g')
              .attr('class', '.ark-graphs-line-graph-x-label')
              .append('text')
              .attr('text-anchor', 'middle')
              .attr('transform', ['translate(', $scope.internalConfiguration.marginLeft, -$scope.internalConfiguration.svg.fontsize, ')'].join(' '))
              .attr('x', $scope.internalConfiguration.graphWidth / 2)
              .attr('y', $scope.internalConfiguration.graphHeight + $scope.internalConfiguration.svg.xAxis.tickUnitHeight + $scope.internalConfiguration.svg.xAxis.labelUnitHeight / 2 + $scope.internalConfiguration.svg.fontsize / 2)
              .text($scope.internalConfiguration.svg.xAxis.label)
              .style('font-weight', 'bold');

            // show legend
            TextService.showTextChart($scope.internalConfiguration, $scope.widget, $scope.data);

            // show tooltip
            TooltipService.initTooltip($scope, 'line-graph');

            // brush initilization
            $scope.x = d3.scale.linear().range([0, $scope.internalConfiguration.graphWidth]).domain([0, $scope.internalConfiguration.graphWidth]);

            if ($scope.internalConfiguration.brush.activated) {
              $scope.brush = d3.svg.brush()
                .x($scope.x)
                .on('brush', $scope.brushmove)
                .on('brushend', $scope.brushend);

              $scope.widget.select('#ark-graphs-line-graph-brush-' + $scope.internalConfiguration.id)
                .call($scope.brush)
                .selectAll('rect')
                .attr('height', $scope.internalConfiguration.graphHeight);
            }

            $scope.transitioning = false;
          };

          $scope.brushmove = function() {
            if ($scope.internalConfiguration.tooltip.display) {
              TooltipService.hideTooltip($scope.tooltip);
            }

            var extent = $scope.brush.extent();

            angular.forEach($scope.data, function(value, key) {
              $scope.widget.selectAll('.ark-graphs-line-graph-node-dataset-' + key.toString()).data($scope.internalConfiguration.graphXLocation)
                .classed('selected', function(d) {
                  return extent[0] <= d && d <= extent[1];
                });

              $scope.widget.selectAll('.ark-graphs-line-graph-text-dataset-' + key.toString()).data($scope.internalConfiguration.graphXLocation)
                .classed('selected', function(d) {
                  return extent[0] <= d && d <= extent[1];
                });

              $scope.widget.selectAll('.ark-graphs-line-graph-node-dataLine-dataset-' + key.toString()).data($scope.internalConfiguration.graphXLocationSlice)
                .classed('selected', function(d, i) {
                  return extent[0] <= $scope.internalConfiguration.graphXLocation[i] && d <= extent[1];
                });

            });

            $scope.widget.select('.ark-graphs-line-graph-x-tick-group').selectAll('.ark-graphs-line-graph-x-tick').data($scope.internalConfiguration.graphXLocation)
              .classed('selected', function(d) {
                return extent[0] <= d && d <= extent[1];
              });
            $scope.widget.selectAll('.ark-graphs-line-graph-x-lines').data($scope.internalConfiguration.graphXLocation)
              .classed('selected', function(d) {
                return extent[0] <= d && d <= extent[1];
              });
            $scope.widget.select('.ark-graphs-line-graph-x-axis-guidelines').selectAll('path').data($scope.internalConfiguration.graphXLocation)
              .classed('selected', function(d) {
                return extent[0] <= d && d <= extent[1];
              });
          };

          $scope.brushend = function() {
            if (Math.abs($scope.brush.extent()[0] - $scope.brush.extent()[1]) <= $scope.internalConfiguration.brush.brushMinExtent) {
              $scope.brush.extent([0, $scope.internalConfiguration.graphWidth]);
            }
            $scope.x.domain($scope.brush.extent());
            $scope.transitionData($scope.internalConfiguration.brush.brushTransition.duration);
            $scope.unselectSelected();
            d3.select('#ark-graphs-line-graph-brush-' + $scope.internalConfiguration.id).call($scope.brush.clear());
          };

          $scope.unselectSelected = function() {
            d3.select('#' + $scope.internalConfiguration.id).selectAll('.selected').classed('selected', false);
          };

          $scope.transitionData = function(duration) {
            $scope.mouseoutPath($scope.internalConfiguration.xLoc);
            $scope.transitioning = true;
            angular.forEach($scope.data, function(value, key) {

              //CIRCLESS
              $scope.widget.selectAll('.ark-graphs-line-graph-node-dataset-' + key.toString())
                .transition().duration(duration)
                .attrTween('cy', function(d, i) {
                  var selection = $scope.widget.select('#ark-graphs-line-graph-node-' + key.toString() + '-' + i.toString());
                  var interpolateY1 = d3.interpolate(selection.attr('cy'), $scope.internalConfiguration.getY($scope.data[key][i]));
                  return function(t) {
                    return interpolateY1(t);
                  };
                })
                .attrTween('cx', function(d, i) {
                  var selection = $scope.widget.select('#ark-graphs-line-graph-node-' + key.toString() + '-' + i.toString());
                  var interpolateX1 = d3.interpolate(selection.attr('cx'), $scope.x($scope.internalConfiguration.graphXLocation[i]));
                  return function(t) {
                    return interpolateX1(t);
                  };
                });

              //TEXTS
              $scope.widget.selectAll('.ark-graphs-line-graph-text-dataset-' + key.toString()).select('text')
                .transition().duration(duration)
                .text(function(d, i) {
                  return $scope.data[key][i];
                })
                .attrTween('y', function(d, i) {
                  var selection = $scope.widget.select('#ark-graphs-line-graph-text-' + key.toString() + '-' + i.toString()).select('text');
                  var interpolate = d3.interpolate(selection.attr('y'), $scope.internalConfiguration.getY($scope.data[key][i]) - $scope.internalConfiguration.svg.fontsize / 2);
                  return function(t) {
                    return interpolate(t);
                  };
                })
                .attrTween('x', function(d, i) {
                  var selection = $scope.widget.select('#ark-graphs-line-graph-text-' + key.toString() + '-' + i.toString()).select('text');
                  var interpolate = d3.interpolate(selection.attr('x'), $scope.x($scope.internalConfiguration.graphXLocation[i]));
                  return function(t) {
                    return interpolate(t);
                  };
                });

              //LINES
              $scope.widget.selectAll('.ark-graphs-line-graph-node-dataLine-dataset-' + key.toString())
                .transition().duration(duration)
                .attrTween('d', function(d, i) {
                  var selection = $scope.widget.select('#ark-graphs-line-graph-node-dataLine' + key.toString() + '-' + i.toString() + '-' + (i + 1).toString());
                  var interpolateY1 = d3.interpolate(selection.attr('d').split(' ')[2], $scope.internalConfiguration.getY($scope.data[key][i]));
                  var interpolateY2 = d3.interpolate(selection.attr('d').split(' ')[5], $scope.internalConfiguration.getY($scope.data[key][i + 1]));
                  var interpolateX1 = d3.interpolate(selection.attr('d').split(' ')[1], $scope.x($scope.internalConfiguration.graphXLocation[i]));
                  var interpolateX2 = d3.interpolate(selection.attr('d').split(' ')[4], $scope.x($scope.internalConfiguration.graphXLocation[i + 1]));
                  return function(t) {
                    return LineService.computeLine(interpolateX1(t), interpolateY1(t), interpolateX2(t), interpolateY2(t));
                  };
                });

            });

            $scope.widget.select('.ark-graphs-line-graph-x-tick-group').selectAll('.ark-graphs-line-graph-x-tick').select('text')
              .transition().duration(duration)
              .attr('x', function(d) {
                return $scope.x(d);
              });

            $scope.widget.selectAll('.ark-graphs-line-graph-x-lines')
              .transition().duration(duration)
              .attr('d', function(d) {
                return LineService.computeLine($scope.x(d), $scope.internalConfiguration.graphHeight, $scope.x(d), $scope.internalConfiguration.graphHeight + $scope.internalConfiguration.svg.yAxis.axisLine.tickLineSize);
              });

            $scope.widget.select('.ark-graphs-line-graph-x-axis-guidelines').selectAll('path')
              .transition().duration(duration)
              .attr('d', function(d) {
                return LineService.computeLine($scope.x(d), $scope.internalConfiguration.graphHeight, $scope.x(d), 0);
              })
              .each('end', function() {
                $scope.transitioning = false;
                $scope.updateToolTip();
              });
          };

          $scope.draw = function() {
            $scope.transitionData($scope.internalConfiguration.data.transitions);
          };

          $scope.updateToolTip = function() {
            $scope.widget.select('.ark-graphs-line-graph-svg')
              .on('mousemove', function() {
                var coordinate = d3.mouse(this);
                $scope.mousemovePath('.ark-graphs-line-graph-svg', coordinate);
              })
              .on('mouseout', function() {
                $scope.internalConfiguration.xLoc = d3.event.pageX;
                $scope.mouseoutPath(d3.event.pageX);
              });
          };

          $scope.computeClosestX = function(x) {
            var difference = ($scope.x($scope.internalConfiguration.graphXLocation[1]) - $scope.x($scope.internalConfiguration.graphXLocation[0])) / 2; // assume always greater than one data
            var key = 0;
            var value = '';
            var i = 0;
            for (i = 0; i < $scope.data[0].length; i++) {
              if (Math.abs(Math.round(x) - $scope.x($scope.internalConfiguration.graphXLocation[i])) <= Math.round(difference)) {
                if ($scope.x($scope.internalConfiguration.graphXLocation[i]) <= $scope.internalConfiguration.graphWidth) {
                  value = $scope.x($scope.internalConfiguration.graphXLocation[i]);
                } else {
                  value = '';
                }
                key = i;
              }
            }
            return {
              i: key,
              x: value
            };
          };

          $scope.mousemovePath = function(id, coordinate) {
            $scope.tooltipBox = d3.select('#tooltip-' + $scope.internalConfiguration.id).node().getBoundingClientRect();

            //position of mouse relative to svg
            $scope.keyVal = $scope.computeClosestX(coordinate[0] - $scope.internalConfiguration.marginLeft);
            var x = parseFloat($scope.widget.select('#ark-graphs-line-graph-x-guidelines-' + $scope.keyVal.i).attr('d').split(' ')[1], 10) + $scope.internalConfiguration.marginLeft;
            var y = coordinate[1];

            if ($scope.tooltipBox.width + x > $scope.internalConfiguration.svg.width) {
              x -= $scope.tooltipBox.width + $scope.internalConfiguration.marginLeft - 20;
            }
            if ($scope.tooltipBox.height + y > $scope.internalConfiguration.svg.height) {
              y -= $scope.tooltipBox.height + $scope.internalConfiguration.marginLeft - 20;
            }

            TooltipService.setCoordinates($scope.tooltip, x, y);

            if (typeof $scope.keyVal.x !== 'string' && !$scope.transitioning) {
              TooltipService.showTooltip($scope.tooltip, $scope.data, $scope.keyVal.i, $scope.internalConfiguration.data.colors, $scope.internalConfiguration.data.labels);
            }

            // change node data size based on mouse position
            $scope.widget.selectAll('.ark-graphs-line-graph-nodes')
              .attr('r', 3.5);

            $scope.widget.selectAll('.ark-graphs-line-graph-node-' + $scope.keyVal.i.toString())
              .attr('r', 4);

            // change guideline color based on mouse position
            $scope.widget.selectAll('.ark-graphs-line-graph-x-guidelines-all')
              .attr('stroke', $scope.internalConfiguration.svg.xAxis.guidelines.unselectedColor);

            $scope.widget.select('#ark-graphs-line-graph-x-guidelines-' + $scope.keyVal.i.toString())
              .attr('stroke', $scope.internalConfiguration.svg.xAxis.guidelines.selectedColor);
          };

          $scope.mouseoutPath = function(pageX) {
            if ($scope.internalConfiguration.tooltip.display) {
              TooltipService.hideTooltip($scope.tooltip);
            }
            $scope.keyVal = $scope.computeClosestX(pageX);

            $scope.widget.selectAll('.ark-graphs-line-graph-x-guidelines-all')
              .attr('stroke', $scope.internalConfiguration.svg.xAxis.guidelines.unselectedColor);

            $scope.widget.selectAll('.ark-graphs-line-graph-node-' + $scope.keyVal.i.toString())
              .attr('r', 3.5);
          };

          if ($scope.internalConfiguration.autoresize) {
            Utils.resize($scope.internalConfiguration, element);
          }

          //Check for resizing
          $scope.$watch(function() {
            var e = angular.element(element[0].parentElement);
            return Utils.getTrueWidth(e[0]);
          }, function() {
            if ($scope.internalConfiguration.autoresize) {
              Utils.resize($scope.internalConfiguration, element);
              $scope.init();
              $scope.draw($scope.data);
            }
          }, true);

          $scope.init();

          $scope.$watch('configuration', function() {
            $scope.internalConfiguration.update($scope.configuration);
            $scope.init();
          }, true);

          $scope.$watch('data', function(newVals) {
            if (newVals !== undefined) {
              $scope.draw(newVals);
            }
          });
        }
      };
    }
  ]);

'use strict';

angular.module('ark.graphs.line-graph')
  .factory('ark.graphs.line-graph-config', ['ark.graphs.color-service', 'ark.graphs.utils', 'ark.graphs.config-service', 'ark.graphs.d3',
    function(ColorService, Utils, ConfigService, d3) {
      var LineGraphConfiguration = function(configuration, data) {
        this.type = 'line-graph';
        this.id = Utils.generateID(this.type);
        this.autoresize = false;
        this.numberOfDataSet = data.length;
        this.numberOfData = data.length;

        this.svg = {
          height: 216,
          width: 335,
          fontsize: 12,
          yAxis: {
            label: 'y-axis label (unit)',
            labelUnitHeight: 24,
            tickUnitHeight: 24,
            axisLine: {
              color: 'black',
              tickLineSize: 5,
              strokeWidth: 1
            },
            guidelines: {
              display: true,
              color: '#E3E9EF',
              opacity: 1,
              strokeWidth: 1
            },
            tick: {
              show: true,
              fontsize: 12,
              numOfTicks: 6,
              ticks: []
            }
          },
          xAxis: {
            label: 'x-axis label (unit)',
            labelUnitHeight: 24,
            tickUnitHeight: 24,
            axisLine: {
              color: 'black',
              tickLineSize: 5,
              strokeWidth: 1
            },
            guidelines: {
              display: true,
              unselectedColor: '#E3E9EF',
              selectedColor: '#3F4142',
              opacity: 1,
              strokeWidth: 1
            },
            tick: {
              show: true,
              fontsize: 12,
              ticks: []
            }
          }
        };

        this.padding = {
          top: 0,
          right: 20,
          left: 20
        };

        this.brush = {
          activated: false,
          brushTransition: {
            duration: 1000
          },
          brushMinExtent: 15 // used to zoom out (if extent size is less than this, it will zoom all the way out
        };

        this.data = {
          transitions: 1000,
          colors: ColorService.arkBlueColors(),
          labels: ['data 0'],
          circles: {
            rUnselected: 3.5,
            rSelected: 4.5
          },
          lines: {
            strokeWidth: 1
          },
          text: {
            textAnchor: 'middle'
          },
          showValue: false,
          dataSetLength: data.length,
          dataLength: data[0].length
        };

        this.tooltip = {
          display: true,
          format: function(data, index, colors, names) {
            var tableData = '';

            for (var i = 0; i < data.length; i++) {
              tableData += '<tr class="ark-graphs-line-graph-tooltip-name-data"><td class="name"><span class="ark-graphs-line-graph-tooltip-square" style="background-color: ' + colors[i] + ';"></span><text class="name-container">' + names[i] + '</text></td><td class="value">' + data[i][index] + '</td></tr>';
            }

            return '<table class="ark-graphs-line-graph-tooltip"><tbody><tr><th class="header" colspan="2">' + index + '</th></tr>' + tableData + '</tbody></table>';
          }
        };

        this.legend = {
          display: true,
          height: 20,
          title: ['Key if needed'],
          format: function(d, i) {
            return d;
          }
        };

        this.autosnap = {
          enabled: false,
          threshold: 464,
          smallConfig: {
            svg: {
              width: 335,
              height: 216
            }
          },
          largeConfig: {
            svg: {
              height: 216,
              width: 464
            }
          }
        };

        this.updateMaxMinData(data);

        this.update(configuration, data);
      };

      LineGraphConfiguration.prototype.update = function(configuration) {
        Utils.mergeRecursive(this, configuration);

        this.marginLeft = this.svg.yAxis.labelUnitHeight + this.svg.yAxis.tickUnitHeight;
        this.marginBottom = this.svg.xAxis.labelUnitHeight + this.svg.xAxis.tickUnitHeight;

        this.graphWidth = this.svg.width - this.marginLeft;
        this.graphHeight = this.svg.height - this.marginBottom;

        this.div = {
          height: this.svg.height + (this.legend.display ? this.legend.height : 0),
          width: this.svg.width
        };

        this.legend.width = this.svg.width;

        this.padding.top = 4 + this.svg.fontsize;

        ConfigService.updateLegendLabels(this);
        ConfigService.updateTooltipLabels(this);

        this.generateDataColor(this.data.dataSetLength);
        this.updateTickX(this.data.dataLength);
        this.updateTickY();

      };

      LineGraphConfiguration.prototype.generateDataColor = function(n) {
        if (n !== this.data.colors.length) {
          for (var i = this.data.colors.length; i < n; i++) {
            this.data.colors.push('#' + (Math.random() * 0xFFFFFF).toString(16));
          }
        }
      };

      LineGraphConfiguration.prototype.updateTickX = function(n) {
        if (n !== this.svg.xAxis.tick.ticks.length) {
          this.svg.xAxis.tick.ticks = [];
          for (var i = 0; i < n; i++) {
            this.svg.xAxis.tick.ticks.push(i);
          }
        }
        var interval = this.graphWidth / n;
        var start = 0;
        var offset = interval / 2;
        this.graphXLocation = [];
        this.graphXLocationSlice = [];
        for (var j = 0; j < n; j++) {
          if (j !== 0) {
            this.graphXLocationSlice.push(start + offset);
          }
          this.graphXLocation.push(start + offset);
          start += interval;
        }
      };

      LineGraphConfiguration.prototype.updateMaxMinData = function(data) {
        if (!this.updated) {
          this.minData = d3.min([].concat.apply([], data));
          this.maxData = d3.max([].concat.apply([], data));
        }
        this.updated = true;
      };

      LineGraphConfiguration.prototype.updateTickY = function() {
        if (this.svg.yAxis.tick.numOfTicks !== this.svg.yAxis.tick.ticks.length) {
          var minData = this.minData;
          var maxData = this.maxData;
          var data = minData;
          var interval = Math.ceil(((maxData - minData) / (this.svg.yAxis.tick.numOfTicks - 1)) / 10) * 10;
          this.svg.yAxis.tick.ticks = [];
          for (var i = 0; i < this.svg.yAxis.tick.numOfTicks; i++) {
            this.svg.yAxis.tick.ticks.push(data);
            data += interval;
          }
          this.maxData = data - interval;
        }
        this.graphYLocation = [];
        for (var j = 0; j < this.svg.yAxis.tick.ticks.length; j++) {
          var y = this.getY(this.svg.yAxis.tick.ticks[j]);
          this.graphYLocation.push(y);
        }
      };

      LineGraphConfiguration.prototype.getY = function(y) {
        return this.graphHeight - (y / this.maxData) * this.graphHeight;
      };

      return LineGraphConfiguration;
    }
  ]);

'use strict';

angular.module('ark.graphs.multi-line-graph')
  .directive('arkMultiLineGraph', ['ark.graphs.multi-line-graph-config', 'ark.graphs.text-service',
    'ark.graphs.line-service', 'ark.graphs.d3', 'ark.graphs.utils', 'ark.graphs.tooltip-service',
    function(MultiLineGraphConfiguration, TextService, LineService, d3, Utils, TooltipService) {
      return {
        restrict: 'E',
        scope: {
          configuration: '=',
          data: '='
        },
        link: function($scope, element) {

          $scope.internalConfiguration = new MultiLineGraphConfiguration($scope.configuration);
          $scope.initialized = false;
          $scope.previousData = angular.copy($scope.data);

          $scope.selectedDataSetIndex = 0;
          $scope.tooltipDisplayed = false;
          $scope.previouslyEmpty = false;

          $scope.noDataAvailable = function() {
            $scope.widget = d3.select(element[0]);

            $scope.widget.selectAll('*').remove();
            $scope.widget.append('div')
              .attr('class', 'ark-graphs-multi-line-graph-no-data-container')
              .style('text-align', 'center')
              .style('display', 'table')
              .style('width', $scope.internalConfiguration.width + 'px')
              .style('height', $scope.internalConfiguration.height + 'px');

            $scope.widget.select('.ark-graphs-multi-line-graph-no-data-container')
              .append('span')
              .attr('class', 'ark-graphs-multi-line-graph-no-data-message')
              .style('display', 'table-cell')
              .style('vertical-align', 'middle')
              .html($scope.internalConfiguration.data.noDataAvailable);
          };

          $scope.isDataEmpty = function() {
            var allEmpty = true;
            angular.forEach($scope.data, function(line) {
              allEmpty = allEmpty && Boolean(!line.length);
            });
            return allEmpty;
          };

          $scope.draw = function() {
            if ($scope.isDataEmpty()) {
              $scope.previouslyEmpty = true;
              return $scope.init();
            } else if ($scope.previouslyEmpty) {
              $scope.previouslyEmpty = false;
              return $scope.init();
            }
            if (!$scope.data[$scope.selectedDataSetIndex].length) {
              angular.forEach($scope.data, function(data, index) {
                if (data.length) {
                  $scope.selectedDataSetIndex = index;
                }
              });
            }

            $scope.createOrUpdateGraphElements();
            $scope.drawAxis();
            $scope.drawThresholds();

            var paths = $scope.widget.select('.ark-graphs-multi-line-graph-data-lines').selectAll('path');

            paths.transition()
              .attrTween('d', function(d, i) {
                var line = $scope.internalConfiguration.data.binding[i];
                var interpolate = d3.interpolate($scope.previousData[i] || {}, $scope.data[i] || {});
                return function(t) {
                  return $scope.data[i].length ? $scope.lines[line](interpolate(t)) : '';
                };
              })
              .duration($scope.internalConfiguration.transition.duration)
              .each('end', function() {
                $scope.previousData = angular.copy($scope.data);
              });

            angular.forEach($scope.data, function(dataset, lineIndex) {
              var circles = $scope.widget.select('.ark-graphs-multi-line-graph-data-circle-line-' + lineIndex.toString()).selectAll('circle');
              circles.transition()
                .attrTween('cx', function(d, i) {
                  var interpolate = d3.interpolate(
                    $scope.ranges.x($scope.previousData[lineIndex].length ? $scope.previousData[lineIndex][i][$scope.internalConfiguration.xAxis.field] : 0),
                    $scope.ranges.x($scope.data[lineIndex].length ? $scope.data[lineIndex][i][$scope.internalConfiguration.xAxis.field] : 0)
                  );
                  return function(t) {
                    return interpolate(t);
                  };
                })
                .attrTween('cy', function(d, i) {
                  var range = $scope.internalConfiguration.data.binding[lineIndex];
                  var interpolate = d3.interpolate(
                    $scope.ranges.y[range]($scope.previousData[lineIndex].length ? $scope.previousData[lineIndex][i][$scope.internalConfiguration.yAxis[range].field] : 0),
                    $scope.ranges.y[range]($scope.data[lineIndex].length ? $scope.data[lineIndex][i][$scope.internalConfiguration.yAxis[range].field] : 0)
                  );
                  return function(t) {
                    return interpolate(t);
                  };
                })
                .duration($scope.internalConfiguration.transition.duration);
            });
            $scope.drawLegend();
            if ($scope.tooltipDisplayed) {
              TooltipService.showTooltip($scope.tooltip, $scope.data, $scope.closest.index, $scope.selectedDataSetIndex, $scope.internalConfiguration.data.colors, $scope.internalConfiguration.data.labels, $scope.internalConfiguration.data.thresholds.values[$scope.selectedDataSetIndex], $scope.internalConfiguration.data.thresholds.icons[$scope.selectedDataSetIndex], $scope.internalConfiguration.data.thresholds.colors[$scope.selectedDataSetIndex]);
            }
          };

          $scope.drawAxis = function() {
            if ($scope.internalConfiguration.xAxis.display) {
              $scope.widget.select('.ark-graphs-multi-line-graph-x-axis')
                .attr('transform', 'translate(0, ' + ($scope.internalConfiguration.height - $scope.internalConfiguration.margin.top - $scope.internalConfiguration.margin.bottom) + ')')
                .call($scope.axis.x);
            }
            if ($scope.internalConfiguration.yAxis.left.display) {
              $scope.widget.select('.ark-graphs-multi-line-graph-y-left-axis')
                .call($scope.axis.y.left);
            }
            if ($scope.internalConfiguration.yAxis.right.display) {
              $scope.widget.select('.ark-graphs-multi-line-graph-y-right-axis')
                .attr('transform', 'translate(' + ($scope.internalConfiguration.width - $scope.internalConfiguration.margin.left - $scope.internalConfiguration.margin.right) + ', 0)')
                .call($scope.axis.y.right);
            }
          };

          $scope.drawLegend = function() {
            var container = $scope.widget.select('.ark-graphs-multi-line-graph-legend-container');
            container.html('');
            angular.forEach($scope.data, function(dataset, index) {
              var legendItem = container.append('a')
                .attr('class', 'ark-graphs-multi-line-graph-legend-' + index + (($scope.selectedDataSetIndex === index) ? ' selected' : ''))
                .on('click', function() {
                  if ($scope.data[index].length) {
                    $scope.selectedDataSetIndex = index;
                    $scope.drawLegend();
                    $scope.updateThresholds();
                    $scope.createOrUpdateGraphElements();
                  }
                });

              var data = $scope.data[index];
              var side = $scope.internalConfiguration.data.binding[index];

              legendItem.append('span')
                .attr('class', 'color')
                .style('background-color', $scope.internalConfiguration.data.colors[index]);
              legendItem.append('span')
                .attr('class', 'value')
                .html((data.length) ? data[data.length - 1][$scope.internalConfiguration.yAxis[side].field] : '');
              legendItem.append('span')
                .attr('class', 'label')
                .html($scope.internalConfiguration.data.labels[index]);
            });
          };

          $scope.drawThresholds = function() {
            $scope.widget.select('.ark-graphs-multi-line-graph-threshold-lines').selectAll('line').remove();
            $scope.widget.select('.ark-graphs-multi-line-graph-threshold-lines').selectAll('line')
              .data($scope.internalConfiguration.data.thresholds.values[$scope.selectedDataSetIndex])
              .enter()
              .append('line')
              .attr('x1', 0)
              .attr('x2', ($scope.internalConfiguration.width - $scope.internalConfiguration.margin.left - $scope.internalConfiguration.margin.right))
              .attr('y1', function(d) {
                var side = $scope.internalConfiguration.data.binding[$scope.selectedDataSetIndex];
                return $scope.ranges.y[side](d);
              })
              .attr('y2', function(d) {
                var side = $scope.internalConfiguration.data.binding[$scope.selectedDataSetIndex];
                return $scope.ranges.y[side](d);
              })
              .attr('stroke', function(d, i) {
                return $scope.internalConfiguration.data.thresholds.colors[$scope.selectedDataSetIndex][i];
              })
              .attr('stroke-linecap', 'square')
              .attr('stroke-dasharray', $scope.internalConfiguration.data.thresholds.dash);
          };

          $scope.updateThresholds = function() {
            var thresholds = $scope.widget.select('.ark-graphs-multi-line-graph-threshold-lines').selectAll('line');
            thresholds.transition()
              .attr('x1', 0)
              .attr('x2', ($scope.internalConfiguration.width - $scope.internalConfiguration.margin.left - $scope.internalConfiguration.margin.right))
              .attrTween('y1', function(d, i) {
                var side = $scope.internalConfiguration.data.binding[$scope.selectedDataSetIndex];
                var interpolate = d3.interpolate(d, $scope.internalConfiguration.data.thresholds.values[$scope.selectedDataSetIndex][i]);
                return function(t) {
                  return $scope.ranges.y[side](interpolate(t));
                };
              })
              .attrTween('y2', function(d, i) {
                var side = $scope.internalConfiguration.data.binding[$scope.selectedDataSetIndex];
                var interpolate = d3.interpolate(d, $scope.internalConfiguration.data.thresholds.values[$scope.selectedDataSetIndex][i]);
                return function(t) {
                  return $scope.ranges.y[side](interpolate(t));
                };
              })
              .attr('stroke', function(d, i) {
                return $scope.internalConfiguration.data.thresholds.colors[$scope.selectedDataSetIndex][i];
              })
              .duration(500);
          };

          $scope.drawThresholdIcon = function() {
            var side = $scope.internalConfiguration.data.binding[$scope.selectedDataSetIndex];
            var value = $scope.data[$scope.selectedDataSetIndex].length ? $scope.data[$scope.selectedDataSetIndex][$scope.closest.index][$scope.internalConfiguration.yAxis[side].field] : undefined;
            var icon = null;
            var color = null;

            if (value) {
              angular.forEach($scope.internalConfiguration.data.thresholds.values[$scope.selectedDataSetIndex], function(threshold, index) {
                if (value > threshold) {
                  icon = $scope.internalConfiguration.data.thresholds.icons[$scope.selectedDataSetIndex][index];
                  color = $scope.internalConfiguration.data.thresholds.colors[$scope.selectedDataSetIndex][index];
                }
              });
            }

            var container = $scope.widget.select('.ark-graphs-multi-line-graph-threshold-icon-container');
            container.html('');
            container.append('span')
              .attr('class', 'ark-graphs-multi-line-graph-threshold-top-icon fonticon ' + icon)
              .style('color', color)
              .style('font-size', $scope.internalConfiguration.data.thresholds.iconFontsize + 'px')
              .style('left', ($scope.ranges.x($scope.closest.value[$scope.internalConfiguration.xAxis.field]) - $scope.internalConfiguration.data.thresholds.iconFontsize / 2) + 'px');
          };

          $scope.drawMouseEventOrInitial = function() {
            $scope.highlightCircles($scope.closest.index);
            var x = $scope.ranges.x($scope.closest.value[$scope.internalConfiguration.xAxis.field]) || 0;
            $scope.widget.select('.ark-graphs-multi-line-graph-hover-line')
              .attr('x1', x)
              .attr('x2', x);

            $scope.drawThresholdIcon();
          };

          $scope.mousemove = function() {
            var x = $scope.ranges.x.invert(d3.mouse(this)[0]);
            $scope.closest = $scope.findClosestIndexTo(x);
            TooltipService.showTooltip($scope.tooltip, $scope.data, $scope.closest.index, $scope.selectedDataSetIndex, $scope.internalConfiguration.data.colors, $scope.internalConfiguration.data.labels, $scope.internalConfiguration.data.thresholds.values[$scope.selectedDataSetIndex], $scope.internalConfiguration.data.thresholds.icons[$scope.selectedDataSetIndex], $scope.internalConfiguration.data.thresholds.colors[$scope.selectedDataSetIndex]);
            TooltipService.setCoordinates($scope.tooltip, $scope.ranges.x($scope.closest.value[$scope.internalConfiguration.xAxis.field]), d3.event.pageY + 10);
            $scope.tooltipDisplayed = true;
            $scope.drawMouseEventOrInitial();
          };

          $scope.rescaleLines = function() {
            if ($scope.internalConfiguration.xAxis.rangePredefined) {
              LineService.scale($scope.ranges.x, $scope.internalConfiguration.xAxis.range);
            } else {
              LineService.scaleFromData($scope.ranges.x, $scope.data, $scope.internalConfiguration.xAxis.field, $scope.internalConfiguration.data.offset);
            }
            if ($scope.internalConfiguration.yAxis.left.rangePredefined) {
              LineService.scale($scope.ranges.y.left, $scope.internalConfiguration.yAxis.left.range);
            } else {
              LineService.scaleFromData($scope.ranges.y.left, $scope.data, $scope.internalConfiguration.yAxis.left.field, $scope.internalConfiguration.yAxis.left.offset);
            }
            if ($scope.internalConfiguration.yAxis.right.rangePredefined) {
              LineService.scale($scope.ranges.y.right, $scope.internalConfiguration.yAxis.right.range);
            } else {
              LineService.scaleFromData($scope.ranges.y.right, $scope.data, $scope.internalConfiguration.yAxis.right.field, $scope.internalConfiguration.yAxis.right.offset);
            }
          };

          $scope.highlightCircles = function() {
            var circles = $scope.widget.select('.ark-graphs-multi-line-graph-data-circles').selectAll('circle');
            circles.attr('r', $scope.internalConfiguration.data.circles.radius);

            var selected = $scope.widget.select('.ark-graphs-multi-line-graph-data-circles').selectAll('[index="' + $scope.closest.index + '"]');
            selected.attr('r', $scope.internalConfiguration.data.circles.hover.radius);
          };

          $scope.findClosestIndexTo = function(value) {
            var bisector = d3.bisector(function(d) {
              return d ? d[$scope.internalConfiguration.xAxis.field] : 0;
            }).left;
            var found = 0;
            var index = 0;
            var tmp;
            var d = $scope.data[$scope.selectedDataSetIndex];
            //angular.forEach($scope.data, function(d) {
            if (d.length) {
              var i = bisector(d, value, 1);
              var d0 = d[i - 1];
              var d1 = d[i];
              if (!d1) {
                tmp = d0;
              } else {
                tmp = value - d0[$scope.internalConfiguration.xAxis.field] > d0[$scope.internalConfiguration.xAxis.field] - value ? d1 : d0;
              }
              if ((index === 0) || (value - found[$scope.internalConfiguration.xAxis.field] > tmp[$scope.internalConfiguration.xAxis.field] - value)) {
                found = tmp;
                index = (found === d0) ? (i - 1) : i;
              }
            }
            //});
            return {
              index: index,
              value: found
            };
          };

          $scope.createOrUpdateGraphElements = function() {
            $scope.ranges = {
              x: LineService.createRange(0, ($scope.internalConfiguration.width - $scope.internalConfiguration.margin.left - $scope.internalConfiguration.margin.right)),
              y: {
                left: LineService.createLinearRange(($scope.internalConfiguration.height - $scope.internalConfiguration.margin.top - $scope.internalConfiguration.margin.bottom), 0),
                right: LineService.createLinearRange(($scope.internalConfiguration.height - $scope.internalConfiguration.margin.top - $scope.internalConfiguration.margin.bottom), 0)
              }
            };

            $scope.axis = {
              x: LineService.createAxis($scope.ranges.x, $scope.internalConfiguration.xAxis.ticks, 'bottom'),
              y: {
                left: LineService.createAxis($scope.ranges.y.left, $scope.internalConfiguration.yAxis.left.ticks, 'left').tickFormat($scope.internalConfiguration.yAxis.left.tickFormat),
                right: LineService.createAxis($scope.ranges.y.right, $scope.internalConfiguration.yAxis.right.ticks, 'right').tickFormat($scope.internalConfiguration.yAxis.right.tickFormat)
              }
            };

            if ($scope.internalConfiguration.grid.display) {
              $scope.axis.x.innerTickSize(-($scope.internalConfiguration.height - $scope.internalConfiguration.margin.top - $scope.internalConfiguration.margin.bottom));
              if ($scope.internalConfiguration.data.binding[$scope.selectedDataSetIndex] === 'left') {
                $scope.axis.y.left.innerTickSize(-($scope.internalConfiguration.width - $scope.internalConfiguration.margin.left - $scope.internalConfiguration.margin.right));
                $scope.axis.y.right.innerTickSize(0);
              } else {
                $scope.axis.y.right.innerTickSize(-($scope.internalConfiguration.width - $scope.internalConfiguration.margin.left - $scope.internalConfiguration.margin.right));
                $scope.axis.y.left.innerTickSize(0);
              }
            }

            $scope.lines = {
              left: LineService.createLine($scope.ranges.x, $scope.ranges.y.left, $scope.internalConfiguration.xAxis.field, $scope.internalConfiguration.yAxis.left.field), //lines that refers to the left y axis
              right: LineService.createLine($scope.ranges.x, $scope.ranges.y.right, $scope.internalConfiguration.xAxis.field, $scope.internalConfiguration.yAxis.right.field) //lines that refers to the right y axis
            };

            $scope.rescaleLines();
          };

          $scope.getDefaultSelectedItem = function() {
            var maxIndex = 0;
            var currentValue = {};
            angular.forEach($scope.data, function(d) {
              if (maxIndex < d.length) {
                maxIndex = d.length - 1;
                currentValue = d[maxIndex];
              }
            });
            return {
              index: maxIndex,
              value: currentValue
            };
          };

          $scope.init = function() {
            if ($scope.isDataEmpty()) {
              return $scope.noDataAvailable();
            }
            $scope.createOrUpdateGraphElements();

            $scope.widget = d3.select(element[0]);

            $scope.widget.selectAll('*').remove();

            $scope.widget.append('div')
              .attr('class', 'ark-graphs-multi-line-graph-threshold-icon-container')
              .style('width', ($scope.internalConfiguration.width - $scope.internalConfiguration.margin.left - $scope.internalConfiguration.margin.right) + 'px')
              .style('height', $scope.internalConfiguration.data.thresholds.iconFontsize + 'px')
              .style('left', $scope.internalConfiguration.margin.left + 'px');

            $scope.widget.append('svg')
              .attr('class', 'ark-graphs-multi-line-graph-svg')
              .attr('width', $scope.internalConfiguration.width + 'px')
              .attr('height', $scope.internalConfiguration.height + 'px')
              .append('g')
              .attr('class', 'ark-graphs-multi-line-graph-container')
              .attr('transform', 'translate(' + $scope.internalConfiguration.margin.left + ', ' + $scope.internalConfiguration.margin.top + ')');

            $scope.widget.append('div')
              .attr('class', 'ark-graphs-multi-line-graph-legend-container')
              .attr('width', $scope.internalConfiguration.width + 'px');

            var svg = $scope.widget.select('.ark-graphs-multi-line-graph-container');

            svg.append('defs')
              .append('clipPath')
              .attr('id', 'ark-graphs-multi-line-graph-clipPath-' + $scope.internalConfiguration.id)
              .append('rect')
              .attr('x', 0)
              .attr('y', 0)
              .attr('width', ($scope.internalConfiguration.width - $scope.internalConfiguration.margin.left - $scope.internalConfiguration.margin.right) + 'px')
              .attr('height', ($scope.internalConfiguration.height - $scope.internalConfiguration.margin.top - $scope.internalConfiguration.margin.bottom) + 'px');

            if ($scope.internalConfiguration.xAxis.display) {
              svg.append('g')
                .attr('class', 'x axis ark-graphs-multi-line-graph-x-axis');
            }
            if ($scope.internalConfiguration.yAxis.left.display) {
              svg.append('g')
                .attr('class', 'y axis ark-graphs-multi-line-graph-y-left-axis');
            }
            if ($scope.internalConfiguration.yAxis.right.display) {
              svg.append('g')
                .attr('class', 'y axis ark-graphs-multi-line-graph-y-right-axis');
            }

            $scope.drawAxis();

            //Create main container for graph
            svg.append('g')
              .attr('class', 'ark-graphs-multi-line-graph-data')
              .style('clip-path', 'url(#ark-graphs-multi-line-graph-clipPath-' + $scope.internalConfiguration.id + ')');

            var graphContainer = svg.select('.ark-graphs-multi-line-graph-data');

            graphContainer.append('g')
              .attr('class', 'ark-graphs-multi-line-graph-data-lines');

            graphContainer.append('line')
              .attr('class', 'ark-graphs-multi-line-graph-hover-line');

            graphContainer.append('g')
              .attr('class', 'ark-graphs-multi-line-graph-threshold-lines');

            graphContainer.append('g')
              .attr('class', 'ark-graphs-multi-line-graph-data-circles');

            angular.forEach($scope.data, function(dataset, i) {
              graphContainer.select('.ark-graphs-multi-line-graph-data-circles')
                .append('g')
                .attr('class', 'ark-graphs-multi-line-graph-data-circle-line-' + i.toString());
            });

            graphContainer.select('.ark-graphs-multi-line-graph-hover-line')
              .attr('x1', 0)
              .attr('x2', 0)
              .attr('y1', 0)
              .attr('y2', $scope.internalConfiguration.height - $scope.internalConfiguration.margin.top - $scope.internalConfiguration.margin.bottom)
              .attr('stroke-linecap', 'square')
              .attr('stroke-dasharray', $scope.internalConfiguration.data.guideline.dash);

            if ($scope.isDataEmpty()) {
              return;
            }
            //Otherwise fill in widget with data
            graphContainer.select('.ark-graphs-multi-line-graph-data-lines').selectAll('path')
              .data($scope.data)
              .enter()
              .append('path')
              .attr('d', function(d, i) {
                var line = $scope.internalConfiguration.data.binding[i];
                return d ? $scope.lines[line](d) : '';
              })
              .attr('stroke', function(d, i) {
                return $scope.internalConfiguration.data.colors[i];
              });

            if ($scope.internalConfiguration.data.thresholds.display) {
              $scope.drawThresholds();
            }

            if ($scope.internalConfiguration.data.circles.display) {
              angular.forEach($scope.data, function(dataset, i) {
                graphContainer.select('.ark-graphs-multi-line-graph-data-circle-line-' + i.toString()).selectAll('circle')
                  .data(dataset)
                  .enter()
                  .append('circle')
                  .attr('fill', function() {
                    return $scope.internalConfiguration.data.colors[i];
                  })
                  .attr('r', $scope.internalConfiguration.data.circles.radius)
                  .attr('index', function(d, j) {
                    return j;
                  })
                  .attr('cx', function(d) {
                    return $scope.ranges.x(d[$scope.internalConfiguration.xAxis.field]);
                  })
                  .attr('cy', function(d) {
                    var range = $scope.internalConfiguration.data.binding[i];
                    return $scope.ranges.y[range](d[$scope.internalConfiguration.yAxis[range].field]);
                  });
              });
            }
            svg.append('rect')
              .attr('class', 'ark-graphs-multi-line-graph-overlay')
              .attr('width', $scope.internalConfiguration.width - $scope.internalConfiguration.margin.left - $scope.internalConfiguration.margin.right)
              .attr('height', $scope.internalConfiguration.height - $scope.internalConfiguration.margin.top - $scope.internalConfiguration.margin.bottom)
              .on('mousemove', $scope.mousemove)
              .on('mouseover', function() {
                $scope.widget.select('.ark-graphs-multi-line-graph-hover-line')
                  .style('display', 'block');
              })
              .on('mouseout', function() {
                TooltipService.hideTooltip($scope.tooltip);
                $scope.closest = $scope.getDefaultSelectedItem();
                $scope.drawMouseEventOrInitial();
                $scope.tooltipDisplayed = false;
              });

            TooltipService.initTooltip($scope, 'multi-line-graph', $scope.internalConfiguration.id, $scope.internalConfiguration.tooltip.format);
            $scope.closest = $scope.getDefaultSelectedItem();
            $scope.drawMouseEventOrInitial();
            $scope.drawLegend();
            $scope.initialized = true;
          };

          $scope.init();

          $scope.$watch('configuration', function() {
            $scope.initialized = false;
            $scope.internalConfiguration.update($scope.configuration);
            $scope.init();
          }, true);

          $scope.$watch(function() {
            var e = angular.element(element[0].parentElement);
            return Utils.getTrueWidth(e[0]);
          }, function(value) {
            if ($scope.internalConfiguration.autofit) {
              $scope.internalConfiguration.width = value;
              $scope.internalConfiguration.update($scope.internalConfiguration);
              $scope.initialized = false;
              $scope.init();
            }
          }, true);

          $scope.$watch('data', function() {
            if ($scope.initialized) {
              $scope.draw();
            }
          });
        }
      };
    }
  ]);

'use strict';

angular.module('ark.graphs.multi-line-graph')
  .factory('ark.graphs.multi-line-graph-config', ['ark.graphs.color-service', 'ark.graphs.utils', 'ark.graphs.config-service', 'ark.graphs.d3',
    function(ColorService, Utils, ConfigService, d3) {
      var MultiLineGraphConfiguration = function(configuration) {
        this.type = 'multi-line-graph';
        this.id = Utils.generateID(this.type);
        this.autoresize = false;

        this.width = 600;
        this.height = 280;

        this.autofit = true; //Widget will automatically fit to parent container's width

        this.fontsize = 12;
        this.yAxis = {
          left: {
            display: true,
            rangePredefined: false,
            range: [0, 100], //Only used if rangePredefined is true
            offset: 0.1,
            field: 'value',
            label: 'y-left-axis label (unit)',
            ticks: 4,
            tickFormat: function(d) {
              return d3.format(',.0f')(d);
            }
          },
          right: {
            display: true,
            rangePredefined: true,
            range: [0, 100], //Only used if rangePredefined is true
            offset: 0.1,
            field: 'value',
            label: 'y-right-axis label (unit)',
            ticks: 3,
            tickFormat: function(d) {
              return d + ' %';
            }
          }
        };
        this.xAxis = {
          display: true,
          rangePredefined: false,
          range: [0, 100], //Only used if rangePredefined is true
          label: 'x-axis label (unit)',
          field: 'time',
          ticks: 3
        };
        this.grid = {
          display: true
        };
        this.margin = {
          left: 40,
          top: 10,
          right: 40,
          bottom: 30
        };

        this.data = {
          offset: 0.1, //Space left between the end of lines end right axis here = 1/10 of total range
          binding: ['left', 'left', 'right'], //Ordered array to determine on which axis the data is bound
          noDataAvailable: 'No Data Available.',
          colors: ColorService.arkBlueColors(),
          thresholds: {
            display: true,
            values: [
              [1000, 3000, 4000],
              [100, 300, 500],
              [10, 30, 70]
            ],
            colors: [ColorService.getStatusColors(3), ColorService.getStatusColors(3), ColorService.getStatusColors(3)],
            icons: [
              ['icon-alert-circle', 'icon-alert-triangle', 'icon-alert-checkmark'],
              ['icon-alert-circle', 'icon-alert-triangle', 'icon-alert-checkmark'],
              ['icon-alert-circle', 'icon-alert-triangle', 'icon-alert-checkmark']
            ],
            iconFontsize: 16, // size in px
            dash: '4,3'
          },
          guideline: {
            dash: '7,5'
          },
          labels: ['Line A', 'Line B', 'Line C'],
          circles: {
            display: true,
            radius: 0,
            hover: {
              radius: 8
            }
          }
        };

        this.transition = {
          duration: 1000
        };

        this.tooltip = {
          display: true,
          format: function(data, indexSelected, lineIndexSelected, colors, labels, thresholds, icons, thresholdColors) {
            var tableData = '';
            var time = (data[lineIndexSelected].length) ? data[lineIndexSelected][indexSelected].time : 0;
            var date = new Date(parseInt(time));
            var hours = date.getHours();
            var minutes = '0' + date.getMinutes();
            var formattedTime = hours + ':' + minutes.substr(-2);
            var thresholdIndex = 0;
            var value = (data[lineIndexSelected].length) ? data[lineIndexSelected][indexSelected].value : 0;
            angular.forEach(thresholds, function(threshold, index) {
              if (value > threshold) {
                thresholdIndex = index;
              }
            });
            for (var i = 0; i < data.length; i++) {
              if (data[i].length && data[i][indexSelected]) {
                tableData += '<tr>' +
                  '<td class="color">' +
                  '<span style="background-color: ' + colors[i] + ';"></span>' +
                  '</td>' +
                  '<td class="value">' +
                  '<span>' + data[i][indexSelected].value + ((i === 2) ? '%' : '') + '</span>' +
                  '</td>' +
                  '<td class="label">' +
                  '<span>' + labels[i] + '</span>' +
                  '</td>' +
                  '<td class="icon">';
                if (i === lineIndexSelected) {
                  tableData += '<span ng-show="' + (i === lineIndexSelected) + '" class="fonticon ' + icons[thresholdIndex] + '" style="color:' + thresholdColors[thresholdIndex] + ';"></span>';
                }
                tableData += '</td></tr>';
              }
            }
            return '<table class="ark-graphs-multi-line-graph-tooltip"><thead><th class="header" colspan="4">' + formattedTime + '</th></thead><tbody>' + tableData + '</tbody></table>';
          }
        };

        this.legend = {
          display: true,
          format: function(d, i) {
            return d;
          }
        };

        this.update(configuration);
      };

      MultiLineGraphConfiguration.prototype.update = function(configuration) {
        Utils.mergeRecursive(this, configuration);
      };

      return MultiLineGraphConfiguration;
    }
  ]);

'use strict';

angular.module('ark.graphs.spark-line')
  .directive('arkSparkLine', ['ark.graphs.spark-line-config', 'ark.graphs.text-service',
    'ark.graphs.line-service', 'ark.graphs.d3', 'ark.graphs.utils', 'ark.graphs.tooltip-service',
    'ark.graphs.threshold-service',
    function(SparkLineConfiguration, TextService, LineService, d3, Utils, TooltipService, ThresholdService) {
      return {
        restrict: 'E',
        scope: {
          configuration: '=',
          data: '='
        },
        link: function($scope, element) {

          $scope.internalConfiguration = new SparkLineConfiguration($scope.configuration);
          $scope.originalStrokeWidth = $scope.internalConfiguration.data.strokeWidth;
          $scope.originalRadius = $scope.internalConfiguration.data.circle.r;
          $scope.svgWidth = $scope.internalConfiguration.svg.width;

          $scope.prepareLine = function() {
            var strokeWidth = $scope.internalConfiguration.data.strokeWidth - 1;
            var r = $scope.internalConfiguration.data.circle.r;
            $scope.x = d3.scale.ordinal()
              .domain($scope.data.map(function(d, i) {
                return i;
              }))
              .rangePoints([0, $scope.internalConfiguration.svg.width]);

            $scope.y = d3.scale.linear()
              .domain([0, $scope.max])
              .range([$scope.internalConfiguration.svg.height - strokeWidth - r, strokeWidth + r]);

            $scope.line = d3.svg.line()
              .interpolate('basis')
              .x(function(d, i) {
                return $scope.x(i);
              })
              .y(function(d) {
                return $scope.y(d);
              });
          };

          $scope.draw = function() {
            $scope.widget.select('.ark-graphs-spark-line-path')
              .attr('d', $scope.line($scope.data))
              .attr('stroke', function() {
                return ThresholdService.getDataColor(parseInt(($scope.data[$scope.data.length - 1] / $scope.max) * 100, 10), $scope.internalConfiguration);
              });

            $scope.widget.select('.ark-graphs-spark-line-tip')
              .attr({
                'cx': $scope.internalConfiguration.svg.width,
                'cy': $scope.y($scope.data[$scope.data.length - 1]),
                'r': $scope.internalConfiguration.data.circle.r,
                'fill': ThresholdService.getDataColor(parseInt(($scope.data[$scope.data.length - 1] / $scope.max) * 100, 10), $scope.internalConfiguration)
              });

            TextService.showTextUpdate($scope.internalConfiguration, $scope.widget, [parseInt(($scope.data[$scope.data.length - 1] / $scope.max) * 100, 10)]);
            $scope.widget.select('.ark-graphs-spark-line-legend-name')
              .style('width', $scope.internalConfiguration.objectName.width.toString() + 'px');
          };

          $scope.update = function() {
            $scope.internalConfiguration.data.strokeWidth = 0.6 * $scope.internalConfiguration.svg.width / $scope.svgWidth * $scope.originalStrokeWidth;
            $scope.internalConfiguration.data.circle.r = 0.6 * $scope.internalConfiguration.svg.width / $scope.svgWidth * $scope.originalRadius;
          };

          $scope.init = function() {
            $scope.widget = d3.select(element[0]);
            $scope.widget.selectAll('*').remove();

            $scope.max = d3.max($scope.data);

            var div = $scope.widget
              .append('div')
              .attr('class', 'ark-graphs-spark-line-div')
              .style('width', $scope.internalConfiguration.div.width.toString() + 'px')
              .style('height', $scope.internalConfiguration.div.height.toString() + 'px')
              .style('padding-top', ($scope.internalConfiguration.div.padding.top - $scope.internalConfiguration.div.border.top.width).toString() + 'px')
              .style('padding-bottom', $scope.internalConfiguration.div.padding.bottom.toString() + 'px')
              .style('border-top', 'solid')
              .style('border-top-width', $scope.internalConfiguration.div.border.top.width.toString() + 'px')
              .style('border-top-color', $scope.internalConfiguration.div.border.top.color)
              .style('position', 'relative');

            var svg = div
              .append('svg')
              .attr('class', 'ark-graphs-spark-line-svg')
              .attr('width', $scope.internalConfiguration.svg.width + $scope.internalConfiguration.data.circle.r)
              .attr('height', $scope.internalConfiguration.svg.height + $scope.internalConfiguration.data.circle.r * 2)
              .style('position', 'absolute')
              .style('left', $scope.internalConfiguration.svg.position.left + 'px')
              .append('g');

            $scope.prepareLine();

            svg.append('path')
              .attr('d', $scope.line($scope.data))
              .attr('class', 'ark-graphs-spark-line-path')
              .attr('fill', 'none')
              .attr('stroke', function() {
                return ThresholdService.getDataColor(parseInt(($scope.data[$scope.data.length - 1] / $scope.max) * 100, 10), $scope.internalConfiguration);
              })
              .attr('stroke-width', $scope.internalConfiguration.data.strokeWidth);

            svg.append('circle')
              .attr('class', 'ark-graphs-spark-line-tip');

            ThresholdService.initThresholdValues($scope.internalConfiguration);

            TextService.showText($scope.internalConfiguration, $scope.widget, [parseInt(($scope.data[$scope.data.length - 1] / $scope.max) * 100, 10)]);
            $scope.widget.select('.ark-graphs-spark-line-legend-text').select('.metric-name')
              .style('width', ($scope.internalConfiguration.autoresize ? $scope.internalConfiguration.objectName.width : $scope.internalConfiguration.legend.width).toString() + 'px');
          };

          if ($scope.internalConfiguration.autoresize) {
            Utils.resize($scope.internalConfiguration, element);
            if (!$scope.internalConfiguration.autosnap.enabled) {
              $scope.update();
            }
          }

          $scope.init();

          //Check for resizing
          $scope.$watch(function() {
            var e = angular.element(element[0].parentElement);
            return Utils.getTrueWidth(e[0]);
          }, function() {
            if ($scope.internalConfiguration.autoresize) {
              Utils.resize($scope.internalConfiguration, element);
              if (!$scope.internalConfiguration.autosnap.enabled) {
                $scope.update();
              }
              $scope.init();
              $scope.draw($scope.data);
            }
          }, true);

          //Check for changes in internalConfiguration
          $scope.$watch('configuration', function() {
            $scope.internalConfiguration.update($scope.configuration);
            $scope.init();
            $scope.draw();
          }, true);

          //Check for changes in data
          $scope.$watch('data', function() {
            return $scope.draw();
          }, true);
        }
      };
    }
  ]);

'use strict';

angular.module('ark.graphs.spark-line')
  .factory('ark.graphs.spark-line-config', ['ark.graphs.color-service',
    'ark.graphs.utils', 'ark.graphs.config-service',
    function(ColorService, Utils, ConfigService) {
      var SparkLineConfiguration = function(configuration, data) {

        this.type = 'spark-line';
        this.id = Utils.generateID(this.type);
        this.numerOfData = 1;
        this.autoresize = false;

        this.div = {
          width: 208,
          height: 40,
          border: {
            top: {
              width: 1,
              color: '#E3E9EF'
            }
          }
        };

        this.svg = {
          width: 72,
          height: 24,
          position: {
            left: 72
          }
        };

        this.objectName = {
          width: 64
        };

        this.initialRatio = {
          svgWidth: this.svg.width / this.div.width,
          svgPositionLeft: this.svg.position.left / this.div.width,
          objectNameWidth: this.objectName.width / this.div.width
        };

        this.legend = {
          display: true,
          fontsize: 12,
          title: ['Metric name'],
          format: function(d, i) {
            return d;
          },
          letters: {
            display: false
          },
          padding: {
            top: 0,
            left: 0,
            right: 20
          },
          icon: {
            display: true
          }
        };

        this.data = {
          circle: {
            r: 1.5
          },
          strokeWidth: 1.5,
          thresholds: {
            display: true,
            values: [25, 50, 75],
            statusColors: ColorService.getStatusColors(2),
            comparator: function(value, threshold) {
              return value < threshold;
            }
          }
        };

        this.autosnap = {
          enabled: false,
          threshold: 516,
          smallConfig: {
            div: {
              width: 208,
              height: 40
            },
            data: {
              strokeWidth: 1.5,
              circle: {
                r: 1.5
              }
            }
          },
          largeConfig: {
            div: {
              width: 516,
              height: 40
            },
            data: {
              strokeWidth: 2,
              circle: {
                r: 2
              }
            }
          }
        };

        this.update(configuration, data);
      };

      SparkLineConfiguration.prototype.update = function(configuration) {
        Utils.mergeRecursive(this, configuration);
        ConfigService.getStatusColors(this);

        if (this.autoresize) {
          this.svg.width = this.initialRatio.svgWidth * this.div.width;
          this.svg.position.left = this.initialRatio.svgPositionLeft * this.div.width;
          this.objectName.width = this.initialRatio.objectNameWidth * this.div.width;
        }

        var paddingHeight = this.div.height - this.svg.height;

        this.div.padding = {
          top: paddingHeight / 2,
          bottom: paddingHeight / 2,
        };

        this.legend.width = this.div.width;
        this.legend.height = this.svg.height;
        this.legend.lineHeight = this.svg.height;
      };

      return SparkLineConfiguration;
    }
  ]);

/***********************************************
* Ark ngGrid JavaScript Library
* Authors: https://github.com/angular-ui/ng-grid/blob/master/README.md 
* License: MIT (http://www.opensource.org/licenses/mit-license.php)
* Compiled At: 06/02/2015 00:36
***********************************************/
(function(window, $) {
'use strict';

var EXCESS_ROWS = 6;
var SCROLL_THRESHOLD = 4;
var ASC = "asc";

var DESC = "desc";

var NG_FIELD = '_ng_field_';
var NG_DEPTH = '_ng_depth_';
var NG_HIDDEN = '_ng_hidden_';
var NG_COLUMN = '_ng_column_';
var CUSTOM_FILTERS = /CUSTOM_FILTERS/g;
var COL_FIELD = /COL_FIELD/g;
var DISPLAY_CELL_TEMPLATE = /DISPLAY_CELL_TEMPLATE/g;
var EDITABLE_CELL_TEMPLATE = /EDITABLE_CELL_TEMPLATE/g;
var DETAIL_FIELD = /DETAIL_FIELD/g;  
var TEMPLATE_REGEXP = /<.+>/;
var ICON_FIELD = /ICON_FIELD/g;  

window.ngGrid = {};
window.ngGrid.i18n = {};


var ngGridServices = angular.module('ngGrid.services', []);
var ngGridDirectives = angular.module('ngGrid.directives', []);
var ngGridFilters = angular.module('ngGrid.filters', []);

angular.module('ngGrid', ['ngGrid.services', 'ngGrid.directives', 'ngGrid.filters', 'ark-ui-bootstrap']);

var ngMoveSelectionHandler = function($scope, elm, evt, grid) {
    if ($scope.selectionProvider.selectedItems === undefined) {
        return true;
    }

    var charCode = evt.which || evt.keyCode,
        newColumnIndex,
        lastInRow = false,
        firstInRow = false,
        rowIndex = $scope.selectionProvider.lastClickedRow === undefined ? 1 : $scope.selectionProvider.lastClickedRow.rowIndex,
        visibleCols = $scope.columns.filter(function(c) { return c.visible; }),
        pinnedCols = $scope.columns.filter(function(c) { return c.pinned; });

    if ($scope.col) {
        newColumnIndex = visibleCols.indexOf($scope.col);
    }

    if (charCode !== 37 && charCode !== 38 && charCode !== 39 && charCode !== 40 && charCode !== 9 && charCode !== 13) {
        return true;
    }
    if ($scope.enableCellSelection) {
        if (charCode === 9) { 
            evt.preventDefault();
        }

        var focusedOnFirstColumn = $scope.showSelectionCheckbox ? $scope.col.index === 1 : $scope.col.index === 0;
        var focusedOnFirstVisibleColumns = $scope.$index === 1 || $scope.$index === 0;
        var focusedOnLastVisibleColumns = $scope.$index === ($scope.renderedColumns.length - 1) || $scope.$index === ($scope.renderedColumns.length - 2);
        var focusedOnLastColumn = visibleCols.indexOf($scope.col) === (visibleCols.length - 1);
        var focusedOnLastPinnedColumn = pinnedCols.indexOf($scope.col) === (pinnedCols.length - 1);
        if (charCode === 37 || charCode === 9 && evt.shiftKey) {
            var scrollTo = 0;

            if (!focusedOnFirstColumn) {
                newColumnIndex -= 1;
            }

            if (focusedOnFirstVisibleColumns) {
                if (focusedOnFirstColumn && charCode === 9 && evt.shiftKey){
                    scrollTo = grid.$canvas.width();
                    newColumnIndex = visibleCols.length - 1;
                    firstInRow = true;
                }
                else {
                    scrollTo = grid.$viewport.scrollLeft() - $scope.col.width;
                }
            }
            else if (pinnedCols.length > 0) {
                scrollTo = grid.$viewport.scrollLeft() - visibleCols[newColumnIndex].width;
            }

            grid.$viewport.scrollLeft(scrollTo);
        }
        else if (charCode === 39 || charCode ===  9 && !evt.shiftKey) {
            if (focusedOnLastVisibleColumns) {
                if (focusedOnLastColumn && charCode ===  9 && !evt.shiftKey) {
                    grid.$viewport.scrollLeft(0);
                    newColumnIndex = $scope.showSelectionCheckbox ? 1 : 0;  
                    lastInRow = true;
                }
                else {
                    grid.$viewport.scrollLeft(grid.$viewport.scrollLeft() + $scope.col.width);
                }
            }
            else if (focusedOnLastPinnedColumn) {
                grid.$viewport.scrollLeft(0);
            }

            if (!focusedOnLastColumn) {
                newColumnIndex += 1;
            }
        }
    }
  
    var items;
    if ($scope.configGroups.length > 0) {
        items = grid.rowFactory.parsedData.filter(function (row) {
            return !row.isAggRow;
        });
    }
    else {
        items = grid.filteredRows;
    }
    var offset = 0;
    if (rowIndex !== 0 && (charCode === 38 || charCode === 13 && evt.shiftKey || charCode === 9 && evt.shiftKey && firstInRow)) { 
        offset = -1;
    }
    else if (rowIndex !== items.length - 1 && (charCode === 40 || charCode === 13 && !evt.shiftKey || charCode === 9 && lastInRow)) {
        offset = 1;
    }
    if (offset) {
        var r = items[rowIndex + offset];
        if (r.beforeSelectionChange(r, evt)) {
            r.continueSelection(evt);
            $scope.$emit('ngGridEventDigestGridParent');

            if ($scope.selectionProvider.lastClickedRow.renderedRowIndex >= $scope.renderedRows.length - EXCESS_ROWS - 2) {
                grid.$viewport.scrollTop(grid.$viewport.scrollTop() + $scope.rowHeight);
            }
            else if ($scope.selectionProvider.lastClickedRow.renderedRowIndex <= EXCESS_ROWS + 2) {
                grid.$viewport.scrollTop(grid.$viewport.scrollTop() - $scope.rowHeight);
            }
      }
    }
    if ($scope.enableCellSelection) {
        setTimeout(function(){
            $scope.domAccessProvider.focusCellElement($scope, $scope.renderedColumns.indexOf(visibleCols[newColumnIndex]));
        }, 3);
    }

    return false;
};

if (!String.prototype.trim) {
    String.prototype.trim = function() {
        return this.replace(/^\s+|\s+$/g, '');
    };
}
if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function(elt ) {
        var len = this.length >>> 0;
        var from = Number(arguments[1]) || 0;
        from = (from < 0) ? Math.ceil(from) : Math.floor(from);
        if (from < 0) {
            from += len;
        }
        for (; from < len; from++) {
            if (from in this && this[from] === elt) {
                return from;
            }
        }
        return -1;
    };
}
if (!Array.prototype.filter) {
    Array.prototype.filter = function(fun ) {
        "use strict";
        var t = Object(this);
        var len = t.length >>> 0;
        if (typeof fun !== "function") {
            throw new TypeError();
        }
        var res = [];
        var thisp = arguments[1];
        for (var i = 0; i < len; i++) {
            if (i in t) {
                var val = t[i]; 
                if (fun.call(thisp, val, i, t)) {
                    res.push(val);
                }
            }
        }
        return res;
    };
}
ngGridFilters.filter('checkmark', function() {
    return function(input) {
        return input ? '\u2714' : '\u2718';
    };
});
ngGridFilters.filter('ngColumns', function() {
    return function(input) {
        return input.filter(function(col) {
            return !col.isAggCol;
        });
    };
});
angular.module('ngGrid.services').factory('$domUtilityService',['$utilityService', function($utils) {
    var domUtilityService = {};
    var regexCache = {};
    var getWidths = function() {
        var $testContainer = $('<div></div>');
        $testContainer.appendTo('body');
        $testContainer.height(100).width(100).css("position", "absolute").css("overflow", "scroll");
        $testContainer.append('<div style="height: 400px; width: 400px;"></div>');
        domUtilityService.ScrollH = ($testContainer.height() - $testContainer[0].clientHeight);
        domUtilityService.ScrollW = ($testContainer.width() - $testContainer[0].clientWidth);
        $testContainer.empty();
        $testContainer.attr('style', '');
        $testContainer.append('<span style="font-family: Verdana, Helvetica, Sans-Serif; font-size: 14px;"><strong>M</strong></span>');
        domUtilityService.LetterW = $testContainer.children().first().width();
        $testContainer.remove();
    };
    domUtilityService.eventStorage = {};
    domUtilityService.AssignGridContainers = function($scope, rootEl, grid) {
        grid.$root = $(rootEl);
        grid.$topPanel = grid.$root.find(".ngTopPanel");
        grid.$groupPanel = grid.$root.find(".ngGroupPanel");
        grid.$headerContainer = grid.$topPanel.find(".ngHeaderContainer");
        $scope.$headerContainer = grid.$headerContainer;

        grid.$headerScroller = grid.$topPanel.find(".ngHeaderScroller");
        grid.$headers = grid.$headerScroller.children();
        grid.$viewport = grid.$root.find(".ngViewport");
        grid.$canvas = grid.$viewport.find(".ngCanvas");
        grid.$footerPanel = grid.$root.find(".ngFooterPanel");

        $scope.$watch(function () {
            return grid.$viewport.scrollLeft();
        }, function (newLeft) {
            return grid.$headerContainer.scrollLeft(newLeft);
        });
        domUtilityService.UpdateGridLayout($scope, grid);
    };
    domUtilityService.getRealWidth = function (obj) {
        var width = 0;
        var props = { visibility: "hidden", display: "block" };
        var hiddenParents = obj.parents().andSelf().not(':visible');
        $.swap(hiddenParents[0], props, function () {
            width = obj.outerWidth();
        });
        return width;
    };
    domUtilityService.UpdateGridLayout = function($scope, grid) {
        var scrollTop = grid.$viewport.scrollTop();
        grid.elementDims.rootMaxW = grid.$root.width();
        if (grid.$root.is(':hidden')) {
            grid.elementDims.rootMaxW = domUtilityService.getRealWidth(grid.$root);
        }
        grid.elementDims.rootMaxH = grid.$root.height();
        grid.refreshDomSizes();
        $scope.adjustScrollTop(scrollTop, true); 
    };
    domUtilityService.numberOfGrids = 0;
    domUtilityService.BuildStyles = function($scope, grid, digest) {
        var rowHeight = grid.config.rowHeight,
            $style = grid.$styleSheet,
            gridId = grid.gridId,
            css,
            cols = $scope.columns,
            sumWidth = 0;

        if (!$style) {
            $style = $('#' + gridId);
            if (!$style[0]) {
                $style = $("<style id='" + gridId + "' type='text/css' rel='stylesheet' />").appendTo(grid.$root);
            }
        }
        $style.empty();
        var trw = $scope.totalRowWidth();
        css = "." + gridId + " .ngCanvas { width: " + trw + "px; }" +
            "." + gridId + " .ngRow { width: " + trw + "px; }" +
            "." + gridId + " .ngCanvas { width: " + trw + "px; }" +
            "." + gridId + " .ngHeaderScroller { width: " + (trw + domUtilityService.ScrollH) + "px}";
        if ( rowHeight !== 40) {
            css += "." + gridId + " .ngCell span, .icon-space { padding-top: " + (rowHeight - 20) / 2 + "px !important; padding-bottom: " + (rowHeight - 20) / 2 + "px !important; }" +
                "." + gridId + " .icon-space { height: " + rowHeight + "px !important;}" +
                "." + gridId + " .ngSelectionCell { padding-top: " + (rowHeight - 22) / 2 + "px !important; padding-bottom: " + (rowHeight - 22) / 2 + "px;}";
        }
        for (var i = 0; i < cols.length; i++) {
            var col = cols[i];
            if (col.visible !== false) {
                css += "." + gridId + " .col" + i + " { width: " + col.width + "px; left: " + sumWidth + "px;}" +  
                    "." + gridId + " .colt" + i + " { width: " + col.width + "px; }";
                sumWidth += col.width;
            }
        }

        if ($utils.isIe) { 
            $style[0].styleSheet.cssText = css;
        }

        else {
            $style[0].appendChild(document.createTextNode(css));
        }

        grid.$styleSheet = $style;

        $scope.adjustScrollLeft(grid.$viewport.scrollLeft());
        if (digest) {
            domUtilityService.digest($scope);
        }
    };
    domUtilityService.setColLeft = function(col, colLeft, grid) {
        if (grid.$styleSheet) {
            var regex = regexCache[col.index];
            if (!regex) {
                regex = regexCache[col.index] = new RegExp(".col" + col.index + " { width: [0-9]+px; left: [0-9]+px");
            }
            var str = grid.$styleSheet.html();
            var newStr = str.replace(regex, ".col" + col.index + " { width: " + col.width + "px; left: " + colLeft + "px");
            if ($utils.isIe) { 
                setTimeout(function() {
                    grid.$styleSheet.html(newStr);
                });
            }
            else {
                grid.$styleSheet.html(newStr);
            }
        }
    };
    domUtilityService.setColLeft.immediate = 1;
    domUtilityService.RebuildGrid = function($scope, grid){
        domUtilityService.UpdateGridLayout($scope, grid);
        if (grid.config.maintainColumnRatios == null || grid.config.maintainColumnRatios) {
            grid.configureColumnWidths();
        }
        $scope.adjustScrollLeft(grid.$viewport.scrollLeft());
        domUtilityService.BuildStyles($scope, grid, true);
    };

    domUtilityService.digest = function($scope) {
        if (!$scope.$root.$$phase) {
            $scope.$digest();
        }
    };
    domUtilityService.ScrollH = 17; 
    domUtilityService.ScrollW = 17; 
    domUtilityService.LetterW = 10;
    getWidths();
    return domUtilityService;
}]);

angular.module('ngGrid.services').factory('$sortService', ['$parse', function($parse) {
    var sortService = {};
    sortService.colSortFnCache = {};
    sortService.guessSortFn = function(item) {
        var itemType = typeof(item);
        switch (itemType) {
            case "number":
                return sortService.sortNumber;
            case "boolean":
                return sortService.sortBool;
            case "string":
                return item.match(/^[-+]?[£$¤]?[\d,.]+%?$/) ? sortService.sortNumberStr : sortService.sortAlpha;
            default:
                if (Object.prototype.toString.call(item) === '[object Date]') {
                    return sortService.sortDate;
                }
                else {
                    return sortService.basicSort;
                }
        }
    };
    sortService.basicSort = function(a, b) {
        if (a === b) {
            return 0;
        }
        if (a < b) {
            return -1;
        }
        return 1;
    };
    sortService.sortNumber = function(a, b) {
        return a - b;
    };
    sortService.sortNumberStr = function(a, b) {
        var numA, numB, badA = false, badB = false;
        numA = parseFloat(a.replace(/[^0-9.-]/g, ''));
        if (isNaN(numA)) {
            badA = true;
        }
        numB = parseFloat(b.replace(/[^0-9.-]/g, ''));
        if (isNaN(numB)) {
            badB = true;
        }
        if (badA && badB) {
            return 0;
        }
        if (badA) {
            return 1;
        }
        if (badB) {
            return -1;
        }
        return numA - numB;
    };
    sortService.sortAlpha = function(a, b) {
        var strA = a.toLowerCase(),
            strB = b.toLowerCase();
        return strA === strB ? 0 : (strA < strB ? -1 : 1);
    };
    sortService.sortDate = function(a, b) {
        var timeA = a.getTime(),
            timeB = b.getTime();
        return timeA === timeB ? 0 : (timeA < timeB ? -1 : 1);
    };
    sortService.sortBool = function(a, b) {
        if (a && b) {
            return 0;
        }
        if (!a && !b) {
            return 0;
        } else {
            return a ? 1 : -1;
        }
    };
    sortService.sortData = function(sortInfo, data ) {
        if (!data || !sortInfo) {
            return;
        }
        var l = sortInfo.fields.length,
            order = sortInfo.fields,
            col,
            direction,
            d = data.slice(0);
        data.sort(function (itemA, itemB) {
            itemA = sortInfo.expandable ? itemA.main : itemA;  
            itemB = sortInfo.expandable ? itemB.main : itemB;  
            var tem = 0,
                indx = 0,
                sortFn;
            while (tem === 0 && indx < l) {
                col = sortInfo.columns[indx];
                direction = sortInfo.directions[indx];
                sortFn = sortService.getSortFn(col, d);

                var propA = $parse(order[indx])(itemA);
                var propB = $parse(order[indx])(itemB);
                if ((!propA && propA !== 0) || (!propB && propB !== 0)) {
                    if (!propB && !propA) {
                        tem = 0;
                    }
                    else if (!propA) {
                        tem = 1;
                    }
                    else if (!propB) {
                        tem = -1;
                    }
                }
                else {
                    tem = sortFn(propA, propB);
                }
                indx++;
            }
            if (direction === ASC) {
                return tem;
            } else {
                return 0 - tem;
            }
        });
    };
    sortService.Sort = function(sortInfo, data) {
        if (sortService.isSorting) {
            return;
        }
        sortService.isSorting = true;
        sortService.sortData(sortInfo, data);
        sortService.isSorting = false;
    };
    sortService.getSortFn = function(col, data) {
        var sortFn, item;
        if (sortService.colSortFnCache[col.field]) {
            sortFn = sortService.colSortFnCache[col.field];
        }
        else if (col.sortingAlgorithm !== undefined) {
            sortFn = col.sortingAlgorithm;
            sortService.colSortFnCache[col.field] = col.sortingAlgorithm;
        }
        else { 
            item = col.expandable ? data[0].main: data[0];  
            if (!item) {
                return sortFn;
            }
            sortFn = sortService.guessSortFn($parse(col.field)(item));
            if (sortFn) {
                sortService.colSortFnCache[col.field] = sortFn;
            } else {
                sortFn = sortService.sortAlpha;
            }
        }
        return sortFn;
    };
    return sortService;
}]);

angular.module('ngGrid.services').factory('$utilityService', ['$parse', function ($parse) {
    var funcNameRegex = /function (.{1,})\(/;
    var utils = {
        visualLength: function(node) {
            var elem = document.getElementById('testDataLength');
            if (!elem) {
                elem = document.createElement('SPAN');
                elem.id = "testDataLength";
                elem.style.visibility = "hidden";
                document.body.appendChild(elem);
            }
            $(elem).css('font', $(node).css('font'));
            $(elem).css('font-size', $(node).css('font-size'));
            $(elem).css('font-family', $(node).css('font-family'));
            elem.innerHTML = $(node).text();
            return elem.offsetWidth;
        },
        forIn: function(obj, action) {
            for (var prop in obj) {
                if (obj.hasOwnProperty(prop)) {
                    action(obj[prop], prop);
                }
            }
        },
        evalProperty: function (entity, path) {
            return $parse(path)(entity);
        },
        endsWith: function(str, suffix) {
            if (!str || !suffix || typeof str !== "string") {
                return false;
            }
            return str.indexOf(suffix, str.length - suffix.length) !== -1;
        },
        isNullOrUndefined: function(obj) {
            if (obj === undefined || obj === null) {
                return true;
            }
            return false;
        },
        getElementsByClassName: function(cl) {
            var retnode = [];
            var myclass = new RegExp('\\b' + cl + '\\b');
            var elem = document.getElementsByTagName('*');
            for (var i = 0; i < elem.length; i++) {
                var classes = elem[i].className;
                if (myclass.test(classes)) {
                    retnode.push(elem[i]);
                }
            }
            return retnode;
        },
        newId: (function() {
            var seedId = new Date().getTime();
            return function() {
                return seedId += 1;
            };
        })(),
        seti18n: function($scope, language) {
            var $langPack = window.ngGrid.i18n[language];
            for (var label in $langPack) {
                $scope.i18n[label] = $langPack[label];
            }
        },
        getInstanceType: function (o) {
            var results = (funcNameRegex).exec(o.constructor.toString());
            if (results && results.length > 1) {
                var instanceType = results[1].replace(/^\s+|\s+$/g, ""); 
                return instanceType;
            }
            else {
                return "";
            }
        },
        ieVersion: (function() {
            var version = 3, div = document.createElement('div'), iElems = div.getElementsByTagName('i');
            do{
                div.innerHTML = '<!--[if gt IE ' + (++version) + ']><i></i><![endif]-->';
            }while(iElems[0]);
            return version > 4 ? version : undefined;
        })()
    };

    $.extend(utils, {
        isIe: (function() {
            return utils.ieVersion !== undefined;
        })()
    });
    return utils;
}]);

var ngAggregate = function (aggEntity, rowFactory, rowHeight, groupInitState) {
    this.rowIndex = 0;
    this.offsetTop = this.rowIndex * rowHeight;
    this.entity = aggEntity;
    this.label = aggEntity.gLabel;
    this.field = aggEntity.gField;
    this.depth = aggEntity.gDepth;
    this.parent = aggEntity.parent;
    this.children = aggEntity.children;
    this.aggChildren = aggEntity.aggChildren;
    this.aggIndex = aggEntity.aggIndex;
    this.collapsed = groupInitState;
    this.groupInitState = groupInitState;
    this.rowFactory = rowFactory;
    this.rowHeight = rowHeight;
    this.isAggRow = true;
    this.offsetLeft = aggEntity.gDepth * 25;
    this.aggLabelFilter = aggEntity.aggLabelFilter;
};

ngAggregate.prototype.toggleExpand = function () {
    this.collapsed = this.collapsed ? false : true;
    if (this.orig) {
        this.orig.collapsed = this.collapsed;
    }
    this.notifyChildren();
};
ngAggregate.prototype.setExpand = function (state) {
    this.collapsed = state;
    this.notifyChildren();
};
ngAggregate.prototype.notifyChildren = function () {
    var longest = Math.max(this.rowFactory.aggCache.length, this.children.length);
    for (var i = 0; i < longest; i++) {
        if (this.aggChildren[i]) {
            this.aggChildren[i].entity[NG_HIDDEN] = this.collapsed;
            if (this.collapsed) {
                this.aggChildren[i].setExpand(this.collapsed);
            }
        }
        if (this.children[i]) {
            this.children[i][NG_HIDDEN] = this.collapsed;
        }
        if (i > this.aggIndex && this.rowFactory.aggCache[i]) {
            var agg = this.rowFactory.aggCache[i];
            var offset = (40 * this.children.length);
            agg.offsetTop = this.collapsed ? agg.offsetTop - offset : agg.offsetTop + offset;
        }
    }
    this.rowFactory.renderedChange();
};
ngAggregate.prototype.aggClass = function () {
    return this.collapsed ? "ngAggArrowCollapsed" : "ngAggArrowExpanded";
};
ngAggregate.prototype.totalChildren = function () {
    if (this.aggChildren.length > 0) {
        var i = 0;
        var recurse = function (cur) {
            if (cur.aggChildren.length > 0) {
                angular.forEach(cur.aggChildren, function (a) {
                    recurse(a);
                });
            } else {
                i += cur.children.length;
            }
        };
        recurse(this);
        return i;
    } else {
        return this.children.length;
    }
};
ngAggregate.prototype.copy = function () {
    var ret = new ngAggregate(this.entity, this.rowFactory, this.rowHeight, this.groupInitState);
    ret.orig = this;
    return ret;
};
var ngColumn = function (config, $scope, grid, domUtilityService, $templateCache, $utils) {
    var self = this,
        colDef = config.colDef,
        delay = 500,
        clicks = 0,
        timer = null;
    self.colDef = config.colDef;
    self.width = colDef.width;
    self.groupIndex = 0;
    self.isGroupedBy = false;
    self.minWidth = !colDef.minWidth ? 50 : colDef.minWidth;
    self.maxWidth = !colDef.maxWidth ? 9000 : colDef.maxWidth;
    self.enableCellEdit = colDef.enableCellEdit !== undefined ? colDef.enableCellEdit : (config.enableCellEdit || config.enableCellEditOnFocus);

    self.headerRowHeight = config.headerRowHeight;
    self.displayName = (colDef.displayName === undefined) ? colDef.field : colDef.displayName;

    self.expandable = config.expandable;  
    self.index = config.index;
    self.isAggCol = config.isAggCol;
    self.cellClass = colDef.cellClass;
    self.sortPriority = undefined;
    self.cellFilter = colDef.cellFilter ? colDef.cellFilter : "";
    self.field = colDef.field;
    self.aggLabelFilter = colDef.cellFilter || colDef.aggLabelFilter;
    self.visible = $utils.isNullOrUndefined(colDef.visible) || colDef.visible;
    self.sortable = false;
    self.resizable = false;
    self.pinnable = false;
    self.numeric = config.colDef.numeric;  
    self.pinned = (config.enablePinning && colDef.pinned);
    self.originalIndex = config.originalIndex == null ? self.index : config.originalIndex;
    self.groupable = $utils.isNullOrUndefined(colDef.groupable) || colDef.groupable;
    if (config.enableSort) {
        self.sortable = $utils.isNullOrUndefined(colDef.sortable) || colDef.sortable;
    }
    if (config.enableResize) {
        self.resizable = $utils.isNullOrUndefined(colDef.resizable) || colDef.resizable;
    }
    if (config.enablePinning) {
        self.pinnable = $utils.isNullOrUndefined(colDef.pinnable) || colDef.pinnable;
    }
    self.sortDirection = undefined;
    self.sortingAlgorithm = colDef.sortFn;
    self.headerClass = colDef.headerClass;
    self.cursor = self.sortable ? 'pointer' : 'default';
    self.headerCellTemplate = colDef.headerCellTemplate || $templateCache.get('headerCellTemplate.html');
    self.cellTemplate = colDef.cellTemplate || $templateCache.get('cellTemplate.html').replace(CUSTOM_FILTERS, self.cellFilter ? "|" + self.cellFilter : "");
    if(self.enableCellEdit) {
        self.cellEditTemplate = $templateCache.get('cellEditTemplate.html');
        self.editableCellTemplate = colDef.editableCellTemplate || $templateCache.get('editableCellTemplate.html');
    }
    if (colDef.cellTemplate && !TEMPLATE_REGEXP.test(colDef.cellTemplate)) {
        self.cellTemplate = $.ajax({
            type: "GET",
            url: colDef.cellTemplate,
            async: false
        }).responseText;
    }
    if (self.enableCellEdit && colDef.editableCellTemplate && !TEMPLATE_REGEXP.test(colDef.editableCellTemplate)) {
        self.editableCellTemplate = $.ajax({
            type: "GET",
            url: colDef.editableCellTemplate,
            async: false
        }).responseText;
    }
    if (colDef.headerCellTemplate && !TEMPLATE_REGEXP.test(colDef.headerCellTemplate)) {
        self.headerCellTemplate = $.ajax({
            type: "GET",
            url: colDef.headerCellTemplate,
            async: false
        }).responseText;
    }
    self.colIndex = function () {
        var classes = self.pinned ? "pinned " : "";
        classes += "col" + self.index + " colt" + self.index;
        if (self.cellClass) {
            classes += " " + self.cellClass;
        }
        if (self.numeric) {
            classes += " colNumeric";
        }
        return classes;
    };
    self.groupedByClass = function() {
        return self.isGroupedBy ? "ngGroupedByIcon" : "ngGroupIcon";
    };
    self.toggleVisible = function() {
        self.visible = !self.visible;
    };
    self.showSortButtonUp = function() {
        return self.sortable ? self.sortDirection === DESC : self.sortable;
    };
    self.showSortButtonDown = function() {
        return self.sortable ? self.sortDirection === ASC : self.sortable;
    };
    self.showSortableButton = function() {
        return self.sortable && self.sortDirection !== ASC && self.sortDirection !== DESC;
    };
    self.noSortVisible = function() {
        return !self.sortDirection;
    };
    self.sort = function(evt) {
        if (!self.sortable) {
            return true; 
        }
        var dir = self.sortDirection === ASC ? DESC : ASC;
        self.sortDirection = dir;
        config.sortCallback(self, evt);
        return false;
    };
    self.gripClick = function() {
        clicks++; 
        if (clicks === 1) {
            timer = setTimeout(function() {
                clicks = 0; 
            }, delay);
        } else {
            clearTimeout(timer); 
            config.resizeOnDataCallback(self); 
            clicks = 0; 
        }
    };
    self.gripOnMouseDown = function(event) {
        $scope.isColumnResizing = true;
        if (event.ctrlKey && !self.pinned) {
            self.toggleVisible();
            domUtilityService.BuildStyles($scope, grid);
            return true;
        }
        event.target.parentElement.style.cursor = 'col-resize';
        self.startMousePosition = event.clientX;
        self.origWidth = self.width;
        $(document).mousemove(self.onMouseMove);
        $(document).mouseup(self.gripOnMouseUp);
        return false;
    };
    self.onMouseMove = function(event) {
        var diff = event.clientX - self.startMousePosition;
        var newWidth = diff + self.origWidth;
        self.width = (newWidth < self.minWidth ? self.minWidth : (newWidth > self.maxWidth ? self.maxWidth : newWidth));
        $scope.hasUserChangedGridColumnWidths = true;
        domUtilityService.BuildStyles($scope, grid);
        return false;
    };
    self.gripOnMouseUp = function (event) {
        $(document).off('mousemove', self.onMouseMove);
        $(document).off('mouseup', self.gripOnMouseUp);
        event.target.parentElement.style.cursor = 'default';
        domUtilityService.digest($scope);
        $scope.isColumnResizing = false;
        return false;
    };
    self.copy = function() {
        var ret = new ngColumn(config, $scope, grid, domUtilityService, $templateCache);
        ret.isClone = true;
        ret.orig = self;
        return ret;
    };
    self.setVars = function (fromCol) {
        self.orig = fromCol;
        self.width = fromCol.width;
        self.groupIndex = fromCol.groupIndex;
        self.isGroupedBy = fromCol.isGroupedBy;
        self.displayName = fromCol.displayName;
        self.index = fromCol.index;
        self.isAggCol = fromCol.isAggCol;
        self.cellClass = fromCol.cellClass;
        self.cellFilter = fromCol.cellFilter;
        self.field = fromCol.field;
        self.aggLabelFilter = fromCol.aggLabelFilter;
        self.visible = fromCol.visible;
        self.sortable = fromCol.sortable;
        self.resizable = fromCol.resizable;
        self.pinnable = fromCol.pinnable;
        self.pinned = fromCol.pinned;
        self.originalIndex = fromCol.originalIndex;
        self.sortDirection = fromCol.sortDirection;
        self.sortingAlgorithm = fromCol.sortingAlgorithm;
        self.headerClass = fromCol.headerClass;
        self.headerCellTemplate = fromCol.headerCellTemplate;
        self.cellTemplate = fromCol.cellTemplate;
        self.cellEditTemplate = fromCol.cellEditTemplate;
        self.expandable = fromCol.expandable;  
    };
};

var ngDimension = function (options) {
    this.outerHeight = null;
    this.outerWidth = null;
    $.extend(this, options);
};
var ngDomAccessProvider = function (grid) {
    this.previousColumn = null;
    this.grid = grid;

};

ngDomAccessProvider.prototype.changeUserSelect = function (elm, value) {
    elm.css({
        '-webkit-touch-callout': value,
        '-webkit-user-select': value,
        '-khtml-user-select': value,
        '-moz-user-select': value === 'none' ? '-moz-none' : value,
        '-ms-user-select': value,
        'user-select': value
    });
};
ngDomAccessProvider.prototype.focusCellElement = function ($scope, index) { 
    if ($scope.selectionProvider.lastClickedRow) {
        var columnIndex = index !== undefined ? index : this.previousColumn;
        var elm = $scope.selectionProvider.lastClickedRow.clone ? $scope.selectionProvider.lastClickedRow.clone.elm : $scope.selectionProvider.lastClickedRow.elm;
        if (columnIndex !== undefined && elm) {
            var columns = angular.element(elm[0].children).filter(function () { return this.nodeType !== 8; }); 
            var i = Math.max(Math.min($scope.renderedColumns.length - 1, columnIndex), 0);
            if (this.grid.config.showSelectionCheckbox && angular.element(columns[i]).scope() && angular.element(columns[i]).scope().col.index === 0) {
                i = 1; 
            }
            if (columns[i]) {
                columns[i].children[1].children[0].focus();
            }
            this.previousColumn = columnIndex;
        }
    }
};
ngDomAccessProvider.prototype.selectionHandlers = function ($scope, elm) {
    var doingKeyDown = false;
    var self = this;
    elm.bind('keydown', function (evt) {
        if (evt.keyCode === 16) { 
            self.changeUserSelect(elm, 'none', evt);
            return true;
        } else if (!doingKeyDown) {
            doingKeyDown = true;
            var ret = ngMoveSelectionHandler($scope, elm, evt, self.grid);
            doingKeyDown = false;
            return ret;
        }
        return true;
    });
    elm.bind('keyup', function (evt) {
        if (evt.keyCode === 16) { 
            self.changeUserSelect(elm, 'text', evt);
        }
        return true;
    });
};
var ngEventProvider = function (grid, $scope, domUtilityService, $timeout) {
    var self = this;
    self.colToMove = undefined;
    self.groupToMove = undefined;
    self.assignEvents = function() {
        if (grid.config.jqueryUIDraggable && !grid.config.enablePinning) {
            grid.$groupPanel.droppable({
                addClasses: false,
                drop: function(event) {
                    self.onGroupDrop(event);
                }
            });

            grid.$groupPanel.on('$destroy', function() {
                grid.$groupPanel = null;
            });
        } else {
            grid.$groupPanel.on('mousedown', self.onGroupMouseDown).on('dragover', self.dragOver).on('drop', self.onGroupDrop);
            grid.$topPanel.on('mousedown', '.ngHeaderScroller', self.onHeaderMouseDown).on('dragover', '.ngHeaderScroller', self.dragOver);

            grid.$groupPanel.on('$destroy', function() {
                if (grid.$groupPanel){
                    grid.$groupPanel.off('mousedown');
                }

                grid.$groupPanel = null;
            });

            if (grid.config.enableColumnReordering) {
                grid.$topPanel.on('drop', '.ngHeaderScroller', self.onHeaderDrop);
            }

            grid.$topPanel.on('$destroy', function() {
                if (grid.$topPanel){
                    grid.$topPanel.off('mousedown');
                }

                if (grid.config.enableColumnReordering && grid.$topPanel) {
                    grid.$topPanel.off('drop');
                }

                grid.$topPanel = null;
            });
        }

        $scope.$on('$destroy', $scope.$watch('renderedColumns', function() {
            $timeout(self.setDraggables);
        }));
    };
    self.dragStart = function(evt){
      evt.dataTransfer.setData('text', ''); 
    };
    self.dragOver = function(evt) {
        evt.preventDefault();
    };
    self.setDraggables = function() {
        if (!grid.config.jqueryUIDraggable) {
            var columns = grid.$root.find('.ngHeaderSortColumn'); 
            angular.forEach(columns, function(col){
                if(col.className && col.className.indexOf("ngHeaderSortColumn") !== -1){
                    col.setAttribute('draggable', 'true');
                    if (col.addEventListener) { 
                        col.addEventListener('dragstart', self.dragStart);

                        angular.element(col).on('$destroy', function() {
                            angular.element(col).off('dragstart', self.dragStart);
                            col.removeEventListener('dragstart', self.dragStart);
                        });
                    }
                }
            });
            if (navigator.userAgent.indexOf("MSIE") !== -1){
                var sortColumn = grid.$root.find('.ngHeaderSortColumn');
                sortColumn.bind('selectstart', function () {
                    this.dragDrop();
                    return false;
                });
                angular.element(sortColumn).on('$destroy', function() {
                    sortColumn.off('selectstart');
                });
            }
        } else {
            if (grid.$root) {
                grid.$root.find('.ngHeaderSortColumn').draggable({
                    helper: 'clone',
                    appendTo: 'body',
                    stack: 'div',
                    addClasses: false,
                    start: function(event) {
                        self.onHeaderMouseDown(event);
                    }
                }).droppable({
                    drop: function(event) {
                        self.onHeaderDrop(event);
                    }
                });
            }
        }
    };
    self.onGroupMouseDown = function(event) {
        var groupItem = $(event.target);
        if (groupItem[0].className !== 'ngRemoveGroup') {
            var groupItemScope = angular.element(groupItem).scope();
            if (groupItemScope) {
                if (!grid.config.jqueryUIDraggable) {
                    groupItem.attr('draggable', 'true');
                    if(this.addEventListener){
                        this.addEventListener('dragstart', self.dragStart);

                        angular.element(this).on('$destroy', function() {
                            this.removeEventListener('dragstart', self.dragStart);
                        });
                    }
                    if (navigator.userAgent.indexOf("MSIE") !== -1){
                        groupItem.bind('selectstart', function () {
                            this.dragDrop();
                            return false;
                        });

                        groupItem.on('$destroy', function() {
                            groupItem.off('selectstart');
                        });
                    }
                }
                self.groupToMove = { header: groupItem, groupName: groupItemScope.group, index: groupItemScope.$index };
            }
        } else {
            self.groupToMove = undefined;
        }
    };
    self.onGroupDrop = function(event) {
        event.stopPropagation();
        var groupContainer;
        var groupScope;
        if (self.groupToMove) {
            groupContainer = $(event.target).closest('.ngGroupElement'); 
            if (groupContainer.context.className === 'ngGroupPanel') {
                $scope.configGroups.splice(self.groupToMove.index, 1);
                $scope.configGroups.push(self.groupToMove.groupName);
            } else {
                groupScope = angular.element(groupContainer).scope();
                if (groupScope) {
                    if (self.groupToMove.index !== groupScope.$index) {
                        $scope.configGroups.splice(self.groupToMove.index, 1);
                        $scope.configGroups.splice(groupScope.$index, 0, self.groupToMove.groupName);
                    }
                }
            }
            self.groupToMove = undefined;
            grid.fixGroupIndexes();
        } else if (self.colToMove) {
            if ($scope.configGroups.indexOf(self.colToMove.col) === -1) {
                groupContainer = $(event.target).closest('.ngGroupElement'); 
                if (groupContainer.context.className === 'ngGroupPanel' || groupContainer.context.className === 'ngGroupPanelDescription ng-binding') {
                    $scope.groupBy(self.colToMove.col);
                } else {
                    groupScope = angular.element(groupContainer).scope();
                    if (groupScope) {
                        $scope.removeGroup(groupScope.$index);
                    }
                }
            }
            self.colToMove = undefined;
        }
        if (!$scope.$$phase) {
            $scope.$apply();
        }
    };
    self.onHeaderMouseDown = function(event) {
        var headerContainer = $(event.target).closest('.ngHeaderSortColumn');
        var headerScope = angular.element(headerContainer).scope();
        if (headerScope) {
            self.colToMove = { header: headerContainer, col: headerScope.col };
        }
    };
    self.onHeaderDrop = function(event) {
        if (!self.colToMove || self.colToMove.col.pinned) {
            return;
        }
        var headerContainer = $(event.target).closest('.ngHeaderSortColumn');
        var headerScope = angular.element(headerContainer).scope();
        if (headerScope) {
            if (self.colToMove.col === headerScope.col || headerScope.col.pinned) {
                return;
            }
            $scope.columns.splice(self.colToMove.col.index, 1);
            $scope.columns.splice(headerScope.col.index, 0, self.colToMove.col);
            grid.fixColumnIndexes();
            self.colToMove = undefined;
            domUtilityService.digest($scope);
        }
    };

    self.assignGridEventHandlers = function() {
        if (grid.config.tabIndex === -1) {
            grid.$viewport.attr('tabIndex', domUtilityService.numberOfGrids);
            domUtilityService.numberOfGrids++;
        } else {
            grid.$viewport.attr('tabIndex', grid.config.tabIndex);
        }
        var windowThrottle;
        var windowResize = function(){
            clearTimeout(windowThrottle);
            windowThrottle = setTimeout(function() {
                domUtilityService.RebuildGrid($scope,grid);
            }, 100);
        };
        $(window).on('resize.nggrid', windowResize);
        var parentThrottle;
        var parentResize = function() {
            clearTimeout(parentThrottle);
            parentThrottle = setTimeout(function() {
                domUtilityService.RebuildGrid($scope,grid);
            }, 100);
        };
        $(grid.$root.parent()).on('resize.nggrid', parentResize);

        $scope.$on('$destroy', function(){
            $(window).off('resize.nggrid', windowResize);
        });
    };
    self.assignGridEventHandlers();
    self.assignEvents();
};

var ngFooter = function ($scope, grid) {
    $scope.maxRows = function () {
        var ret = Math.max($scope.totalServerItems, grid.data.length);
        return ret;
    };

    $scope.multiSelect = (grid.config.enableRowSelection && grid.config.multiSelect);
    $scope.selectedItemCount = grid.selectedItemCount;
    $scope.maxPages = function () {
        var maxPages = Math.ceil($scope.maxRows() / $scope.pagingOptions.pageSize);
        if (maxPages === 0) {
            return 1;
        } else {
            return maxPages;
        }
    };
    $scope.pageRangeMin = function() {
        return ($scope.pagingOptions.pageSize * ($scope.pagingOptions.currentPage - 1) + 1);
    };

    $scope.pageRangeMax = function() {
        return ($scope.pagingOptions.pageSize * $scope.pagingOptions.currentPage) > $scope.maxRows()? $scope.maxRows() : ($scope.pagingOptions.pageSize * $scope.pagingOptions.currentPage);
    };
    $scope.pageForward = function(i) {  
        $scope.toggleSelectAll(false, true); 
        var page = $scope.pagingOptions.currentPage;
        if ($scope.totalServerItems > 0) {
            $scope.pagingOptions.currentPage = Math.min(page + i, $scope.maxPages());  
        } else {
            $scope.pagingOptions.currentPage++;
        }
    };

    $scope.pageBackward = function(i) {  
        $scope.toggleSelectAll(false, true); 
        var page = $scope.pagingOptions.currentPage;
        $scope.pagingOptions.currentPage = Math.max(page - i, 1);  
    };

    $scope.pageToFirst = function() {
        $scope.pagingOptions.currentPage = 1;
    };

    $scope.pageToLast = function() {
        $scope.pagingOptions.currentPage = $scope.maxPages();
    };

    $scope.cantPageForward = function() {
        var curPage = $scope.pagingOptions.currentPage;
        var maxPages = $scope.maxPages();
        if ($scope.totalServerItems > 0) {
            return curPage >= maxPages;
        } else {
            return grid.data.length < 1;
        }

    };
    $scope.cantPageToLast = function() {
        if ($scope.totalServerItems > 0) {
            return $scope.cantPageForward();
        } else {
            return true;
        }
    };

    $scope.cantPageBackward = function(i) {  
        var curPage = $scope.pagingOptions.currentPage;
        return curPage <= 1;
    };
};




var ngGrid = function ($scope, options, sortService, domUtilityService, $filter, $templateCache, $utils, $timeout, $parse, $http, $q) {
    var defaults = {
            aggregateTemplate: undefined,
            afterSelectionChange: function() {
            },
            beforeSelectionChange: function() {
                return true;
            },
            checkboxCellTemplate: undefined,
            checkboxHeaderTemplate: undefined,
            columnDefs: undefined,
            data: [],
            dataUpdated: function() {
            },
            enableCellEdit: false,
            enableCellEditOnFocus: false,
            enableCellSelection: false,
            enableColumnResize: false,
            enableColumnReordering: false,
            enableColumnHeavyVirt: false,
            enablePaging: false,
            enablePinning: false,
            enableRowSelection: true,
            enableSorting: true,
            enableHighlighting: false,
            enableExpanding: false,
            excludeProperties: [],
            filterOptions: {
                filterText: "",
                useExternalFilter: false
            },
            footerRowHeight: 55,
            footerTemplate: undefined,
            groups: [],
            groupsCollapsedByDefault: true,
            headerRowHeight: 40,
            headerRowTemplate: undefined,
            jqueryUIDraggable: false,
            jqueryUITheme: false,
            keepLastSelected: true,
            maintainColumnRatios: undefined,
            menuTemplate: undefined,
            multiSelect: true,
            pagingOptions: {
                pageSizes: [250, 500, 1000],
                pageSize: 250,
                currentPage: 1
            },
            pinSelectionCheckbox: false,
            plugins: [],
            primaryKey: undefined,
            rowHeight: 40,
            rowTemplate: undefined,
            selectedItems: [],
            selectWithCheckboxOnly: false,
            showColumnMenu: false,
            showFilter: false,
            showFooter: false,
            showGroupPanel: false,
            showSelectionCheckbox: true,
            sortInfo: {fields: [], columns: [], directions: [], expandable: false },
            tabIndex: -1,
            totalServerItems: 0,
            useExternalSorting: false,
            i18n: 'en',
            virtualizationThreshold: 50
        },
        self = this;
    self.maxCanvasHt = 0;
    self.config = $.extend(defaults, window.ngGrid.config, options);
    self.config.showSelectionCheckbox = (self.config.showSelectionCheckbox && self.config.enableColumnHeavyVirt === false);
    self.config.enablePinning = (self.config.enablePinning && self.config.enableColumnHeavyVirt === false);
    self.config.selectWithCheckboxOnly = self.config.selectWithCheckboxOnly;  
    self.config.pinSelectionCheckbox = self.config.enablePinning;

    if (typeof options.columnDefs === "string") {
        self.config.columnDefs = $scope.$eval(options.columnDefs);
    }
    self.rowCache = [];
    self.rowMap = [];
    self.gridId = "ng" + $utils.newId();
    self.$root = null; 
    self.$groupPanel = null;
    self.$topPanel = null;
    self.$headerContainer = null;
    self.$headerScroller = null;
    self.$headers = null;
    self.$viewport = null;
    self.$canvas = null;
    self.rootDim = self.config.gridDim;
    self.data = [];
    self.lateBindColumns = false;
    self.filteredRows = [];

    self.initTemplates = function() {
        var templates = ['rowTemplate', 'aggregateTemplate', 'headerRowTemplate', 'checkboxCellTemplate', 'checkboxHeaderTemplate', 'menuTemplate', 'footerTemplate'];

        var promises = [];
        angular.forEach(templates, function(template) {
            promises.push( self.getTemplate(template) );
        });

        return $q.all(promises);
    };
    self.getTemplate = function (key) {
        var t = self.config[key];
        var uKey = self.gridId + key + ".html";
        var p = $q.defer();
        if (t && !TEMPLATE_REGEXP.test(t)) {
            $http.get(t, {
                cache: $templateCache
            })
                .success(function(data){
                    $templateCache.put(uKey, data);
                    p.resolve();
                })
                .error(function(err){
                    p.reject("Could not load template: " + t);
                });
        } else if (t) {
            $templateCache.put(uKey, t);
            p.resolve();
        } else {
            var dKey = key + ".html";
            $templateCache.put(uKey, $templateCache.get(dKey));
            p.resolve();
        }

        return p.promise;
    };

    if (typeof self.config.data === "object") {
        self.data = self.config.data; 
    }
    self.calcMaxCanvasHeight = function() {
        var calculatedHeight;
        if(self.config.groups.length > 0){
            calculatedHeight = self.rowFactory.parsedData.filter(function(e) {
                return !e[NG_HIDDEN];
            }).length * self.config.rowHeight;
        } else {
            calculatedHeight = self.filteredRows.length * self.config.rowHeight;
        }
        return calculatedHeight;
    };
    self.elementDims = {
        scrollW: 0,
        scrollH: 0,
        rowIndexCellW: 0,  
        rowSelectedCellW: 55,
        rootMaxW: 0,
        rootMaxH: 0
    };
    self.setRenderedRows = function (newRows) {
        $scope.renderedRows.length = newRows.length;
        for (var i = 0; i < newRows.length; i++) {
            if (!$scope.renderedRows[i] || (newRows[i].isAggRow || $scope.renderedRows[i].isAggRow)) {
                $scope.renderedRows[i] = newRows[i].copy();
                if (!newRows[i].isAggRow) {
                    $scope.renderedRows[i].setVars(newRows[i]);
                }
            } else {
                $scope.renderedRows[i].setVars(newRows[i]);
            }
            $scope.renderedRows[i].rowIndex = newRows[i].rowIndex;
            $scope.renderedRows[i].offsetTop = newRows[i].offsetTop;
            $scope.renderedRows[i].selected = newRows[i].selected;
            newRows[i].renderedRowIndex = i;
        }
        self.refreshDomSizes();
        domUtilityService.digest($scope);  
        $scope.$emit('ngGridEventRows', newRows);
    };
    self.minRowsToRender = function() {
        var viewportH = $scope.viewportDimHeight() || 1;
        return Math.floor(viewportH / self.config.rowHeight);
    };
    self.refreshDomSizes = function() {
        var dim = new ngDimension();
        dim.outerWidth = self.elementDims.rootMaxW;
        dim.outerHeight = self.elementDims.rootMaxH;
        self.rootDim = dim;
        self.maxCanvasHt = self.calcMaxCanvasHeight();
    };
    self.buildColumnDefsFromData = function () {
        self.config.columnDefs = [];
        var item = self.data[0];
        if (self.config.enableExpanding) {
            item = typeof(self.data[0]) !== 'undefined'? self.data[0].main : self.data[0];
        }
        if (!item) {
            self.lateBoundColumns = true;
            return;
        }
        $utils.forIn(item, function (prop, propName) {
            if (self.config.excludeProperties.indexOf(propName) === -1) {
                self.config.columnDefs.push({
                    field: propName,
                    numeric: typeof prop === "number" ? true : false  
                });
            }
        });
    };
    self.buildColumns = function() {
        var columnDefs = self.config.columnDefs,
            cols = [];
        if (!columnDefs) {
            self.buildColumnDefsFromData();
            columnDefs = self.config.columnDefs;
        }
        if (self.config.showSelectionCheckbox) {
            cols.push(new ngColumn({
                colDef: {
                    field: '\u2714',
                    width: self.elementDims.rowSelectedCellW,
                    sortable: false,
                    resizable: false,
                    groupable: false,
                    headerCellTemplate: $templateCache.get($scope.gridId + 'checkboxHeaderTemplate.html'),
                    cellTemplate: $templateCache.get($scope.gridId + 'checkboxCellTemplate.html'),
                    pinned: self.config.pinSelectionCheckbox
                },
                index: 0,
                headerRowHeight: self.config.headerRowHeight,
                sortCallback: self.sortData,
                resizeOnDataCallback: self.resizeOnData,
                enableResize: self.config.enableColumnResize,
                enableSort: self.config.enableSorting,
                enablePinning: self.config.enablePinning
            }, $scope, self, domUtilityService, $templateCache, $utils));
        }
        if (columnDefs.length > 0) {
            var checkboxOffset = self.config.showSelectionCheckbox ? 1 : 0;
            var groupOffset = $scope.configGroups.length;
            $scope.configGroups.length = 0;
            angular.forEach(columnDefs, function(colDef, i) {
                i += checkboxOffset;
                var column = new ngColumn({
                    colDef: colDef,
                    index: i + groupOffset,
                    originalIndex: i,
                    headerRowHeight: self.config.headerRowHeight,
                    sortCallback: self.sortData,
                    resizeOnDataCallback: self.resizeOnData,
                    enableResize: self.config.enableColumnResize,
                    enableSort: self.config.enableSorting,
                    enablePinning: self.config.enablePinning,
                    enableCellEdit: self.config.enableCellEdit || self.config.enableCellEditOnFocus,
                    expandable: self.config.enableExpanding,  
                    lastCol: i === columnDefs.length? true : false  
                }, $scope, self, domUtilityService, $templateCache, $utils);
                var indx = self.config.groups.indexOf(colDef.field);
                if (indx !== -1) {
                    column.isGroupedBy = true;
                    $scope.configGroups.splice(indx, 0, column);
                    column.groupIndex = $scope.configGroups.length;
                }
                cols.push(column);
            });
            $scope.columns = cols;
            if (self.config.groups.length > 0) {  
                self.rowFactory.getGrouping(self.config.groups);
            }
        }
    };
    self.configureColumnWidths = function() {
        var asterisksArray = [],
            percentArray = [],
            asteriskNum = 0,
            totalWidth = 0;
        var indexMap = {};
        angular.forEach($scope.columns, function(ngCol, i) {
            if (!$utils.isNullOrUndefined(ngCol.originalIndex)) {
                var origIndex = ngCol.originalIndex;
                if (self.config.showSelectionCheckbox) {
                    if(ngCol.originalIndex === 0 && ngCol.visible){
                        totalWidth += 55;
                    }
                    origIndex--;
                }
                indexMap[origIndex] = i;
            }
        });

        angular.forEach(self.config.columnDefs, function(colDef, i) {
            var ngColumn = $scope.columns[indexMap[i]];

            colDef.index = i;

            var isPercent = false, t;
            if ($utils.isNullOrUndefined(colDef.width)) {
                colDef.width = "*";
            } else { 
                isPercent = isNaN(colDef.width) ? $utils.endsWith(colDef.width, "%") : false;
                t = isPercent ? colDef.width : parseInt(colDef.width, 10);
            }
            if (isNaN(t) && !$scope.hasUserChangedGridColumnWidths) {
                t = colDef.width;
                if (t === 'auto') { 
                    ngColumn.width = ngColumn.minWidth;
                    totalWidth += ngColumn.width;
                    var temp = ngColumn;

                    $scope.$on("ngGridEventData", function () {
                        self.resizeOnData(temp);
                    });
                    return;
                } else if (t.indexOf("*") !== -1) { 
                    if (ngColumn && ngColumn.visible !== false) {
                        asteriskNum += t.length;
                    }
                    asterisksArray.push(colDef);
                    return;
                } else if (isPercent) { 
                    percentArray.push(colDef);
                    return;
                } else { 
                    throw "unable to parse column width, use percentage (\"10%\",\"20%\", etc...) or \"*\" to use remaining width of grid";
                }
            } else if (ngColumn.visible !== false) {
                totalWidth += ngColumn.width = parseInt(ngColumn.width, 10);
            }
        });
        if (percentArray.length > 0) {
            self.config.maintainColumnRatios = self.config.maintainColumnRatios !== false;
            var percentWidth = 0; 
            var hiddenPercent = 0; 
            angular.forEach(percentArray, function(colDef) {
                var ngColumn = $scope.columns[indexMap[colDef.index]];
                var t = colDef.width;
                var percent = parseInt(t.slice(0, -1), 10) / 100;
                percentWidth += percent;

                if (!ngColumn.visible) {
                    hiddenPercent += percent;
                }
            });
            var percentWidthUsed = percentWidth - hiddenPercent;
            angular.forEach(percentArray, function(colDef) {
                var ngColumn = $scope.columns[indexMap[colDef.index]];
                var t = colDef.width;
                var percent = parseInt(t.slice(0, -1), 10) / 100;
                if (hiddenPercent > 0) {
                    percent = percent / percentWidthUsed;
                }
                else {
                    percent = percent / percentWidth;
                }

                var pixelsForPercentBasedWidth = self.rootDim.outerWidth * percentWidth;
                ngColumn.width = Math.floor(pixelsForPercentBasedWidth * percent);
                totalWidth += ngColumn.width;
            });
        }
        if (asterisksArray.length > 0) {
            self.config.maintainColumnRatios = self.config.maintainColumnRatios !== false;
            var remainingWidth = self.rootDim.outerWidth - totalWidth;
            if (self.maxCanvasHt > $scope.viewportDimHeight()) {
                remainingWidth -= domUtilityService.ScrollW;
            }
            var asteriskVal = Math.floor(remainingWidth / asteriskNum);
            angular.forEach(asterisksArray, function(colDef, i) {
                var ngColumn = $scope.columns[indexMap[colDef.index]];
                ngColumn.width = asteriskVal * colDef.width.length;
                if (ngColumn.visible !== false) {
                    totalWidth += ngColumn.width;
                }

                var isLast = (i === (asterisksArray.length - 1));
                if(isLast && totalWidth < self.rootDim.outerWidth){
                    var gridWidthDifference = self.rootDim.outerWidth - totalWidth;
                    if(self.maxCanvasHt > $scope.viewportDimHeight()){
                        gridWidthDifference -= domUtilityService.ScrollW;
                    }
                    ngColumn.width += gridWidthDifference;
                }
            });
        }
    };
    self.init = function() {
        return self.initTemplates().then(function(){
            $scope.selectionProvider = new ngSelectionProvider(self, $scope, $parse);
            $scope.domAccessProvider = new ngDomAccessProvider(self);
            self.rowFactory = new ngRowFactory(self, $scope, domUtilityService, $templateCache, $utils);
            self.searchProvider = new ngSearchProvider($scope, self, $filter);
            self.styleProvider = new ngStyleProvider($scope, self);
            $scope.$watch('configGroups', function(a) {
                var tempArr = [];
                angular.forEach(a, function(item) {
                    tempArr.push(item.field || item);
                });
                self.config.groups = tempArr;
                self.rowFactory.filteredRowsChanged();
                $scope.$emit('ngGridEventGroups', a);
            }, true);
            $scope.$watch('columns', function (a) {
                if(!$scope.isColumnResizing){
                    domUtilityService.RebuildGrid($scope, self);
                }
                $scope.$emit('ngGridEventColumns', a);
            }, true);
            $scope.$watch('selectedItems', function() {
                if ($scope.selectedItems.length/$scope.totalFilteredItemsLength() === 1) {
                    $scope.toggleSelectAll(true, true);
                }
                else if ($scope.selectedItems.length/$scope.totalFilteredItemsLength() === 0){
                    $scope.toggleSelectAll(false, true);
                }
            }, true);
            $scope.$watch(function() {
                return options.i18n;
            }, function(newLang) {
                $utils.seti18n($scope, newLang);
            });
            self.maxCanvasHt = self.calcMaxCanvasHeight();

            if (self.config.sortInfo.fields && self.config.sortInfo.fields.length > 0) {
                $scope.$watch(function() {
                    return self.config.sortInfo;
                }, function(sortInfo){
                    if (!sortService.isSorting) {
                        self.sortColumnsInit();  
                        $scope.$emit('ngGridEventSorted', self.config.sortInfo);
                    }
                },true);
            }
        });
    };

    self.resizeOnData = function(col) {
        var longest = col.minWidth;
        var arr = $utils.getElementsByClassName('col' + col.index);
        angular.forEach(arr, function(elem, index) {
            var i;
            if (index === 0) {
                var kgHeaderText = $(elem).find('.ngHeaderText');
                i = $utils.visualLength(kgHeaderText) + 10; 
            } else {
                var ngCellText = $(elem).find('.ngCellText');
                i = $utils.visualLength(ngCellText) + 10; 
            }
            if (i > longest) {
                longest = i;
            }
        });
        col.width = col.longest = Math.min(col.maxWidth, longest + 7); 
        domUtilityService.BuildStyles($scope, self, true);
    };
    self.lastSortedColumns = [];
    self.sortData = function(col, evt) {
        if (evt && evt.shiftKey && self.config.sortInfo) {
            var indx = self.config.sortInfo.columns.indexOf(col);
            if (indx === -1) {
                if (self.config.sortInfo.columns.length === 1) {
                    self.config.sortInfo.columns[0].sortPriority = 1;
                }
                self.config.sortInfo.columns.push(col);
                col.sortPriority = self.config.sortInfo.columns.length;
                self.config.sortInfo.fields.push(col.field);
                self.config.sortInfo.directions.push(col.sortDirection);
                self.lastSortedColumns.push(col);
            } else {
                self.config.sortInfo.directions[indx] = col.sortDirection;
            }
        } else {
            var isArr = $.isArray(col);
            self.config.sortInfo.columns.length = 0;
            self.config.sortInfo.fields.length = 0;
            self.config.sortInfo.directions.length = 0;
            var push = function (c) {
                self.config.sortInfo.columns.push(c);
                self.config.sortInfo.fields.push(c.field);
                self.config.sortInfo.directions.push(c.sortDirection);
                self.lastSortedColumns.push(c);
            };
            if (isArr) {
                self.clearSortingData();
                angular.forEach(col, function (c, i) {
                    c.sortPriority = i + 1;
                    push(c);
                });
            } else {
                self.clearSortingData(col);
                col.sortPriority = undefined;
                push(col);
            }
        }
        self.sortActual();
        self.searchProvider.evalFilter();
        $scope.$emit('ngGridEventSorted', self.config.sortInfo);
        self.rowFactory.renderedChangeNoGroups();  
    };
    self.sortColumnsInit = function() {  
        if (self.config.sortInfo.columns) {
            self.config.sortInfo.columns.length = 0;
        } else {
            self.config.sortInfo.columns = [];
        }
        angular.forEach($scope.columns, function(c) {
            var i = self.config.sortInfo.fields.indexOf(c.field);
            if (i !== -1) {
                c.sortDirection = self.config.sortInfo.directions[i] || 'asc';
                self.config.sortInfo.columns[i] = c;
            }
        });
        angular.forEach(self.config.sortInfo.columns, function(c){
            self.sortData(c);
        });
    };
    self.sortActual = function() {
        if (!self.config.useExternalSorting) {
            var tempData = self.data.slice(0);
            angular.forEach(tempData, function(item, i) {
                var e = self.rowMap[i];
                if (e !== undefined) {
                    var v = self.rowCache[e];
                    if (v !== undefined) {
                        item.preSortSelected = v.selected;
                        item.preSortIndex = i;
                        item.preSortRowHeight = v.rowHeight;  
                        item.preSortCollapsed = v.collapsed;  
                    }
                }
            });
            self.config.sortInfo.expandable = self.config.enableExpanding? true : false;  
            sortService.Sort(self.config.sortInfo, tempData);
            var sortOffset = 0;  
            angular.forEach(tempData, function(item, i) {
                self.rowCache[i].entity = item;
                self.rowCache[i].collapsed = item.preSortCollapsed;  
                self.rowCache[i].rowHeight = item.preSortRowHeight;  
                self.rowCache[i].offsetTop = sortOffset;  
                self.rowCache[i].selected = item.preSortSelected;
                sortOffset += item.preSortRowHeight;  
                self.rowMap[item.preSortIndex] = i;
                delete item.preSortSelected;
                delete item.preSortIndex;
                delete item.preSortCollapsed;  
                delete item.preSortRowHeight;  
            });
        }
    };

    self.clearSortingData = function (col) {
        if (!col) {
            angular.forEach(self.lastSortedColumns, function (c) {
                c.sortDirection = "";
                c.sortPriority = null;
            });
            self.lastSortedColumns = [];
        } else {
            angular.forEach(self.lastSortedColumns, function (c) {
                if (col.index !== c.index) {
                    c.sortDirection = "";
                    c.sortPriority = null;
                }
            });
            self.lastSortedColumns[0] = col;
            self.lastSortedColumns.length = 1;
        }
    };
    self.fixColumnIndexes = function() {
        for (var i = 0; i < $scope.columns.length; i++) {
            $scope.columns[i].index = i;
        }
    };
    self.fixGroupIndexes = function() {
        angular.forEach($scope.configGroups, function(item, i) {
            item.groupIndex = i + 1;
        });
    };
    $scope.elementsNeedMeasuring = true;
    $scope.columns = [];
    $scope.renderedRows = [];
    $scope.renderedColumns = [];
    $scope.headerRow = null;
    $scope.rowHeight = self.config.rowHeight;
    $scope.jqueryUITheme = self.config.jqueryUITheme;
    $scope.showSelectionCheckbox = self.config.showSelectionCheckbox;
    $scope.enableCellSelection = self.config.enableCellSelection;
    $scope.enableCellEditOnFocus = self.config.enableCellEditOnFocus;
    $scope.footer = null;
    $scope.selectedItems = self.config.selectedItems;
    $scope.multiSelect = self.config.multiSelect;
    $scope.showFooter = self.config.showFooter;
    $scope.footerRowHeight = $scope.showFooter ? self.config.footerRowHeight : 0;
    $scope.showColumnMenu = self.config.showColumnMenu;
    $scope.showMenu = false;
    $scope.configGroups = [];
    $scope.gridId = self.gridId;
    $scope.allChosen = false;
    $scope.enablePaging = self.config.enablePaging;
    $scope.pagingOptions = self.config.pagingOptions;
    $scope.i18n = {};
    $utils.seti18n($scope, self.config.i18n);
    $scope.adjustScrollLeft = function (scrollLeft) {
        var colwidths = 0,
            totalLeft = 0,
            x = $scope.columns.length,
            newCols = [],
            dcv = !self.config.enableColumnHeavyVirt;
        var r = 0;
        var addCol = function (c) {
            if (dcv) {
                newCols.push(c);
            } else {
                if (!$scope.renderedColumns[r]) {
                    $scope.renderedColumns[r] = c.copy();
                } else {
                    $scope.renderedColumns[r].setVars(c);
                }
            }
            r++;
        };
        for (var i = 0; i < x; i++) {
            var col = $scope.columns[i];
            if (col.visible !== false) {
                var w = col.width + colwidths;
                if (col.pinned) {
                    addCol(col);
                    var newLeft = i > 0 ? (scrollLeft + totalLeft) : scrollLeft;
                    domUtilityService.setColLeft(col, newLeft, self);
                    totalLeft += col.width;
                } else {
                    if (w >= scrollLeft) {
                        if (colwidths <= scrollLeft + self.rootDim.outerWidth) {
                            addCol(col);
                        }
                    }
                }
                colwidths += col.width;
            }
        }
        if (dcv) {
            $scope.renderedColumns = newCols;
        }
    };
    self.prevScrollTop = 0;
    self.prevScrollIndex = 0;
    $scope.adjustScrollTop = function(scrollTop, force) {
        if (self.prevScrollTop === scrollTop && !force) {
            return;
        }
        if (scrollTop > 0 && self.$viewport[0].scrollHeight - scrollTop <= self.$viewport.outerHeight()) {
            $scope.$emit('ngGridEventScroll');
        }
        var rowIndex = Math.floor(scrollTop / self.config.rowHeight);
        var newRange;
        if (self.filteredRows.length > self.config.virtualizationThreshold) {
            if (self.prevScrollTop < scrollTop && rowIndex < self.prevScrollIndex + SCROLL_THRESHOLD) {
                return;
            }
            if (self.prevScrollTop > scrollTop && rowIndex > self.prevScrollIndex - SCROLL_THRESHOLD) {
                return;
            }
            newRange = new ngRange(Math.max(0, rowIndex - EXCESS_ROWS), rowIndex + self.minRowsToRender() + EXCESS_ROWS);
        } else {
            var maxLen = $scope.configGroups.length > 0 ? self.rowFactory.parsedData.length : self.data.length;
            newRange = new ngRange(0, Math.max(maxLen, self.minRowsToRender() + EXCESS_ROWS));
        }
        self.prevScrollTop = scrollTop;
        self.rowFactory.UpdateViewableRange(newRange);
        self.prevScrollIndex = rowIndex;
    };
    $scope.toggleShowMenu = function() {
        $scope.showMenu = !$scope.showMenu;
    };
    $scope.toggleSelectAll = function(state, selectOnlyVisible) {
        $scope.selectionProvider.toggleSelectAll(state, false, selectOnlyVisible);
    };
    $scope.toggleSelectAllClicked = function() {
        if (($scope.selectionProvider.selectedItems.length > 0) && ($scope.selectionProvider.selectedItems.length < $scope.selectionProvider.getItemsCount())) {
            $scope.selectionProvider.toggleSelectAll(false, true);
            $scope.allSelected = false;
            $scope.allChosen = false;
        } else {
            if ($scope.selectionProvider.selectedItems.length === 0) {
                $scope.selectionProvider.toggleSelectAll(true, true);
                $scope.allSelected = true;
                $scope.allChosen = true;
            } else if ($scope.selectionProvider.selectedItems.length === $scope.selectionProvider.getItemsCount()) {
                $scope.selectionProvider.toggleSelectAll(false, true);
                $scope.allSelected = false;
                $scope.allChosen = false;
            }
        }
    };

    $scope.totalFilteredItemsLength = function() {
        return self.filteredRows.length;
    };
    $scope.showGroupPanel = function() {
        return self.config.showGroupPanel;
    };
    $scope.topPanelHeight = function() {
        return self.config.showGroupPanel === true ? self.config.headerRowHeight + 32 : self.config.headerRowHeight;
    };

    $scope.viewportDimHeight = function() {
        return Math.max(0, self.rootDim.outerHeight - $scope.topPanelHeight() - $scope.footerRowHeight - 2);
    };
    $scope.groupBy = function (col) {
        if (self.data.length < 1 || !col.groupable  || !col.field) {
            return;
        }
        if (!col.sortDirection) {
            col.sort({ shiftKey: $scope.configGroups.length > 0 ? true : false });
        }

        var indx = $scope.configGroups.indexOf(col);
        if (indx === -1) {
            col.isGroupedBy = true;
            $scope.configGroups.push(col);
            col.groupIndex = $scope.configGroups.length;
        } else {
            $scope.removeGroup(indx);
        }
        self.$viewport.scrollTop(0);
        domUtilityService.digest($scope);
    };
    $scope.removeGroup = function(index) {
        var col = $scope.columns.filter(function(item) {
            return item.groupIndex === (index + 1);
        })[0];
        col.isGroupedBy = false;
        col.groupIndex = 0;
        if ($scope.columns[index].isAggCol) {
            $scope.columns.splice(index, 1);
            $scope.configGroups.splice(index, 1);
            self.fixGroupIndexes();
        }
        if ($scope.configGroups.length === 0) {
            self.fixColumnIndexes();
            domUtilityService.digest($scope);
        }
        $scope.adjustScrollLeft(0);
    };
    $scope.togglePin = function (col) {
        var indexFrom = col.index;
        var indexTo = 0;
        for (var i = 0; i < $scope.columns.length; i++) {
            if (!$scope.columns[i].pinned) {
                break;
            }
            indexTo++;
        }
        if (col.pinned) {
            indexTo = Math.max(col.originalIndex, indexTo - 1);
        }
        col.pinned = !col.pinned;
        $scope.columns.splice(indexFrom, 1);
        $scope.columns.splice(indexTo, 0, col);
        self.fixColumnIndexes();
        domUtilityService.BuildStyles($scope, self, true);
        self.$viewport.scrollLeft(self.$viewport.scrollLeft() - col.width);
    };
    $scope.totalRowWidth = function() {
        var totalWidth = 0,
            cols = $scope.columns;
        for (var i = 0; i < cols.length; i++) {
            if (cols[i].visible !== false) {
                totalWidth += cols[i].width;
            }
        }
        return totalWidth;
    };
    $scope.headerScrollerDim = function() {
        var viewportH = $scope.viewportDimHeight(),
            maxHeight = self.maxCanvasHt,
            vScrollBarIsOpen = (maxHeight > viewportH),
            newDim = new ngDimension();

        newDim.autoFitHeight = true;
        newDim.outerWidth = $scope.totalRowWidth();
        if (vScrollBarIsOpen) {
            newDim.outerWidth += self.elementDims.scrollW;
        } else if ((maxHeight - viewportH) <= self.elementDims.scrollH) { 
            newDim.outerWidth += self.elementDims.scrollW;
        }
        return newDim;
    };

    $scope.ngGridSelectOptions = [
        'All',
        'None'
    ];

    $scope.ngGridSelectOptionClicked = function(index) {
        switch (index) {
            case 0:
                $scope.toggleSelectAll(true, true);
                break;

            case 1:
                $scope.toggleSelectAll(false, true);
                break;

            case 2:
                break;
        }
    };
};

var ngRange = function (top, bottom) {
    this.topRow = top;
    this.bottomRow = bottom;
};
var ngRow = function (entity, initCollapse, rowFactory, config, offset, selectionProvider, rowIndex, $utils) {
  this.entity = entity;
  this.config = config;
  this.rowHeight = config.rowHeight;  
  this.selectionProvider = selectionProvider;
  this.rowIndex = rowIndex;
  this.utils = $utils;
  this.selected = selectionProvider.getSelection(entity);
  this.cursor = this.config.enableRowSelection ? 'pointer' : 'default';
  this.beforeSelectionChange = config.beforeSelectionChangeCallback;
  this.afterSelectionChange = config.afterSelectionChangeCallback;
  this.offsetTop = offset;  
  this.rowDisplayIndex = 0;
  this.expandable = config.expandable;  
  this.collapsed = initCollapse;  
  this.rowFactory = rowFactory;  
  this.rowPadding = (config.rowHeight - 20) / 2;
};

ngRow.prototype.setSelection = function (isSelected) {
  this.selectionProvider.setSelection(this, isSelected);
  this.selectionProvider.lastClickedRow = this;
};
ngRow.prototype.continueSelection = function (event) {
  this.selectionProvider.ChangeSelection(this, event);
};
ngRow.prototype.ensureEntity = function (expected) {
  if (this.entity !== expected) {
    this.entity = expected;
    this.selected = this.selectionProvider.getSelection(this.entity);
  }
};

ngRow.prototype.shiftOffsetTop = function(offset) {
  this.offsetTop += offset;
};

ngRow.prototype.toggleSelected = function (event) {
  if (!this.config.enableRowSelection && !this.config.enableCellSelection) {
    return true;
  }
  var element = event.target || event;
  
  if (element.type === "checkbox" && element.parentElement.className !== "ngSelectionCell ng-scope") {
    return true;
  }
  if (this.config.selectWithCheckboxOnly && element.type !== "checkbox") {
    this.selectionProvider.lastClickedRow = this;
    if (this.config.currentItemChange) {
      this.config.currentItemChange(this, event);
    }
    return true;
  }
  if (this.beforeSelectionChange(this, event)) {
    this.continueSelection(event);
  }
  return false;
};

ngRow.prototype.toggleRowExpand = function() {
  if (this.expandable) {
    this.rowFactory.expandRow(this.rowIndex);
  }
};
ngRow.prototype.arrowClass = function() {
  return this.collapsed? "" : "up";
};

ngRow.prototype.alternatingRowClass = function () {
  var isEven = (this.rowIndex % 2) === 0;
  var classes = {
    'ngRow' : true,
    'selected': this.selected,
    'even': isEven,
    'odd': !isEven,
    'ui-state-default': this.config.jqueryUITheme && isEven,
    'ui-state-active': this.config.jqueryUITheme && !isEven,
    'currentItem': this.getProperty('uiExtra.currentItem')  
  };
  return classes;
};
ngRow.prototype.getProperty = function (path) {
  return this.utils.evalProperty(this.entity, path);
};
ngRow.prototype.copy = function () {
  this.clone = new ngRow(this.entity, this.collapsed, this.rowFactory, this.config, this.offsetTop, this.selectionProvider, this.rowIndex, this.utils); 
  this.clone.isClone = true;
  this.clone.elm = this.elm;
  this.clone.orig = this;
  return this.clone;
};
ngRow.prototype.setVars = function (fromRow) {
  fromRow.clone = this;
  this.entity = fromRow.entity;
  this.collapsed = fromRow.collapsed;  
  this.rowHeight = fromRow.rowHeight;
  this.selected = fromRow.selected;
  this.orig = fromRow;
  
  if (this.expandable){
    if (this.entity.children.length > this.config.maxDepth) {
      this.config.maxDepth = this.entity.children.length;
    }
  }
  
};

var ngRowFactory = function (grid, $scope, domUtilityService, $templateCache, $utils) {
    var self = this;
    self.aggCache = {};
    self.expRowCache = [];  
    self.parentCache = []; 
    self.dataChanged = true;
    self.parsedData = [];
    self.rowConfig = {};
    self.selectionProvider = $scope.selectionProvider;
    self.rowHeight = grid.config.rowHeight;  
    self.numberOfAggregates = 0;
    self.groupedData = undefined;
    self.rowHeight = grid.config.rowHeight;
    self.rowConfig = {
        enableRowSelection: grid.config.enableRowSelection,
        rowClasses: grid.config.rowClasses,
        selectedItems: $scope.selectedItems,
        selectWithCheckboxOnly: grid.config.selectWithCheckboxOnly,
        beforeSelectionChangeCallback: grid.config.beforeSelectionChange,
        afterSelectionChangeCallback: grid.config.afterSelectionChange,
        jqueryUITheme: grid.config.jqueryUITheme,
        enableCellSelection: grid.config.enableCellSelection,
        rowHeight: grid.config.rowHeight,
        currentItemChange: grid.config.currentItemChange,  
        expandable: grid.config.enableExpanding,  
        maxDepth: 0  
    };

    self.renderedRange = new ngRange(0, grid.minRowsToRender() + EXCESS_ROWS);
    self.buildEntityRow = function(entity, rowIndex) {
        var rowOffset = 0;
        if (typeof(grid.rowCache) !== 'undefined') {
            for (var i = 0; i < grid.rowCache.length; i++) {
                rowOffset += grid.rowCache[i].rowHeight;
            }
        }
        return new ngRow(entity, true, self, self.rowConfig, rowOffset, self.selectionProvider, rowIndex, $utils);  
    };

    self.buildAggregateRow = function(aggEntity, rowIndex) {
        var agg = self.aggCache[aggEntity.aggIndex]; 
        if (!agg) {
            agg = new ngAggregate(aggEntity, self, self.rowHeight, grid.config.groupsCollapsedByDefault);  
            self.aggCache[aggEntity.aggIndex] = agg;
        }
        agg.rowIndex = rowIndex;
        agg.offsetTop = rowIndex * self.rowConfig.rowHeight;
        return agg;
    };
    self.UpdateViewableRange = function(newRange) {
        self.renderedRange = newRange;
        self.renderedChange();
    };
    self.adjustRowOffset = function(startIndex, offset) {
            for (var i = startIndex; i < grid.rowCache.length; i++) {
                grid.rowCache[i].shiftOffsetTop(offset);
            }
    };
    self.filteredRowsChanged = function() {
        if (grid.lateBoundColumns && grid.filteredRows.length > 0) {
            grid.config.columnDefs = undefined;
            grid.buildColumns();
            grid.lateBoundColumns = false;
            $scope.$evalAsync(function() {
                $scope.adjustScrollLeft(0);
            });
        }
        self.dataChanged = true;
        if (grid.config.groups.length > 0) {
            self.getGrouping(grid.config.groups);
        }
        self.UpdateViewableRange(self.renderedRange);
    };

    self.renderedChange = function() {
        if (!self.groupedData || grid.config.groups.length < 1) {
            self.renderedChangeNoGroups();
            grid.refreshDomSizes();
            return;
        }
        self.wasGrouped = true;
        self.parentCache = [];
        var x = 0;
        var temp = self.parsedData.filter(function (e) {
            if (e.isAggRow) {
                if (e.parent && e.parent.collapsed) {
                    return false;
                }
                return true;
            }
            if (!e[NG_HIDDEN]) {
                e.rowIndex = x++;
            }
            return !e[NG_HIDDEN];
        });
        self.totalRows = temp.length;
        var rowArr = [];
        for (var i = self.renderedRange.topRow; i < self.renderedRange.bottomRow; i++) {
            if (temp[i]) {
                temp[i].offsetTop = i * grid.config.rowHeight;
                rowArr.push(temp[i]);
            }
        }
        grid.setRenderedRows(rowArr);
    };

    self.renderedChangeNoGroups = function () {
        var rowArr = [];
        for (var i = self.renderedRange.topRow; i < self.renderedRange.bottomRow; i++) {
            if (grid.filteredRows[i]) {
                grid.filteredRows[i].rowIndex = i;
                grid.filteredRows[i].collapsed = grid.rowCache[i].collapsed;  
                grid.filteredRows[i].rowHeight = grid.rowCache[i].rowHeight;  
                grid.filteredRows[i].offsetTop = grid.rowCache[i].offsetTop;  
                rowArr.push(grid.filteredRows[i]);
            }
        }
        grid.setRenderedRows(rowArr);
    };

    self.fixRowCache = function () {
        var newLen = grid.data.length;
        var diff = newLen - grid.rowCache.length;
        if (diff < 0) {
            grid.rowCache.length = grid.rowMap.length = newLen;
        } else {
            for (var i = grid.rowCache.length; i < newLen; i++) {
                grid.rowCache[i] = grid.rowFactory.buildEntityRow(grid.data[i], i);
            }
        }
    };
    self.expandRow = function(index) {
        var offset;
        grid.rowCache[index].collapsed = grid.rowCache[index].collapsed? false: true;
        if (grid.rowCache[index].collapsed) {
            offset = grid.rowCache[index].rowHeight * -1 + grid.config.rowHeight;
        }
        grid.rowCache[index].rowHeight = grid.rowCache[index].collapsed? grid.config.rowHeight : (grid.rowCache[index].entity.children.length + 1) * grid.config.rowHeight;
        if (!grid.rowCache[index].collapsed) {
            offset = grid.rowCache[index].rowHeight - grid.config.rowHeight;
        }
        self.adjustRowOffset(grid.rowCache[index].rowIndex + 1, offset);
        self.renderedChangeNoGroups();
    };
    self.parseGroupData = function(g) {
        if (g.values) {
            for (var x = 0; x < g.values.length; x++){
                self.parentCache[self.parentCache.length - 1].children.push(g.values[x]);
                self.parsedData.push(g.values[x]);
            }
        } else {
            for (var prop in g) {
                if (prop === NG_FIELD || prop === NG_DEPTH || prop === NG_COLUMN) {
                    continue;
                } else if (g.hasOwnProperty(prop)) {
                    var agg = self.buildAggregateRow({
                        gField: g[NG_FIELD],
                        gLabel: prop,
                        gDepth: g[NG_DEPTH],
                        isAggRow: true,
                        '_ng_hidden_': false,
                        children: [],
                        aggChildren: [],
                        aggIndex: self.numberOfAggregates,
                        aggLabelFilter: g[NG_COLUMN].aggLabelFilter
                    }, 0);
                    self.numberOfAggregates++;
                    agg.parent = self.parentCache[agg.depth - 1];
                    if (agg.parent) {
                        agg.parent.collapsed = false;
                        agg.parent.aggChildren.push(agg);
                    }
                    self.parsedData.push(agg);
                    self.parentCache[agg.depth] = agg;
                    self.parseGroupData(g[prop]);
                }
            }
        }
    };
    self.getGrouping = function(groups) {
        self.aggCache = [];
        self.numberOfAggregates = 0;
        self.groupedData = {};
        var rows = grid.filteredRows,
            maxDepth = groups.length,
            cols = $scope.columns;

        function filterCols(cols, group) {
            return cols.filter(function(c) {
                return c.field === group;
            });
        }

        for (var x = 0; x < rows.length; x++) {
            var model = rows[x].entity;
            if (!model) {
                return;
            }
            rows[x][NG_HIDDEN] = grid.config.groupsCollapsedByDefault;
            var ptr = self.groupedData;

            for (var y = 0; y < groups.length; y++) {
                var group = groups[y];

                var col = filterCols(cols, group)[0];

                var val = $utils.evalProperty(model, group);
                val = val ? val.toString() : 'null';
                if (!ptr[val]) {
                    ptr[val] = {};
                }
                if (!ptr[NG_FIELD]) {
                    ptr[NG_FIELD] = group;
                }
                if (!ptr[NG_DEPTH]) {
                    ptr[NG_DEPTH] = y;
                }
                if (!ptr[NG_COLUMN]) {
                    ptr[NG_COLUMN] = col;
                }
                ptr = ptr[val];
            }
            if (!ptr.values) {
                ptr.values = [];
            }
            ptr.values.push(rows[x]);
        }
        if(cols.length > 0) {  
            for (var z = 0; z < groups.length; z++) {
                if (!cols[z].isAggCol && z <= maxDepth) {
                    cols.splice(0, 0, new ngColumn({
                        colDef: {
                            field: '',
                            width: 0,
                            sortable: false,
                            resizable: false,
                            headerCellTemplate: '<div class="ngAggHeader"></div>',
                            pinned: grid.config.pinSelectionCheckbox
                        },
                        enablePinning: grid.config.enablePinning,
                        isAggCol: true,
                        headerRowHeight: grid.config.headerRowHeight
                    }, $scope, grid, domUtilityService, $templateCache, $utils));
                }
            }
        }
        grid.fixColumnIndexes();
        $scope.adjustScrollLeft(0);
        self.parsedData.length = 0;
        self.parseGroupData(self.groupedData);
        self.fixRowCache();
    };

    if (grid.config.groups.length > 0 && grid.filteredRows.length > 0) {
        self.getGrouping(grid.config.groups);
    }
};

var ngSearchProvider = function ($scope, grid, $filter) {
    var self = this,
        searchConditions = [];

    self.extFilter = grid.config.filterOptions.useExternalFilter;
    $scope.showFilter = grid.config.showFilter;
    $scope.filterText = '';

    self.fieldMap = {};

    var searchEntireRow = function(condition, item, fieldMap){
        var result;
        for (var prop in item) {
            if (item.hasOwnProperty(prop)) {
                var c = fieldMap[prop.toLowerCase()];
                if (!c) {
                    continue;
                }
                var pVal = item[prop];
                if(typeof pVal === 'object'){
                    return searchEntireRow(condition, pVal, c);
                } else {
                    var f = null,
                        s = null;
                    if (c && c.cellFilter) {
                        s = c.cellFilter.split(':');
                        f = $filter(s[0]);
                    }
                    if (pVal !== null && pVal !== undefined) {
                        if (typeof f === "function") {
                            var filterRes = f(pVal, s[1]).toString();
                            result = condition.regex.test(filterRes);
                        } else {
                            result = condition.regex.test(pVal.toString());
                        }
                        if (result) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    };

    var searchColumn = function(condition, item){
        var result;
        var col = self.fieldMap[condition.columnDisplay];
        if (!col) {
            return false;
        }
        var sp = col.cellFilter.split(':');
        var filter = col.cellFilter ? $filter(sp[0]) : null;
        var value = item[condition.column] || item[col.field.split('.')[0]];
        if (value === null || value === undefined) {
            return false;
        }
        if (typeof filter === "function") {
            var filterResults = filter(typeof value === "object" ? evalObject(value, col.field) : value, sp[1]).toString();
            result = condition.regex.test(filterResults);
        }
        else {
            result = condition.regex.test(typeof value === "object" ? evalObject(value, col.field).toString() : value.toString());
        }
        if (result) {
            return true;
        }
        return false;
    };

    var filterFunc = function(item) {
        for (var x = 0, len = searchConditions.length; x < len; x++) {
            var condition = searchConditions[x];
            var result;
            if (!condition.column) {
                result = searchEntireRow(condition, item, self.fieldMap);
            } else {
                result = searchColumn(condition, item);
            }
            if(!result) {
                return false;
            }
        }
        return true;
    };

    self.evalFilter = function () {
        if (searchConditions.length === 0) {
            grid.filteredRows = grid.rowCache;
        } else {
            grid.filteredRows = grid.rowCache.filter(function(row) {
                return filterFunc(row.entity);
            });
        }
        for (var i = 0; i < grid.filteredRows.length; i++)
        {
            grid.filteredRows[i].rowIndex = i;
        }
        grid.rowFactory.filteredRowsChanged();
    };
    var evalObject = function (obj, columnName) {
        if (typeof obj !== "object" || typeof columnName !== "string") {
            return obj;
        }
        var args = columnName.split('.');
        var cObj = obj;
        if (args.length > 1) {
            for (var i = 1, len = args.length; i < len; i++) {
                cObj = cObj[args[i]];
                if (!cObj) {
                    return obj;
                }
            }
            return cObj;
        }
        return obj;
    };
    var getRegExp = function (str, modifiers) {
        try {
            return new RegExp(str, modifiers);
        } catch (err) {
            return new RegExp(str.replace(/(\^|\$|\(|\)|<|>|\[|\]|\{|\}|\\|\||\.|\*|\+|\?)/g, '\\$1'));
        }
    };
    var buildSearchConditions = function (a) {
        searchConditions = [];
        var qStr;
        if (!(qStr = $.trim(a))) {
            return;
        }
        var columnFilters = qStr.split(";");
        for (var i = 0; i < columnFilters.length; i++) {
            var args = columnFilters[i].split(':');
            if (args.length > 1) {
                var columnName = $.trim(args[0]);
                var columnValue = $.trim(args[1]);
                if (columnName && columnValue) {
                    searchConditions.push({
                        column: columnName,
                        columnDisplay: columnName.replace(/\s+/g, '').toLowerCase(),
                        regex: getRegExp(columnValue, 'i')
                    });
                }
            } else {
                var val = $.trim(args[0]);
                if (val) {
                    searchConditions.push({
                        column: '',
                        regex: getRegExp(val, 'i')
                    });
                }
            }
        }
    };

    if (!self.extFilter) {
        $scope.$watch('columns', function (cs) {
            for (var i = 0; i < cs.length; i++) {
                var col = cs[i];
                if (col.field) {
                    if(col.field.match(/\./g)){
                        var properties = col.field.split('.');
                        var currentProperty = self.fieldMap;
                        for(var j = 0; j < properties.length - 1; j++) {
                            currentProperty[ properties[j] ] =  currentProperty[ properties[j] ] || {};
                            currentProperty = currentProperty[properties[j]];
                        }
                        currentProperty[ properties[properties.length - 1] ] = col;
                    } else {
                        self.fieldMap[col.field.toLowerCase()] = col;
                    }
                }
                if (col.displayName) {
                    self.fieldMap[col.displayName.toLowerCase().replace(/\s+/g, '')] = col;
                }
            }
        });
    }

    $scope.$watch(
        function () {
            return grid.config.filterOptions.filterText;
        },
        function (a) {
            $scope.filterText = a;
        }
    );

    $scope.$watch('filterText', function(a){
        if (!self.extFilter) {
            $scope.$emit('ngGridEventFilter', a);
            buildSearchConditions(a);
            self.evalFilter();
        }
    });
};
var ngSelectionProvider = function (grid, $scope, $parse) {
    var self = this;
    self.multi = grid.config.multiSelect;
    self.selectedItems = grid.config.selectedItems;
    self.selectedIndex = grid.config.selectedIndex;
    self.lastClickedRow = undefined;
    self.ignoreSelectedItemChanges = false; 
    self.pKeyParser = $parse(grid.config.primaryKey);
    self.ChangeSelection = function (rowItem, evt) {
        var charCode = evt.which || evt.keyCode;
        var isUpDownKeyPress = (charCode === 40 || charCode === 38);

        if (evt && evt.shiftKey && !evt.keyCode && self.multi && grid.config.enableRowSelection) {
            if (self.lastClickedRow) {
                var rowsArr;
                if ($scope.configGroups.length > 0) {
                    rowsArr = grid.rowFactory.parsedData.filter(function(row) {
                        return !row.isAggRow;
                    });
                }
                else {
                    rowsArr = grid.filteredRows;
                }

                var thisIndx = rowItem.rowIndex;
                var prevIndx = self.lastClickedRowIndex;
                if (thisIndx === prevIndx) {
                    return false;
                }

                if (thisIndx < prevIndx) {
                    thisIndx = thisIndx ^ prevIndx;
                    prevIndx = thisIndx ^ prevIndx;
                    thisIndx = thisIndx ^ prevIndx;
                    thisIndx--;
                }
                else {
                    prevIndx++;
                }

                var rows = [];
                for (; prevIndx <= thisIndx; prevIndx++) {
                    rows.push(rowsArr[prevIndx]);
                }

                if (rows[rows.length - 1].beforeSelectionChange(rows, evt)) {
                    for (var i = 0; i < rows.length; i++) {
                        var ri = rows[i];
                        var selectionState = ri.selected;
                        ri.selected = !selectionState;
                        if (ri.clone) {
                            ri.clone.selected = ri.selected;
                        }
                        var index = self.selectedItems.indexOf(ri.entity);
                        if (index === -1) {
                            self.selectedItems.push(ri.entity);
                        }
                        else {
                            self.selectedItems.splice(index, 1);
                        }
                    }
                    rows[rows.length - 1].afterSelectionChange(rows, evt);
                }
                self.lastClickedRow = rowItem;
                self.lastClickedRowIndex = rowItem.rowIndex;

                return true;
            }
        }
        else if (!self.multi) {
            if (self.lastClickedRow === rowItem) {
                self.setSelection(self.lastClickedRow, grid.config.keepLastSelected ? true : !rowItem.selected);
            } else {
                if (self.lastClickedRow) {
                    self.setSelection(self.lastClickedRow, false);
                }
                self.setSelection(rowItem, !rowItem.selected);
            }
        }
        else if (!evt.keyCode || isUpDownKeyPress && !grid.config.selectWithCheckboxOnly) {
            self.setSelection(rowItem, !rowItem.selected);
        }
        self.lastClickedRow = rowItem;
        self.lastClickedRowIndex = rowItem.rowIndex;
        return true;
    };

    self.getSelection = function (entity) {
        var isSelected = false;
        if (grid.config.primaryKey) {
            var val = self.pKeyParser(entity);
            angular.forEach(self.selectedItems, function (c) {
                if (val === self.pKeyParser(c)) {
                    isSelected = true;
                }
            });
        }
        else {
            isSelected = self.selectedItems.indexOf(entity) !== -1;
        }
        return isSelected;
    };

    self.getItemsCount = function () {
        var rows = grid.filteredRows;
        return rows.length;
    };
    self.setSelection = function (rowItem, isSelected) {
        if(grid.config.enableRowSelection){
            if (!isSelected) {
                var indx = self.selectedItems.indexOf(rowItem.entity);
                if (indx !== -1) {
                    self.selectedItems.splice(indx, 1);
                }
            }
            else {
                if (self.selectedItems.indexOf(rowItem.entity) === -1) {
                    if (!self.multi && self.selectedItems.length > 0) {
                        self.toggleSelectAll(false, true);
                    }
                    self.selectedItems.push(rowItem.entity);
                }
            }
            rowItem.selected = isSelected;
            if (rowItem.orig) {
                rowItem.orig.selected = isSelected;
            }
            if (rowItem.clone) {
                rowItem.clone.selected = isSelected;
            }
            rowItem.afterSelectionChange(rowItem);
        }
    };
    self.toggleSelectAll = function (checkAll, bypass, selectFiltered) {
        var rows = selectFiltered ? grid.filteredRows : grid.rowCache;
        if (bypass || grid.config.beforeSelectionChange(rows, checkAll)) {
            var selectedlength = self.selectedItems.length;
            if (selectedlength > 0) {
                self.selectedItems.length = 0;
            }
            for (var i = 0; i < rows.length; i++) {
                rows[i].selected = checkAll;
                if (rows[i].clone) {
                    rows[i].clone.selected = checkAll;
                }
                if (checkAll) {
                    self.selectedItems.push(rows[i].entity);
                }
            }
            if (!bypass) {
                grid.config.afterSelectionChange(rows, checkAll);
            }
        }
    };
};
var ngStyleProvider = function($scope, grid) {
    $scope.headerCellStyle = function(col) {
        return { "height": col.headerRowHeight + "px" };
    };
    $scope.rowStyle = function (row) {
        var ret = { "top": row.offsetTop + "px", "height": row.rowHeight + "px" };  
        if (row.isAggRow) {
            ret.left = row.offsetLeft;
        }
        return ret;
    };
    $scope.canvasStyle = function() {
        return { "height": grid.maxCanvasHt + "px" };
    };
    $scope.headerScrollerStyle = function() {
        return { "height": grid.config.headerRowHeight + "px" };
    };
    $scope.topPanelStyle = function() {
        return { "width": grid.rootDim.outerWidth + "px", "height": $scope.topPanelHeight() + "px" };
    };
    $scope.headerStyle = function() {
        return { "width": grid.rootDim.outerWidth + "px", "height": grid.config.headerRowHeight + "px" };
    };
    $scope.groupPanelStyle = function () {
        return { "width": grid.rootDim.outerWidth + "px", "height": "32px" };
    };
    $scope.viewportStyle = function() {
        return { "width": grid.rootDim.outerWidth + "px", "height": $scope.viewportDimHeight() + "px" };
    };
    $scope.footerStyle = function() {
        return { "width": grid.rootDim.outerWidth + "px", "height": $scope.footerRowHeight + "px" };
    };
};

ngGridDirectives.directive('ngCellHasFocus', ['$domUtilityService',
    function (domUtilityService) {
        var focusOnInputElement = function($scope, elm) {
            $scope.isFocused = true;
            domUtilityService.digest($scope);

            $scope.$broadcast('ngGridEventStartCellEdit');

            $scope.$on('ngGridEventEndCellEdit', function() {
                $scope.isFocused = false;
                domUtilityService.digest($scope);
            });
        };

        return function($scope, elm) {
            var isFocused = false;
            var isCellEditableOnMouseDown = false;

            $scope.editCell = function() {
                if(!$scope.enableCellEditOnFocus) {
                    setTimeout(function() {
                        focusOnInputElement($scope,elm);
                    }, 0);
                }
            };
            elm.bind('mousedown', function(evt) {
                if($scope.enableCellEditOnFocus) {
                    isCellEditableOnMouseDown = true;
                } else {
                    elm.focus();
                }
                return true;
            });
            elm.bind('click', function(evt) {
                if($scope.enableCellEditOnFocus) {
                    evt.preventDefault();
                    isCellEditableOnMouseDown = false;
                    focusOnInputElement($scope,elm);
                }
            }); 
            elm.bind('focus', function(evt) {
                isFocused = true;
                if($scope.enableCellEditOnFocus && !isCellEditableOnMouseDown) {
                    focusOnInputElement($scope,elm);
                }
                return true;
            });
            elm.bind('blur', function() {
                isFocused = false;
                return true;
            });
            elm.bind('keydown', function(evt) {
                if(!$scope.enableCellEditOnFocus) {
                    if (isFocused && evt.keyCode !== 37 && evt.keyCode !== 38 && evt.keyCode !== 39 && evt.keyCode !== 40 && evt.keyCode !== 9 && !evt.shiftKey && evt.keyCode !== 13) {
                        focusOnInputElement($scope,elm);
                    }
                    if (isFocused && evt.shiftKey && (evt.keyCode >= 65 && evt.keyCode <= 90)) {
                        focusOnInputElement($scope, elm);
                    }
                    if (evt.keyCode === 27) {
                        elm.focus();
                    }
                }
                return true;
            });
        };
    }]);
ngGridDirectives.directive('ngCellText',
  function () {
      return function(scope, elm) {
          elm.bind('mouseover', function(evt) {
              evt.preventDefault();
              elm.css({
                  'cursor': 'text'
              });
          });
          elm.bind('mouseleave', function(evt) {
              evt.preventDefault();
              elm.css({
                  'cursor': 'default'
              });
          });
      };
  });
ngGridDirectives.directive('ngCell', ['$compile', '$domUtilityService', function ($compile, domUtilityService) {
    var ngCell = {
        scope: false,
        compile: function() {
            return {
                pre: function($scope, iElement) {
                    var html;
                    var prefix = $scope.col.expandable ? 'row.entity.main.' : 'row.entity.';  
                    var cellTemplate = $scope.col.cellTemplate.replace(COL_FIELD, prefix + $scope.col.field);

                    if ($scope.col.enableCellEdit) {
                        html =  $scope.col.cellEditTemplate;
                        html = html.replace(DISPLAY_CELL_TEMPLATE, cellTemplate);
                        html = html.replace(EDITABLE_CELL_TEMPLATE, $scope.col.editableCellTemplate.replace(COL_FIELD, 'row.entity.' + $scope.col.field));
                    } else {
                        html = cellTemplate;
                    }
                    if ($scope.col.expandable){
                        var detailHTML = '';
                        for (var i = 0; i < $scope.$parent.row.config.maxDepth; i++) {
                            detailHTML += $scope.col.expandable? '<span ng-cell-text style="display: block;" ng-show="!row.collapsed">{{row.entity.children[' + i +'].' + $scope.col.field + '}}</span>' : '';
                        }
                        html = html.replace(DETAIL_FIELD, detailHTML);
                        if ($scope.$last) {
                            html = html.replace(ICON_FIELD, '<span class="icon-dropdown-arrow"></span>');
                        } else {
                            html = html.replace(ICON_FIELD, '');
                        }
                    } else {
                        html = html.replace(DETAIL_FIELD, '');
                        html = html.replace(ICON_FIELD, '');
                    }
                    var cellElement = $compile(html)($scope);

                    if ($scope.enableCellSelection && cellElement[0].className.indexOf('ngSelectionCell') === -1) {
                        cellElement[0].setAttribute('tabindex', 0);
                        cellElement.addClass('ngCellElement');
                    }

                    iElement.append(cellElement);
                },
                post: function($scope, iElement) {
                    if ($scope.enableCellSelection) {
                        $scope.domAccessProvider.selectionHandlers($scope, iElement);
                    }

                    $scope.$on('ngGridEventDigestCell', function() {
                        domUtilityService.digest($scope);
                    });
                }
            };
        }
    };

    return ngCell;
}]);


ngGridDirectives.directive('ngEditCellIf', [function () {
  return {
    transclude: 'element',
    priority: 1000,
    terminal: true,
    restrict: 'A',
    compile: function (e, a, transclude) {
      return function (scope, element, attr) {

        var childElement;
        var childScope;
 
        scope.$watch(attr['ngEditCellIf'], function (newValue) {
          if (childElement) {
            childElement.remove();
            childElement = undefined;
          }
          if (childScope) {
            childScope.$destroy();
            childScope = undefined;
          }
          if (newValue) {
            childScope = scope.$new();
            transclude(childScope, function (clone) {
              childElement = clone;
              element.after(clone);
            });
          }
        });
      };
    }
  };
}]);
ngGridDirectives.directive('ngGridFooter', ['$compile', '$templateCache', function ($compile, $templateCache) {
    var ngGridFooter = {
        scope: false,
        compile: function () {
            return {
                pre: function ($scope, iElement) {
                    if (iElement.children().length === 0) {
                        iElement.append($compile($templateCache.get($scope.gridId + 'footerTemplate.html'))($scope));
                    }
                }
            };
        }
    };
    return ngGridFooter;
}]);

ngGridDirectives.directive('numericInput', function() {
    return {
        restrict: 'A',
        require: 'ngModel',
        link: function(scope, elem, attr, ngModel) {
            if (!ngModel) {
                return;
            }

            function isValid(value) {
                if (value === "") {
                    return 1;
                }

                var newValue = parseInt(value, 10);
                if (newValue.toString() !== value) {
                    return false;
                }

                var min = parseInt(attr.min, 10);
                var max = parseInt(attr.max, 10);
                if (newValue < min) {
                    return false;
                }

                if (newValue  > max) {
                    return false;
                }

                return true;
            }

            var previousValue = scope.$eval(attr.ngModel);
            ngModel.$parsers.push(function (val) {
                if (val === previousValue) {
                    return val;
                }

                if (!isValid(val)) {
                    ngModel.$setViewValue(previousValue);
                    ngModel.$render();
                    return previousValue;
                }

                previousValue = val;
                return val;
            });
        }
    };
});
ngGridDirectives.directive('ngGridMenu', ['$compile', '$templateCache', function ($compile, $templateCache) {
    var ngGridMenu = {
        scope: false,
        compile: function () {
            return {
                pre: function ($scope, iElement) {
                    if (iElement.children().length === 0) {
                        iElement.append($compile($templateCache.get($scope.gridId + 'menuTemplate.html'))($scope));
                    }
                }
            };
        }
    };
    return ngGridMenu;
}]);
ngGridDirectives.directive('ngGrid', ['$compile', '$filter', '$templateCache', '$sortService', '$domUtilityService', '$utilityService', '$timeout', '$parse', '$http', '$q', function ($compile, $filter, $templateCache, sortService, domUtilityService, $utils, $timeout, $parse, $http, $q) {
    var ngGridDirective = {
        scope: true,
        compile: function() {
            return {
                pre: function($scope, iElement, iAttrs) {
                    var $element = $(iElement);
                    var options = $scope.$eval(iAttrs.ngGrid);
                    options.gridDim = new ngDimension({ outerHeight: $($element).height(), outerWidth: $($element).width() });

                    var grid = new ngGrid($scope, options, sortService, domUtilityService, $filter, $templateCache, $utils, $timeout, $parse, $http, $q);
                    return grid.init().then(function() {
                        if (typeof options.columnDefs === "string") {
                            $scope.$parent.$watch(options.columnDefs, function (a) {
                                if (!a) {
                                    grid.refreshDomSizes();
                                    grid.buildColumns();
                                    return;
                                }
                                grid.lateBoundColumns = false;
                                $scope.columns = [];
                                grid.config.columnDefs = a;
                                grid.buildColumns();
                                grid.eventProvider.assignEvents();
                                domUtilityService.RebuildGrid($scope, grid);
                            }, true);
                        }
                        else {
                            grid.buildColumns();
                        }
                        if (typeof options.totalServerItems === "string") {
                            $scope.$parent.$watch(options.totalServerItems, function (newTotal, oldTotal) {
                                if (!angular.isDefined(newTotal)) {
                                    $scope.totalServerItems = 0;
                                }
                                else {
                                    $scope.totalServerItems = newTotal;
                                }
                            });
                        }
                        else {
                            $scope.totalServerItems = 0;
                        }
                        if (typeof options.data === "string") {
                            var dataWatcher = function (a) {
                                grid.data = $.extend([], a);
                                grid.rowFactory.fixRowCache();
                                angular.forEach(grid.data, function (item, j) {
                                    var indx = grid.rowMap[j] || j;
                                    if (grid.rowCache[indx]) {
                                        grid.rowCache[indx].ensureEntity(item);
                                    }
                                    grid.rowMap[indx] = j;
                                });
                                grid.searchProvider.evalFilter();
                                grid.configureColumnWidths();
                                grid.refreshDomSizes();
                                if (grid.config.sortInfo.fields.length > 0) {
                                    grid.sortColumnsInit();
                                    $scope.$emit('ngGridEventSorted', grid.config.sortInfo);
                                }
                                $scope.$emit("ngGridEventData", grid.gridId);
                            };
                            $scope.$parent.$watch(options.data, dataWatcher);
                            $scope.$parent.$watch(options.data + '.length', function() {
                                dataWatcher($scope.$eval(options.data));
                            });
                        }
                        grid.footerController = new ngFooter($scope, grid);
                        iElement.addClass("ngGrid").addClass(grid.gridId.toString());
                        if (!options.enableHighlighting) {
                            iElement.addClass("unselectable");
                        }
                        if (options.jqueryUITheme) {
                            iElement.addClass('ui-widget');
                        }
                        iElement.append($compile($templateCache.get('gridTemplate.html'))($scope));
                        domUtilityService.AssignGridContainers($scope, iElement, grid);
                        grid.eventProvider = new ngEventProvider(grid, $scope, domUtilityService, $timeout);
                        options.selectRow = function (rowIndex, state) {
                            if (grid.rowCache[rowIndex]) {
                                if (grid.rowCache[rowIndex].clone) {
                                    grid.rowCache[rowIndex].clone.setSelection(state ? true : false);
                                } 
                                grid.rowCache[rowIndex].setSelection(state ? true : false);
                            }
                        };
                        options.selectItem = function (itemIndex, state) {
                            options.selectRow(grid.rowMap[itemIndex], state);
                        };
                        options.selectAll = function (state) {
                            $scope.toggleSelectAll(state);
                        };
                        options.selectVisible = function (state) {
                            $scope.toggleSelectAll(state, true);
                        };
                        options.groupBy = function (field) {
                            if (field) {
                                $scope.groupBy($scope.columns.filter(function(c) {
                                    return c.field === field;
                                })[0]);
                            } else {
                                var arr = $.extend(true, [], $scope.configGroups);
                                angular.forEach(arr, $scope.groupBy);
                            }
                        };
                        options.sortBy = function (field) {
                            var col = $scope.columns.filter(function (c) {
                                return c.field === field;
                            })[0];
                            if (col) {
                                col.sort();
                            }
                        };
                        options.gridId = grid.gridId;
                        options.ngGrid = grid;
                        options.$gridScope = $scope;
                        options.$gridServices = { SortService: sortService, DomUtilityService: domUtilityService, UtilityService: $utils };
                        $scope.$on('ngGridEventDigestGrid', function(){
                            domUtilityService.digest($scope.$parent);
                        });
                        $scope.$on('ngGridEventDigestGridParent', function(){
                            domUtilityService.digest($scope.$parent);
                        });
                        $scope.$evalAsync(function() {
                            $scope.adjustScrollLeft(0);
                        });
                        angular.forEach(options.plugins, function (p) {
                            if (typeof p === "function") {
                                p = new p(); 
                            }
                            p.init($scope.$new(), grid, options.$gridServices);
                            options.plugins[$utils.getInstanceType(p)] = p;
                        });
                        if (typeof options.init === "function") {
                            options.init(grid, $scope);
                        }
                        return null;
                    });
                }
            };
        }
    };
    return ngGridDirective;
}]);

ngGridDirectives.directive('ngHeaderCell', ['$compile', function($compile) {
    var ngHeaderCell = {
        scope: false,
        compile: function() {
            return {
                pre: function($scope, iElement) {
                    iElement.append($compile($scope.col.headerCellTemplate)($scope));
                }
            };
        }
    };
    return ngHeaderCell;
}]);
ngGridDirectives.directive('ngInput', [function() {
    return {
        require: 'ngModel',
        link: function (scope, elm, attrs, ngModel) {
            var oldCellValue;
            var dereg = scope.$watch('ngModel', function() {
                oldCellValue = ngModel.$modelValue;
                dereg(); 
            });
            elm.bind('keydown', function(evt) {
                switch (evt.keyCode) {
                    case 37: 
                    case 38: 
                    case 39: 
                    case 40: 
                        evt.stopPropagation();
                        break;
                    case 27: 
                        if (!scope.$$phase) {
                            scope.$apply(function() {
                                ngModel.$setViewValue(oldCellValue);
                                elm.blur();
                            });
                        }
                        break;
                    case 13: 
                        if(scope.enableCellEditOnFocus && scope.totalFilteredItemsLength() - 1 > scope.row.rowIndex && scope.row.rowIndex > 0  || scope.enableCellEdit) {
                            elm.blur();
                        }
                        break;
                }

                return true;
            });

            elm.bind('click', function(evt) {
                evt.stopPropagation();
            }); 

            elm.bind('mousedown', function(evt) {
                evt.stopPropagation();
            }); 

            scope.$on('ngGridEventStartCellEdit', function () {
                elm.focus();
                elm.select();
            });

            angular.element(elm).bind('blur', function () {
                scope.$emit('ngGridEventEndCellEdit');
            });
        }
    };
}]);
ngGridDirectives.directive('ngRow', ['$compile', '$domUtilityService', '$templateCache', function ($compile, domUtilityService, $templateCache) {
    var ngRow = {
        scope: false,
        compile: function() {
            return {
                pre: function($scope, iElement) {
                    $scope.row.elm = iElement;
                    if ($scope.row.clone) {
                        $scope.row.clone.elm = iElement;
                    }
                    if ($scope.row.isAggRow) {
                        var html = $templateCache.get($scope.gridId + 'aggregateTemplate.html');
                        if ($scope.row.aggLabelFilter) {
                            html = html.replace(CUSTOM_FILTERS, '| ' + $scope.row.aggLabelFilter);
                        } else {
                            html = html.replace(CUSTOM_FILTERS, "");
                        }
                        iElement.append($compile(html)($scope));
                    } else {
                        iElement.append($compile($templateCache.get($scope.gridId + 'rowTemplate.html'))($scope));
                    }
					$scope.$on('ngGridEventDigestRow', function(){
						domUtilityService.digest($scope);
					});
                }
            };
        }
    };
    return ngRow;
}]);
ngGridDirectives.directive('ngViewport', [function() {
    return function($scope, elm) {
        var isMouseWheelActive;
        var prevScollLeft;
        var prevScollTop = 0;
        elm.bind('scroll', function(evt) {
            var scrollLeft = evt.target.scrollLeft,
                scrollTop = evt.target.scrollTop;
            if ($scope.$headerContainer) {
                $scope.$headerContainer.scrollLeft(scrollLeft);
            }
            $scope.adjustScrollLeft(scrollLeft);
            $scope.adjustScrollTop(scrollTop);
            if (!$scope.$root.$$phase) {
                $scope.$digest();
            }
            prevScollLeft = scrollLeft;
            prevScollTop = scrollTop;
            isMouseWheelActive = false;
            return true;
        });
        elm.bind("mousewheel DOMMouseScroll", function() {
            isMouseWheelActive = true;
            return true;
        });
        if (!$scope.enableCellSelection) {
            $scope.domAccessProvider.selectionHandlers($scope, elm);
        }
    };
}]);

window.ngGrid.i18n['da'] = {
    ngAggregateLabel: 'artikler',
    ngGroupPanelDescription: 'Grupér rækker udfra en kolonne ved at trække dens overskift hertil.',
    ngSearchPlaceHolder: 'Søg...',
    ngMenuText: 'Vælg kolonner:',
    ngShowingItemsLabel: 'Viste rækker:',
    ngTotalItemsLabel: 'Rækker totalt:',
    ngSelectedItemsLabel: 'Valgte rækker:',
    ngPageSizeLabel: 'Side størrelse:',
    ngPagerFirstTitle: 'Første side',
    ngPagerNextTitle: 'Næste side',
    ngPagerPrevTitle: 'Forrige side',
    ngPagerLastTitle: 'Sidste side',
    ngPagerPageText: 'Side',
    ngPagerOfText: 'af',
    ngPagerPerPageText: 'per side',
    ngGroupByText: 'Gruppe Ved'
};

window.ngGrid.i18n['de'] = {
    ngAggregateLabel: 'artikel',
    ngGroupPanelDescription: 'Ziehen Sie eine Spaltenüberschrift hier und legen Sie es der Gruppe nach dieser Spalte.',
    ngSearchPlaceHolder: 'Suche...',
    ngMenuText: 'Spalten auswählen:',
    ngShowingItemsLabel: 'Zeige Artikel:',
    ngTotalItemsLabel: 'Meiste Artikel:',
    ngSelectedItemsLabel: 'Ausgewählte Artikel:',
    ngPageSizeLabel: 'Größe Seite:',
    ngPagerFirstTitle: 'Erste Page',
    ngPagerNextTitle: 'Nächste Page',
    ngPagerPrevTitle: 'Vorherige Page',
    ngPagerLastTitle: 'Letzte Page',
    ngPagerPageText: 'Page',
    ngPagerOfText: 'van',
    ngPagerPerPageText: 'per page',
    ngGroupByText: 'Groep Door'
};

window.ngGrid.i18n['en'] = {
    ngAggregateLabel: 'items',
    ngGroupPanelDescription: 'Drag a column header here and drop it to group by that column.',
    ngSearchPlaceHolder: 'Search...',
    ngMenuText: 'Select Columns',
    ngShowingItemsLabel: 'Showing Items:',
    ngTotalItemsLabel: 'Total Items:',
    ngSelectedItemsLabel: 'Selected Items:',
    ngPageSizeLabel: 'Page Size:',
    ngPagerFirstTitle: 'First Page',
    ngPagerNextTitle: 'Next Page',
    ngPagerPrevTitle: 'Previous Page',
    ngPagerLastTitle: 'Last Page',
    ngPagerPageText: 'Page',
    ngPagerOfText: 'of',
    ngPagerPerPageText: 'per page',
    ngGroupByText: 'Group By'
};

window.ngGrid.i18n['es'] = {
    ngAggregateLabel: 'Artículos',
    ngGroupPanelDescription: 'Arrastre un encabezado de columna aquí y soltarlo para agrupar por esa columna.',
    ngSearchPlaceHolder: 'Buscar...',
    ngMenuText: 'Elegir columnas:',
    ngShowingItemsLabel: 'Artículos Mostrando:',
    ngTotalItemsLabel: 'Artículos Totales:',
    ngSelectedItemsLabel: 'Artículos Seleccionados:',
    ngPageSizeLabel: 'Tamaño de Página:',
    ngPagerFirstTitle: 'Primera Página',
    ngPagerNextTitle: 'Página Siguiente',
    ngPagerPrevTitle: 'Página Anterior',
    ngPagerLastTitle: 'Última Página',
    ngPagerPageText: 'Página',
    ngPagerOfText: 'de',
    ngPagerPerPageText: 'por página',
    ngGroupByText: 'Agrupar Por'
};

window.ngGrid.i18n['fr'] = {
    ngAggregateLabel: 'articles',
    ngGroupPanelDescription: 'Faites glisser un en-tête de colonne ici et déposez-le vers un groupe par cette colonne.',
    ngSearchPlaceHolder: 'Recherche...',
    ngMenuText: 'Choisir des colonnes:',
    ngShowingItemsLabel: 'Articles Affichage des:',
    ngTotalItemsLabel: 'Nombre total d\'articles:',
    ngSelectedItemsLabel: 'Éléments Articles:',
    ngPageSizeLabel: 'Taille de page:',
    ngPagerFirstTitle: 'Première page',
    ngPagerNextTitle: 'Page Suivante',
    ngPagerPrevTitle: 'Page précédente',
    ngPagerLastTitle: 'Dernière page',
    ngPagerPageText: 'Page',
    ngPagerOfText: 'de',
    ngPagerPerPageText: 'par page',
    ngGroupByText: 'Par Groupe'
};

window.ngGrid.i18n['pt-br'] = {
    ngAggregateLabel: 'items',
    ngGroupPanelDescription: 'Arraste e solte uma coluna aqui para agrupar por essa coluna',
    ngSearchPlaceHolder: 'Procurar...',
    ngMenuText: 'Selecione as colunas:',
    ngShowingItemsLabel: 'Mostrando os Items:',
    ngTotalItemsLabel: 'Total de Items:',
    ngSelectedItemsLabel: 'Items Selecionados:',
    ngPageSizeLabel: 'Tamanho da Página:',
    ngPagerFirstTitle: 'Primeira Página',
    ngPagerNextTitle: 'Próxima Página',
    ngPagerPrevTitle: 'Página Anterior',
    ngPagerLastTitle: 'Última Página',
    ngPagerPageText: 'Página',
    ngPagerOfText: 'de',
    ngPagerPerPageText: 'por página',
    ngGroupByText: 'Grupo Por'
};

window.ngGrid.i18n['zh-cn'] = {
    ngAggregateLabel: '条目',
    ngGroupPanelDescription: '拖曳表头到此处以进行分组',
    ngSearchPlaceHolder: '搜索...',
    ngMenuText: '数据分组与选择列：',
    ngShowingItemsLabel: '当前显示条目：',
    ngTotalItemsLabel: '条目总数：',
    ngSelectedItemsLabel: '选中条目：',
    ngPageSizeLabel: '每页显示数：',
    ngPagerFirstTitle: '回到首页',
    ngPagerNextTitle: '下一页',
    ngPagerPrevTitle: '上一页',
    ngPagerLastTitle: '前往尾页',
    ngPagerPageText: 'Page',
    ngPagerOfText: 'of',
    ngPagerPerPageText: 'per page',
    ngGroupByText: 'Group By'
};

window.ngGrid.i18n['zh-tw'] = {
    ngAggregateLabel: '筆',
    ngGroupPanelDescription: '拖拉表頭到此處以進行分組',
    ngSearchPlaceHolder: '搜尋...',
    ngMenuText: '選擇欄位：',
    ngShowingItemsLabel: '目前顯示筆數：',
    ngTotalItemsLabel: '總筆數：',
    ngSelectedItemsLabel: '選取筆數：',
    ngPageSizeLabel: '每頁顯示：',
    ngPagerFirstTitle: '第一頁',
    ngPagerNextTitle: '下一頁',
    ngPagerPrevTitle: '上一頁',
    ngPagerLastTitle: '最後頁',
    ngPagerPageText: 'Page',
    ngPagerOfText: 'of',
    ngPagerPerPageText: 'per page',
    ngGroupByText: 'Group By'
};

angular.module("ngGrid").run(["$templateCache", function($templateCache) {

  $templateCache.put("aggregateTemplate.html",
    "<div ng-click=\"row.toggleExpand()\" ng-style=\"rowStyle(row)\" class=\"ngAggregate\">\n" +
    "    <span class=\"ngAggregateText\">{{row.label CUSTOM_FILTERS}} ({{row.totalChildren()}} {{AggItemsLabel}})</span>\n" +
    "    <div class=\"{{row.aggClass()}}\"></div>\n" +
    "</div>\n" +
    "\n"
  );

  $templateCache.put("cellEditTemplate.html",
    "<div ng-cell-has-focus ng-dblclick=\"editCell()\">\n" +
    "\t<div ng-edit-cell-if=\"!isFocused\">\n" +
    "\t\tDISPLAY_CELL_TEMPLATE\n" +
    "\t</div>\n" +
    "\t<div ng-edit-cell-if=\"isFocused\">\n" +
    "\t\tEDITABLE_CELL_TEMPLATE\n" +
    "\t</div>\n" +
    "</div>\n"
  );

  $templateCache.put("cellTemplate.html",
    "<div class=\"ngCellText\" ng-class=\"{ 'ngSorted': !col.noSortVisible() }\" ng-class=\"col.colIndex()\"><span ng-cell-text>{{COL_FIELD CUSTOM_FILTERS}}</span>DETAIL_FIELD</div><div ng-show =\"$last\" ng-class=\"row.arrowClass()\" class=\"icon-space\">ICON_FIELD</div>"
  );

  $templateCache.put("checkboxCellTemplate.html",
    "<div class=\"ngSelectionCell\"><input tabindex=\"-1\" class=\"ark-checkbox\" type=\"checkbox\" ng-checked=\"row.selected\" /><span></span></div>"
  );

  $templateCache.put("checkboxHeaderTemplate.html",
    "<div class=\"ngSelectionHeader\">\n" +
    "    <label>\n" +
    "        <span class=\"ng-grid-checkbox-multi-state fonticon\"\n" +
    "              ng-class=\"selectionProvider.selectedItems.length == 0 ? 'icon-checkbox' :  (selectionProvider.selectedItems.length < selectionProvider.getItemsCount() ? ' icon-select-yes checked' : 'icon-checkbox-tick checked')\"\n" +
    "              ng-click=\"toggleSelectAllClicked()\"></span>\n" +
    "    </label>\n" +
    "    <span class=\"ark-dropdown ng-grid-selection-dropdown ark-no-dropup\" data-container=\"body\">\n" +
    "      <a href class=\"ark-dropdown-toggle\">\n" +
    "          <span class=\"icon-dropdown-arrow\" style=\"padding-left: 4px;\"></span>\n" +
    "      </a>\n" +
    "      <ul class=\"dropdown-menu ng-grid-selection-menu\">\n" +
    "          <li ng-repeat=\"ngGridSelectOption in ngGridSelectOptions\">\n" +
    "              <a href ng-click=\"ngGridSelectOptionClicked($index)\">{{ngGridSelectOption}}</a>\n" +
    "          </li>\n" +
    "      </ul>\n" +
    "    </span>\n" +
    "</div>\n"
  );

  $templateCache.put("editableCellTemplate.html",
    "<input style=\"width: calc(100% - 1px); height: 100%;\" class=\"form-control\" ng-class=\"'colt' + col.index\" ng-input=\"COL_FIELD\" ng-model=\"COL_FIELD\" />"
  );

  $templateCache.put("footerTemplate.html",
    "<div ng-show=\"showFooter\" class=\"ngFooterPanel\" ng-class=\"{'ui-widget-content': jqueryUITheme, 'ui-corner-bottom': jqueryUITheme}\" ng-style=\"footerStyle()\">\n" +
    "    <div class=\"ngPagerContainer\" style=\"float: right; margin-top: 10px;\" ng-show=\"enablePaging\" ng-class=\"{'ngNoMultiSelect': !multiSelect}\">\n" +
    "        <div class=\"ngRowCountPicker\">\n" +
    "            <span class=\"page-range\">{{pageRangeMin()}} - {{pageRangeMax()}}</span> {{i18n.ngPagerOfText}}\n" +
    "            <span class=\"footerTotalItems\" style=\"margin-right: 12px;\">{{maxRows()}}</span>\n" +
    "            <div class=\"btn-group dropdown-group ark-dropdown dropdown\" is-open=\"status.isopen\" style=\"width: 56px;\">\n" +
    "                <button type=\"button\" class=\"btn btn-default btn-dropdown ark-dropdown-toggle\" style=\"width: 56px;\">{{pagingOptions.pageSize}} <span class=\"icon-dropdown-arrow\"></span></button>\n" +
    "                <ul class=\"dropdown-menu\" role=\"menu\">\n" +
    "                    <li ng-repeat=\"size in pagingOptions.pageSizes\" ng-click=\"pagingOptions.pageSize = size\"><a style=\"cursor: pointer;\">{{size}}</a></li>\n" +
    "                </ul>\n" +
    "            </div>\n" +
    "            <span>{{i18n.ngPagerPerPageText}}</span>\n" +
    "        </div>\n" +
    "        <div class=\"ngPagerControl\">\n" +
    "            <button type=\"button\" class=\"btn btn-default pager-button\" ng-click=\"pageToFirst()\" ng-disabled=\"cantPageBackward(10)\" title=\"{{i18n.ngPagerFirstTitle}}\">\n" +
    "                <span class=\"icon-chevron-left\">\n" +
    "                    <span class=\"icon-chevron-left\"></span>\n" +
    "                </span>\n" +
    "            </button>\n" +
    "            <button type=\"button\" class=\"btn btn-default pager-button\" ng-click=\"pageBackward(1)\" ng-disabled=\"cantPageBackward(1)\" style=\"margin-right: 8px;\" title=\"{{i18n.ngPagerPrevTitle}}\">\n" +
    "                <span class=\"icon-chevron-left\"></span>\n" +
    "            </button>\n" +
    "            <span>{{i18n.ngPagerPageText}}</span>\n" +
    "            <input type=\"text\" class=\"form-control\" min=\"1\" max=\"{{maxPages()}}\" style=\"width:56px; height: 32px; vertical-align: top; padding: 0 4px;\" ng-model=\"pagingOptions.currentPage\" ng-value=\"pagingOptions.currentPage\" numeric-input/>\n" +
    "            <span>{{i18n.ngPagerOfText}} {{maxPages()}}</span>\n" +
    "            <button type=\"button\" class=\"btn btn-default pager-button\" ng-click=\"pageForward(1)\" ng-disabled=\"cantPageForward(1)\" style=\"margin-left: 8px;\" title=\"{{i18n.ngPagerNextTitle}}\">\n" +
    "                <span class=\"icon-chevron-right\"></span>\n" +
    "            </button>\n" +
    "            <button type=\"button\" class=\"btn btn-default pager-button\" ng-click=\"pageToLast()\" ng-disabled=\"cantPageForward(10)\" title=\"{{i18n.ngPagerLastTitle}}\">\n" +
    "                <span class=\"icon-chevron-right\">\n" +
    "                    <span class=\"icon-chevron-right\"></span>\n" +
    "                </span>\n" +
    "            </button>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "</div>\n"
  );

  $templateCache.put("gridTemplate.html",
    "<div class=\"ngTopPanel\" ng-class=\"{'ui-widget-header':jqueryUITheme, 'ui-corner-top': jqueryUITheme}\" ng-style=\"topPanelStyle()\">\n" +
    "    <div class=\"ngGroupPanel\" ng-show=\"showGroupPanel()\" ng-style=\"groupPanelStyle()\">\n" +
    "        <div class=\"ngGroupPanelDescription\" ng-show=\"configGroups.length == 0\">{{i18n.ngGroupPanelDescription}}</div>\n" +
    "        <ul ng-show=\"configGroups.length > 0\" class=\"ngGroupList\">\n" +
    "            <li class=\"ngGroupItem\" ng-repeat=\"group in configGroups\">\n" +
    "                <span class=\"ngGroupElement\">\n" +
    "                    <span class=\"ngGroupName\">{{group.displayName}}\n" +
    "                        <span ng-click=\"removeGroup($index)\" class=\"ngRemoveGroup\">x</span>\n" +
    "                    </span>\n" +
    "                    <span ng-hide=\"$last\" class=\"ngGroupArrow\"></span>\n" +
    "                </span>\n" +
    "            </li>\n" +
    "        </ul>\n" +
    "    </div>\n" +
    "    <div class=\"ngHeaderContainer\" ng-style=\"headerStyle()\">\n" +
    "        <div class=\"ngHeaderScroller\" ng-style=\"headerScrollerStyle()\" ng-include=\"gridId + 'headerRowTemplate.html'\"></div>\n" +
    "    </div>\n" +
    "    <div ng-grid-menu></div>\n" +
    "</div>\n" +
    "<div class=\"ngViewport\" unselectable=\"on\" ng-viewport ng-class=\"{'ui-widget-content': jqueryUITheme}\" ng-style=\"viewportStyle()\">\n" +
    "    <div class=\"ngCanvas\" ng-style=\"canvasStyle()\">\n" +
    "        <div ng-style=\"rowStyle(row)\" ng-mouseenter=\"hoverOnRow = true\" ng-mouseleave=\"hoverOnRow = false\" ng-repeat=\"row in renderedRows\" ng-click=\"row.toggleSelected($event)\" ng-class=\"row.alternatingRowClass()\" ng-row></div>\n" +
    "    </div>\n" +
    "</div>\n" +
    "<div ng-grid-footer></div>\n"
  );

  $templateCache.put("headerCellTemplate.html",
    "<div class=\"ngHeaderSortColumn {{col.headerClass}}\" ng-style=\"{'cursor': col.cursor}\" ng-class=\"{ 'ngSorted': !noSortVisible, 'ngHeaderSortColumnSelected': col.showSortButtonDown() || col.showSortButtonUp() }\">\n" +
    "    <div ng-class=\"'colt' + col.index\" class=\"ngHeaderText\" style=\"width: auto\">{{col.displayName}}</div>\n" +
    "    <div ng-show=\"$last\"  class=\"icon-space\"></div>\n" +
    "    <div class=\"ngSortButtonDown\" ng-show=\"col.showSortButtonDown()\">\n" +
    "        <span class=\"ark-grid-fonticon icon-column-direction-active\"></span>\n" +
    "    </div>\n" +
    "    <div class=\"ngSortButtonUp\" ng-show=\"col.showSortButtonUp()\">\n" +
    "        <span class=\"ark-grid-fonticon icon-column-direction-active\"></span>\n" +
    "    </div>\n" +
    "    <div class=\"ngSortButtonInactive\" ng-show=\"col.showSortableButton()\">\n" +
    "        <span class=\"ark-grid-fonticon icon-column-direction\"></span>\n" +
    "    </div>\n" +
    "    <div class=\"ngSortPriority\">{{col.sortPriority}}</div>\n" +
    "    \n" +
    "    <div ng-class=\"{ ngPinnedIcon: col.pinned, ngUnPinnedIcon: !col.pinned }\" ng-click=\"togglePin(col)\" ng-show=\"col.pinnable\"></div>\n" +
    "</div>\n" +
    "<div ng-show=\"col.resizable\" class=\"ngHeaderGrip\" ng-click=\"col.gripClick($event)\" ng-mousedown=\"col.gripOnMouseDown($event)\"></div>\n"
  );

  $templateCache.put("headerRowTemplate.html",
    "<div ng-style=\"{ height: col.headerRowHeight }\" ng-repeat=\"col in renderedColumns\" ng-class=\"col.colIndex()\" class=\"ngHeaderCell\" ng-click=\"col.sort($event)\">\n" +
    "\t<div class=\"ngVerticalBar\" ng-style=\"{height: col.headerRowHeight}\" ng-class=\"{ ngVerticalBarVisible: !$last }\">&nbsp;</div>\n" +
    "\t<div ng-header-cell></div>\n" +
    "    \n" +
    "</div>"
  );

  $templateCache.put("menuTemplate.html",
    "<div ng-show=\"showColumnMenu || showFilter\"  class=\"ngHeaderButton\" ng-click=\"toggleShowMenu()\">\n" +
    "    <span class=\"icon-pencil\"></span>\n" +
    "</div>\n" +
    "<div ng-show=\"showMenu\">\n" +
    "    <div class=\"ngColMenu dropdown-menu dropdown-menu-right\">\n" +
    "        <div ng-show=\"showFilter\">\n" +
    "            <input placeholder=\"{{i18n.ngSearchPlaceHolder}}\" type=\"text\" ng-model=\"filterText\"/>\n" +
    "        </div>\n" +
    "        <div ng-show=\"showColumnMenu\">\n" +
    "            <span class=\"dropdown-header\">{{i18n.ngMenuText}}</span>\n" +
    "            <ul class=\"list-unstyled\">\n" +
    "                <li ng-repeat=\"col in columns | ngColumns\">\n" +
    "                    <label>\n" +
    "                        <input ng-disabled=\"col.pinned\" type=\"checkbox\" class=\"ark-checkbox\" ng-model=\"col.visible\"/>\n" +
    "                        <span></span>\n" +
    "                        {{col.displayName}}\n" +
    "                    </label>\n" +
    "                    <a ng-attr-title=\"{{i18n.ngGroupByText}}\" ng-class=\"col.groupedByClass()\" ng-show=\"col.groupable && col.visible\" ng-click=\"groupBy(col)\"></a>\n" +
    "                    <span class=\"ngGroupingNumber\" ng-show=\"col.groupIndex > 0\">{{col.groupIndex}}</span>\n" +
    "                </li>\n" +
    "            </ul>\n" +
    "        </div>\n" +
    "    </div>\n" +
    "</div>\n"
  );

  $templateCache.put("rowTemplate.html",
    "<div ng-style=\"{ 'cursor': row.cursor }\" ng-repeat=\"col in renderedColumns\" ng-class=\"col.colIndex()\"  class=\"ngCell {{col.cellClass}}\" ng-click=\"row.toggleRowExpand()\">\n" +
    "\t<div class=\"ngVerticalBar\" style=\"height: 100%\" ng-class=\"{ ngVerticalBarVisible: !$last }\">&nbsp;</div>\n" +
    "\t<div ng-cell style=\"height: 100%\"></div>\n" +
    "</div>"
  );

}]);

}(window, jQuery));
angular.module('ui.slimscroll', []).directive('slimscroll', function () {
  'use strict';

  return {
    restrict: 'A',
    link: function ($scope, $elem, $attr) {
      var off = [];
      var option = {};

      var refresh = function () {
        if ($attr.slimscroll) {
          option = $scope.$eval($attr.slimscroll);
        } else if ($attr.slimscrollOption) {
          option = $scope.$eval($attr.slimscrollOption);
        }
        $($elem).slimScroll({ destroy: true });
        $($elem).slimScroll(option);
      };

      var init = function () {
        refresh();

        if ($attr.slimscroll && !option.noWatch) {
          off.push($scope.$watchCollection($attr.slimscroll, refresh));
        }

        if ($attr.slimscrollWatch) {
          off.push($scope.$watchCollection($attr.slimscrollWatch, refresh));
        }

        if ($attr.slimscrolllistento) {
          off.push($scope.$on($attr.slimscrolllistento, refresh));
        }
      };

      var destructor = function () {
        $($elem).slimScroll({ destroy: true });
        off.forEach(function (unbind) {
          unbind();
        });
        off = null;
      };

      off.push($scope.$on('$destroy', destructor));
      init();
    }
  };
});

(function(){var module=angular.module("ng.jsoneditor",[]);module.constant("ngJsoneditorConfig",{});module.directive("ngJsoneditor",["ngJsoneditorConfig","$timeout",function(ngJsoneditorConfig,$timeout){var defaults=ngJsoneditorConfig||{};return{restrict:"A",require:"ngModel",scope:{options:"=",ngJsoneditor:"=",preferText:"="},link:function($scope,element,attrs,ngModel){var debounceTo,debounceFrom;var editor;var internalTrigger=false;if(!angular.isDefined(window.JSONEditor)){throw new Error("Please add the jsoneditor.js script first!")}function _createEditor(options){var settings=angular.extend({},defaults,options);var theOptions=angular.extend({},settings,{change:function(){if(typeof debounceTo!=="undefined"){$timeout.cancel(debounceTo)}debounceTo=$timeout(function(){if(editor){internalTrigger=true;var error=undefined;try{ngModel.$setViewValue($scope.preferText===true?editor.getText():editor.get());}catch(err){error=err;}if(settings&&settings.hasOwnProperty("change")){settings.change(error);}}},settings.timeout||100);}});element.html("");var instance=new JSONEditor(element[0],theOptions);if($scope.ngJsoneditor instanceof Function){$timeout(function(){$scope.ngJsoneditor(instance)})}return instance}$scope.$watch("options",function(newValue,oldValue){for(var k in newValue){if(newValue.hasOwnProperty(k)){var v=newValue[k];if(newValue[k]!==oldValue[k]){if(k==="mode"){editor.setMode(v)}else if(k==="name"){editor.setName(v)}else{editor=_createEditor(newValue);$scope.updateJsonEditor();return}}}}},true);$scope.$on("$destroy",function(){});$scope.updateJsonEditor=function(newValue){if(internalTrigger){internalTrigger=false;return;}if(typeof debounceFrom!=="undefined"){$timeout.cancel(debounceFrom)}debounceFrom=$timeout(function(){if($scope.preferText===true&&!angular.isObject(ngModel.$viewValue)){editor.setText(ngModel.$viewValue||"{}")}else{editor.set(ngModel.$viewValue||{})}},$scope.options.timeout||100)};editor=_createEditor($scope.options);if($scope.options.hasOwnProperty("expanded")){$timeout($scope.options.expanded?function(){editor.expandAll()}:function(){editor.collapseAll()},($scope.options.timeout||100)+100)}ngModel.$render=$scope.updateJsonEditor;$scope.$watch(function(){return ngModel.$modelValue},$scope.updateJsonEditor,true)}}}])})();

/*!
angular-xeditable - 0.1.8
Edit-in-place for angular.js
Build date: 2014-01-10 
*/
angular.module("xeditable",[]).value("editableOptions",{theme:"default",buttons:"right",blurElem:"cancel",blurForm:"ignore",activate:"focus"}),angular.module("xeditable").directive("editableBsdate",["editableDirectiveFactory",function(a){return a({directiveName:"editableBsdate",inputTpl:'<input type="text">'})}]),angular.module("xeditable").directive("editableBstime",["editableDirectiveFactory",function(a){return a({directiveName:"editableBstime",inputTpl:"<timepicker></timepicker>",render:function(){this.parent.render.call(this);var a=angular.element('<div class="well well-small" style="display:inline-block;"></div>');a.attr("ng-model",this.inputEl.attr("ng-model")),this.inputEl.removeAttr("ng-model"),this.attrs.eNgChange&&(a.attr("ng-change",this.inputEl.attr("ng-change")),this.inputEl.removeAttr("ng-change")),this.inputEl.wrap(a)}})}]),angular.module("xeditable").directive("editableCheckbox",["editableDirectiveFactory",function(a){return a({directiveName:"editableCheckbox",inputTpl:'<input type="checkbox">',render:function(){this.parent.render.call(this),this.attrs.eTitle&&(this.inputEl.wrap("<label></label>"),this.inputEl.after(angular.element("<span></span>").text(this.attrs.eTitle)))},autosubmit:function(){var a=this;a.inputEl.bind("change",function(){setTimeout(function(){a.scope.$apply(function(){a.scope.$form.$submit()})},500)})}})}]),angular.module("xeditable").directive("editableChecklist",["editableDirectiveFactory","editableNgOptionsParser",function(a,b){return a({directiveName:"editableChecklist",inputTpl:"<span></span>",useCopy:!0,render:function(){this.parent.render.call(this);var a=b(this.attrs.eNgOptions),c='<label ng-repeat="'+a.ngRepeat+'">'+'<input type="checkbox" checklist-model="$parent.$data" checklist-value="'+a.locals.valueFn+'">'+'<span ng-bind="'+a.locals.displayFn+'"></span></label>';this.inputEl.removeAttr("ng-model"),this.inputEl.removeAttr("ng-options"),this.inputEl.html(c)}})}]),function(){var a="text|email|tel|number|url|search|color|date|datetime|time|month|week".split("|");angular.forEach(a,function(a){var b="editable"+a.charAt(0).toUpperCase()+a.slice(1);angular.module("xeditable").directive(b,["editableDirectiveFactory",function(c){return c({directiveName:b,inputTpl:'<input type="'+a+'">'})}])}),angular.module("xeditable").directive("editableRange",["editableDirectiveFactory",function(a){return a({directiveName:"editableRange",inputTpl:'<input type="range" id="range" name="range">',render:function(){this.parent.render.call(this),this.inputEl.after("<output>{{$data}}</output>")}})}])}(),angular.module("xeditable").directive("editableRadiolist",["editableDirectiveFactory","editableNgOptionsParser",function(a,b){return a({directiveName:"editableRadiolist",inputTpl:"<span></span>",render:function(){this.parent.render.call(this);var a=b(this.attrs.eNgOptions),c='<label ng-repeat="'+a.ngRepeat+'">'+'<input type="radio" ng-model="$parent.$data" value="{{'+a.locals.valueFn+'}}">'+'<span ng-bind="'+a.locals.displayFn+'"></span></label>';this.inputEl.removeAttr("ng-model"),this.inputEl.removeAttr("ng-options"),this.inputEl.html(c)},autosubmit:function(){var a=this;a.inputEl.bind("change",function(){setTimeout(function(){a.scope.$apply(function(){a.scope.$form.$submit()})},500)})}})}]),angular.module("xeditable").directive("editableSelect",["editableDirectiveFactory",function(a){return a({directiveName:"editableSelect",inputTpl:"<select></select>",autosubmit:function(){var a=this;a.inputEl.bind("change",function(){a.scope.$apply(function(){a.scope.$form.$submit()})})}})}]),angular.module("xeditable").directive("editableTextarea",["editableDirectiveFactory",function(a){return a({directiveName:"editableTextarea",inputTpl:"<textarea></textarea>",addListeners:function(){var a=this;a.parent.addListeners.call(a),a.single&&"no"!==a.buttons&&a.autosubmit()},autosubmit:function(){var a=this;a.inputEl.bind("keydown",function(b){(b.ctrlKey||b.metaKey)&&13===b.keyCode&&a.scope.$apply(function(){a.scope.$form.$submit()})})}})}]),angular.module("xeditable").factory("editableController",["$q","editableUtils",function(a,b){function c(a,c,d,e,f,g,h,i,j){var k,l,m=this;m.scope=a,m.elem=d,m.attrs=c,m.inputEl=null,m.editorEl=null,m.single=!0,m.error="",m.theme=f[g.theme]||f["default"],m.parent={},m.inputTpl="",m.directiveName="",m.useCopy=!1,m.single=null,m.buttons="right",m.init=function(b){if(m.single=b,m.name=c.eName||c[m.directiveName],!c[m.directiveName])throw"You should provide value for `"+m.directiveName+"` in editable element!";k=e(c[m.directiveName]),m.buttons=m.single?m.attrs.buttons||g.buttons:"no",c.eName&&m.scope.$watch("$data",function(a){m.scope.$form.$data[c.eName]=a}),c.onshow&&(m.onshow=function(){return m.catchError(e(c.onshow)(a))}),c.onhide&&(m.onhide=function(){return e(c.onhide)(a)}),c.oncancel&&(m.oncancel=function(){return e(c.oncancel)(a)}),c.onbeforesave&&(m.onbeforesave=function(){return m.catchError(e(c.onbeforesave)(a))}),c.onaftersave&&(m.onaftersave=function(){return m.catchError(e(c.onaftersave)(a))}),a.$parent.$watch(c[m.directiveName],function(){m.handleEmpty()})},m.render=function(){var a=m.theme;m.inputEl=angular.element(m.inputTpl),m.controlsEl=angular.element(a.controlsTpl),m.controlsEl.append(m.inputEl),"no"!==m.buttons&&(m.buttonsEl=angular.element(a.buttonsTpl),m.submitEl=angular.element(a.submitTpl),m.cancelEl=angular.element(a.cancelTpl),m.buttonsEl.append(m.submitEl).append(m.cancelEl),m.controlsEl.append(m.buttonsEl),m.inputEl.addClass("editable-has-buttons")),m.errorEl=angular.element(a.errorTpl),m.controlsEl.append(m.errorEl),m.editorEl=angular.element(m.single?a.formTpl:a.noformTpl),m.editorEl.append(m.controlsEl);for(var d in c.$attr)if(!(d.length<=1)){var e=!1,f=d.substring(1,2);if("e"===d.substring(0,1)&&f===f.toUpperCase()&&(e=d.substring(1),"Form"!==e&&"NgSubmit"!==e)){e=e.substring(0,1).toLowerCase()+b.camelToDash(e.substring(1));var h=""===c[d]?e:c[d];m.inputEl.attr(e,h)}}m.inputEl.addClass("editable-input"),m.inputEl.attr("ng-model","$data"),m.editorEl.addClass(b.camelToDash(m.directiveName)),m.single&&(m.editorEl.attr("editable-form","$form"),m.editorEl.attr("blur",m.attrs.blur||("no"===m.buttons?"cancel":g.blurElem))),angular.isFunction(a.postrender)&&a.postrender.call(m)},m.setLocalValue=function(){m.scope.$data=m.useCopy?angular.copy(k(a.$parent)):k(a.$parent)},m.show=function(){return m.setLocalValue(),m.render(),d.after(m.editorEl),i(m.editorEl)(a),m.addListeners(),d.addClass("editable-hide"),m.onshow()},m.hide=function(){return m.editorEl.remove(),d.removeClass("editable-hide"),m.onhide()},m.cancel=function(){m.oncancel()},m.addListeners=function(){m.inputEl.bind("keyup",function(a){if(m.single)switch(a.keyCode){case 27:m.scope.$apply(function(){m.scope.$form.$cancel()})}}),m.single&&"no"===m.buttons&&m.autosubmit(),m.editorEl.bind("click",function(a){1===a.which&&m.scope.$form.$visible&&(m.scope.$form._clicked=!0)})},m.setWaiting=function(a){a?(l=!m.inputEl.attr("disabled")&&!m.inputEl.attr("ng-disabled")&&!m.inputEl.attr("ng-enabled"),l&&(m.inputEl.attr("disabled","disabled"),m.buttonsEl&&m.buttonsEl.find("button").attr("disabled","disabled"))):l&&(m.inputEl.removeAttr("disabled"),m.buttonsEl&&m.buttonsEl.find("button").removeAttr("disabled"))},m.activate=function(){setTimeout(function(){var a=m.inputEl[0];"focus"===g.activate&&a.focus&&a.focus(),"select"===g.activate&&a.select&&a.select()},0)},m.setError=function(b){angular.isObject(b)||(a.$error=b,m.error=b)},m.catchError=function(a,b){return angular.isObject(a)&&b!==!0?j.when(a).then(angular.bind(this,function(a){this.catchError(a,!0)}),angular.bind(this,function(a){this.catchError(a,!0)})):b&&angular.isObject(a)&&a.status&&200!==a.status&&a.data&&angular.isString(a.data)?(this.setError(a.data),a=a.data):angular.isString(a)&&this.setError(a),a},m.save=function(){k.assign(a.$parent,angular.copy(m.scope.$data))},m.handleEmpty=function(){var b=k(a.$parent),c=null===b||void 0===b||""===b||angular.isArray(b)&&0===b.length;d.toggleClass("editable-empty",c)},m.autosubmit=angular.noop,m.onshow=angular.noop,m.onhide=angular.noop,m.oncancel=angular.noop,m.onbeforesave=angular.noop,m.onaftersave=angular.noop}return c.$inject=["$scope","$attrs","$element","$parse","editableThemes","editableOptions","$rootScope","$compile","$q"],c}]),angular.module("xeditable").factory("editableDirectiveFactory",["$parse","$compile","editableThemes","$rootScope","$document","editableController","editableFormController",function(a,b,c,d,e,f,g){return function(b){return{restrict:"A",scope:!0,require:[b.directiveName,"?^form"],controller:f,link:function(c,f,h,i){var j,k=i[0],l=!1;if(i[1])j=i[1],l=!0;else if(h.eForm){var m=a(h.eForm)(c);if(m)j=m,l=!0;else for(var n=0;n<e[0].forms.length;n++)if(e[0].forms[n].name===h.eForm){j=null,l=!0;break}}if(angular.forEach(b,function(a,b){void 0!==k[b]&&(k.parent[b]=k[b])}),angular.extend(k,b),k.init(!l),c.$editable=k,f.addClass("editable"),l)if(j){if(c.$form=j,!c.$form.$addEditable)throw"Form with editable elements should have `editable-form` attribute.";c.$form.$addEditable(k)}else d.$$editableBuffer=d.$$editableBuffer||{},d.$$editableBuffer[h.eForm]=d.$$editableBuffer[h.eForm]||[],d.$$editableBuffer[h.eForm].push(k),c.$form=null;else c.$form=g(),c.$form.$addEditable(k),h.eForm&&(c.$parent[h.eForm]=c.$form),h.eForm||(f.addClass("editable-click"),f.bind("click",function(a){a.preventDefault(),a.editable=k,c.$apply(function(){c.$form.$show()})}))}}}}]),angular.module("xeditable").factory("editableFormController",["$parse","$document","$rootScope","editablePromiseCollection","editableUtils",function(a,b,c,d,e){var f=[];b.bind("click",function(a){if(1===a.which){for(var b=[],d=[],e=0;e<f.length;e++)f[e]._clicked?f[e]._clicked=!1:f[e].$waiting||("cancel"===f[e]._blur&&b.push(f[e]),"submit"===f[e]._blur&&d.push(f[e]));(b.length||d.length)&&c.$apply(function(){angular.forEach(b,function(a){a.$cancel()}),angular.forEach(d,function(a){a.$submit()})})}});var g={$addEditable:function(a){this.$editables.push(a),a.elem.bind("$destroy",angular.bind(this,this.$removeEditable,a)),a.scope.$form||(a.scope.$form=this),this.$visible&&a.catchError(a.show())},$removeEditable:function(a){for(var b=0;b<this.$editables.length;b++)if(this.$editables[b]===a)return this.$editables.splice(b,1),void 0},$show:function(){if(!this.$visible){this.$visible=!0;var a=d();a.when(this.$onshow()),this.$setError(null,""),angular.forEach(this.$editables,function(b){a.when(b.show())}),a.then({onWait:angular.bind(this,this.$setWaiting),onTrue:angular.bind(this,this.$activate),onFalse:angular.bind(this,this.$activate),onString:angular.bind(this,this.$activate)}),setTimeout(angular.bind(this,function(){this._clicked=!1,-1===e.indexOf(f,this)&&f.push(this)}),0)}},$activate:function(a){var b;if(this.$editables.length){if(angular.isString(a))for(b=0;b<this.$editables.length;b++)if(this.$editables[b].name===a)return this.$editables[b].activate(),void 0;for(b=0;b<this.$editables.length;b++)if(this.$editables[b].error)return this.$editables[b].activate(),void 0;this.$editables[0].activate()}},$hide:function(){this.$visible&&(this.$visible=!1,this.$onhide(),angular.forEach(this.$editables,function(a){a.hide()}),e.arrayRemove(f,this))},$cancel:function(){this.$visible&&(this.$oncancel(),angular.forEach(this.$editables,function(a){a.cancel()}),this.$hide())},$setWaiting:function(a){this.$waiting=!!a,angular.forEach(this.$editables,function(b){b.setWaiting(!!a)})},$setError:function(a,b){angular.forEach(this.$editables,function(c){a&&c.name!==a||c.setError(b)})},$submit:function(){function a(a){var b=d();b.when(this.$onbeforesave()),b.then({onWait:angular.bind(this,this.$setWaiting),onTrue:a?angular.bind(this,this.$save):angular.bind(this,this.$hide),onFalse:angular.bind(this,this.$hide),onString:angular.bind(this,this.$activate)})}if(!this.$waiting){this.$setError(null,"");var b=d();angular.forEach(this.$editables,function(a){b.when(a.onbeforesave())}),b.then({onWait:angular.bind(this,this.$setWaiting),onTrue:angular.bind(this,a,!0),onFalse:angular.bind(this,a,!1),onString:angular.bind(this,this.$activate)})}},$save:function(){angular.forEach(this.$editables,function(a){a.save()});var a=d();a.when(this.$onaftersave()),angular.forEach(this.$editables,function(b){a.when(b.onaftersave())}),a.then({onWait:angular.bind(this,this.$setWaiting),onTrue:angular.bind(this,this.$hide),onFalse:angular.bind(this,this.$hide),onString:angular.bind(this,this.$activate)})},$onshow:angular.noop,$oncancel:angular.noop,$onhide:angular.noop,$onbeforesave:angular.noop,$onaftersave:angular.noop};return function(){return angular.extend({$editables:[],$visible:!1,$waiting:!1,$data:{},_clicked:!1,_blur:null},g)}}]),angular.module("xeditable").directive("editableForm",["$rootScope","$parse","editableFormController","editableOptions",function(a,b,c,d){return{restrict:"A",require:["form"],compile:function(){return{pre:function(b,d,e,f){var g,h=f[0];e.editableForm?b[e.editableForm]&&b[e.editableForm].$show?(g=b[e.editableForm],angular.extend(h,g)):(g=c(),b[e.editableForm]=g,angular.extend(g,h)):(g=c(),angular.extend(h,g));var i=a.$$editableBuffer,j=h.$name;j&&i&&i[j]&&(angular.forEach(i[j],function(a){g.$addEditable(a)}),delete i[j])},post:function(a,c,e,f){var g;g=e.editableForm&&a[e.editableForm]&&a[e.editableForm].$show?a[e.editableForm]:f[0],e.onshow&&(g.$onshow=angular.bind(g,b(e.onshow),a)),e.onhide&&(g.$onhide=angular.bind(g,b(e.onhide),a)),e.oncancel&&(g.$oncancel=angular.bind(g,b(e.oncancel),a)),e.shown&&b(e.shown)(a)&&g.$show(),g._blur=e.blur||d.blurForm,e.ngSubmit||e.submit||(e.onbeforesave&&(g.$onbeforesave=function(){return b(e.onbeforesave)(a,{$data:g.$data})}),e.onaftersave&&(g.$onaftersave=function(){return b(e.onaftersave)(a,{$data:g.$data})}),c.bind("submit",function(b){b.preventDefault(),a.$apply(function(){g.$submit()})})),c.bind("click",function(a){1===a.which&&g.$visible&&(g._clicked=!0)})}}}}}]),angular.module("xeditable").factory("editablePromiseCollection",["$q",function(a){function b(){return{promises:[],hasFalse:!1,hasString:!1,when:function(b,c){if(b===!1)this.hasFalse=!0;else if(!c&&angular.isObject(b))this.promises.push(a.when(b));else{if(!angular.isString(b))return;this.hasString=!0}},then:function(b){function c(){h.hasString||h.hasFalse?!h.hasString&&h.hasFalse?e():f():d()}b=b||{};var d=b.onTrue||angular.noop,e=b.onFalse||angular.noop,f=b.onString||angular.noop,g=b.onWait||angular.noop,h=this;this.promises.length?(g(!0),a.all(this.promises).then(function(a){g(!1),angular.forEach(a,function(a){h.when(a,!0)}),c()},function(){g(!1),f()})):c()}}}return b}]),angular.module("xeditable").factory("editableUtils",[function(){return{indexOf:function(a,b){if(a.indexOf)return a.indexOf(b);for(var c=0;c<a.length;c++)if(b===a[c])return c;return-1},arrayRemove:function(a,b){var c=this.indexOf(a,b);return c>=0&&a.splice(c,1),b},camelToDash:function(a){var b=/[A-Z]/g;return a.replace(b,function(a,b){return(b?"-":"")+a.toLowerCase()})},dashToCamel:function(a){var b=/([\:\-\_]+(.))/g,c=/^moz([A-Z])/;return a.replace(b,function(a,b,c,d){return d?c.toUpperCase():c}).replace(c,"Moz$1")}}}]),angular.module("xeditable").factory("editableNgOptionsParser",[function(){function a(a){var c;if(!(c=a.match(b)))throw"ng-options parse error";var d,e=c[2]||c[1],f=c[4]||c[6],g=c[5],h=(c[3]||"",c[2]?c[1]:f),i=c[7],j=c[8],k=j?c[8]:null;return void 0===g?(d=f+" in "+i,void 0!==j&&(d+=" track by "+k)):d="("+g+", "+f+") in "+i,{ngRepeat:d,locals:{valueName:f,keyName:g,valueFn:h,displayFn:e}}}var b=/^\s*(.*?)(?:\s+as\s+(.*?))?(?:\s+group\s+by\s+(.*))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+(.*?)(?:\s+track\s+by\s+(.*?))?$/;return a}]),angular.module("xeditable").factory("editableThemes",function(){var a={"default":{formTpl:'<form class="editable-wrap"></form>',noformTpl:'<span class="editable-wrap"></span>',controlsTpl:'<span class="editable-controls"></span>',inputTpl:"",errorTpl:'<div class="editable-error" ng-show="$error" ng-bind="$error"></div>',buttonsTpl:'<span class="editable-buttons"></span>',submitTpl:'<button type="submit">save</button>',cancelTpl:'<button type="button" ng-click="$form.$cancel()">cancel</button>'},bs2:{formTpl:'<form class="form-inline editable-wrap" role="form"></form>',noformTpl:'<span class="editable-wrap"></span>',controlsTpl:'<div class="editable-controls controls control-group" ng-class="{\'error\': $error}"></div>',inputTpl:"",errorTpl:'<div class="editable-error help-block" ng-show="$error" ng-bind="$error"></div>',buttonsTpl:'<span class="editable-buttons"></span>',submitTpl:'<button type="submit" class="btn btn-primary"><span class="icon-ok icon-white"></span></button>',cancelTpl:'<button type="button" class="btn" ng-click="$form.$cancel()"><span class="icon-remove"></span></button>'},bs3:{formTpl:'<form class="form-inline editable-wrap" role="form"></form>',noformTpl:'<span class="editable-wrap"></span>',controlsTpl:'<div class="editable-controls form-group" ng-class="{\'has-error\': $error}"></div>',inputTpl:"",errorTpl:'<div class="editable-error help-block" ng-show="$error" ng-bind="$error"></div>',buttonsTpl:'<span class="editable-buttons"></span>',submitTpl:'<button type="submit" class="btn btn-primary"><span class="glyphicon glyphicon-ok"></span></button>',cancelTpl:'<button type="button" class="btn btn-default" ng-click="$form.$cancel()"><span class="glyphicon glyphicon-remove"></span></button>',buttonsClass:"",inputClass:"",postrender:function(){switch(this.directiveName){case"editableText":case"editableSelect":case"editableTextarea":case"editableEmail":case"editableTel":case"editableNumber":case"editableUrl":case"editableSearch":case"editableDate":case"editableDatetime":case"editableTime":case"editableMonth":case"editableWeek":if(this.inputEl.addClass("form-control"),this.theme.inputClass){if(this.inputEl.attr("multiple")&&("input-sm"===this.theme.inputClass||"input-lg"===this.theme.inputClass))break;this.inputEl.addClass(this.theme.inputClass)}}this.buttonsEl&&this.theme.buttonsClass&&this.buttonsEl.find("button").addClass(this.theme.buttonsClass)}}};return a});
/*
 * angular-ui-bootstrap
 * http://angular-ui.github.io/bootstrap/

 * Version: 0.12.1 - 2015-10-17
 * License: MIT
 */
angular.module("ui.bootstrap",["ui.bootstrap.pagination","ui.bootstrap.progressbar"]),angular.module("ui.bootstrap.pagination",[]).controller("PaginationController",["$scope","$attrs","$parse",function(e,t,a){var r=this,n={$setViewValue:angular.noop},i=t.numPages?a(t.numPages).assign:angular.noop;this.init=function(i,o){n=i,this.config=o,n.$render=function(){r.render()},t.itemsPerPage?e.$parent.$watch(a(t.itemsPerPage),function(t){r.itemsPerPage=parseInt(t,10),e.totalPages=r.calculateTotalPages()}):this.itemsPerPage=o.itemsPerPage},this.calculateTotalPages=function(){var t=this.itemsPerPage<1?1:Math.ceil(e.totalItems/this.itemsPerPage);return Math.max(t||0,1)},this.render=function(){e.page=parseInt(n.$viewValue,10)||1},e.selectPage=function(t){e.page!==t&&t>0&&t<=e.totalPages&&(n.$setViewValue(t),n.$render())},e.getText=function(t){return e[t+"Text"]||r.config[t+"Text"]},e.noPrevious=function(){return 1===e.page},e.noNext=function(){return e.page===e.totalPages},e.$watch("totalItems",function(){e.totalPages=r.calculateTotalPages()}),e.$watch("totalPages",function(t){i(e.$parent,t),e.page>t?e.selectPage(t):n.$render()})}]).constant("paginationConfig",{itemsPerPage:10,boundaryLinks:!1,directionLinks:!0,firstText:"First",previousText:"Previous",nextText:"Next",lastText:"Last",rotate:!0}).directive("pagination",["$parse","paginationConfig",function(e,t){return{restrict:"EA",scope:{totalItems:"=",firstText:"@",previousText:"@",nextText:"@",lastText:"@"},require:["pagination","?ngModel"],controller:"PaginationController",templateUrl:"template/pagination/pagination.html",replace:!0,link:function(a,r,n,i){function o(e,t,a){return{number:e,text:t,active:a}}function s(e,t){var a=[],r=1,n=t,i=angular.isDefined(g)&&t>g;i&&(c?(r=Math.max(e-Math.floor(g/2),1),n=r+g-1,n>t&&(n=t,r=n-g+1)):(r=(Math.ceil(e/g)-1)*g+1,n=Math.min(r+g-1,t)));for(var s=r;n>=s;s++){var l=o(s,s,s===e);a.push(l)}if(i&&!c){if(r>1){var u=o(r-1,"...",!1);a.unshift(u)}if(t>n){var p=o(n+1,"...",!1);a.push(p)}}return a}var l=i[0],u=i[1];if(u){var g=angular.isDefined(n.maxSize)?a.$parent.$eval(n.maxSize):t.maxSize,c=angular.isDefined(n.rotate)?a.$parent.$eval(n.rotate):t.rotate;a.boundaryLinks=angular.isDefined(n.boundaryLinks)?a.$parent.$eval(n.boundaryLinks):t.boundaryLinks,a.directionLinks=angular.isDefined(n.directionLinks)?a.$parent.$eval(n.directionLinks):t.directionLinks,l.init(u,t),n.maxSize&&a.$parent.$watch(e(n.maxSize),function(e){g=parseInt(e,10),l.render()});var p=l.render;l.render=function(){p(),a.page>0&&a.page<=a.totalPages&&(a.pages=s(a.page,a.totalPages))}}}}}]).constant("pagerConfig",{itemsPerPage:10,previousText:"« Previous",nextText:"Next »",align:!0}).directive("pager",["pagerConfig",function(e){return{restrict:"EA",scope:{totalItems:"=",previousText:"@",nextText:"@"},require:["pager","?ngModel"],controller:"PaginationController",templateUrl:"template/pagination/pager.html",replace:!0,link:function(t,a,r,n){var i=n[0],o=n[1];o&&(t.align=angular.isDefined(r.align)?t.$parent.$eval(r.align):e.align,i.init(o,e))}}}]),angular.module("ui.bootstrap.progressbar",[]).constant("progressConfig",{animate:!0,max:100}).controller("ProgressController",["$scope","$attrs","progressConfig",function(e,t,a){var r=this,n=angular.isDefined(t.animate)?e.$parent.$eval(t.animate):a.animate;this.bars=[],e.max=angular.isDefined(t.max)?e.$parent.$eval(t.max):a.max,this.addBar=function(t,a){n||a.css({transition:"none"}),this.bars.push(t),t.$watch("value",function(a){t.percent=+(100*a/e.max).toFixed(2)}),t.$on("$destroy",function(){a=null,r.removeBar(t)})},this.removeBar=function(e){this.bars.splice(this.bars.indexOf(e),1)}}]).directive("progress",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",require:"progress",scope:{},templateUrl:"template/progressbar/progress.html"}}).directive("bar",function(){return{restrict:"EA",replace:!0,transclude:!0,require:"^progress",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/bar.html",link:function(e,t,a,r){r.addBar(e,t)}}}).directive("progressbar",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/progressbar.html",link:function(e,t,a,r){r.addBar(e,angular.element(t.children()[0]))}}});
/*
 * angular-ui-bootstrap
 * http://angular-ui.github.io/bootstrap/

 * Version: 0.12.1 - 2015-10-17
 * License: MIT
 */
angular.module("ui.bootstrap",["ui.bootstrap.tpls","ui.bootstrap.pagination","ui.bootstrap.progressbar"]),angular.module("ui.bootstrap.tpls",["template/pagination/pager.html","template/pagination/pagination.html","template/progressbar/bar.html","template/progressbar/progress.html","template/progressbar/progressbar.html"]),angular.module("ui.bootstrap.pagination",[]).controller("PaginationController",["$scope","$attrs","$parse",function(e,t,a){var r=this,n={$setViewValue:angular.noop},i=t.numPages?a(t.numPages).assign:angular.noop;this.init=function(i,s){n=i,this.config=s,n.$render=function(){r.render()},t.itemsPerPage?e.$parent.$watch(a(t.itemsPerPage),function(t){r.itemsPerPage=parseInt(t,10),e.totalPages=r.calculateTotalPages()}):this.itemsPerPage=s.itemsPerPage},this.calculateTotalPages=function(){var t=this.itemsPerPage<1?1:Math.ceil(e.totalItems/this.itemsPerPage);return Math.max(t||0,1)},this.render=function(){e.page=parseInt(n.$viewValue,10)||1},e.selectPage=function(t){e.page!==t&&t>0&&t<=e.totalPages&&(n.$setViewValue(t),n.$render())},e.getText=function(t){return e[t+"Text"]||r.config[t+"Text"]},e.noPrevious=function(){return 1===e.page},e.noNext=function(){return e.page===e.totalPages},e.$watch("totalItems",function(){e.totalPages=r.calculateTotalPages()}),e.$watch("totalPages",function(t){i(e.$parent,t),e.page>t?e.selectPage(t):n.$render()})}]).constant("paginationConfig",{itemsPerPage:10,boundaryLinks:!1,directionLinks:!0,firstText:"First",previousText:"Previous",nextText:"Next",lastText:"Last",rotate:!0}).directive("pagination",["$parse","paginationConfig",function(e,t){return{restrict:"EA",scope:{totalItems:"=",firstText:"@",previousText:"@",nextText:"@",lastText:"@"},require:["pagination","?ngModel"],controller:"PaginationController",templateUrl:"template/pagination/pagination.html",replace:!0,link:function(a,r,n,i){function s(e,t,a){return{number:e,text:t,active:a}}function o(e,t){var a=[],r=1,n=t,i=angular.isDefined(p)&&t>p;i&&(u?(r=Math.max(e-Math.floor(p/2),1),n=r+p-1,n>t&&(n=t,r=n-p+1)):(r=(Math.ceil(e/p)-1)*p+1,n=Math.min(r+p-1,t)));for(var o=r;n>=o;o++){var l=s(o,o,o===e);a.push(l)}if(i&&!u){if(r>1){var g=s(r-1,"...",!1);a.unshift(g)}if(t>n){var c=s(n+1,"...",!1);a.push(c)}}return a}var l=i[0],g=i[1];if(g){var p=angular.isDefined(n.maxSize)?a.$parent.$eval(n.maxSize):t.maxSize,u=angular.isDefined(n.rotate)?a.$parent.$eval(n.rotate):t.rotate;a.boundaryLinks=angular.isDefined(n.boundaryLinks)?a.$parent.$eval(n.boundaryLinks):t.boundaryLinks,a.directionLinks=angular.isDefined(n.directionLinks)?a.$parent.$eval(n.directionLinks):t.directionLinks,l.init(g,t),n.maxSize&&a.$parent.$watch(e(n.maxSize),function(e){p=parseInt(e,10),l.render()});var c=l.render;l.render=function(){c(),a.page>0&&a.page<=a.totalPages&&(a.pages=o(a.page,a.totalPages))}}}}}]).constant("pagerConfig",{itemsPerPage:10,previousText:"« Previous",nextText:"Next »",align:!0}).directive("pager",["pagerConfig",function(e){return{restrict:"EA",scope:{totalItems:"=",previousText:"@",nextText:"@"},require:["pager","?ngModel"],controller:"PaginationController",templateUrl:"template/pagination/pager.html",replace:!0,link:function(t,a,r,n){var i=n[0],s=n[1];s&&(t.align=angular.isDefined(r.align)?t.$parent.$eval(r.align):e.align,i.init(s,e))}}}]),angular.module("ui.bootstrap.progressbar",[]).constant("progressConfig",{animate:!0,max:100}).controller("ProgressController",["$scope","$attrs","progressConfig",function(e,t,a){var r=this,n=angular.isDefined(t.animate)?e.$parent.$eval(t.animate):a.animate;this.bars=[],e.max=angular.isDefined(t.max)?e.$parent.$eval(t.max):a.max,this.addBar=function(t,a){n||a.css({transition:"none"}),this.bars.push(t),t.$watch("value",function(a){t.percent=+(100*a/e.max).toFixed(2)}),t.$on("$destroy",function(){a=null,r.removeBar(t)})},this.removeBar=function(e){this.bars.splice(this.bars.indexOf(e),1)}}]).directive("progress",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",require:"progress",scope:{},templateUrl:"template/progressbar/progress.html"}}).directive("bar",function(){return{restrict:"EA",replace:!0,transclude:!0,require:"^progress",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/bar.html",link:function(e,t,a,r){r.addBar(e,t)}}}).directive("progressbar",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/progressbar.html",link:function(e,t,a,r){r.addBar(e,angular.element(t.children()[0]))}}}),angular.module("template/pagination/pager.html",[]).run(["$templateCache",function(e){e.put("template/pagination/pager.html",'<ul class="pager">\n  <li ng-class="{disabled: noPrevious(), previous: align}"><a href ng-click="selectPage(page - 1)">{{getText(\'previous\')}}</a></li>\n  <li ng-class="{disabled: noNext(), next: align}"><a href ng-click="selectPage(page + 1)">{{getText(\'next\')}}</a></li>\n</ul>')}]),angular.module("template/pagination/pagination.html",[]).run(["$templateCache",function(e){e.put("template/pagination/pagination.html",'<ul class="pagination">\n  <li ng-if="boundaryLinks" ng-class="{disabled: noPrevious()}"><a href ng-click="selectPage(1)">{{getText(\'first\')}}</a></li>\n  <li ng-if="directionLinks" ng-class="{disabled: noPrevious()}"><a href ng-click="selectPage(page - 1)">{{getText(\'previous\')}}</a></li>\n  <li ng-repeat="page in pages track by $index" ng-class="{active: page.active}"><a href ng-click="selectPage(page.number)">{{page.text}}</a></li>\n  <li ng-if="directionLinks" ng-class="{disabled: noNext()}"><a href ng-click="selectPage(page + 1)">{{getText(\'next\')}}</a></li>\n  <li ng-if="boundaryLinks" ng-class="{disabled: noNext()}"><a href ng-click="selectPage(totalPages)">{{getText(\'last\')}}</a></li>\n</ul>')}]),angular.module("template/progressbar/bar.html",[]).run(["$templateCache",function(e){e.put("template/progressbar/bar.html",'<div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: percent + \'%\'}" aria-valuetext="{{percent | number:0}}%" ng-transclude></div>')}]),angular.module("template/progressbar/progress.html",[]).run(["$templateCache",function(e){e.put("template/progressbar/progress.html",'<div class="progress" ng-transclude></div>')}]),angular.module("template/progressbar/progressbar.html",[]).run(["$templateCache",function(e){e.put("template/progressbar/progressbar.html",'<div class="progress">\n  <div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: percent + \'%\'}" aria-valuetext="{{percent | number:0}}%" ng-transclude></div>\n</div>')}]);
/*! angular-svg-round-progressbar 2015-02-09 */
"use strict";!function(){for(var a=0,b=["webkit","moz"],c=0;c<b.length&&!window.requestAnimationFrame;++c)window.requestAnimationFrame=window[b[c]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[b[c]+"CancelAnimationFrame"]||window[b[c]+"CancelRequestAnimationFrame"];window.requestAnimationFrame||(window.requestAnimationFrame=function(b){var c=(new Date).getTime(),d=Math.max(0,16-(c-a)),e=window.setTimeout(function(){b(c+d)},d);return a=c+d,e}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(a){clearTimeout(a)})}(),angular.module("angular-svg-round-progress",[]),angular.module("angular-svg-round-progress").constant("roundProgressConfig",{max:50,semi:!1,rounded:!1,radius:100,color:"#45ccce",bgcolor:"#eaeaea",stroke:15,iterations:50,animation:"easeOutCubic"}),angular.module("angular-svg-round-progress").service("roundProgressService",[function(){var a={};a.isSupported=!(!document.createElementNS||!document.createElementNS("http://www.w3.org/2000/svg","svg").createSVGRect);var b=function(a,b,c,d){var e=(d-90)*Math.PI/180;return{x:a+c*Math.cos(e),y:b+c*Math.sin(e)}};return a.updateState=function(a,c,d,e,f,g){if(!f)return e;var a=a>=c?c-1e-5:a,h=g?180:359.9999,i=0===c?0:a/c*h,j=f/2,k=b(j,j,d,i),l=b(j,j,d,0),m=180>=i?"0":"1",n=["M",k.x,k.y,"A",d,d,0,m,0,l.x,l.y].join(" ");return e.attr("d",n)},a.animations={linearEase:function(a,b,c,d){return c*a/d+b},easeInQuad:function(a,b,c,d){return c*(a/=d)*a+b},easeOutQuad:function(a,b,c,d){return-c*(a/=d)*(a-2)+b},easeInOutQuad:function(a,b,c,d){return(a/=d/2)<1?c/2*a*a+b:-c/2*(--a*(a-2)-1)+b},easeInCubic:function(a,b,c,d){return c*(a/=d)*a*a+b},easeOutCubic:function(a,b,c,d){return c*((a=a/d-1)*a*a+1)+b},easeInOutCubic:function(a,b,c,d){return(a/=d/2)<1?c/2*a*a*a+b:c/2*((a-=2)*a*a+2)+b},easeInQuart:function(a,b,c,d){return c*(a/=d)*a*a*a+b},easeOutQuart:function(a,b,c,d){return-c*((a=a/d-1)*a*a*a-1)+b},easeInOutQuart:function(a,b,c,d){return(a/=d/2)<1?c/2*a*a*a*a+b:-c/2*((a-=2)*a*a*a-2)+b},easeInQuint:function(a,b,c,d){return c*(a/=d)*a*a*a*a+b},easeOutQuint:function(a,b,c,d){return c*((a=a/d-1)*a*a*a*a+1)+b},easeInOutQuint:function(a,b,c,d){return(a/=d/2)<1?c/2*a*a*a*a*a+b:c/2*((a-=2)*a*a*a*a+2)+b},easeInSine:function(a,b,c,d){return-c*Math.cos(a/d*(Math.PI/2))+c+b},easeOutSine:function(a,b,c,d){return c*Math.sin(a/d*(Math.PI/2))+b},easeInOutSine:function(a,b,c,d){return-c/2*(Math.cos(Math.PI*a/d)-1)+b},easeInExpo:function(a,b,c,d){return 0==a?b:c*Math.pow(2,10*(a/d-1))+b},easeOutExpo:function(a,b,c,d){return a==d?b+c:c*(-Math.pow(2,-10*a/d)+1)+b},easeInOutExpo:function(a,b,c,d){return 0==a?b:a==d?b+c:(a/=d/2)<1?c/2*Math.pow(2,10*(a-1))+b:c/2*(-Math.pow(2,-10*--a)+2)+b},easeInCirc:function(a,b,c,d){return-c*(Math.sqrt(1-(a/=d)*a)-1)+b},easeOutCirc:function(a,b,c,d){return c*Math.sqrt(1-(a=a/d-1)*a)+b},easeInOutCirc:function(a,b,c,d){return(a/=d/2)<1?-c/2*(Math.sqrt(1-a*a)-1)+b:c/2*(Math.sqrt(1-(a-=2)*a)+1)+b},easeInElastic:function(a,b,c,d){var e=1.70158,f=0,g=c;if(0==a)return b;if(1==(a/=d))return b+c;if(f||(f=.3*d),g<Math.abs(c)){g=c;var e=f/4}else var e=f/(2*Math.PI)*Math.asin(c/g);return-(g*Math.pow(2,10*(a-=1))*Math.sin(2*(a*d-e)*Math.PI/f))+b},easeOutElastic:function(a,b,c,d){var e=1.70158,f=0,g=c;if(0==a)return b;if(1==(a/=d))return b+c;if(f||(f=.3*d),g<Math.abs(c)){g=c;var e=f/4}else var e=f/(2*Math.PI)*Math.asin(c/g);return g*Math.pow(2,-10*a)*Math.sin(2*(a*d-e)*Math.PI/f)+c+b},easeInOutElastic:function(a,b,c,d){var e=1.70158,f=0,g=c;if(0==a)return b;if(2==(a/=d/2))return b+c;if(f||(f=.3*d*1.5),g<Math.abs(c)){g=c;var e=f/4}else var e=f/(2*Math.PI)*Math.asin(c/g);return 1>a?-.5*g*Math.pow(2,10*(a-=1))*Math.sin(2*(a*d-e)*Math.PI/f)+b:g*Math.pow(2,-10*(a-=1))*Math.sin(2*(a*d-e)*Math.PI/f)*.5+c+b},easeInBack:function(a,b,c,d,e){return void 0==e&&(e=1.70158),c*(a/=d)*a*((e+1)*a-e)+b},easeOutBack:function(a,b,c,d,e){return void 0==e&&(e=1.70158),c*((a=a/d-1)*a*((e+1)*a+e)+1)+b},easeInOutBack:function(a,b,c,d,e){return void 0==e&&(e=1.70158),(a/=d/2)<1?c/2*a*a*(((e*=1.525)+1)*a-e)+b:c/2*((a-=2)*a*(((e*=1.525)+1)*a+e)+2)+b},easeInBounce:function(b,c,d,e){return d-a.animations.easeOutBounce(e-b,0,d,e)+c},easeOutBounce:function(a,b,c,d){return(a/=d)<1/2.75?7.5625*c*a*a+b:2/2.75>a?c*(7.5625*(a-=1.5/2.75)*a+.75)+b:2.5/2.75>a?c*(7.5625*(a-=2.25/2.75)*a+.9375)+b:c*(7.5625*(a-=2.625/2.75)*a+.984375)+b},easeInOutBounce:function(b,c,d,e){return e/2>b?.5*a.animations.easeInBounce(2*b,0,d,e)+c:.5*a.animations.easeOutBounce(2*b-e,0,d,e)+.5*d+c}},a}]),angular.module("angular-svg-round-progress").directive("roundProgress",["roundProgressService","roundProgressConfig",function(a,b){return a.isSupported?{restrict:"EA",scope:{current:"=",max:"=",semi:"=",rounded:"=",radius:"@",color:"@",bgcolor:"@",stroke:"@",iterations:"@",animation:"@"},link:function(c,d){var e,f,g=d.find("path"),h=d.find("circle"),i=angular.copy(b),j=function(){var a=i.semi,b=parseInt(i.radius),c=parseInt(i.stroke);e=2*b+2*c,d.css({width:e+"px",height:(a?e/2:e)+"px",overflow:"hidden"}),g.css({stroke:i.color,"stroke-width":c,"stroke-linecap":i.rounded?"round":"butt"}).attr("transform",a?"translate(0,"+e+") rotate(-90)":""),h.attr({cx:b+c,cy:b+c,r:b}).css({stroke:i.bgcolor,"stroke-width":c})},k=function(b,d){if(!angular.isDefined(b))return!1;if(0>b)return f=d,c.current=0;if(b>i.max)return f=d,c.current=i.max;var h=i.max,j=i.radius,k=i.semi,l=a.animations[i.animation],m=d===b?0:d||0,n=b-m,o=0,p=parseInt(i.iterations);angular.isNumber(f)&&(m=f,n=b-f,f=null),function q(){a.updateState(l(o,m,n,p),h,j,g,e,k),p>o&&(requestAnimationFrame(q),o++)}()};c.$watchCollection("[current, max, semi, rounded, radius, color, bgcolor, stroke, iterations]",function(a,b,c){angular.forEach(c,function(a,b){b.indexOf("$")&&c!==a&&angular.isDefined(a)&&(i[b]=a)}),j(),k(a[0],b[0])})},replace:!0,template:['<svg class="round-progress" xmlns="http://www.w3.org/2000/svg">','<circle fill="none"/>','<path fill="none"/>',"</svg>"].join("\n")}:{restrict:"EA",template:'<div class="round-progress"></div>',replace:!0}}]);
angular.module("bt.jsonValidator", []);
angular.module("bt.jsonValidator").factory("jsonSchemaCache", ["$cacheFactory", function ($cacheFactory) {
  return $cacheFactory('jsonSchema');
}]);
angular.module("bt.jsonValidator").factory("jsonValidatorHttpInterceptor", ["$q", "jsonValidator", "$window", function (
  $q, jsonValidator, $window
) {
  return {
    request: function(config) {
      var schemaUrl = config.jsonSchemaUrl;

      if (schemaUrl) {
        var uri = schemaUrl.request;

        if (uri) {
          return jsonValidator.validateJson(config.data, uri).then(function() {
            return config;
          }, function(error) {
            $window.console.error(error);
            return $q.reject(config);
          });
        }
      }

      return config;
    },
    response: function(response) {
      var schemaUrl = response.config.jsonSchemaUrl;

      if (schemaUrl) {
        var uri = schemaUrl.response;

        if (uri) {
          return jsonValidator.validateJson(response.data, uri).then(function() {
            return response;
          }, function(error) {
            $window.console.error(error);
            return $q.reject(response);
          });
        }
      }

      return response;
    }
  }
}]);
angular.module("bt.jsonValidator").factory("jsonValidator", ["$q", "$injector", "$window", "jsonSchemaCache", function (
  $q, $injector, $window, jsonSchemaCache
) {
  // Because TV4 can only report _all_ missing URIs (rather than just those missing for a
  // particular schema) we keep track of schema promises to make sure we don't try and load
  // the same schema more than once.
  var schemaPromises = {};

  function createSchemaPromise(uri) {
    var schema = jsonSchemaCache.get(uri);

    // If the schema has _not_ been pre-loaded into the schema cache
    if (angular.isUndefined(schema)) {
      // Then load it using HTTP
      // Use injector to avoid circular dependencies given that this is an HttpInterceptor
      return $injector.get('$http').get(uri).then(function(response) {
        // Note that we DON'T put it in the JSON schema cache - we're doing our own caching
        return response.data;
      });
    } else {
      // Otherwise just wrap it in a promise and return it
      return $q.when(schema);
    }
  }

  function loadSchema(uri) {
    // If we've already kicked-off a load for the schema in the past, then return it. Otherwise,
    // kick off a load.
    var schemaPromise = schemaPromises[uri];

    if(!schemaPromise) {
      schemaPromise = createSchemaPromise(uri);
      schemaPromises[uri] = schemaPromise;
    }

    return schemaPromise;
  }

  function addSchema(uri) {
    return loadSchema(uri).then(function(schema) {
      tv4.addSchema(uri, schema);

      var missingUris = tv4.getMissingUris();
      // If schemas are missing
      if (missingUris.length) {
        // Load and register them.
        var refSchemaPromises = [];

        angular.forEach(missingUris, function(missingUri) {
          // Note that this is a recursive operation.
          refSchemaPromises.push(addSchema(missingUri));
        });
        // Only resolve when all of the missing schemas have been added. Ideally we'd only be
        // waiting on schemas that the added schema depends on, but there's no way to know.
        return $q.all(refSchemaPromises).then(function() {
          return schema;
        });
      }

      return $q.when(schema);
    });
  }

  function getSchema(uri) {
    var schema = tv4.getSchema(uri);
    return schema ? $q.when(schema) : addSchema(uri);
  }

  return {
    validateJson: function(object, schemaUri) {
      return getSchema(schemaUri).then(function(schema) {
        if (tv4.validate(object, schema)) {
          return object;
        } else {
          return $q.reject(tv4.error);
        }
      });
    }
  };
}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzb24tdmFsaWRhdG9yLmpzIiwianNvbi12YWxpZGF0b3ItY2FjaGUtc2VydmljZS5qcyIsImpzb24tdmFsaWRhdG9yLWh0dHAtaW50ZXJjZXB0b3Itc2VydmljZS5qcyIsImpzb24tdmFsaWRhdG9yLXNlcnZpY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQSw4REFBOEQsa0JBQUE7RUFDNUQ7QUFDRixDQUFDLENBQUE7QUNGRCwyRUFBMkUsbUNBQUE7RUFDekU7QUFDRjtFQUNFO0lBQ0U7TUFDRTs7TUFFQTtRQUNFOztRQUVBO1VBQ0U7WUFDRTtVQUNGO1lBQ0U7WUFDQTtVQUNGO1FBQ0Y7TUFDRjs7TUFFQTtJQUNGO0lBQ0E7TUFDRTs7TUFFQTtRQUNFOztRQUVBO1VBQ0U7WUFDRTtVQUNGO1lBQ0U7WUFDQTtVQUNGO1FBQ0Y7TUFDRjs7TUFFQTtJQUNGO0VBQ0Y7QUFDRixDQUFDLENBQUE7QUN6Q0QsNERBQTRELGtEQUFBO0VBQzFEO0FBQ0Y7RUFDRTtFQUNBO0VBQ0E7RUFDQTs7RUFFQTtJQUNFOztJQUVBO0lBQ0E7TUFDRTtNQUNBO01BQ0E7UUFDRTtRQUNBO01BQ0Y7SUFDRjtNQUNFO01BQ0E7SUFDRjtFQUNGOztFQUVBO0lBQ0U7SUFDQTtJQUNBOztJQUVBO01BQ0U7TUFDQTtJQUNGOztJQUVBO0VBQ0Y7O0VBRUE7SUFDRTtNQUNFOztNQUVBO01BQ0E7TUFDQTtRQUNFO1FBQ0E7O1FBRUE7VUFDRTtVQUNBO1FBQ0Y7UUFDQTtRQUNBO1FBQ0E7VUFDRTtRQUNGO01BQ0Y7O01BRUE7SUFDRjtFQUNGOztFQUVBO0lBQ0U7SUFDQTtFQUNGOztFQUVBO0lBQ0U7TUFDRTtRQUNFO1VBQ0U7UUFDRjtVQUNFO1FBQ0Y7TUFDRjtJQUNGO0VBQ0Y7QUFDRixDQUFDLENBQUEiLCJmaWxlIjoiYW5ndWxhci1qc29uLXZhbGlkYXRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKFwiYnQuanNvblZhbGlkYXRvclwiLCBbXSk7IiwiYW5ndWxhci5tb2R1bGUoXCJidC5qc29uVmFsaWRhdG9yXCIpLmZhY3RvcnkoXCJqc29uU2NoZW1hQ2FjaGVcIiwgZnVuY3Rpb24gKCRjYWNoZUZhY3RvcnkpIHtcbiAgcmV0dXJuICRjYWNoZUZhY3RvcnkoJ2pzb25TY2hlbWEnKTtcbn0pOyIsImFuZ3VsYXIubW9kdWxlKFwiYnQuanNvblZhbGlkYXRvclwiKS5mYWN0b3J5KFwianNvblZhbGlkYXRvckh0dHBJbnRlcmNlcHRvclwiLCBmdW5jdGlvbiAoXG4gICRxLCBqc29uVmFsaWRhdG9yLCAkd2luZG93XG4pIHtcbiAgcmV0dXJuIHtcbiAgICByZXF1ZXN0OiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgIHZhciBzY2hlbWFVcmwgPSBjb25maWcuanNvblNjaGVtYVVybDtcblxuICAgICAgaWYgKHNjaGVtYVVybCkge1xuICAgICAgICB2YXIgdXJpID0gc2NoZW1hVXJsLnJlcXVlc3Q7XG5cbiAgICAgICAgaWYgKHVyaSkge1xuICAgICAgICAgIHJldHVybiBqc29uVmFsaWRhdG9yLnZhbGlkYXRlSnNvbihjb25maWcuZGF0YSwgdXJpKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgICAgJHdpbmRvdy5jb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoY29uZmlnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH0sXG4gICAgcmVzcG9uc2U6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICB2YXIgc2NoZW1hVXJsID0gcmVzcG9uc2UuY29uZmlnLmpzb25TY2hlbWFVcmw7XG5cbiAgICAgIGlmIChzY2hlbWFVcmwpIHtcbiAgICAgICAgdmFyIHVyaSA9IHNjaGVtYVVybC5yZXNwb25zZTtcblxuICAgICAgICBpZiAodXJpKSB7XG4gICAgICAgICAgcmV0dXJuIGpzb25WYWxpZGF0b3IudmFsaWRhdGVKc29uKHJlc3BvbnNlLmRhdGEsIHVyaSkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgICAgJHdpbmRvdy5jb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG4gIH1cbn0pOyIsImFuZ3VsYXIubW9kdWxlKFwiYnQuanNvblZhbGlkYXRvclwiKS5mYWN0b3J5KFwianNvblZhbGlkYXRvclwiLCBmdW5jdGlvbiAoXG4gICRxLCAkaW5qZWN0b3IsICR3aW5kb3csIGpzb25TY2hlbWFDYWNoZVxuKSB7XG4gIC8vIEJlY2F1c2UgVFY0IGNhbiBvbmx5IHJlcG9ydCBfYWxsXyBtaXNzaW5nIFVSSXMgKHJhdGhlciB0aGFuIGp1c3QgdGhvc2UgbWlzc2luZyBmb3IgYVxuICAvLyBwYXJ0aWN1bGFyIHNjaGVtYSkgd2Uga2VlcCB0cmFjayBvZiBzY2hlbWEgcHJvbWlzZXMgdG8gbWFrZSBzdXJlIHdlIGRvbid0IHRyeSBhbmQgbG9hZFxuICAvLyB0aGUgc2FtZSBzY2hlbWEgbW9yZSB0aGFuIG9uY2UuXG4gIHZhciBzY2hlbWFQcm9taXNlcyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZVNjaGVtYVByb21pc2UodXJpKSB7XG4gICAgdmFyIHNjaGVtYSA9IGpzb25TY2hlbWFDYWNoZS5nZXQodXJpKTtcblxuICAgIC8vIElmIHRoZSBzY2hlbWEgaGFzIF9ub3RfIGJlZW4gcHJlLWxvYWRlZCBpbnRvIHRoZSBzY2hlbWEgY2FjaGVcbiAgICBpZiAoYW5ndWxhci5pc1VuZGVmaW5lZChzY2hlbWEpKSB7XG4gICAgICAvLyBUaGVuIGxvYWQgaXQgdXNpbmcgSFRUUFxuICAgICAgLy8gVXNlIGluamVjdG9yIHRvIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY2llcyBnaXZlbiB0aGF0IHRoaXMgaXMgYW4gSHR0cEludGVyY2VwdG9yXG4gICAgICByZXR1cm4gJGluamVjdG9yLmdldCgnJGh0dHAnKS5nZXQodXJpKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIC8vIE5vdGUgdGhhdCB3ZSBET04nVCBwdXQgaXQgaW4gdGhlIEpTT04gc2NoZW1hIGNhY2hlIC0gd2UncmUgZG9pbmcgb3VyIG93biBjYWNoaW5nXG4gICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE90aGVyd2lzZSBqdXN0IHdyYXAgaXQgaW4gYSBwcm9taXNlIGFuZCByZXR1cm4gaXRcbiAgICAgIHJldHVybiAkcS53aGVuKHNjaGVtYSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbG9hZFNjaGVtYSh1cmkpIHtcbiAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGtpY2tlZC1vZmYgYSBsb2FkIGZvciB0aGUgc2NoZW1hIGluIHRoZSBwYXN0LCB0aGVuIHJldHVybiBpdC4gT3RoZXJ3aXNlLFxuICAgIC8vIGtpY2sgb2ZmIGEgbG9hZC5cbiAgICB2YXIgc2NoZW1hUHJvbWlzZSA9IHNjaGVtYVByb21pc2VzW3VyaV07XG5cbiAgICBpZighc2NoZW1hUHJvbWlzZSkge1xuICAgICAgc2NoZW1hUHJvbWlzZSA9IGNyZWF0ZVNjaGVtYVByb21pc2UodXJpKTtcbiAgICAgIHNjaGVtYVByb21pc2VzW3VyaV0gPSBzY2hlbWFQcm9taXNlO1xuICAgIH1cblxuICAgIHJldHVybiBzY2hlbWFQcm9taXNlO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkU2NoZW1hKHVyaSkge1xuICAgIHJldHVybiBsb2FkU2NoZW1hKHVyaSkudGhlbihmdW5jdGlvbihzY2hlbWEpIHtcbiAgICAgIHR2NC5hZGRTY2hlbWEodXJpLCBzY2hlbWEpO1xuXG4gICAgICB2YXIgbWlzc2luZ1VyaXMgPSB0djQuZ2V0TWlzc2luZ1VyaXMoKTtcbiAgICAgIC8vIElmIHNjaGVtYXMgYXJlIG1pc3NpbmdcbiAgICAgIGlmIChtaXNzaW5nVXJpcy5sZW5ndGgpIHtcbiAgICAgICAgLy8gTG9hZCBhbmQgcmVnaXN0ZXIgdGhlbS5cbiAgICAgICAgdmFyIHJlZlNjaGVtYVByb21pc2VzID0gW107XG5cbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKG1pc3NpbmdVcmlzLCBmdW5jdGlvbihtaXNzaW5nVXJpKSB7XG4gICAgICAgICAgLy8gTm90ZSB0aGF0IHRoaXMgaXMgYSByZWN1cnNpdmUgb3BlcmF0aW9uLlxuICAgICAgICAgIHJlZlNjaGVtYVByb21pc2VzLnB1c2goYWRkU2NoZW1hKG1pc3NpbmdVcmkpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIE9ubHkgcmVzb2x2ZSB3aGVuIGFsbCBvZiB0aGUgbWlzc2luZyBzY2hlbWFzIGhhdmUgYmVlbiBhZGRlZC4gSWRlYWxseSB3ZSdkIG9ubHkgYmVcbiAgICAgICAgLy8gd2FpdGluZyBvbiBzY2hlbWFzIHRoYXQgdGhlIGFkZGVkIHNjaGVtYSBkZXBlbmRzIG9uLCBidXQgdGhlcmUncyBubyB3YXkgdG8ga25vdy5cbiAgICAgICAgcmV0dXJuICRxLmFsbChyZWZTY2hlbWFQcm9taXNlcykudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gc2NoZW1hO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICRxLndoZW4oc2NoZW1hKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFNjaGVtYSh1cmkpIHtcbiAgICB2YXIgc2NoZW1hID0gdHY0LmdldFNjaGVtYSh1cmkpO1xuICAgIHJldHVybiBzY2hlbWEgPyAkcS53aGVuKHNjaGVtYSkgOiBhZGRTY2hlbWEodXJpKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdmFsaWRhdGVKc29uOiBmdW5jdGlvbihvYmplY3QsIHNjaGVtYVVyaSkge1xuICAgICAgcmV0dXJuIGdldFNjaGVtYShzY2hlbWFVcmkpLnRoZW4oZnVuY3Rpb24oc2NoZW1hKSB7XG4gICAgICAgIGlmICh0djQudmFsaWRhdGUob2JqZWN0LCBzY2hlbWEpKSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KHR2NC5lcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn0pOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
'use strict';

angular.module('mentio', [])
    .directive('mentio', ['mentioUtil', '$document', '$compile', '$log', '$timeout',
        function (mentioUtil, $document, $compile, $log, $timeout) {
        return {
            restrict: 'A',
            scope: {
                macros: '=mentioMacros',
                search: '&mentioSearch',
                select: '&mentioSelect',
                items: '=mentioItems',
                typedTerm: '=mentioTypedTerm',
                altId: '=mentioId',
                iframeElement: '=mentioIframeElement',
                requireLeadingSpace: '=mentioRequireLeadingSpace',
                selectNotFound: '=mentioSelectNotFound',
                trimTerm: '=mentioTrimTerm',
                ngModel: '='
            },
            controller: ["$scope", "$timeout", "$attrs", function($scope, $timeout, $attrs) {

                $scope.query = function (triggerChar, triggerText) {
                    var remoteScope = $scope.triggerCharMap[triggerChar];

                    if ($scope.trimTerm === undefined || $scope.trimTerm) {
                        triggerText = triggerText.trim();
                    }

                    remoteScope.showMenu();

                    remoteScope.search({
                        term: triggerText
                    });

                    remoteScope.typedTerm = triggerText;
                };

                $scope.defaultSearch = function(locals) {
                    var results = [];
                    angular.forEach($scope.items, function(item) {
                        if (item.label.toUpperCase().indexOf(locals.term.toUpperCase()) >= 0) {
                            results.push(item);
                        }
                    });
                    $scope.localItems = results;
                };

                $scope.bridgeSearch = function(termString) {
                    var searchFn = $attrs.mentioSearch ? $scope.search : $scope.defaultSearch;
                    searchFn({
                        term: termString
                    });
                };

                $scope.defaultSelect = function(locals) {
                    return $scope.defaultTriggerChar + locals.item.label;
                };

                $scope.bridgeSelect = function(itemVar) {
                    var selectFn = $attrs.mentioSelect ? $scope.select : $scope.defaultSelect;
                    return selectFn({
                        item: itemVar
                    });
                };

                $scope.setTriggerText = function(text) {
                    if ($scope.syncTriggerText) {
                        $scope.typedTerm = ($scope.trimTerm === undefined || $scope.trimTerm) ? text.trim() : text;
                    }
                };

                $scope.context = function() {
                    if ($scope.iframeElement) {
                        return {iframe: $scope.iframeElement};
                    }
                };

                $scope.replaceText = function (text, hasTrailingSpace) {
                    $scope.hideAll();

                    mentioUtil.replaceTriggerText($scope.context(), $scope.targetElement, $scope.targetElementPath,
                        $scope.targetElementSelectedOffset, $scope.triggerCharSet, text, $scope.requireLeadingSpace,
                        hasTrailingSpace);

                    if (!hasTrailingSpace) {
                        $scope.setTriggerText('');
                        angular.element($scope.targetElement).triggerHandler('change');
                        if ($scope.isContentEditable()) {
                            $scope.contentEditableMenuPasted = true;
                            var timer = $timeout(function() {
                                $scope.contentEditableMenuPasted = false;
                            }, 200);
                            $scope.$on('$destroy', function() {
                                $timeout.cancel(timer);
                            });
                        }
                    }
                };

                $scope.hideAll = function () {
                    for (var key in $scope.triggerCharMap) {
                        if ($scope.triggerCharMap.hasOwnProperty(key)) {
                            $scope.triggerCharMap[key].hideMenu();
                        }
                    }
                };

                $scope.getActiveMenuScope = function () {
                    for (var key in $scope.triggerCharMap) {
                        if ($scope.triggerCharMap.hasOwnProperty(key)) {
                            if ($scope.triggerCharMap[key].visible) {
                                return $scope.triggerCharMap[key];
                            }
                        }
                    }
                    return null;
                };

                $scope.selectActive = function () {
                    for (var key in $scope.triggerCharMap) {
                        if ($scope.triggerCharMap.hasOwnProperty(key)) {
                            if ($scope.triggerCharMap[key].visible) {
                                $scope.triggerCharMap[key].selectActive();
                            }
                        }
                    }
                };

                $scope.isActive = function () {
                    for (var key in $scope.triggerCharMap) {
                        if ($scope.triggerCharMap.hasOwnProperty(key)) {
                            if ($scope.triggerCharMap[key].visible) {
                                return true;
                            }
                        }
                    }
                    return false;
                };

                $scope.isContentEditable = function() {
                    return ($scope.targetElement.nodeName !== 'INPUT' && $scope.targetElement.nodeName !== 'TEXTAREA');
                };

                $scope.replaceMacro = function(macro, hasTrailingSpace) {
                    if (!hasTrailingSpace) {
                        $scope.replacingMacro = true;
                        $scope.timer = $timeout(function() {
                            mentioUtil.replaceMacroText($scope.context(), $scope.targetElement,
                                $scope.targetElementPath, $scope.targetElementSelectedOffset,
                                $scope.macros, $scope.macros[macro]);
                            angular.element($scope.targetElement).triggerHandler('change');
                            $scope.replacingMacro = false;
                        }, 300);
                        $scope.$on('$destroy', function() {
                            $timeout.cancel($scope.timer);
                        });
                    } else {
                        mentioUtil.replaceMacroText($scope.context(), $scope.targetElement, $scope.targetElementPath,
                            $scope.targetElementSelectedOffset, $scope.macros, $scope.macros[macro]);
                    }
                };

                $scope.addMenu = function(menuScope) {
                    if (menuScope.parentScope && $scope.triggerCharMap.hasOwnProperty(menuScope.triggerChar)) {
                        return;
                    }
                    $scope.triggerCharMap[menuScope.triggerChar] = menuScope;
                    if ($scope.triggerCharSet === undefined) {
                        $scope.triggerCharSet = [];
                    }
                    $scope.triggerCharSet.push(menuScope.triggerChar);
                    menuScope.setParent($scope);
                };

                $scope.$on(
                    'menuCreated', function (event, data) {
                        if (
                            $attrs.id !== undefined ||
                            $attrs.mentioId !== undefined
                        )
                        {
                            if (
                                $attrs.id === data.targetElement ||
                                (
                                    $attrs.mentioId !== undefined &&
                                    $scope.altId === data.targetElement
                                )
                            )
                            {
                                $scope.addMenu(data.scope);
                            }
                        }
                    }
                );

                $document.on(
                    'click', function () {
                        if ($scope.isActive()) {
                            $scope.$apply(function () {
                                $scope.hideAll();
                            });
                        }
                    }
                );

                $document.on(
                    'keydown keypress paste', function (event) {
                        var activeMenuScope = $scope.getActiveMenuScope();
                        if (activeMenuScope) {
                            if (event.which === 9 || event.which === 13) {
                                event.preventDefault();
                                activeMenuScope.selectActive();
                            }

                            if (event.which === 27) {
                                event.preventDefault();
                                activeMenuScope.$apply(function () {
                                    activeMenuScope.hideMenu();
                                });
                            }

                            if (event.which === 40) {
                                event.preventDefault();
                                activeMenuScope.$apply(function () {
                                    activeMenuScope.activateNextItem();
                                });
                                activeMenuScope.adjustScroll(1);
                            }

                            if (event.which === 38) {
                                event.preventDefault();
                                activeMenuScope.$apply(function () {
                                    activeMenuScope.activatePreviousItem();
                                });
                                activeMenuScope.adjustScroll(-1);
                            }

                            if (event.which === 37 || event.which === 39) {
                                event.preventDefault();
                             }
                        }
                    }
                );
            }],
            link: function (scope, element, attrs) {
                scope.triggerCharMap = {};

                scope.targetElement = element;
                attrs.$set('autocomplete','off');

                if (attrs.mentioItems) {
                    scope.localItems = [];
                    scope.parentScope = scope;
                    var itemsRef = attrs.mentioSearch ? ' mentio-items="items"' : ' mentio-items="localItems"';

                    scope.defaultTriggerChar = attrs.mentioTriggerChar ? scope.$eval(attrs.mentioTriggerChar) : '@';

                    var html = '<mentio-menu' +
                        ' mentio-search="bridgeSearch(term)"' +
                        ' mentio-select="bridgeSelect(item)"' +
                        itemsRef;

                    if (attrs.mentioTemplateUrl) {
                        html = html + ' mentio-template-url="' + attrs.mentioTemplateUrl + '"';
                    }
                    html = html + ' mentio-trigger-char="\'' + scope.defaultTriggerChar + '\'"' +
                        ' mentio-parent-scope="parentScope"' +
                        '/>';
                    var linkFn = $compile(html);
                    var el = linkFn(scope);

                    element.parent().append(el);

                    scope.$on('$destroy', function() {
                      el.remove();
                    });
                }

                if (attrs.mentioTypedTerm) {
                    scope.syncTriggerText = true;
                }

                function keyHandler(event) {
                    function stopEvent(event) {
                        event.preventDefault();
                        event.stopPropagation();
                        event.stopImmediatePropagation();
                    }
                    var activeMenuScope = scope.getActiveMenuScope();
                    if (activeMenuScope) {
                        if (event.which === 9 || event.which === 13) {
                            stopEvent(event);
                            activeMenuScope.selectActive();
                            return false;
                        }

                        if (event.which === 27) {
                            stopEvent(event);
                            activeMenuScope.$apply(function () {
                                activeMenuScope.hideMenu();
                            });
                            return false;
                        }

                        if (event.which === 40) {
                            stopEvent(event);
                            activeMenuScope.$apply(function () {
                                activeMenuScope.activateNextItem();
                            });
                            activeMenuScope.adjustScroll(1);
                            return false;
                        }

                        if (event.which === 38) {
                            stopEvent(event);
                            activeMenuScope.$apply(function () {
                                activeMenuScope.activatePreviousItem();
                            });
                            activeMenuScope.adjustScroll(-1);
                            return false;
                        }

                        if (event.which === 37 || event.which === 39) {
                            stopEvent(event);
                            return false;
                        }
                    }
                }

                scope.$watch(
                    'iframeElement', function(newValue) {
                        if (newValue) {
                            var iframeDocument = newValue.contentWindow.document;
                            iframeDocument.addEventListener('click',
                                function () {
                                    if (scope.isActive()) {
                                        scope.$apply(function () {
                                            scope.hideAll();
                                        });
                                    }
                                }
                            );


                            iframeDocument.addEventListener('keydown', keyHandler, true /*capture*/);

                            scope.$on ( '$destroy', function() {
                                iframeDocument.removeEventListener ( 'keydown', keyHandler );
                            });
                        }
                    }
                );

                scope.$watch(
                    'ngModel',
                    function (newValue) {
                        /*jshint maxcomplexity:14 */
                        /*jshint maxstatements:39 */
                        // yes this function needs refactoring
                        if ((!newValue || newValue === '') && !scope.isActive()) {
                            // ignore while setting up
                            return;
                        }
                        if (scope.triggerCharSet === undefined) {
                            $log.error('Error, no mentio-items attribute was provided, ' +
                                'and no separate mentio-menus were specified.  Nothing to do.');
                            return;
                        }

                        if (scope.contentEditableMenuPasted) {
                            // don't respond to changes from insertion of the menu content
                            scope.contentEditableMenuPasted = false;
                            return;
                        }

                        if (scope.replacingMacro) {
                            $timeout.cancel(scope.timer);
                            scope.replacingMacro = false;
                        }

                        var isActive = scope.isActive();
                        var isContentEditable = scope.isContentEditable();

                        var mentionInfo = mentioUtil.getTriggerInfo(scope.context(), scope.triggerCharSet,
                            scope.requireLeadingSpace, isActive);

                        if (mentionInfo !== undefined &&
                                (
                                    !isActive ||
                                    (isActive &&
                                        (
                                            /* content editable selection changes to local nodes which
                                            modifies the start position of the selection over time,
                                            just consider triggerchar changes which
                                            will have the odd effect that deleting a trigger char pops
                                            the menu for a previous
                                            trigger char sequence if one exists in a content editable */
                                            (isContentEditable && mentionInfo.mentionTriggerChar ===
                                                scope.currentMentionTriggerChar) ||
                                            (!isContentEditable && mentionInfo.mentionPosition ===
                                                scope.currentMentionPosition)
                                        )
                                    )
                                )
                            )
                        {
                            /** save selection info about the target control for later re-selection */
                            if (mentionInfo.mentionSelectedElement) {
                                scope.targetElement = mentionInfo.mentionSelectedElement;
                                scope.targetElementPath = mentionInfo.mentionSelectedPath;
                                scope.targetElementSelectedOffset = mentionInfo.mentionSelectedOffset;
                            }

                            /* publish to external ngModel */
                            scope.setTriggerText(mentionInfo.mentionText);
                            /* remember current position */
                            scope.currentMentionPosition = mentionInfo.mentionPosition;
                            scope.currentMentionTriggerChar = mentionInfo.mentionTriggerChar;
                            /* perform query */
                            scope.query(mentionInfo.mentionTriggerChar, mentionInfo.mentionText);
                        } else {
                            var currentTypedTerm = scope.typedTerm;
                            scope.setTriggerText('');
                            scope.hideAll();

                            var macroMatchInfo = mentioUtil.getMacroMatch(scope.context(), scope.macros);

                            if (macroMatchInfo !== undefined) {
                                scope.targetElement = macroMatchInfo.macroSelectedElement;
                                scope.targetElementPath = macroMatchInfo.macroSelectedPath;
                                scope.targetElementSelectedOffset = macroMatchInfo.macroSelectedOffset;
                                scope.replaceMacro(macroMatchInfo.macroText, macroMatchInfo.macroHasTrailingSpace);
                            } else if (scope.selectNotFound && currentTypedTerm && currentTypedTerm !== '') {
                                var lastScope = scope.triggerCharMap[scope.currentMentionTriggerChar];
                                if (lastScope) {
                                    // just came out of typeahead state
                                    var text = lastScope.select({
                                        item: {label: currentTypedTerm}
                                    });
                                    if (typeof text.then === 'function') {
                                        /* text is a promise, at least our best guess */
                                        text.then(scope.replaceText);
                                    } else {
                                        scope.replaceText(text, true);
                                    }
                                }
                            }
                        }
                    }
                );
            }
        };
    }])

    .directive('mentioMenu', ['mentioUtil', '$rootScope', '$log', '$window', '$document',
        function (mentioUtil, $rootScope, $log, $window, $document) {
        return {
            restrict: 'E',
            scope: {
                search: '&mentioSearch',
                select: '&mentioSelect',
                items: '=mentioItems',
                triggerChar: '=mentioTriggerChar',
                forElem: '=mentioFor',
                parentScope: '=mentioParentScope'
            },
            templateUrl: function(tElement, tAttrs) {
                return tAttrs.mentioTemplateUrl !== undefined ? tAttrs.mentioTemplateUrl : 'mentio-menu.tpl.html';
            },
            controller: ["$scope", function ($scope) {
                $scope.visible = false;

                // callable both with controller (menuItem) and without controller (local)
                this.activate = $scope.activate = function (item) {
                    $scope.activeItem = item;
                };

                // callable both with controller (menuItem) and without controller (local)
                this.isActive = $scope.isActive = function (item) {
                    return $scope.activeItem === item;
                };

                // callable both with controller (menuItem) and without controller (local)
                this.selectItem = $scope.selectItem = function (item) {
                    var text = $scope.select({
                        item: item
                    });
                    if (typeof text.then === 'function') {
                        /* text is a promise, at least our best guess */
                        text.then($scope.parentMentio.replaceText);
                    } else {
                        $scope.parentMentio.replaceText(text);
                    }
                };

                $scope.activateNextItem = function () {
                    var index = $scope.items.indexOf($scope.activeItem);
                    this.activate($scope.items[(index + 1) % $scope.items.length]);
                };

                $scope.activatePreviousItem = function () {
                    var index = $scope.items.indexOf($scope.activeItem);
                    this.activate($scope.items[index === 0 ? $scope.items.length - 1 : index - 1]);
                };

                $scope.isFirstItemActive = function () {
                    var index = $scope.items.indexOf($scope.activeItem);

                    return index === 0;
                };

                $scope.isLastItemActive = function () {
                    var index = $scope.items.indexOf($scope.activeItem);

                    return index === ($scope.items.length - 1);
                };

                $scope.selectActive = function () {
                    $scope.selectItem($scope.activeItem);
                };

                $scope.isVisible = function () {
                    return $scope.visible;
                };

                $scope.showMenu = function () {
                    if (!$scope.visible) {
                        $scope.requestVisiblePendingSearch = true;
                    }
                };

                $scope.setParent = function (scope) {
                    $scope.parentMentio = scope;
                    $scope.targetElement = scope.targetElement;
                };
            }],

            link: function (scope, element) {
                element[0].parentNode.removeChild(element[0]);
                $document[0].body.appendChild(element[0]);
                scope.menuElement = element; // for testing

                if (scope.parentScope) {
                    scope.parentScope.addMenu(scope);
                } else {
                    if (!scope.forElem) {
                        $log.error('mentio-menu requires a target element in tbe mentio-for attribute');
                        return;
                    }
                    if (!scope.triggerChar) {
                        $log.error('mentio-menu requires a trigger char');
                        return;
                    }
                    // send own scope to mentio directive so that the menu
                    // becomes attached
                    $rootScope.$broadcast('menuCreated',
                        {
                            targetElement : scope.forElem,
                            scope : scope
                        });
                }

                angular.element($window).bind(
                    'resize', function () {
                        if (scope.isVisible()) {
                            var triggerCharSet = [];
                            triggerCharSet.push(scope.triggerChar);
                            mentioUtil.popUnderMention(scope.parentMentio.context(),
                                triggerCharSet, element, scope.requireLeadingSpace);
                        }
                    }
                );

                scope.$watch('items', function (items) {
                    if (items && items.length > 0) {
                        scope.activate(items[0]);
                        if (!scope.visible && scope.requestVisiblePendingSearch) {
                            scope.visible = true;
                            scope.requestVisiblePendingSearch = false;
                        }
                    } else {
                        scope.hideMenu();
                    }
                });

                scope.$watch('isVisible()', function (visible) {
                    // wait for the watch notification to show the menu
                    if (visible) {
                        var triggerCharSet = [];
                        triggerCharSet.push(scope.triggerChar);
                        mentioUtil.popUnderMention(scope.parentMentio.context(),
                            triggerCharSet, element, scope.requireLeadingSpace);
                    }
                });

                scope.parentMentio.$on('$destroy', function () {
                    element.remove();
                });

                scope.hideMenu = function () {
                    scope.visible = false;
                    element.css('display', 'none');
                };

                scope.adjustScroll = function (direction) {
                    var menuEl = element[0];
                    var menuItemsList = menuEl.querySelector('ul');
                    var menuItem = (menuEl.querySelector('[mentio-menu-item].active') || 
                        menuEl.querySelector('[data-mentio-menu-item].active'));

                    if (scope.isFirstItemActive()) {
                        return menuItemsList.scrollTop = 0;
                    } else if(scope.isLastItemActive()) {
                        return menuItemsList.scrollTop = menuItemsList.scrollHeight;
                    }

                    if (direction === 1) {
                        menuItemsList.scrollTop += menuItem.offsetHeight;
                    } else {
                        menuItemsList.scrollTop -= menuItem.offsetHeight;
                    }
                };

            }
        };
    }])

    .directive('mentioMenuItem', function () {
        return {
            restrict: 'A',
            scope: {
                item: '=mentioMenuItem'
            },
            require: '^mentioMenu',
            link: function (scope, element, attrs, controller) {

                scope.$watch(function () {
                    return controller.isActive(scope.item);
                }, function (active) {
                    if (active) {
                        element.addClass('active');
                    } else {
                        element.removeClass('active');
                    }
                });

                element.bind('mouseenter', function () {
                    scope.$apply(function () {
                        controller.activate(scope.item);
                    });
                });

                element.bind('click', function () {
                    controller.selectItem(scope.item);
                    return false;
                });
            }
        };
    })
    .filter('unsafe', ["$sce", function($sce) {
        return function (val) {
            return $sce.trustAsHtml(val);
        };
    }])
    .filter('mentioHighlight', function() {
        function escapeRegexp (queryToEscape) {
            return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
        }

        return function (matchItem, query, hightlightClass) {
            if (query) {
                var replaceText = hightlightClass ?
                                 '<span class="' + hightlightClass + '">$&</span>' :
                                 '<strong>$&</strong>';
                return ('' + matchItem).replace(new RegExp(escapeRegexp(query), 'gi'), replaceText);
            } else {
                return matchItem;
            }
        };
    });

'use strict';

angular.module('mentio')
    .factory('mentioUtil', ["$window", "$location", "$anchorScroll", "$timeout", function ($window, $location, $anchorScroll, $timeout) {

        // public
        function popUnderMention (ctx, triggerCharSet, selectionEl, requireLeadingSpace) {
            var coordinates;
            var mentionInfo = getTriggerInfo(ctx, triggerCharSet, requireLeadingSpace, false);

            if (mentionInfo !== undefined) {

                if (selectedElementIsTextAreaOrInput(ctx)) {
                    coordinates = getTextAreaOrInputUnderlinePosition(ctx, getDocument(ctx).activeElement,
                        mentionInfo.mentionPosition);
                } else {
                    coordinates = getContentEditableCaretPosition(ctx, mentionInfo.mentionPosition);
                }

                // Move the button into place.
                selectionEl.css({
                    top: coordinates.top + 'px',
                    left: coordinates.left + 'px',
                    position: 'absolute',
                    zIndex: 10000,
                    display: 'block'
                });

                $timeout(function(){
                    scrollIntoView(ctx, selectionEl);
                },0);
            } else {
                selectionEl.css({
                    display: 'none'
                });
            }
        }

        function scrollIntoView(ctx, elem)
        {
            // cheap hack in px - need to check styles relative to the element
            var reasonableBuffer = 20;
            var maxScrollDisplacement = 100;
            var clientRect;
            var e = elem[0];
            while (clientRect === undefined || clientRect.height === 0) {
                clientRect = e.getBoundingClientRect();
                if (clientRect.height === 0) {
                    e = e.childNodes[0];
                    if (e === undefined || !e.getBoundingClientRect) {
                        return;
                    }
                }
            }
            var elemTop = clientRect.top;
            var elemBottom = elemTop + clientRect.height;
            if(elemTop < 0) {
                $window.scrollTo(0, $window.pageYOffset + clientRect.top - reasonableBuffer);
            } else if (elemBottom > $window.innerHeight) {
                var maxY = $window.pageYOffset + clientRect.top - reasonableBuffer;
                if (maxY - $window.pageYOffset > maxScrollDisplacement) {
                    maxY = $window.pageYOffset + maxScrollDisplacement;
                }
                var targetY = $window.pageYOffset - ($window.innerHeight - elemBottom);
                if (targetY > maxY) {
                    targetY = maxY;
                }
                $window.scrollTo(0, targetY);
            }
        }

        function selectedElementIsTextAreaOrInput (ctx) {
            var element = getDocument(ctx).activeElement;
            if (element !== null) {
                var nodeName = element.nodeName;
                var type = element.getAttribute('type');
                return (nodeName === 'INPUT' && type === 'text') || nodeName === 'TEXTAREA';
            }
            return false;
        }

        function selectElement (ctx, targetElement, path, offset) {
            var range;
            var elem = targetElement;
            if (path) {
                for (var i = 0; i < path.length; i++) {
                    elem = elem.childNodes[path[i]];
                    if (elem === undefined) {
                        return;
                    }
                    while (elem.length < offset) {
                        offset -= elem.length;
                        elem = elem.nextSibling;
                    }
                    if (elem.childNodes.length === 0 && !elem.length) {
                        elem = elem.previousSibling;
                    }
                }
            }
            var sel = getWindowSelection(ctx);

            range = getDocument(ctx).createRange();
            range.setStart(elem, offset);
            range.setEnd(elem, offset);
            range.collapse(true);
            try{sel.removeAllRanges();}catch(error){}
            sel.addRange(range);
            targetElement.focus();
        }

        function pasteHtml (ctx, html, startPos, endPos) {
            var range, sel;
            sel = getWindowSelection(ctx);
            range = getDocument(ctx).createRange();
            range.setStart(sel.anchorNode, startPos);
            range.setEnd(sel.anchorNode, endPos);
            range.deleteContents();

            var el = getDocument(ctx).createElement('div');
            el.innerHTML = html;
            var frag = getDocument(ctx).createDocumentFragment(),
                node, lastNode;
            while ((node = el.firstChild)) {
                lastNode = frag.appendChild(node);
            }
            range.insertNode(frag);

            // Preserve the selection
            if (lastNode) {
                range = range.cloneRange();
                range.setStartAfter(lastNode);
                range.collapse(true);
                sel.removeAllRanges();
                sel.addRange(range);
            }
        }

        function resetSelection (ctx, targetElement, path, offset) {
            var nodeName = targetElement.nodeName;
            if (nodeName === 'INPUT' || nodeName === 'TEXTAREA') {
                if (targetElement !== getDocument(ctx).activeElement) {
                    targetElement.focus();
                }
            } else {
                selectElement(ctx, targetElement, path, offset);
            }
        }

        // public
        function replaceMacroText (ctx, targetElement, path, offset, macros, text) {
            resetSelection(ctx, targetElement, path, offset);

            var macroMatchInfo = getMacroMatch(ctx, macros);

            if (macroMatchInfo.macroHasTrailingSpace) {
                macroMatchInfo.macroText = macroMatchInfo.macroText + '\xA0';
                text = text + '\xA0';
            }

            if (macroMatchInfo !== undefined) {
                var element = getDocument(ctx).activeElement;
                if (selectedElementIsTextAreaOrInput(ctx)) {
                    var startPos = macroMatchInfo.macroPosition;
                    var endPos = macroMatchInfo.macroPosition + macroMatchInfo.macroText.length;
                    element.value = element.value.substring(0, startPos) + text +
                        element.value.substring(endPos, element.value.length);
                    element.selectionStart = startPos + text.length;
                    element.selectionEnd = startPos + text.length;
                } else {
                    pasteHtml(ctx, text, macroMatchInfo.macroPosition,
                            macroMatchInfo.macroPosition + macroMatchInfo.macroText.length);
                }
            }
        }

        // public
        function replaceTriggerText (ctx, targetElement, path, offset, triggerCharSet, 
                text, requireLeadingSpace, hasTrailingSpace) {
            resetSelection(ctx, targetElement, path, offset);

            var mentionInfo = getTriggerInfo(ctx, triggerCharSet, requireLeadingSpace, true, hasTrailingSpace);

            if (mentionInfo !== undefined) {
                if (selectedElementIsTextAreaOrInput()) {
                    var myField = getDocument(ctx).activeElement;
                    text = text + ' ';
                    var startPos = mentionInfo.mentionPosition;
                    var endPos = mentionInfo.mentionPosition + mentionInfo.mentionText.length + 1;
                    myField.value = myField.value.substring(0, startPos) + text +
                        myField.value.substring(endPos, myField.value.length);
                    myField.selectionStart = startPos + text.length;
                    myField.selectionEnd = startPos + text.length;
                } else {
                    // add a space to the end of the pasted text
                    text = text + '\xA0';
                    pasteHtml(ctx, text, mentionInfo.mentionPosition,
                            mentionInfo.mentionPosition + mentionInfo.mentionText.length + 1);
                }
            }
        }

        function getNodePositionInParent (ctx, elem) {
            if (elem.parentNode === null) {
                return 0;
            }
            for (var i = 0; i < elem.parentNode.childNodes.length; i++) {
                var node = elem.parentNode.childNodes[i];
                if (node === elem) {
                    return i;
                }
            }
        }

        // public
        function getMacroMatch (ctx, macros) {
            var selected, path = [], offset;

            if (selectedElementIsTextAreaOrInput(ctx)) {
                selected = getDocument(ctx).activeElement;
            } else {
                // content editable
                var selectionInfo = getContentEditableSelectedPath(ctx);
                if (selectionInfo) {
                    selected = selectionInfo.selected;
                    path = selectionInfo.path;
                    offset = selectionInfo.offset;
                }
            }
            var effectiveRange = getTextPrecedingCurrentSelection(ctx);
            if (effectiveRange !== undefined && effectiveRange !== null) {

                var matchInfo;

                var hasTrailingSpace = false;

                if (effectiveRange.length > 0 &&
                    (effectiveRange.charAt(effectiveRange.length - 1) === '\xA0' ||
                        effectiveRange.charAt(effectiveRange.length - 1) === ' ')) {
                    hasTrailingSpace = true;
                    // strip space
                    effectiveRange = effectiveRange.substring(0, effectiveRange.length-1);
                }

                angular.forEach(macros, function (macro, c) {
                    var idx = effectiveRange.toUpperCase().lastIndexOf(c.toUpperCase());

                    if (idx >= 0 && c.length + idx === effectiveRange.length) {
                        var prevCharPos = idx - 1;
                        if (idx === 0 || effectiveRange.charAt(prevCharPos) === '\xA0' ||
                            effectiveRange.charAt(prevCharPos) === ' ' ) {

                            matchInfo = {
                                macroPosition: idx,
                                macroText: c,
                                macroSelectedElement: selected,
                                macroSelectedPath: path,
                                macroSelectedOffset: offset,
                                macroHasTrailingSpace: hasTrailingSpace
                            };
                        }
                    }
                });
                if (matchInfo) {
                    return matchInfo;
                }
            }
        }

        function getContentEditableSelectedPath(ctx) {
            // content editable
            var sel = getWindowSelection(ctx);
            var selected = sel.anchorNode;
            var path = [];
            var offset;
            if (selected != null) {
                var i;
                var ce = selected.contentEditable;
                while (selected !== null && ce !== 'true') {
                    i = getNodePositionInParent(ctx, selected);
                    path.push(i);
                    selected = selected.parentNode;
                    if (selected !== null) {
                        ce = selected.contentEditable;
                    }
                }
                path.reverse();
                // getRangeAt may not exist, need alternative
                offset = sel.getRangeAt(0).startOffset;
                return {
                    selected: selected,
                    path: path,
                    offset: offset
                };
            }
        }

        // public
        function getTriggerInfo (ctx, triggerCharSet, requireLeadingSpace, menuAlreadyActive, hasTrailingSpace) {
            /*jshint maxcomplexity:11 */
            // yes this function needs refactoring 
            var selected, path, offset;
            if (selectedElementIsTextAreaOrInput(ctx)) {
                selected = getDocument(ctx).activeElement;
            } else {
                // content editable
                var selectionInfo = getContentEditableSelectedPath(ctx);
                if (selectionInfo) {
                    selected = selectionInfo.selected;
                    path = selectionInfo.path;
                    offset = selectionInfo.offset;
                }
            }
            var effectiveRange = getTextPrecedingCurrentSelection(ctx);

            if (effectiveRange !== undefined && effectiveRange !== null) {
                var mostRecentTriggerCharPos = -1;
                var triggerChar;
                triggerCharSet.forEach(function(c) {
                    var idx = effectiveRange.lastIndexOf(c);
                    if (idx > mostRecentTriggerCharPos) {
                        mostRecentTriggerCharPos = idx;
                        triggerChar = c;
                    }
                });
                if (mostRecentTriggerCharPos >= 0 &&
                        (
                            mostRecentTriggerCharPos === 0 ||
                            !requireLeadingSpace ||
                            /[\xA0\s]/g.test
                            (
                                effectiveRange.substring(
                                    mostRecentTriggerCharPos - 1,
                                    mostRecentTriggerCharPos)
                            )
                        )
                    )
                {
                    var currentTriggerSnippet = effectiveRange.substring(mostRecentTriggerCharPos + 1,
                        effectiveRange.length);

                    triggerChar = effectiveRange.substring(mostRecentTriggerCharPos, mostRecentTriggerCharPos+1);
                    var firstSnippetChar = currentTriggerSnippet.substring(0,1);
                    var leadingSpace = currentTriggerSnippet.length > 0 &&
                        (
                            firstSnippetChar === ' ' ||
                            firstSnippetChar === '\xA0'
                        );
                    if (hasTrailingSpace) {
                        currentTriggerSnippet = currentTriggerSnippet.trim();
                    }
                    if (!leadingSpace && (menuAlreadyActive || !(/[\xA0\s]/g.test(currentTriggerSnippet)))) {
                        return {
                            mentionPosition: mostRecentTriggerCharPos,
                            mentionText: currentTriggerSnippet,
                            mentionSelectedElement: selected,
                            mentionSelectedPath: path,
                            mentionSelectedOffset: offset,
                            mentionTriggerChar: triggerChar
                        };
                    }
                }
            }
        }

        function getWindowSelection(ctx) {
            if (!ctx) {
                return window.getSelection();
            } else {
                return ctx.iframe.contentWindow.getSelection();
            }
        }

        function getDocument(ctx) {
            if (!ctx) {
                return document;
            } else {
                return ctx.iframe.contentWindow.document;
            }
        }

        function getTextPrecedingCurrentSelection (ctx) {
            var text;
            if (selectedElementIsTextAreaOrInput(ctx)) {
                var textComponent = getDocument(ctx).activeElement;
                var startPos = textComponent.selectionStart;
                text = textComponent.value.substring(0, startPos);

            } else {
                var selectedElem = getWindowSelection(ctx).anchorNode;
                if (selectedElem != null) {
                    var workingNodeContent = selectedElem.textContent;
                    var selectStartOffset = getWindowSelection(ctx).getRangeAt(0).startOffset;
                    if (selectStartOffset >= 0) {
                        text = workingNodeContent.substring(0, selectStartOffset);
                    }
                }
            }
            return text;
        }

        function getContentEditableCaretPosition (ctx, selectedNodePosition) {
            var markerTextChar = '\ufeff';
            var markerEl, markerId = 'sel_' + new Date().getTime() + '_' + Math.random().toString().substr(2);

            var range;
            var sel = getWindowSelection(ctx);
            var prevRange = sel.getRangeAt(0);
            range = getDocument(ctx).createRange();

            range.setStart(sel.anchorNode, selectedNodePosition);
            range.setEnd(sel.anchorNode, selectedNodePosition);

            range.collapse(false);

            // Create the marker element containing a single invisible character using DOM methods and insert it
            markerEl = getDocument(ctx).createElement('span');
            markerEl.id = markerId;
            markerEl.appendChild(getDocument(ctx).createTextNode(markerTextChar));
            range.insertNode(markerEl);
            sel.removeAllRanges();
            sel.addRange(prevRange);

            var coordinates = {
                left: 0,
                top: markerEl.offsetHeight
            };

            localToGlobalCoordinates(ctx, markerEl, coordinates);

            markerEl.parentNode.removeChild(markerEl);
            return coordinates;
        }

        function localToGlobalCoordinates(ctx, element, coordinates) {
            var obj = element;
            var iframe = ctx ? ctx.iframe : null;
            while(obj) {
                coordinates.left += obj.offsetLeft + obj.clientLeft;
                coordinates.top += obj.offsetTop + obj.clientTop;
                obj = obj.offsetParent;
                if (!obj && iframe) {
                    obj = iframe;
                    iframe = null;
                }
            }            
            obj = element;
            iframe = ctx ? ctx.iframe : null;
            while(obj !== getDocument().body) {
                if (obj.scrollTop && obj.scrollTop > 0) {
                    coordinates.top -= obj.scrollTop;
                }
                if (obj.scrollLeft && obj.scrollLeft > 0) {
                    coordinates.left -= obj.scrollLeft;
                }
                obj = obj.parentNode;
                if (!obj && iframe) {
                    obj = iframe;
                    iframe = null;
                }
            }            
         }

        function getTextAreaOrInputUnderlinePosition (ctx, element, position) {
            var properties = [
                'direction',
                'boxSizing',
                'width',
                'height',
                'overflowX',
                'overflowY',
                'borderTopWidth',
                'borderRightWidth',
                'borderBottomWidth',
                'borderLeftWidth',
                'paddingTop',
                'paddingRight',
                'paddingBottom',
                'paddingLeft',
                'fontStyle',
                'fontVariant',
                'fontWeight',
                'fontStretch',
                'fontSize',
                'fontSizeAdjust',
                'lineHeight',
                'fontFamily',
                'textAlign',
                'textTransform',
                'textIndent',
                'textDecoration',
                'letterSpacing',
                'wordSpacing'
            ];

            var isFirefox = (window.mozInnerScreenX !== null);

            var div = getDocument(ctx).createElement('div');
            div.id = 'input-textarea-caret-position-mirror-div';
            getDocument(ctx).body.appendChild(div);

            var style = div.style;
            var computed = window.getComputedStyle ? getComputedStyle(element) : element.currentStyle;

            style.whiteSpace = 'pre-wrap';
            if (element.nodeName !== 'INPUT') {
                style.wordWrap = 'break-word';
            }

            // position off-screen
            style.position = 'absolute';
            style.visibility = 'hidden';

            // transfer the element's properties to the div
            properties.forEach(function (prop) {
                style[prop] = computed[prop];
            });

            if (isFirefox) {
                style.width = (parseInt(computed.width) - 2) + 'px';
                if (element.scrollHeight > parseInt(computed.height))
                    style.overflowY = 'scroll';
            } else {
                style.overflow = 'hidden';
            }

            div.textContent = element.value.substring(0, position);

            if (element.nodeName === 'INPUT') {
                div.textContent = div.textContent.replace(/\s/g, '\u00a0');
            }

            var span = getDocument(ctx).createElement('span');
            span.textContent = element.value.substring(position) || '.';
            div.appendChild(span);

            var coordinates = {
                top: span.offsetTop + parseInt(computed.borderTopWidth) + parseInt(computed.fontSize),
                left: span.offsetLeft + parseInt(computed.borderLeftWidth)
            };

            localToGlobalCoordinates(ctx, element, coordinates);

            getDocument(ctx).body.removeChild(div);

            return coordinates;
        }

        return {
            // public
            popUnderMention: popUnderMention,
            replaceMacroText: replaceMacroText,
            replaceTriggerText: replaceTriggerText,
            getMacroMatch: getMacroMatch,
            getTriggerInfo: getTriggerInfo,
            selectElement: selectElement,




            // private: for unit testing only
            getTextAreaOrInputUnderlinePosition: getTextAreaOrInputUnderlinePosition,
            getTextPrecedingCurrentSelection: getTextPrecedingCurrentSelection,
            getContentEditableSelectedPath: getContentEditableSelectedPath,
            getNodePositionInParent: getNodePositionInParent,
            getContentEditableCaretPosition: getContentEditableCaretPosition,
            pasteHtml: pasteHtml,
            resetSelection: resetSelection,
            scrollIntoView: scrollIntoView
        };
    }]);

angular.module("mentio").run(["$templateCache", function($templateCache) {$templateCache.put("mentio-menu.tpl.html","<style>\n.scrollable-menu {\n    height: auto;\n    max-height: 300px;\n    overflow: auto;\n}\n\n.menu-highlighted {\n    font-weight: bold;\n}\n</style>\n<ul class=\"dropdown-menu scrollable-menu\" style=\"display:block\">\n    <li mentio-menu-item=\"item\" ng-repeat=\"item in items track by $index\">\n        <a class=\"text-primary\" ng-bind-html=\"item.label | mentioHighlight:typedTerm:\'menu-highlighted\' | unsafe\"></a>\n    </li>\n</ul>");}]);
/**!
 * AngularJS file upload directives and services. Supoorts: file upload/drop/paste, resume, cancel/abort,
 * progress, resize, thumbnail, preview, validation and CORS
 * @author  Danial  <danial.farid@gmail.com>
 * @version 12.0.4
 */

if (window.XMLHttpRequest && !(window.FileAPI && FileAPI.shouldLoad)) {
  window.XMLHttpRequest.prototype.setRequestHeader = (function (orig) {
    return function (header, value) {
      if (header === '__setXHR_') {
        var val = value(this);
        // fix for angular < 1.2.0
        if (val instanceof Function) {
          val(this);
        }
      } else {
        orig.apply(this, arguments);
      }
    };
  })(window.XMLHttpRequest.prototype.setRequestHeader);
}

var ngFileUpload = angular.module('ngFileUpload', []);

ngFileUpload.version = '12.0.4';

ngFileUpload.service('UploadBase', ['$http', '$q', '$timeout', function ($http, $q, $timeout) {
  var upload = this;
  upload.promisesCount = 0;

  this.isResumeSupported = function () {
    return window.Blob && window.Blob.prototype.slice;
  };

  var resumeSupported = this.isResumeSupported();

  function sendHttp(config) {
    config.method = config.method || 'POST';
    config.headers = config.headers || {};

    var deferred = config._deferred = config._deferred || $q.defer();
    var promise = deferred.promise;

    function notifyProgress(e) {
      if (deferred.notify) {
        deferred.notify(e);
      }
      if (promise.progressFunc) {
        $timeout(function () {
          promise.progressFunc(e);
        });
      }
    }

    function getNotifyEvent(n) {
      if (config._start != null && resumeSupported) {
        return {
          loaded: n.loaded + config._start,
          total: (config._file && config._file.size) || n.total,
          type: n.type, config: config,
          lengthComputable: true, target: n.target
        };
      } else {
        return n;
      }
    }

    if (!config.disableProgress) {
      config.headers.__setXHR_ = function () {
        return function (xhr) {
          if (!xhr || !xhr.upload || !xhr.upload.addEventListener) return;
          config.__XHR = xhr;
          if (config.xhrFn) config.xhrFn(xhr);
          xhr.upload.addEventListener('progress', function (e) {
            e.config = config;
            notifyProgress(getNotifyEvent(e));
          }, false);
          //fix for firefox not firing upload progress end, also IE8-9
          xhr.upload.addEventListener('load', function (e) {
            if (e.lengthComputable) {
              e.config = config;
              notifyProgress(getNotifyEvent(e));
            }
          }, false);
        };
      };
    }

    function uploadWithAngular() {
      $http(config).then(function (r) {
          if (resumeSupported && config._chunkSize && !config._finished && config._file) {
            notifyProgress({
                loaded: config._end,
                total: config._file && config._file.size,
                config: config, type: 'progress'
              }
            );
            upload.upload(config, true);
          } else {
            if (config._finished) delete config._finished;
            deferred.resolve(r);
          }
        }, function (e) {
          deferred.reject(e);
        }, function (n) {
          deferred.notify(n);
        }
      );
    }

    if (!resumeSupported) {
      uploadWithAngular();
    } else if (config._chunkSize && config._end && !config._finished) {
      config._start = config._end;
      config._end += config._chunkSize;
      uploadWithAngular();
    } else if (config.resumeSizeUrl) {
      $http.get(config.resumeSizeUrl).then(function (resp) {
        if (config.resumeSizeResponseReader) {
          config._start = config.resumeSizeResponseReader(resp.data);
        } else {
          config._start = parseInt((resp.data.size == null ? resp.data : resp.data.size).toString());
        }
        if (config._chunkSize) {
          config._end = config._start + config._chunkSize;
        }
        uploadWithAngular();
      }, function (e) {
        throw e;
      });
    } else if (config.resumeSize) {
      config.resumeSize().then(function (size) {
        config._start = size;
        uploadWithAngular();
      }, function (e) {
        throw e;
      });
    } else {
      if (config._chunkSize) {
        config._start = 0;
        config._end = config._start + config._chunkSize;
      }
      uploadWithAngular();
    }


    promise.success = function (fn) {
      promise.then(function (response) {
        fn(response.data, response.status, response.headers, config);
      });
      return promise;
    };

    promise.error = function (fn) {
      promise.then(null, function (response) {
        fn(response.data, response.status, response.headers, config);
      });
      return promise;
    };

    promise.progress = function (fn) {
      promise.progressFunc = fn;
      promise.then(null, null, function (n) {
        fn(n);
      });
      return promise;
    };
    promise.abort = promise.pause = function () {
      if (config.__XHR) {
        $timeout(function () {
          config.__XHR.abort();
        });
      }
      return promise;
    };
    promise.xhr = function (fn) {
      config.xhrFn = (function (origXhrFn) {
        return function () {
          if (origXhrFn) origXhrFn.apply(promise, arguments);
          fn.apply(promise, arguments);
        };
      })(config.xhrFn);
      return promise;
    };

    upload.promisesCount++;
    promise['finally'](function () {
      upload.promisesCount--;
    });
    return promise;
  }

  this.isUploadInProgress = function () {
    return upload.promisesCount > 0;
  };

  this.rename = function (file, name) {
    file.ngfName = name;
    return file;
  };

  this.jsonBlob = function (val) {
    if (val != null && !angular.isString(val)) {
      val = JSON.stringify(val);
    }
    var blob = new window.Blob([val], {type: 'application/json'});
    blob._ngfBlob = true;
    return blob;
  };

  this.json = function (val) {
    return angular.toJson(val);
  };

  function copy(obj) {
    var clone = {};
    for (var key in obj) {
      if (obj.hasOwnProperty(key)) {
        clone[key] = obj[key];
      }
    }
    return clone;
  }

  this.isFile = function (file) {
    return file != null && (file instanceof window.Blob || (file.flashId && file.name && file.size));
  };

  this.upload = function (config, internal) {
    function toResumeFile(file, formData) {
      if (file._ngfBlob) return file;
      config._file = config._file || file;
      if (config._start != null && resumeSupported) {
        if (config._end && config._end >= file.size) {
          config._finished = true;
          config._end = file.size;
        }
        var slice = file.slice(config._start, config._end || file.size);
        slice.name = file.name;
        slice.ngfName = file.ngfName;
        if (config._chunkSize) {
          formData.append('_chunkSize', config._chunkSize);
          formData.append('_currentChunkSize', config._end - config._start);
          formData.append('_chunkNumber', Math.floor(config._start / config._chunkSize));
          formData.append('_totalSize', config._file.size);
        }
        return slice;
      }
      return file;
    }

    function addFieldToFormData(formData, val, key) {
      if (val !== undefined) {
        if (angular.isDate(val)) {
          val = val.toISOString();
        }
        if (angular.isString(val)) {
          formData.append(key, val);
        } else if (upload.isFile(val)) {
          var file = toResumeFile(val, formData);
          var split = key.split(',');
          if (split[1]) {
            file.ngfName = split[1].replace(/^\s+|\s+$/g, '');
            key = split[0];
          }
          config._fileKey = config._fileKey || key;
          formData.append(key, file, file.ngfName || file.name);
        } else {
          if (angular.isObject(val)) {
            if (val.$$ngfCircularDetection) throw 'ngFileUpload: Circular reference in config.data. Make sure specified data for Upload.upload() has no circular reference: ' + key;

            val.$$ngfCircularDetection = true;
            try {
              for (var k in val) {
                if (val.hasOwnProperty(k) && k !== '$$ngfCircularDetection') {
                  var objectKey = config.objectKey == null ? '[i]' : config.objectKey;
                  if (val.length && parseInt(k) > -1) {
                    objectKey = config.arrayKey == null ? objectKey : config.arrayKey;
                  }
                  addFieldToFormData(formData, val[k], key + objectKey.replace(/[ik]/g, k));
                }
              }
            } finally {
              delete val.$$ngfCircularDetection;
            }
          } else {
            formData.append(key, val);
          }
        }
      }
    }

    function digestConfig() {
      config._chunkSize = upload.translateScalars(config.resumeChunkSize);
      config._chunkSize = config._chunkSize ? parseInt(config._chunkSize.toString()) : null;

      config.headers = config.headers || {};
      config.headers['Content-Type'] = undefined;
      config.transformRequest = config.transformRequest ?
        (angular.isArray(config.transformRequest) ?
          config.transformRequest : [config.transformRequest]) : [];
      config.transformRequest.push(function (data) {
        var formData = new window.FormData(), key;
        data = data || config.fields || {};
        if (config.file) {
          data.file = config.file;
        }
        for (key in data) {
          if (data.hasOwnProperty(key)) {
            var val = data[key];
            if (config.formDataAppender) {
              config.formDataAppender(formData, key, val);
            } else {
              addFieldToFormData(formData, val, key);
            }
          }
        }

        return formData;
      });
    }

    if (!internal) config = copy(config);
    if (!config._isDigested) {
      config._isDigested = true;
      digestConfig();
    }

    return sendHttp(config);
  };

  this.http = function (config) {
    config = copy(config);
    config.transformRequest = config.transformRequest || function (data) {
        if ((window.ArrayBuffer && data instanceof window.ArrayBuffer) || data instanceof window.Blob) {
          return data;
        }
        return $http.defaults.transformRequest[0].apply(this, arguments);
      };
    config._chunkSize = upload.translateScalars(config.resumeChunkSize);
    config._chunkSize = config._chunkSize ? parseInt(config._chunkSize.toString()) : null;

    return sendHttp(config);
  };

  this.translateScalars = function (str) {
    if (angular.isString(str)) {
      if (str.search(/kb/i) === str.length - 2) {
        return parseFloat(str.substring(0, str.length - 2) * 1024);
      } else if (str.search(/mb/i) === str.length - 2) {
        return parseFloat(str.substring(0, str.length - 2) * 1048576);
      } else if (str.search(/gb/i) === str.length - 2) {
        return parseFloat(str.substring(0, str.length - 2) * 1073741824);
      } else if (str.search(/b/i) === str.length - 1) {
        return parseFloat(str.substring(0, str.length - 1));
      } else if (str.search(/s/i) === str.length - 1) {
        return parseFloat(str.substring(0, str.length - 1));
      } else if (str.search(/m/i) === str.length - 1) {
        return parseFloat(str.substring(0, str.length - 1) * 60);
      } else if (str.search(/h/i) === str.length - 1) {
        return parseFloat(str.substring(0, str.length - 1) * 3600);
      }
    }
    return str;
  };

  this.urlToBlob = function(url) {
    var defer = $q.defer();
    $http({url: url, method: 'get', responseType: 'arraybuffer'}).then(function (resp) {
      var arrayBufferView = new Uint8Array(resp.data);
      var type = resp.headers('content-type') || 'image/WebP';
      var blob = new window.Blob([arrayBufferView], {type: type});
      defer.resolve(blob);
      //var split = type.split('[/;]');
      //blob.name = url.substring(0, 150).replace(/\W+/g, '') + '.' + (split.length > 1 ? split[1] : 'jpg');
    }, function (e) {
      defer.reject(e);
    });
    return defer.promise;
  };

  this.setDefaults = function (defaults) {
    this.defaults = defaults || {};
  };

  this.defaults = {};
  this.version = ngFileUpload.version;
}

]);

ngFileUpload.service('Upload', ['$parse', '$timeout', '$compile', '$q', 'UploadExif', function ($parse, $timeout, $compile, $q, UploadExif) {
  var upload = UploadExif;
  upload.getAttrWithDefaults = function (attr, name) {
    if (attr[name] != null) return attr[name];
    var def = upload.defaults[name];
    return (def == null ? def : (angular.isString(def) ? def : JSON.stringify(def)));
  };

  upload.attrGetter = function (name, attr, scope, params) {
    var attrVal = this.getAttrWithDefaults(attr, name);
    if (scope) {
      try {
        if (params) {
          return $parse(attrVal)(scope, params);
        } else {
          return $parse(attrVal)(scope);
        }
      } catch (e) {
        // hangle string value without single qoute
        if (name.search(/min|max|pattern/i)) {
          return attrVal;
        } else {
          throw e;
        }
      }
    } else {
      return attrVal;
    }
  };

  upload.shouldUpdateOn = function (type, attr, scope) {
    var modelOptions = upload.attrGetter('ngModelOptions', attr, scope);
    if (modelOptions && modelOptions.updateOn) {
      return modelOptions.updateOn.split(' ').indexOf(type) > -1;
    }
    return true;
  };

  upload.emptyPromise = function () {
    var d = $q.defer();
    var args = arguments;
    $timeout(function () {
      d.resolve.apply(d, args);
    });
    return d.promise;
  };

  upload.rejectPromise = function () {
    var d = $q.defer();
    var args = arguments;
    $timeout(function () {
      d.reject.apply(d, args);
    });
    return d.promise;
  };

  upload.happyPromise = function (promise, data) {
    var d = $q.defer();
    promise.then(function (result) {
      d.resolve(result);
    }, function (error) {
      $timeout(function () {
        throw error;
      });
      d.resolve(data);
    });
    return d.promise;
  };

  function applyExifRotations(files, attr, scope) {
    var promises = [upload.emptyPromise()];
    angular.forEach(files, function (f, i) {
      if (f.type.indexOf('image/jpeg') === 0 && upload.attrGetter('ngfFixOrientation', attr, scope, {$file: f})) {
        promises.push(upload.happyPromise(upload.applyExifRotation(f), f).then(function (fixedFile) {
          files.splice(i, 1, fixedFile);
        }));
      }
    });
    return $q.all(promises);
  }

  function resize(files, attr, scope) {
    var resizeVal = upload.attrGetter('ngfResize', attr, scope);
    if (!resizeVal || !upload.isResizeSupported() || !files.length) return upload.emptyPromise();
    if (resizeVal instanceof Function) {
      var defer = $q.defer();
      resizeVal(files).then(function (p) {
        resizeWithParams(p, files, attr, scope).then(function (r) {
          defer.resolve(r);
        }, function (e) {
          defer.reject(e);
        });
      }, function (e) {
        defer.reject(e);
      });
    } else {
      return resizeWithParams(resizeVal, files, attr, scope);
    }
  }

  function resizeWithParams(param, files, attr, scope) {
    var promises = [upload.emptyPromise()];

    function handleFile(f, i) {
      if (f.type.indexOf('image') === 0) {
        if (param.pattern && !upload.validatePattern(f, param.pattern)) return;
        var promise = upload.resize(f, param.width, param.height, param.quality,
          param.type, param.ratio, param.centerCrop, function (width, height) {
            return upload.attrGetter('ngfResizeIf', attr, scope,
              {$width: width, $height: height, $file: f});
          }, param.restoreExif !== false);
        promises.push(promise);
        promise.then(function (resizedFile) {
          files.splice(i, 1, resizedFile);
        }, function (e) {
          f.$error = 'resize';
          f.$errorParam = (e ? (e.message ? e.message : e) + ': ' : '') + (f && f.name);
        });
      }
    }

    for (var i = 0; i < files.length; i++) {
      handleFile(files[i], i);
    }
    return $q.all(promises);
  }

  upload.updateModel = function (ngModel, attr, scope, fileChange, files, evt, noDelay) {
    function update(files, invalidFiles, newFiles, dupFiles, isSingleModel) {
      attr.$$ngfPrevValidFiles = files;
      attr.$$ngfPrevInvalidFiles = invalidFiles;
      var file = files && files.length ? files[0] : null;
      var invalidFile = invalidFiles && invalidFiles.length ? invalidFiles[0] : null;

      if (ngModel) {
        upload.applyModelValidation(ngModel, files);
        ngModel.$setViewValue(isSingleModel ? file : files);
      }

      if (fileChange) {
        $parse(fileChange)(scope, {
          $files: files,
          $file: file,
          $newFiles: newFiles,
          $duplicateFiles: dupFiles,
          $invalidFiles: invalidFiles,
          $invalidFile: invalidFile,
          $event: evt
        });
      }

      var invalidModel = upload.attrGetter('ngfModelInvalid', attr);
      if (invalidModel) {
        $timeout(function () {
          $parse(invalidModel).assign(scope, isSingleModel ? invalidFile : invalidFiles);
        });
      }
      $timeout(function () {
        // scope apply changes
      });
    }

    var allNewFiles, dupFiles = [], prevValidFiles, prevInvalidFiles,
      invalids = [], valids = [];

    function removeDuplicates() {
      function equals(f1, f2) {
        return f1.name === f2.name && (f1.$ngfOrigSize || f1.size) === (f2.$ngfOrigSize || f2.size) &&
          f1.type === f2.type;
      }

      function isInPrevFiles(f) {
        var j;
        for (j = 0; j < prevValidFiles.length; j++) {
          if (equals(f, prevValidFiles[j])) {
            return true;
          }
        }
        for (j = 0; j < prevInvalidFiles.length; j++) {
          if (equals(f, prevInvalidFiles[j])) {
            return true;
          }
        }
        return false;
      }

      if (files) {
        allNewFiles = [];
        dupFiles = [];
        for (var i = 0; i < files.length; i++) {
          if (isInPrevFiles(files[i])) {
            dupFiles.push(files[i]);
          } else {
            allNewFiles.push(files[i]);
          }
        }
      }
    }

    function toArray(v) {
      return angular.isArray(v) ? v : [v];
    }

    function separateInvalids() {
      valids = [];
      invalids = [];
      angular.forEach(allNewFiles, function (file) {
        if (file.$error) {
          invalids.push(file);
        } else {
          valids.push(file);
        }
      });
    }

    function resizeAndUpdate() {
      function updateModel() {
        $timeout(function () {
          update(keep ? prevValidFiles.concat(valids) : valids,
            keep ? prevInvalidFiles.concat(invalids) : invalids,
            files, dupFiles, isSingleModel);
        }, options && options.debounce ? options.debounce.change || options.debounce : 0);
      }

      resize(validateAfterResize ? allNewFiles : valids, attr, scope).then(function () {
        if (validateAfterResize) {
          upload.validate(allNewFiles, prevValidFiles.length, ngModel, attr, scope).then(function () {
            separateInvalids();
            updateModel();
          });
        } else {
          updateModel();
        }
      }, function (e) {
        throw 'Could not resize files ' + e;
      });
    }

    prevValidFiles = attr.$$ngfPrevValidFiles || [];
    prevInvalidFiles = attr.$$ngfPrevInvalidFiles || [];
    if (ngModel && ngModel.$modelValue) {
      prevValidFiles = toArray(ngModel.$modelValue);
    }

    var keep = upload.attrGetter('ngfKeep', attr, scope);
    allNewFiles = (files || []).slice(0);
    if (keep === 'distinct' || upload.attrGetter('ngfKeepDistinct', attr, scope) === true) {
      removeDuplicates(attr, scope);
    }

    var isSingleModel = !keep && !upload.attrGetter('ngfMultiple', attr, scope) && !upload.attrGetter('multiple', attr);

    if (keep && !allNewFiles.length) return;

    upload.attrGetter('ngfBeforeModelChange', attr, scope, {
      $files: files,
      $file: files && files.length ? files[0] : null,
      $newFiles: allNewFiles,
      $duplicateFiles: dupFiles,
      $event: evt
    });

    var validateAfterResize = upload.attrGetter('ngfValidateAfterResize', attr, scope);

    var options = upload.attrGetter('ngModelOptions', attr, scope);
    upload.validate(allNewFiles, prevValidFiles.length, ngModel, attr, scope).then(function () {
      if (noDelay) {
        update(allNewFiles, [], files, dupFiles, isSingleModel);
      } else {
        if ((!options || !options.allowInvalid) && !validateAfterResize) {
          separateInvalids();
        } else {
          valids = allNewFiles;
        }
        if (upload.attrGetter('ngfFixOrientation', attr, scope) && upload.isExifSupported()) {
          applyExifRotations(valids, attr, scope).then(function () {
            resizeAndUpdate();
          });
        } else {
          resizeAndUpdate();
        }
      }
    });
  };

  return upload;
}]);

ngFileUpload.directive('ngfSelect', ['$parse', '$timeout', '$compile', 'Upload', function ($parse, $timeout, $compile, Upload) {
  var generatedElems = [];

  function isDelayedClickSupported(ua) {
    // fix for android native browser < 4.4 and safari windows
    var m = ua.match(/Android[^\d]*(\d+)\.(\d+)/);
    if (m && m.length > 2) {
      var v = Upload.defaults.androidFixMinorVersion || 4;
      return parseInt(m[1]) < 4 || (parseInt(m[1]) === v && parseInt(m[2]) < v);
    }

    // safari on windows
    return ua.indexOf('Chrome') === -1 && /.*Windows.*Safari.*/.test(ua);
  }

  function linkFileSelect(scope, elem, attr, ngModel, $parse, $timeout, $compile, upload) {
    /** @namespace attr.ngfSelect */
    /** @namespace attr.ngfChange */
    /** @namespace attr.ngModel */
    /** @namespace attr.ngModelOptions */
    /** @namespace attr.ngfMultiple */
    /** @namespace attr.ngfCapture */
    /** @namespace attr.ngfValidate */
    /** @namespace attr.ngfKeep */
    var attrGetter = function (name, scope) {
      return upload.attrGetter(name, attr, scope);
    };

    function isInputTypeFile() {
      return elem[0].tagName.toLowerCase() === 'input' && attr.type && attr.type.toLowerCase() === 'file';
    }

    function fileChangeAttr() {
      return attrGetter('ngfChange') || attrGetter('ngfSelect');
    }

    function changeFn(evt) {
      if (upload.shouldUpdateOn('change', attr, scope)) {
        var fileList = evt.__files_ || (evt.target && evt.target.files), files = [];
        for (var i = 0; i < fileList.length; i++) {
          files.push(fileList[i]);
        }
        upload.updateModel(ngModel, attr, scope, fileChangeAttr(),
          files.length ? files : null, evt);
      }
    }

    upload.registerModelChangeValidator(ngModel, attr, scope);

    var unwatches = [];
    unwatches.push(scope.$watch(attrGetter('ngfMultiple'), function () {
      fileElem.attr('multiple', attrGetter('ngfMultiple', scope));
    }));
    unwatches.push(scope.$watch(attrGetter('ngfCapture'), function () {
      fileElem.attr('capture', attrGetter('ngfCapture', scope));
    }));
    unwatches.push(scope.$watch(attrGetter('ngfAccept'), function () {
      fileElem.attr('accept', attrGetter('ngfAccept', scope));
    }));
    attr.$observe('accept', function () {
      fileElem.attr('accept', attrGetter('accept'));
    });
    unwatches.push(function () {
      if (attr.$$observers) delete attr.$$observers.accept;
    });
    function bindAttrToFileInput(fileElem) {
      if (elem !== fileElem) {
        for (var i = 0; i < elem[0].attributes.length; i++) {
          var attribute = elem[0].attributes[i];
          if (attribute.name !== 'type' && attribute.name !== 'class' && attribute.name !== 'style') {
            if (attribute.value == null || attribute.value === '') {
              if (attribute.name === 'required') attribute.value = 'required';
              if (attribute.name === 'multiple') attribute.value = 'multiple';
            }
            fileElem.attr(attribute.name, attribute.name === 'id' ? 'ngf-' + attribute.value : attribute.value);
          }
        }
      }
    }

    function createFileInput() {
      if (isInputTypeFile()) {
        return elem;
      }

      var fileElem = angular.element('<input type="file">');

      bindAttrToFileInput(fileElem);

      var label = angular.element('<label>upload</label>');
      label.css('visibility', 'hidden').css('position', 'absolute').css('overflow', 'hidden')
        .css('width', '0px').css('height', '0px').css('border', 'none')
        .css('margin', '0px').css('padding', '0px').attr('tabindex', '-1');
      generatedElems.push({el: elem, ref: label});

      document.body.appendChild(label.append(fileElem)[0]);

      return fileElem;
    }

    var initialTouchStartY = 0;

    function clickHandler(evt) {
      if (elem.attr('disabled')) return false;
      if (attrGetter('ngfSelectDisabled', scope)) return;

      var r = handleTouch(evt);
      if (r != null) return r;

      resetModel(evt);

      // fix for md when the element is removed from the DOM and added back #460
      try {
        if (!isInputTypeFile() && !document.body.contains(fileElem[0])) {
          generatedElems.push({el: elem, ref: fileElem.parent()});
          document.body.appendChild(fileElem.parent()[0]);
          fileElem.bind('change', changeFn);
        }
      } catch(e){/*ignore*/}

      if (isDelayedClickSupported(navigator.userAgent)) {
        setTimeout(function () {
          fileElem[0].click();
        }, 0);
      } else {
        fileElem[0].click();
      }

      return false;
    }

    function handleTouch(evt) {
      var touches = evt.changedTouches || (evt.originalEvent && evt.originalEvent.changedTouches);
      if (evt.type === 'touchstart') {
        initialTouchStartY = touches ? touches[0].clientY : 0;
        return true; // don't block event default
      } else {
        evt.stopPropagation();
        evt.preventDefault();

        // prevent scroll from triggering event
        if (evt.type === 'touchend') {
          var currentLocation = touches ? touches[0].clientY : 0;
          if (Math.abs(currentLocation - initialTouchStartY) > 20) return false;
        }
      }
    }

    var fileElem = elem;

    function resetModel(evt) {
      if (upload.shouldUpdateOn('click', attr, scope) && fileElem.val()) {
        fileElem.val(null);
        upload.updateModel(ngModel, attr, scope, fileChangeAttr(), null, evt, true);
      }
    }

    if (!isInputTypeFile()) {
      fileElem = createFileInput();
    }
    fileElem.bind('change', changeFn);

    if (!isInputTypeFile()) {
      elem.bind('click touchstart touchend', clickHandler);
    } else {
      elem.bind('click', resetModel);
    }

    function ie10SameFileSelectFix(evt) {
      if (fileElem && !fileElem.attr('__ngf_ie10_Fix_')) {
        if (!fileElem[0].parentNode) {
          fileElem = null;
          return;
        }
        evt.preventDefault();
        evt.stopPropagation();
        fileElem.unbind('click');
        var clone = fileElem.clone();
        fileElem.replaceWith(clone);
        fileElem = clone;
        fileElem.attr('__ngf_ie10_Fix_', 'true');
        fileElem.bind('change', changeFn);
        fileElem.bind('click', ie10SameFileSelectFix);
        fileElem[0].click();
        return false;
      } else {
        fileElem.removeAttr('__ngf_ie10_Fix_');
      }
    }

    if (navigator.appVersion.indexOf('MSIE 10') !== -1) {
      fileElem.bind('click', ie10SameFileSelectFix);
    }

    if (ngModel) ngModel.$formatters.push(function (val) {
      if (val == null || val.length === 0) {
        if (fileElem.val()) {
          fileElem.val(null);
        }
      }
      return val;
    });

    scope.$on('$destroy', function () {
      if (!isInputTypeFile()) fileElem.parent().remove();
      angular.forEach(unwatches, function (unwatch) {
        unwatch();
      });
    });

    $timeout(function () {
      for (var i = 0; i < generatedElems.length; i++) {
        var g = generatedElems[i];
        if (!document.body.contains(g.el[0])) {
          generatedElems.splice(i, 1);
          g.ref.remove();
        }
      }
    });

    if (window.FileAPI && window.FileAPI.ngfFixIE) {
      window.FileAPI.ngfFixIE(elem, fileElem, changeFn);
    }
  }

  return {
    restrict: 'AEC',
    require: '?ngModel',
    link: function (scope, elem, attr, ngModel) {
      linkFileSelect(scope, elem, attr, ngModel, $parse, $timeout, $compile, Upload);
    }
  };
}]);

(function () {

  ngFileUpload.service('UploadDataUrl', ['UploadBase', '$timeout', '$q', function (UploadBase, $timeout, $q) {
    var upload = UploadBase;
    upload.base64DataUrl = function (file) {
      if (angular.isArray(file)) {
        var d = $q.defer(), count = 0;
        angular.forEach(file, function (f) {
          upload.dataUrl(f, true)['finally'](function () {
            count++;
            if (count === file.length) {
              var urls = [];
              angular.forEach(file, function (ff) {
                urls.push(ff.$ngfDataUrl);
              });
              d.resolve(urls, file);
            }
          });
        });
        return d.promise;
      } else {
        return upload.dataUrl(file, true);
      }
    };
    upload.dataUrl = function (file, disallowObjectUrl) {
      if (!file) return upload.emptyPromise(file, file);
      if ((disallowObjectUrl && file.$ngfDataUrl != null) || (!disallowObjectUrl && file.$ngfBlobUrl != null)) {
        return upload.emptyPromise(disallowObjectUrl ? file.$ngfDataUrl : file.$ngfBlobUrl, file);
      }
      var p = disallowObjectUrl ? file.$$ngfDataUrlPromise : file.$$ngfBlobUrlPromise;
      if (p) return p;

      var deferred = $q.defer();
      $timeout(function () {
        if (window.FileReader && file &&
          (!window.FileAPI || navigator.userAgent.indexOf('MSIE 8') === -1 || file.size < 20000) &&
          (!window.FileAPI || navigator.userAgent.indexOf('MSIE 9') === -1 || file.size < 4000000)) {
          //prefer URL.createObjectURL for handling refrences to files of all sizes
          //since it doesn´t build a large string in memory
          var URL = window.URL || window.webkitURL;
          if (URL && URL.createObjectURL && !disallowObjectUrl) {
            var url;
            try {
              url = URL.createObjectURL(file);
            } catch (e) {
              $timeout(function () {
                file.$ngfBlobUrl = '';
                deferred.reject();
              });
              return;
            }
            $timeout(function () {
              file.$ngfBlobUrl = url;
              if (url) {
                deferred.resolve(url, file);
                upload.blobUrls = upload.blobUrls || [];
                upload.blobUrlsTotalSize = upload.blobUrlsTotalSize || 0;
                upload.blobUrls.push({url: url, size: file.size});
                upload.blobUrlsTotalSize += file.size || 0;
                var maxMemory = upload.defaults.blobUrlsMaxMemory || 268435456;
                var maxLength = upload.defaults.blobUrlsMaxQueueSize || 200;
                while ((upload.blobUrlsTotalSize > maxMemory || upload.blobUrls.length > maxLength) && upload.blobUrls.length > 1) {
                  var obj = upload.blobUrls.splice(0, 1)[0];
                  URL.revokeObjectURL(obj.url);
                  upload.blobUrlsTotalSize -= obj.size;
                }
              }
            });
          } else {
            var fileReader = new FileReader();
            fileReader.onload = function (e) {
              $timeout(function () {
                file.$ngfDataUrl = e.target.result;
                deferred.resolve(e.target.result, file);
                $timeout(function () {
                  delete file.$ngfDataUrl;
                }, 1000);
              });
            };
            fileReader.onerror = function () {
              $timeout(function () {
                file.$ngfDataUrl = '';
                deferred.reject();
              });
            };
            fileReader.readAsDataURL(file);
          }
        } else {
          $timeout(function () {
            file[disallowObjectUrl ? '$ngfDataUrl' : '$ngfBlobUrl'] = '';
            deferred.reject();
          });
        }
      });

      if (disallowObjectUrl) {
        p = file.$$ngfDataUrlPromise = deferred.promise;
      } else {
        p = file.$$ngfBlobUrlPromise = deferred.promise;
      }
      p['finally'](function () {
        delete file[disallowObjectUrl ? '$$ngfDataUrlPromise' : '$$ngfBlobUrlPromise'];
      });
      return p;
    };
    return upload;
  }]);

  function getTagType(el) {
    if (el.tagName.toLowerCase() === 'img') return 'image';
    if (el.tagName.toLowerCase() === 'audio') return 'audio';
    if (el.tagName.toLowerCase() === 'video') return 'video';
    return /./;
  }

  function linkFileDirective(Upload, $timeout, scope, elem, attr, directiveName, resizeParams, isBackground) {
    function constructDataUrl(file) {
      var disallowObjectUrl = Upload.attrGetter('ngfNoObjectUrl', attr, scope);
      Upload.dataUrl(file, disallowObjectUrl)['finally'](function () {
        $timeout(function () {
          var src = (disallowObjectUrl ? file.$ngfDataUrl : file.$ngfBlobUrl) || file.$ngfDataUrl;
          if (isBackground) {
            elem.css('background-image', 'url(\'' + (src || '') + '\')');
          } else {
            elem.attr('src', src);
          }
          if (src) {
            elem.removeClass('ng-hide');
          } else {
            elem.addClass('ng-hide');
          }
        });
      });
    }

    $timeout(function () {
      var unwatch = scope.$watch(attr[directiveName], function (file) {
        var size = resizeParams;
        if (directiveName === 'ngfThumbnail') {
          if (!size) {
            size = {width: elem[0].clientWidth, height: elem[0].clientHeight};
          }
          if (size.width === 0 && window.getComputedStyle) {
            var style = getComputedStyle(elem[0]);
            size = {
              width: parseInt(style.width.slice(0, -2)),
              height: parseInt(style.height.slice(0, -2))
            };
          }
        }

        if (angular.isString(file)) {
          elem.removeClass('ng-hide');
          if (isBackground) {
            return elem.css('background-image', 'url(\'' + file + '\')');
          } else {
            return elem.attr('src', file);
          }
        }
        if (file && file.type && file.type.search(getTagType(elem[0])) === 0 &&
          (!isBackground || file.type.indexOf('image') === 0)) {
          if (size && Upload.isResizeSupported()) {
            Upload.resize(file, size.width, size.height, size.quality).then(
              function (f) {
                constructDataUrl(f);
              }, function (e) {
                throw e;
              }
            );
          } else {
            constructDataUrl(file);
          }
        } else {
          elem.addClass('ng-hide');
        }
      });

      scope.$on('$destroy', function () {
        unwatch();
      });
    });
  }


  /** @namespace attr.ngfSrc */
  /** @namespace attr.ngfNoObjectUrl */
  ngFileUpload.directive('ngfSrc', ['Upload', '$timeout', function (Upload, $timeout) {
    return {
      restrict: 'AE',
      link: function (scope, elem, attr) {
        linkFileDirective(Upload, $timeout, scope, elem, attr, 'ngfSrc',
          Upload.attrGetter('ngfResize', attr, scope), false);
      }
    };
  }]);

  /** @namespace attr.ngfBackground */
  /** @namespace attr.ngfNoObjectUrl */
  ngFileUpload.directive('ngfBackground', ['Upload', '$timeout', function (Upload, $timeout) {
    return {
      restrict: 'AE',
      link: function (scope, elem, attr) {
        linkFileDirective(Upload, $timeout, scope, elem, attr, 'ngfBackground',
          Upload.attrGetter('ngfResize', attr, scope), true);
      }
    };
  }]);

  /** @namespace attr.ngfThumbnail */
  /** @namespace attr.ngfAsBackground */
  /** @namespace attr.ngfSize */
  /** @namespace attr.ngfNoObjectUrl */
  ngFileUpload.directive('ngfThumbnail', ['Upload', '$timeout', function (Upload, $timeout) {
    return {
      restrict: 'AE',
      link: function (scope, elem, attr) {
        var size = Upload.attrGetter('ngfSize', attr, scope);
        linkFileDirective(Upload, $timeout, scope, elem, attr, 'ngfThumbnail', size,
          Upload.attrGetter('ngfAsBackground', attr, scope));
      }
    };
  }]);

  ngFileUpload.config(['$compileProvider', function ($compileProvider) {
    if ($compileProvider.imgSrcSanitizationWhitelist) $compileProvider.imgSrcSanitizationWhitelist(/^\s*(https?|ftp|mailto|tel|local|file|data|blob):/);
    if ($compileProvider.aHrefSanitizationWhitelist) $compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|tel|local|file|data|blob):/);
  }]);

  ngFileUpload.filter('ngfDataUrl', ['UploadDataUrl', '$sce', function (UploadDataUrl, $sce) {
    return function (file, disallowObjectUrl, trustedUrl) {
      if (angular.isString(file)) {
        return $sce.trustAsResourceUrl(file);
      }
      var src = file && ((disallowObjectUrl ? file.$ngfDataUrl : file.$ngfBlobUrl) || file.$ngfDataUrl);
      if (file && !src) {
        if (!file.$ngfDataUrlFilterInProgress && angular.isObject(file)) {
          file.$ngfDataUrlFilterInProgress = true;
          UploadDataUrl.dataUrl(file, disallowObjectUrl);
        }
        return '';
      }
      if (file) delete file.$ngfDataUrlFilterInProgress;
      return (file && src ? (trustedUrl ? $sce.trustAsResourceUrl(src) : src) : file) || '';
    };
  }]);

})();

ngFileUpload.service('UploadValidate', ['UploadDataUrl', '$q', '$timeout', function (UploadDataUrl, $q, $timeout) {
  var upload = UploadDataUrl;

  function globStringToRegex(str) {
    var regexp = '', excludes = [];
    if (str.length > 2 && str[0] === '/' && str[str.length - 1] === '/') {
      regexp = str.substring(1, str.length - 1);
    } else {
      var split = str.split(',');
      if (split.length > 1) {
        for (var i = 0; i < split.length; i++) {
          var r = globStringToRegex(split[i]);
          if (r.regexp) {
            regexp += '(' + r.regexp + ')';
            if (i < split.length - 1) {
              regexp += '|';
            }
          } else {
            excludes = excludes.concat(r.excludes);
          }
        }
      } else {
        if (str.indexOf('!') === 0) {
          excludes.push('^((?!' + globStringToRegex(str.substring(1)).regexp + ').)*$');
        } else {
          if (str.indexOf('.') === 0) {
            str = '*' + str;
          }
          regexp = '^' + str.replace(new RegExp('[.\\\\+*?\\[\\^\\]$(){}=!<>|:\\-]', 'g'), '\\$&') + '$';
          regexp = regexp.replace(/\\\*/g, '.*').replace(/\\\?/g, '.');
        }
      }
    }
    return {regexp: regexp, excludes: excludes};
  }

  upload.validatePattern = function (file, val) {
    if (!val) {
      return true;
    }
    var pattern = globStringToRegex(val), valid = true;
    if (pattern.regexp && pattern.regexp.length) {
      var regexp = new RegExp(pattern.regexp, 'i');
      valid = (file.type != null && regexp.test(file.type)) ||
        (file.name != null && regexp.test(file.name));
    }
    var len = pattern.excludes.length;
    while (len--) {
      var exclude = new RegExp(pattern.excludes[len], 'i');
      valid = valid && (file.type == null || exclude.test(file.type)) &&
        (file.name == null || exclude.test(file.name));
    }
    return valid;
  };

  upload.ratioToFloat = function (val) {
    var r = val.toString(), xIndex = r.search(/[x:]/i);
    if (xIndex > -1) {
      r = parseFloat(r.substring(0, xIndex)) / parseFloat(r.substring(xIndex + 1));
    } else {
      r = parseFloat(r);
    }
    return r;
  };

  upload.registerModelChangeValidator = function (ngModel, attr, scope) {
    if (ngModel) {
      ngModel.$formatters.push(function (files) {
        if (ngModel.$dirty) {
          if (files && !angular.isArray(files)) {
            files = [files];
          }
          upload.validate(files, 0, ngModel, attr, scope).then(function () {
            upload.applyModelValidation(ngModel, files);
          });
        }
      });
    }
  };

  function markModelAsDirty(ngModel, files) {
    if (files != null && !ngModel.$dirty) {
      if (ngModel.$setDirty) {
        ngModel.$setDirty();
      } else {
        ngModel.$dirty = true;
      }
    }
  }

  upload.applyModelValidation = function (ngModel, files) {
    markModelAsDirty(ngModel, files);
    angular.forEach(ngModel.$ngfValidations, function (validation) {
      ngModel.$setValidity(validation.name, validation.valid);
    });
  };

  upload.getValidationAttr = function (attr, scope, name, validationName, file) {
    var dName = 'ngf' + name[0].toUpperCase() + name.substr(1);
    var val = upload.attrGetter(dName, attr, scope, {$file: file});
    if (val == null) {
      val = upload.attrGetter('ngfValidate', attr, scope, {$file: file});
      if (val) {
        var split = (validationName || name).split('.');
        val = val[split[0]];
        if (split.length > 1) {
          val = val && val[split[1]];
        }
      }
    }
    return val;
  };

  upload.validate = function (files, prevLength, ngModel, attr, scope) {
    ngModel = ngModel || {};
    ngModel.$ngfValidations = ngModel.$ngfValidations || [];

    angular.forEach(ngModel.$ngfValidations, function (v) {
      v.valid = true;
    });

    var attrGetter = function (name, params) {
      return upload.attrGetter(name, attr, scope, params);
    };

    if (files == null || files.length === 0) {
      return upload.emptyPromise(ngModel);
    }

    files = files.length === undefined ? [files] : files.slice(0);

    function validateSync(name, validationName, fn) {
      if (files) {
        var i = files.length, valid = null;
        while (i--) {
          var file = files[i];
          if (file) {
            var val = upload.getValidationAttr(attr, scope, name, validationName, file);
            if (val != null) {
              if (!fn(file, val, i)) {
                file.$error = name;
                (file.$errorMessages = (file.$errorMessages || {}))[name] = true;
                file.$errorParam = val;
                files.splice(i, 1);
                valid = false;
              }
            }
          }
        }
        if (valid !== null) {
          ngModel.$ngfValidations.push({name: name, valid: valid});
        }
      }
    }

    validateSync('maxFiles', null, function (file, val, i) {
      return prevLength + i < val;
    });
    validateSync('pattern', null, upload.validatePattern);
    validateSync('minSize', 'size.min', function (file, val) {
      return file.size + 0.1 >= upload.translateScalars(val);
    });
    validateSync('maxSize', 'size.max', function (file, val) {
      return file.size - 0.1 <= upload.translateScalars(val);
    });
    var totalSize = 0;
    validateSync('maxTotalSize', null, function (file, val) {
      totalSize += file.size;
      if (totalSize > upload.translateScalars(val)) {
        files.splice(0, files.length);
        return false;
      }
      return true;
    });

    validateSync('validateFn', null, function (file, r) {
      return r === true || r === null || r === '';
    });

    if (!files.length) {
      return upload.emptyPromise(ngModel, ngModel.$ngfValidations);
    }

    function validateAsync(name, validationName, type, asyncFn, fn) {
      function resolveResult(defer, file, val) {
        if (val != null) {
          asyncFn(file, val).then(function (d) {
            if (!fn(d, val)) {
              file.$error = name;
              (file.$errorMessages = (file.$errorMessages || {}))[name] = true;
              file.$errorParam = val;
              defer.reject();
            } else {
              defer.resolve();
            }
          }, function () {
            if (attrGetter('ngfValidateForce', {$file: file})) {
              file.$error = name;
              (file.$errorMessages = (file.$errorMessages || {}))[name] = true;
              file.$errorParam = val;
              defer.reject();
            } else {
              defer.resolve();
            }
          });
        } else {
          defer.resolve();
        }
      }

      var promises = [upload.emptyPromise()];
      if (files) {
        files = files.length === undefined ? [files] : files;
        angular.forEach(files, function (file) {
          var defer = $q.defer();
          promises.push(defer.promise);
          if (type && (file.type == null || file.type.search(type) !== 0)) {
            defer.resolve();
            return;
          }
          if (name === 'dimensions' && upload.attrGetter('ngfDimensions', attr) != null) {
            upload.imageDimensions(file).then(function (d) {
              resolveResult(defer, file,
                attrGetter('ngfDimensions', {$file: file, $width: d.width, $height: d.height}));
            }, function () {
              defer.reject();
            });
          } else if (name === 'duration' && upload.attrGetter('ngfDuration', attr) != null) {
            upload.mediaDuration(file).then(function (d) {
              resolveResult(defer, file,
                attrGetter('ngfDuration', {$file: file, $duration: d}));
            }, function () {
              defer.reject();
            });
          } else {
            resolveResult(defer, file,
              upload.getValidationAttr(attr, scope, name, validationName, file));
          }
        });
        return $q.all(promises).then(function () {
          ngModel.$ngfValidations.push({name: name, valid: true});
        }, function () {
          ngModel.$ngfValidations.push({name: name, valid: false});
        });
      }
    }

    var deffer = $q.defer();
    var promises = [];

    promises.push(upload.happyPromise(validateAsync('maxHeight', 'height.max', /image/,
      this.imageDimensions, function (d, val) {
        return d.height <= val;
      })));
    promises.push(upload.happyPromise(validateAsync('minHeight', 'height.min', /image/,
      this.imageDimensions, function (d, val) {
        return d.height >= val;
      })));
    promises.push(upload.happyPromise(validateAsync('maxWidth', 'width.max', /image/,
      this.imageDimensions, function (d, val) {
        return d.width <= val;
      })));
    promises.push(upload.happyPromise(validateAsync('minWidth', 'width.min', /image/,
      this.imageDimensions, function (d, val) {
        return d.width >= val;
      })));
    promises.push(upload.happyPromise(validateAsync('dimensions', null, /image/,
      function (file, val) {
        return upload.emptyPromise(val);
      }, function (r) {
        return r;
      })));
    promises.push(upload.happyPromise(validateAsync('ratio', null, /image/,
      this.imageDimensions, function (d, val) {
        var split = val.toString().split(','), valid = false;
        for (var i = 0; i < split.length; i++) {
          if (Math.abs((d.width / d.height) - upload.ratioToFloat(split[i])) < 0.0001) {
            valid = true;
          }
        }
        return valid;
      })));
    promises.push(upload.happyPromise(validateAsync('maxRatio', 'ratio.max', /image/,
      this.imageDimensions, function (d, val) {
        return (d.width / d.height) - upload.ratioToFloat(val) < 0.0001;
      })));
    promises.push(upload.happyPromise(validateAsync('minRatio', 'ratio.min', /image/,
      this.imageDimensions, function (d, val) {
        return (d.width / d.height) - upload.ratioToFloat(val) > -0.0001;
      })));
    promises.push(upload.happyPromise(validateAsync('maxDuration', 'duration.max', /audio|video/,
      this.mediaDuration, function (d, val) {
        return d <= upload.translateScalars(val);
      })));
    promises.push(upload.happyPromise(validateAsync('minDuration', 'duration.min', /audio|video/,
      this.mediaDuration, function (d, val) {
        return d >= upload.translateScalars(val);
      })));
    promises.push(upload.happyPromise(validateAsync('duration', null, /audio|video/,
      function (file, val) {
        return upload.emptyPromise(val);
      }, function (r) {
        return r;
      })));

    promises.push(upload.happyPromise(validateAsync('validateAsyncFn', null, null,
      function (file, val) {
        return val;
      }, function (r) {
        return r === true || r === null || r === '';
      })));

    return $q.all(promises).then(function () {
      deffer.resolve(ngModel, ngModel.$ngfValidations);
    });
  };

  upload.imageDimensions = function (file) {
    if (file.$ngfWidth && file.$ngfHeight) {
      var d = $q.defer();
      $timeout(function () {
        d.resolve({width: file.$ngfWidth, height: file.$ngfHeight});
      });
      return d.promise;
    }
    if (file.$ngfDimensionPromise) return file.$ngfDimensionPromise;

    var deferred = $q.defer();
    $timeout(function () {
      if (file.type.indexOf('image') !== 0) {
        deferred.reject('not image');
        return;
      }
      upload.dataUrl(file).then(function (dataUrl) {
        var img = angular.element('<img>').attr('src', dataUrl)
          .css('visibility', 'hidden').css('position', 'fixed')
          .css('max-width', 'none !important').css('max-height', 'none !important');

        function success() {
          var width = img[0].clientWidth;
          var height = img[0].clientHeight;
          img.remove();
          file.$ngfWidth = width;
          file.$ngfHeight = height;
          deferred.resolve({width: width, height: height});
        }

        function error() {
          img.remove();
          deferred.reject('load error');
        }

        img.on('load', success);
        img.on('error', error);
        var count = 0;

        function checkLoadError() {
          $timeout(function () {
            if (img[0].parentNode) {
              if (img[0].clientWidth) {
                success();
              } else if (count > 10) {
                error();
              } else {
                checkLoadError();
              }
            }
          }, 1000);
        }

        checkLoadError();

        angular.element(document.getElementsByTagName('body')[0]).append(img);
      }, function () {
        deferred.reject('load error');
      });
    });

    file.$ngfDimensionPromise = deferred.promise;
    file.$ngfDimensionPromise['finally'](function () {
      delete file.$ngfDimensionPromise;
    });
    return file.$ngfDimensionPromise;
  };

  upload.mediaDuration = function (file) {
    if (file.$ngfDuration) {
      var d = $q.defer();
      $timeout(function () {
        d.resolve(file.$ngfDuration);
      });
      return d.promise;
    }
    if (file.$ngfDurationPromise) return file.$ngfDurationPromise;

    var deferred = $q.defer();
    $timeout(function () {
      if (file.type.indexOf('audio') !== 0 && file.type.indexOf('video') !== 0) {
        deferred.reject('not media');
        return;
      }
      upload.dataUrl(file).then(function (dataUrl) {
        var el = angular.element(file.type.indexOf('audio') === 0 ? '<audio>' : '<video>')
          .attr('src', dataUrl).css('visibility', 'none').css('position', 'fixed');

        function success() {
          var duration = el[0].duration;
          file.$ngfDuration = duration;
          el.remove();
          deferred.resolve(duration);
        }

        function error() {
          el.remove();
          deferred.reject('load error');
        }

        el.on('loadedmetadata', success);
        el.on('error', error);
        var count = 0;

        function checkLoadError() {
          $timeout(function () {
            if (el[0].parentNode) {
              if (el[0].duration) {
                success();
              } else if (count > 10) {
                error();
              } else {
                checkLoadError();
              }
            }
          }, 1000);
        }

        checkLoadError();

        angular.element(document.body).append(el);
      }, function () {
        deferred.reject('load error');
      });
    });

    file.$ngfDurationPromise = deferred.promise;
    file.$ngfDurationPromise['finally'](function () {
      delete file.$ngfDurationPromise;
    });
    return file.$ngfDurationPromise;
  };
  return upload;
}
]);

ngFileUpload.service('UploadResize', ['UploadValidate', '$q', function (UploadValidate, $q) {
  var upload = UploadValidate;

  /**
   * Conserve aspect ratio of the original region. Useful when shrinking/enlarging
   * images to fit into a certain area.
   * Source:  http://stackoverflow.com/a/14731922
   *
   * @param {Number} srcWidth Source area width
   * @param {Number} srcHeight Source area height
   * @param {Number} maxWidth Nestable area maximum available width
   * @param {Number} maxHeight Nestable area maximum available height
   * @return {Object} { width, height }
   */
  var calculateAspectRatioFit = function (srcWidth, srcHeight, maxWidth, maxHeight, centerCrop) {
    var ratio = centerCrop ? Math.max(maxWidth / srcWidth, maxHeight / srcHeight) :
      Math.min(maxWidth / srcWidth, maxHeight / srcHeight);
    return {
      width: srcWidth * ratio, height: srcHeight * ratio,
      marginX: srcWidth * ratio - maxWidth, marginY: srcHeight * ratio - maxHeight
    };
  };

  // Extracted from https://github.com/romelgomez/angular-firebase-image-upload/blob/master/app/scripts/fileUpload.js#L89
  var resize = function (imagen, width, height, quality, type, ratio, centerCrop, resizeIf) {
    var deferred = $q.defer();
    var canvasElement = document.createElement('canvas');
    var imageElement = document.createElement('img');

    imageElement.onload = function () {
      if (resizeIf != null && resizeIf(imageElement.width, imageElement.height) === false) {
        deferred.reject('resizeIf');
        return;
      }
      try {
        if (ratio) {
          var ratioFloat = upload.ratioToFloat(ratio);
          var imgRatio = imageElement.width / imageElement.height;
          if (imgRatio < ratioFloat) {
            width = imageElement.width;
            height = width / ratioFloat;
          } else {
            height = imageElement.height;
            width = height * ratioFloat;
          }
        }
        if (!width) {
          width = imageElement.width;
        }
        if (!height) {
          height = imageElement.height;
        }
        var dimensions = calculateAspectRatioFit(imageElement.width, imageElement.height, width, height, centerCrop);
        canvasElement.width = Math.min(dimensions.width, width);
        canvasElement.height = Math.min(dimensions.height, height);
        var context = canvasElement.getContext('2d');
        context.drawImage(imageElement,
          Math.min(0, -dimensions.marginX / 2), Math.min(0, -dimensions.marginY / 2),
          dimensions.width, dimensions.height);
        deferred.resolve(canvasElement.toDataURL(type || 'image/WebP', quality || 0.934));
      } catch (e) {
        deferred.reject(e);
      }
    };
    imageElement.onerror = function () {
      deferred.reject();
    };
    imageElement.src = imagen;
    return deferred.promise;
  };

  upload.dataUrltoBlob = function (dataurl, name, origSize) {
    var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],
      bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);
    while (n--) {
      u8arr[n] = bstr.charCodeAt(n);
    }
    var blob = new window.Blob([u8arr], {type: mime});
    blob.name = name;
    blob.$ngfOrigSize = origSize;
    return blob;
  };

  upload.isResizeSupported = function () {
    var elem = document.createElement('canvas');
    return window.atob && elem.getContext && elem.getContext('2d') && window.Blob;
  };

  if (upload.isResizeSupported()) {
    // add name getter to the blob constructor prototype
    Object.defineProperty(window.Blob.prototype, 'name', {
      get: function () {
        return this.$ngfName;
      },
      set: function (v) {
        this.$ngfName = v;
      },
      configurable: true
    });
  }

  upload.resize = function (file, width, height, quality, type, ratio, centerCrop, resizeIf, restoreExif) {
    if (file.type.indexOf('image') !== 0) return upload.emptyPromise(file);

    var deferred = $q.defer();
    upload.dataUrl(file, true).then(function (url) {
      resize(url, width, height, quality, type || file.type, ratio, centerCrop, resizeIf)
        .then(function (dataUrl) {
          if (file.type === 'image/jpeg' && restoreExif) {
            try {
              dataUrl = upload.restoreExif(url, dataUrl);
            } catch (e) {
              setTimeout(function () {throw e;}, 1);
            }
          }
          try {
            var blob = upload.dataUrltoBlob(dataUrl, file.name, file.size);
            deferred.resolve(blob);
          } catch (e) {
            deferred.reject(e);
          }
        }, function (r) {
          if (r === 'resizeIf') {
            deferred.resolve(file);
          }
          deferred.reject(r);
        });
    }, function (e) {
      deferred.reject(e);
    });
    return deferred.promise;
  };

  return upload;
}]);

(function () {
  ngFileUpload.directive('ngfDrop', ['$parse', '$timeout', '$location', 'Upload', '$http', '$q',
    function ($parse, $timeout, $location, Upload, $http, $q) {
      return {
        restrict: 'AEC',
        require: '?ngModel',
        link: function (scope, elem, attr, ngModel) {
          linkDrop(scope, elem, attr, ngModel, $parse, $timeout, $location, Upload, $http, $q);
        }
      };
    }]);

  ngFileUpload.directive('ngfNoFileDrop', function () {
    return function (scope, elem) {
      if (dropAvailable()) elem.css('display', 'none');
    };
  });

  ngFileUpload.directive('ngfDropAvailable', ['$parse', '$timeout', 'Upload', function ($parse, $timeout, Upload) {
    return function (scope, elem, attr) {
      if (dropAvailable()) {
        var model = $parse(Upload.attrGetter('ngfDropAvailable', attr));
        $timeout(function () {
          model(scope);
          if (model.assign) {
            model.assign(scope, true);
          }
        });
      }
    };
  }]);

  function linkDrop(scope, elem, attr, ngModel, $parse, $timeout, $location, upload, $http, $q) {
    var available = dropAvailable();

    var attrGetter = function (name, scope, params) {
      return upload.attrGetter(name, attr, scope, params);
    };

    if (attrGetter('dropAvailable')) {
      $timeout(function () {
        if (scope[attrGetter('dropAvailable')]) {
          scope[attrGetter('dropAvailable')].value = available;
        } else {
          scope[attrGetter('dropAvailable')] = available;
        }
      });
    }
    if (!available) {
      if (attrGetter('ngfHideOnDropNotAvailable', scope) === true) {
        elem.css('display', 'none');
      }
      return;
    }

    function isDisabled() {
      return elem.attr('disabled') || attrGetter('ngfDropDisabled', scope);
    }

    if (attrGetter('ngfSelect') == null) {
      upload.registerModelChangeValidator(ngModel, attr, scope);
    }

    var leaveTimeout = null;
    var stopPropagation = $parse(attrGetter('ngfStopPropagation'));
    var dragOverDelay = 1;
    var actualDragOverClass;

    elem[0].addEventListener('dragover', function (evt) {
      if (isDisabled() || !upload.shouldUpdateOn('drop', attr, scope)) return;
      evt.preventDefault();
      if (stopPropagation(scope)) evt.stopPropagation();
      // handling dragover events from the Chrome download bar
      if (navigator.userAgent.indexOf('Chrome') > -1) {
        var b = evt.dataTransfer.effectAllowed;
        evt.dataTransfer.dropEffect = ('move' === b || 'linkMove' === b) ? 'move' : 'copy';
      }
      $timeout.cancel(leaveTimeout);
      if (!actualDragOverClass) {
        actualDragOverClass = 'C';
        calculateDragOverClass(scope, attr, evt, function (clazz) {
          actualDragOverClass = clazz;
          elem.addClass(actualDragOverClass);
          attrGetter('ngfDrag', scope, {$isDragging: true, $class: actualDragOverClass, $event: evt});
        });
      }
    }, false);
    elem[0].addEventListener('dragenter', function (evt) {
      if (isDisabled() || !upload.shouldUpdateOn('drop', attr, scope)) return;
      evt.preventDefault();
      if (stopPropagation(scope)) evt.stopPropagation();
    }, false);
    elem[0].addEventListener('dragleave', function (evt) {
      if (isDisabled() || !upload.shouldUpdateOn('drop', attr, scope)) return;
      evt.preventDefault();
      if (stopPropagation(scope)) evt.stopPropagation();
      leaveTimeout = $timeout(function () {
        if (actualDragOverClass) elem.removeClass(actualDragOverClass);
        actualDragOverClass = null;
        attrGetter('ngfDrag', scope, {$isDragging: false, $event: evt});
      }, dragOverDelay || 100);
    }, false);
    elem[0].addEventListener('drop', function (evt) {
      if (isDisabled() || !upload.shouldUpdateOn('drop', attr, scope)) return;
      evt.preventDefault();
      if (stopPropagation(scope)) evt.stopPropagation();
      if (actualDragOverClass) elem.removeClass(actualDragOverClass);
      actualDragOverClass = null;
      var items = evt.dataTransfer.items;
      var html;
      try {
        html = evt.dataTransfer && evt.dataTransfer.getData && evt.dataTransfer.getData('text/html');
      } catch (e) {/* Fix IE11 that throw error calling getData */
      }

      extractFiles(items, evt.dataTransfer.files, attrGetter('ngfAllowDir', scope) !== false,
        attrGetter('multiple') || attrGetter('ngfMultiple', scope)).then(function (files) {
        if (files.length) {
          updateModel(files, evt);
        } else {
          extractFilesFromHtml('dropUrl', html).then(function (files) {
            updateModel(files, evt);
          });
        }
      });
    }, false);
    elem[0].addEventListener('paste', function (evt) {
      if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1 &&
        attrGetter('ngfEnableFirefoxPaste', scope)) {
        evt.preventDefault();
      }
      if (isDisabled() || !upload.shouldUpdateOn('paste', attr, scope)) return;
      var files = [];
      var clipboard = evt.clipboardData || evt.originalEvent.clipboardData;
      if (clipboard && clipboard.items) {
        for (var k = 0; k < clipboard.items.length; k++) {
          if (clipboard.items[k].type.indexOf('image') !== -1) {
            files.push(clipboard.items[k].getAsFile());
          }
        }
      }
      if (files.length) {
        updateModel(files, evt);
      } else {
        extractFilesFromHtml('pasteUrl', clipboard).then(function (files) {
          updateModel(files, evt);
        });
      }
    }, false);

    if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1 &&
      attrGetter('ngfEnableFirefoxPaste', scope)) {
      elem.attr('contenteditable', true);
      elem.on('keypress', function (e) {
        if (!e.metaKey && !e.ctrlKey) {
          e.preventDefault();
        }
      });
    }

    function updateModel(files, evt) {
      upload.updateModel(ngModel, attr, scope, attrGetter('ngfChange') || attrGetter('ngfDrop'), files, evt);
    }

    function extractFilesFromHtml(updateOn, html) {
      if (!upload.shouldUpdateOn(updateOn, attr, scope) || !html) return upload.rejectPromise([]);
      var urls = [];
      html.replace(/<(img src|img [^>]* src) *=\"([^\"]*)\"/gi, function (m, n, src) {
        urls.push(src);
      });
      var promises = [], files = [];
      if (urls.length) {
        angular.forEach(urls, function (url) {
          promises.push(upload.urlToBlob(url).then(function (blob) {
            files.push(blob);
          }));
        });
        var defer = $q.defer();
        $q.all(promises).then(function () {
          defer.resolve(files);
        }, function (e) {
          defer.reject(e);
        });
        return defer.promise;
      }
      return upload.emptyPromise();
    }

    function calculateDragOverClass(scope, attr, evt, callback) {
      var obj = attrGetter('ngfDragOverClass', scope, {$event: evt}), dClass = 'dragover';
      if (angular.isString(obj)) {
        dClass = obj;
      } else if (obj) {
        if (obj.delay) dragOverDelay = obj.delay;
        if (obj.accept || obj.reject) {
          var items = evt.dataTransfer.items;
          if (items == null || !items.length) {
            dClass = obj.accept;
          } else {
            var pattern = obj.pattern || attrGetter('ngfPattern', scope, {$event: evt});
            var len = items.length;
            while (len--) {
              if (!upload.validatePattern(items[len], pattern)) {
                dClass = obj.reject;
                break;
              } else {
                dClass = obj.accept;
              }
            }
          }
        }
      }
      callback(dClass);
    }

    function extractFiles(items, fileList, allowDir, multiple) {
      var maxFiles = upload.getValidationAttr(attr, scope, 'maxFiles') || Number.MAX_VALUE;
      var maxTotalSize = upload.getValidationAttr(attr, scope, 'maxTotalSize') || Number.MAX_VALUE;
      var includeDir = attrGetter('ngfIncludeDir', scope);
      var files = [], totalSize = 0;

      function traverseFileTree(entry, path) {
        var defer = $q.defer();
        if (entry != null) {
          if (entry.isDirectory) {
            var promises = [upload.emptyPromise()];
            if (includeDir) {
              var file = {type: 'directory'};
              file.name = file.path = (path || '') + entry.name + entry.name;
              files.push(file);
            }
            var dirReader = entry.createReader();
            var entries = [];
            var readEntries = function () {
              dirReader.readEntries(function (results) {
                try {
                  if (!results.length) {
                    angular.forEach(entries.slice(0), function (e) {
                      if (files.length <= maxFiles && totalSize <= maxTotalSize) {
                        promises.push(traverseFileTree(e, (path ? path : '') + entry.name + '/'));
                      }
                    });
                    $q.all(promises).then(function () {
                      defer.resolve();
                    }, function (e) {
                      defer.reject(e);
                    });
                  } else {
                    entries = entries.concat(Array.prototype.slice.call(results || [], 0));
                    readEntries();
                  }
                } catch (e) {
                  defer.reject(e);
                }
              }, function (e) {
                defer.reject(e);
              });
            };
            readEntries();
          } else {
            entry.file(function (file) {
              try {
                file.path = (path ? path : '') + file.name;
                if (includeDir) {
                  file = upload.rename(file, file.path);
                }
                files.push(file);
                totalSize += file.size;
                defer.resolve();
              } catch (e) {
                defer.reject(e);
              }
            }, function (e) {
              defer.reject(e);
            });
          }
        }
        return defer.promise;
      }

      var promises = [upload.emptyPromise()];

      if (items && items.length > 0 && $location.protocol() !== 'file') {
        for (var i = 0; i < items.length; i++) {
          if (items[i].webkitGetAsEntry && items[i].webkitGetAsEntry() && items[i].webkitGetAsEntry().isDirectory) {
            var entry = items[i].webkitGetAsEntry();
            if (entry.isDirectory && !allowDir) {
              continue;
            }
            if (entry != null) {
              promises.push(traverseFileTree(entry));
            }
          } else {
            var f = items[i].getAsFile();
            if (f != null) {
              files.push(f);
              totalSize += f.size;
            }
          }
          if (files.length > maxFiles || totalSize > maxTotalSize ||
            (!multiple && files.length > 0)) break;
        }
      } else {
        if (fileList != null) {
          for (var j = 0; j < fileList.length; j++) {
            var file = fileList.item(j);
            if (file.type || file.size > 0) {
              files.push(file);
              totalSize += file.size;
            }
            if (files.length > maxFiles || totalSize > maxTotalSize ||
              (!multiple && files.length > 0)) break;
          }
        }
      }

      var defer = $q.defer();
      $q.all(promises).then(function () {
        if (!multiple && !includeDir && files.length) {
          var i = 0;
          while (files[i] && files[i].type === 'directory') i++;
          defer.resolve([files[i]]);
        } else {
          defer.resolve(files);
        }
      }, function (e) {
        defer.reject(e);
      });

      return defer.promise;
    }
  }

  function dropAvailable() {
    var div = document.createElement('div');
    return ('draggable' in div) && ('ondrop' in div) && !/Edge\/12./i.test(navigator.userAgent);
  }

})();

// customized version of https://github.com/exif-js/exif-js
ngFileUpload.service('UploadExif', ['UploadResize', '$q', function (UploadResize, $q) {
  var upload = UploadResize;

  upload.isExifSupported = function () {
    return window.FileReader && new FileReader().readAsArrayBuffer && upload.isResizeSupported();
  };

  function applyTransform(ctx, orientation, width, height) {
    switch (orientation) {
      case 2:
        return ctx.transform(-1, 0, 0, 1, width, 0);
      case 3:
        return ctx.transform(-1, 0, 0, -1, width, height);
      case 4:
        return ctx.transform(1, 0, 0, -1, 0, height);
      case 5:
        return ctx.transform(0, 1, 1, 0, 0, 0);
      case 6:
        return ctx.transform(0, 1, -1, 0, height, 0);
      case 7:
        return ctx.transform(0, -1, -1, 0, height, width);
      case 8:
        return ctx.transform(0, -1, 1, 0, 0, width);
    }
  }

  upload.readOrientation = function (file) {
    var defer = $q.defer();
    var reader = new FileReader();
    var slicedFile = file.slice ? file.slice(0, 64 * 1024) : file;
    reader.readAsArrayBuffer(slicedFile);
    reader.onerror = function (e) {
      return defer.reject(e);
    };
    reader.onload = function (e) {
      var result = {orientation: 1};
      var view = new DataView(this.result);
      if (view.getUint16(0, false) !== 0xFFD8) return defer.resolve(result);

      var length = view.byteLength,
        offset = 2;
      while (offset < length) {
        var marker = view.getUint16(offset, false);
        offset += 2;
        if (marker === 0xFFE1) {
          if (view.getUint32(offset += 2, false) !== 0x45786966) return defer.resolve(result);

          var little = view.getUint16(offset += 6, false) === 0x4949;
          offset += view.getUint32(offset + 4, little);
          var tags = view.getUint16(offset, little);
          offset += 2;
          for (var i = 0; i < tags; i++)
            if (view.getUint16(offset + (i * 12), little) === 0x0112) {
              var orientation = view.getUint16(offset + (i * 12) + 8, little);
              if (orientation >= 2 && orientation <= 8) {
                view.setUint16(offset + (i * 12) + 8, 1, little);
                result.fixedArrayBuffer = e.target.result;
              }
              result.orientation = orientation;
              return defer.resolve(result);
            }
        } else if ((marker & 0xFF00) !== 0xFF00) break;
        else offset += view.getUint16(offset, false);
      }
      return defer.resolve(result);
    };
    return defer.promise;
  };

  function arrayBufferToBase64(buffer) {
    var binary = '';
    var bytes = new Uint8Array(buffer);
    var len = bytes.byteLength;
    for (var i = 0; i < len; i++) {
      binary += String.fromCharCode(bytes[i]);
    }
    return window.btoa(binary);
  }

  upload.applyExifRotation = function (file) {
    if (file.type.indexOf('image/jpeg') !== 0) {
      return upload.emptyPromise(file);
    }

    var deferred = $q.defer();
    upload.readOrientation(file).then(function (result) {
      if (result.orientation < 2 || result.orientation > 8) {
        return deferred.resolve(file);
      }
      upload.dataUrl(file, true).then(function (url) {
        var canvas = document.createElement('canvas');
        var img = document.createElement('img');

        img.onload = function () {
          try {
            canvas.width = result.orientation > 4 ? img.height : img.width;
            canvas.height = result.orientation > 4 ? img.width : img.height;
            var ctx = canvas.getContext('2d');
            applyTransform(ctx, result.orientation, img.width, img.height);
            ctx.drawImage(img, 0, 0);
            var dataUrl = canvas.toDataURL(file.type || 'image/WebP', 0.934);
            dataUrl = upload.restoreExif(arrayBufferToBase64(result.fixedArrayBuffer), dataUrl);
            var blob = upload.dataUrltoBlob(dataUrl, file.name);
            deferred.resolve(blob);
          } catch (e) {
            return deferred.reject(e);
          }
        };
        img.onerror = function () {
          deferred.reject();
        };
        img.src = url;
      }, function (e) {
        deferred.reject(e);
      });
    }, function (e) {
      deferred.reject(e);
    });
    return deferred.promise;
  };

  upload.restoreExif = function (orig, resized) {
    var ExifRestorer = {};

    ExifRestorer.KEY_STR = 'ABCDEFGHIJKLMNOP' +
      'QRSTUVWXYZabcdef' +
      'ghijklmnopqrstuv' +
      'wxyz0123456789+/' +
      '=';

    ExifRestorer.encode64 = function (input) {
      var output = '',
        chr1, chr2, chr3 = '',
        enc1, enc2, enc3, enc4 = '',
        i = 0;

      do {
        chr1 = input[i++];
        chr2 = input[i++];
        chr3 = input[i++];

        enc1 = chr1 >> 2;
        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
        enc4 = chr3 & 63;

        if (isNaN(chr2)) {
          enc3 = enc4 = 64;
        } else if (isNaN(chr3)) {
          enc4 = 64;
        }

        output = output +
          this.KEY_STR.charAt(enc1) +
          this.KEY_STR.charAt(enc2) +
          this.KEY_STR.charAt(enc3) +
          this.KEY_STR.charAt(enc4);
        chr1 = chr2 = chr3 = '';
        enc1 = enc2 = enc3 = enc4 = '';
      } while (i < input.length);

      return output;
    };

    ExifRestorer.restore = function (origFileBase64, resizedFileBase64) {
      if (origFileBase64.match('data:image/jpeg;base64,')) {
        origFileBase64 = origFileBase64.replace('data:image/jpeg;base64,', '');
      }

      var rawImage = this.decode64(origFileBase64);
      var segments = this.slice2Segments(rawImage);

      var image = this.exifManipulation(resizedFileBase64, segments);

      return 'data:image/jpeg;base64,' + this.encode64(image);
    };


    ExifRestorer.exifManipulation = function (resizedFileBase64, segments) {
      var exifArray = this.getExifArray(segments),
        newImageArray = this.insertExif(resizedFileBase64, exifArray);
      return new Uint8Array(newImageArray);
    };


    ExifRestorer.getExifArray = function (segments) {
      var seg;
      for (var x = 0; x < segments.length; x++) {
        seg = segments[x];
        if (seg[0] === 255 & seg[1] === 225) //(ff e1)
        {
          return seg;
        }
      }
      return [];
    };


    ExifRestorer.insertExif = function (resizedFileBase64, exifArray) {
      var imageData = resizedFileBase64.replace('data:image/jpeg;base64,', ''),
        buf = this.decode64(imageData),
        separatePoint = buf.indexOf(255, 3),
        mae = buf.slice(0, separatePoint),
        ato = buf.slice(separatePoint),
        array = mae;

      array = array.concat(exifArray);
      array = array.concat(ato);
      return array;
    };


    ExifRestorer.slice2Segments = function (rawImageArray) {
      var head = 0,
        segments = [];

      while (1) {
        if (rawImageArray[head] === 255 & rawImageArray[head + 1] === 218) {
          break;
        }
        if (rawImageArray[head] === 255 & rawImageArray[head + 1] === 216) {
          head += 2;
        }
        else {
          var length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3],
            endPoint = head + length + 2,
            seg = rawImageArray.slice(head, endPoint);
          segments.push(seg);
          head = endPoint;
        }
        if (head > rawImageArray.length) {
          break;
        }
      }

      return segments;
    };


    ExifRestorer.decode64 = function (input) {
      var chr1, chr2, chr3 = '',
        enc1, enc2, enc3, enc4 = '',
        i = 0,
        buf = [];

      // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
      var base64test = /[^A-Za-z0-9\+\/\=]/g;
      if (base64test.exec(input)) {
        console.log('There were invalid base64 characters in the input text.\n' +
          'Valid base64 characters are A-Z, a-z, 0-9, ' + ', ' / ',and "="\n' +
          'Expect errors in decoding.');
      }
      input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');

      do {
        enc1 = this.KEY_STR.indexOf(input.charAt(i++));
        enc2 = this.KEY_STR.indexOf(input.charAt(i++));
        enc3 = this.KEY_STR.indexOf(input.charAt(i++));
        enc4 = this.KEY_STR.indexOf(input.charAt(i++));

        chr1 = (enc1 << 2) | (enc2 >> 4);
        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
        chr3 = ((enc3 & 3) << 6) | enc4;

        buf.push(chr1);

        if (enc3 !== 64) {
          buf.push(chr2);
        }
        if (enc4 !== 64) {
          buf.push(chr3);
        }

        chr1 = chr2 = chr3 = '';
        enc1 = enc2 = enc3 = enc4 = '';

      } while (i < input.length);

      return buf;
    };

    return ExifRestorer.restore(orig, resized);  //<= EXIF
  };

  return upload;
}]);


(function () {
  'use strict';

  angular
    .module('ng-drag-scroll', [])
    .directive('dragScroll', DragScroll);

  DragScroll.$inject = ['$document', '$window', '$parse'];

  /* @ngInject */
  function DragScroll($document, $window, $parse) {
    //Usage:
    //<div drag-scroll>Lorem ipsum dolor sit amet</div>
    var directive = {
      scope: false,
      restrict: 'A',
      link: function($scope, $element, $attributes, vm) {
        var allowedClickOffset = 5;
        var pushed = false;
        var onDragStart = $parse($attributes.onDragStart);
        var onDragEnd = $parse($attributes.onDragEnd);
        var axis = $attributes.axis || false;
        var startClientX;
        var startClientY;
        var lastClientX;
        var lastClientY;

        // Set event listeners
        $element.on('mousedown', handleMouseDown);

        // Set destroy listener
        $scope.$on('$destroy', destroy);

        /**
         * Sets the event listeners for the mouseup and mousedown events
         */
        function setDragListeners () {
          angular.element($window).on('mouseup', handleMouseUp);
          angular.element($window).on('mousemove', handleMouseMove);
        }

        /**
         * Removes the event listeners for the mouseup and mousedown events
         */
        function removeDragListeners () {
          angular.element($window).off('mouseup', handleMouseUp);
          angular.element($window).off('mousemove', handleMouseMove);
        }

        /**
         * Handles mousedown event
         * @param {object} e MouseDown event
         */
        function handleMouseDown (e) {

          console.log("UUUUUUUUUUUU");

          $scope.$apply(function() {
            onDragStart($scope);
          });

          // Set mouse drag listeners
          setDragListeners();

          // Set 'pushed' state
          pushed = true;
          lastClientX = startClientX = e.clientX;
          lastClientY = startClientY = e.clientY;

          clearSelection();

          e.preventDefault();
          e.stopPropagation();
        }

        /**
         * Handles mouseup event
         * @param {object} e MouseUp event
         */
        function handleMouseUp (e) {
          var selectable = ('drag-scroll-text' in e.target.attributes);
          var withinXConstraints = (e.clientX >= (startClientX - allowedClickOffset) && e.clientX <= (startClientX + allowedClickOffset));
          var withinYConstraints = (e.clientY >= (startClientY - allowedClickOffset) && e.clientY <= (startClientY + allowedClickOffset));

          // Set 'pushed' state
          pushed = false;

          // Check if cursor falls within X and Y axis constraints
          if(selectable && withinXConstraints && withinYConstraints) {
            // If so, select the text inside the target element
            selectText(e.target);
          }

          $scope.$apply(function() {
            onDragEnd($scope);
          });

          removeDragListeners();
        }

        /**
         * Handles mousemove event
         * @param {object} e MouseMove event
         */
        function handleMouseMove (e) {
          if (pushed) {
            if(!axis || axis === 'x') {
              $element[0].scrollLeft -= (-lastClientX + (lastClientX = e.clientX));
            }
            if(!axis || axis === 'y') {
              $element[0].scrollTop -= (-lastClientY + (lastClientY = e.clientY));
            }
          }

          e.preventDefault();
        }

        /**
         * Destroys all the event listeners
         */
        function destroy () {
          $element.off('mousedown', handleMouseDown);
          angular.element($window).off('mouseup', handleMouseUp);
          angular.element($window).off('mousemove', handleMouseMove);
        }

        /**
         * Selects text for a specific element
         * @param {object} element Selected element
         */
        function selectText (element) {
          if ($window.document.selection) {
            var range = $window.document.body.createTextRange();
            range.moveToElementText(element);
            range.select();
          } else if ($window.getSelection) {
            var range = $window.document.createRange();
            range.selectNode(element);
            $window.getSelection().addRange(range);
          }
        }

        /**
         * Clears text selection
         */
        function clearSelection () {
          if ($window.getSelection) {
            if ($window.getSelection().empty) {  // Chrome
              $window.getSelection().empty();
            } else if ($window.getSelection().removeAllRanges) {  // Firefox
              $window.getSelection().removeAllRanges();
            }
          } else if ($document.selection) {  // IE?
            $document.selection.empty();
          }
        }


      }
    };
    return directive;

  }

})();